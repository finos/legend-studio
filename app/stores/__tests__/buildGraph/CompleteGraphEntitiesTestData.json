[
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "apps::ep::bi::tableauGovernance::governanceRule",
    "content": {
      "_type": "profile",
      "name": "governanceRule",
      "package": "apps::ep::bi::tableauGovernance",
      "stereotypes": [],
      "tags": ["id", "category", "description", "recommendedResolution"]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "apps::ep::dsp::meta",
    "content": {
      "_type": "profile",
      "name": "meta",
      "package": "apps::ep::dsp",
      "stereotypes": [],
      "tags": ["fieldName"]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "apps::ep::entitlements::entitlement",
    "content": {
      "_type": "profile",
      "name": "entitlement",
      "package": "apps::ep::entitlements",
      "stereotypes": ["rule"],
      "tags": []
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "apps::finance::cma::runtime::DataBrowser",
    "content": {
      "_type": "profile",
      "name": "DataBrowser",
      "package": "apps::finance::cma::runtime",
      "stereotypes": ["hidden"],
      "tags": []
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "apps::ops::bosi",
    "content": {
      "_type": "profile",
      "name": "bosi",
      "package": "apps::ops",
      "stereotypes": [
        "subobject",
        "indexed",
        "entity",
        "none",
        "event",
        "lifecycleRoot",
        "parentChild",
        "generated",
        "documentEntity"
      ],
      "tags": [
        "dontIntern",
        "objectType",
        "parent",
        "child",
        "subobject",
        "key",
        "documentstore"
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "apps::ops::finma::refData::pwm::client::Privacy",
    "content": {
      "_type": "profile",
      "name": "Privacy",
      "package": "apps::ops::finma::refData::pwm::client",
      "stereotypes": ["private"],
      "tags": []
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "apps::ops::general",
    "content": {
      "_type": "profile",
      "name": "general",
      "package": "apps::ops",
      "stereotypes": [
        "interface",
        "enum",
        "enableConcrete",
        "derive",
        "transient",
        "persisted",
        "nonNavigable"
      ],
      "tags": [
        "implementationBody",
        "singularName",
        "typeVariant",
        "length",
        "precision",
        "scale",
        "roundingMode"
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "apps::ops::hibernate",
    "content": {
      "_type": "profile",
      "name": "hibernate",
      "package": "apps::ops",
      "stereotypes": [
        "generated",
        "audited",
        "lob",
        "ignoreNotFound",
        "cascade",
        "pk",
        "genericGenerator"
      ],
      "tags": [
        "catalog",
        "hibernateWhereClause",
        "idAllocationSize",
        "customSetterLogic",
        "columnName",
        "tableName",
        "genericGeneratorClass",
        "genericGeneratorParams",
        "customType"
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "apps::ops::liquidity::atlas",
    "content": {
      "_type": "profile",
      "name": "atlas",
      "package": "apps::ops::liquidity",
      "stereotypes": [
        "sequenced",
        "commandRequest",
        "commandResponse",
        "logMessage",
        "positionKeeperPersist",
        "dateAsInt",
        "calculationContext"
      ],
      "tags": []
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "apps::ops::liquidity::delphi",
    "content": {
      "_type": "profile",
      "name": "delphi",
      "package": "apps::ops::liquidity",
      "stereotypes": [
        "multiSource",
        "udsPersistedTimestamp",
        "actionTypeMessage"
      ],
      "tags": []
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "apps::ops::regelig::sparkGen::Decision",
    "content": {
      "_type": "profile",
      "name": "Decision",
      "package": "apps::ops::regelig::sparkGen",
      "stereotypes": [],
      "tags": ["factTypeName"]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "apps::pure::transition::rmd::cerebro::profiles::Aggregation",
    "content": {
      "_type": "profile",
      "name": "Aggregation",
      "package": "apps::pure::transition::rmd::cerebro::profiles",
      "stereotypes": ["SUM", "AVERAGE", "WTAVERAGE", "MAX"],
      "tags": []
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "apps::pure::transition::rmd::cerebro::profiles::Descriptor",
    "content": {
      "_type": "profile",
      "name": "Descriptor",
      "package": "apps::pure::transition::rmd::cerebro::profiles",
      "stereotypes": [],
      "tags": [
        "group",
        "hashtag",
        "description",
        "className",
        "entitlementGroup",
        "weightedBy",
        "requestor",
        "requiredFor"
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "apps::pure::transition::rmd::cerebro::profiles::FO_CATEGORY",
    "content": {
      "_type": "profile",
      "name": "FO_CATEGORY",
      "package": "apps::pure::transition::rmd::cerebro::profiles",
      "stereotypes": ["NO_RENAME"],
      "tags": []
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "apps::pure::transition::rmd::cerebro::profiles::Key",
    "content": {
      "_type": "profile",
      "name": "Key",
      "package": "apps::pure::transition::rmd::cerebro::profiles",
      "stereotypes": [
        "PRIMARY",
        "TEMPORAL",
        "EXTERNAL_ID",
        "EXTERNAL_SOURCE",
        "REFERENCE",
        "ROOT",
        "IDGEN"
      ],
      "tags": []
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "apps::pure::transition::rmd::cerebro::profiles::REMIT_READ",
    "content": {
      "_type": "profile",
      "name": "REMIT_READ",
      "package": "apps::pure::transition::rmd::cerebro::profiles",
      "stereotypes": [
        "ORIGINAL_BALANCE",
        "CURRENCY",
        "FIRST_PAYMENT_DATE",
        "GS_LOAN_NUMBER",
        "SOURCE_LOAN_ID",
        "GSN",
        "PRIME_ID",
        "DAY_COUNT_CONVENTION",
        "SELLER_LOAN_ID",
        "SOURCE_NAME",
        "CC_SERIES_NO",
        "MINIMUM_PAYMENT_DUE",
        "TOTAL_AMOUNT_DUE"
      ],
      "tags": []
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "apps::pure::transition::rmd::cerebro::profiles::REMIT_WRITE",
    "content": {
      "_type": "profile",
      "name": "REMIT_WRITE",
      "package": "apps::pure::transition::rmd::cerebro::profiles",
      "stereotypes": [
        "START_DATE",
        "CURRENT_BALANCE",
        "CURRENT_GROSS_RATE",
        "TOTAL_COMMITMENT",
        "CURRENT_UNFUNDED",
        "BEG_UNFUNDED_BALANCE",
        "CUSTOMER_BALANCE",
        "GROSS_ENDING_BALANCE",
        "NET_ENDING_BALANCE",
        "NEXT_PMT_DUE_DATE",
        "DAYS_PAST_DUE",
        "DEFERRED_PRINCIPAL",
        "PRINCIPAL_PAYMENT",
        "SCHEDULED_PI",
        "GROSS_INTEREST_PAYMENT",
        "TOTAL_FEE",
        "LATE_FEE",
        "NONSUFFICIENT_FUNDS_FEE",
        "OTHER_FEE",
        "SERVICING_FEE",
        "UNPAID_INTEREST_BALANCE",
        "INTEREST_RATE_START_DATE",
        "TOTAL_AMOUNT_PAID",
        "SL_GROSS_BALANCE",
        "GROSS_PRINCIPAL_BALANCE",
        "GROSS_ENDING_PRIN_BAL",
        "GROSS_INTEREST",
        "RECOVERIES",
        "MINIMUM_PAYMENT_DUE",
        "SL_PAYMENT_METHOD",
        "SL_PAYMENT_DUE_DATE",
        "SL_PAYMENT_METHOD_DESCRIPTION",
        "SL_SCHEDULED_PRINCIPAL",
        "SL_SCHEDULED_INTEREST",
        "SL_AMOUNT_PAST_DUE",
        "TOTAL_AMOUNT_DUE",
        "SL_CANCELED_PRINCIPAL",
        "SL_PAYMENT_DATE",
        "SL_AMOUNT_PAST_DUE_RECEIVED",
        "SL_SCHEDULED_AMOUNT_RECEIVED",
        "SL_DISBURSEMENT_AMOUNT",
        "SL_DISBURSEMENT_DATE",
        "SL_ACCRUED_INTEREST_FEES",
        "SL_ESCROW_ENDING_BAL",
        "DEFERRED_ENDING_BALANCE",
        "BEG_DEFERRED_BALANCE",
        "CHARGEOFF_FLAG",
        "CHARGEOFF_AMOUNT",
        "CHARGEOFF_PRINCIPAL",
        "CHARGEOFF_INTEREST_FEES",
        "BANKRUPTCY_FLAG",
        "BANKRUPTCY_DATE",
        "BANKRUPTCY_STATUS",
        "COMMITMENT_ADJ",
        "CREDIT_LIMIT",
        "UNUSED_LIMIT",
        "ACCOUNT_STATUS",
        "BOOK_BALANCE",
        "GROSS_PURCHASES",
        "NET_INTEREST_PAYMENT",
        "NET_CASH_ADVANCES",
        "EXTERNAL_BALANCE_TRANSFER",
        "NET_PURCHASES",
        "TOTAL_CASH",
        "TOTAL_SPEND",
        "PUTBACK_REFUND",
        "ANNUAL_FEES",
        "CASH_ADVANCE_FEES",
        "EXTERNAL_BALANCE_TRANSFER_FEES",
        "FEE_ADJUSTMENTS",
        "FOREIGN_FEES",
        "FRAUD_INTEREST_FEE_WRITEOFF",
        "FRAUD_INTEREST_WRITEOFF",
        "FRAUD_FEE_WRITEOFF",
        "FRAUD_PRINCIPAL_WRITEOFF",
        "TOTAL_FRAUD_WRITEOFF",
        "OTHER_CASH_ADJUSTMENTS",
        "OTHER_NON_CASH_ADJUSTMENTS",
        "OVER_LIMIT_FEES",
        "ACCOUNT_SALE_PROCEEDS",
        "ACCOUNT_SALE_DATE",
        "ACCOUNT_SALE_FLAG",
        "CUMULATIVE_FRAUD_WRITEOFF",
        "DEFERRED_NON_CASH_PRIN",
        "CREDIT_LIFE_DEBT_CANCEL_FEE",
        "SERVICER_ACCRUAL_STATUS",
        "PREPAYMENT_AMOUNT",
        "CURTAILMENT_FEE",
        "TOTAL_BALANCE",
        "FRAUD_WRITEOFF_DATE",
        "CREDIT_LIMIT_CHANGE",
        "SERVICER_CREDIT_LIMIT",
        "CC_WRITE_OFF_PRIN_AMT",
        "CC_WRITE_OFF_INT_AMT",
        "CC_WRITE_OFF_FEE_AMT",
        "CC_TOTAL_PAYMENTS",
        "CC_FRAUD_WO_DATE",
        "CC_CURR_MTH_INT_FRAUD_WO",
        "CC_SALE_OF_ACCOUNT_BALANCE",
        "CC_FRAUD_FLAG",
        "CC_SERIES_NO",
        "CC_CURR_MTH_INT_FRAUD_WO",
        "CC_CURR_MTH_FEE_FRAUD_WO",
        "CC_UNPAID_BAL",
        "CC_ACTIVE_ACCOUNT",
        "CC_ACTIVE_CREDIT_LIMIT",
        "CCS_ANNUAL_FEE",
        "CCS_NSF_FEE",
        "CCS_PUTBACK_REFUND",
        "CCS_TOTAL_SPEND",
        "CCS_TOTAL_CASH",
        "CCS_TOTAL_BALANCE",
        "CCS_NET_ENDING_BALANCE",
        "CCS_CASH_ADVANCE_FEES",
        "CCS_RECOVERIES",
        "CCS_LATE_FEE",
        "CCS_FOREIGN_FEES",
        "CCS_NET_ENDING_PRINCIPAL_BALANCE",
        "CCS_NET_ENDING_ACCRUED_INTEREST_FEES_BALANCE",
        "OTHER_CASH_REVOLVING_ADJUSTMENTS",
        "OTHER_NON_CASH_REVOLVING_ADJUSTMENTS",
        "WRITE_OFF_DATE",
        "WRITE_OFF_AMOUNT",
        "TOTAL_CASH_TRANSACTIONS",
        "TOTAL_NON_CASH_TRANSACTIONS",
        "DEFERRED_BALANCE_TRANSACTIONS",
        "ENDING_REVOLVING_BALANCE",
        "ENDING_CASH_BALANCE",
        "RISK_CREDIT_LIMIT",
        "ACTIVE_RISK_CREDIT_LIMIT",
        "CC_PRINCIPAL_SPEND",
        "CCS_CHARGE_OFF_AMOUNT",
        "CCS_FINANCE_CHARGE",
        "CCS_NET_CASH_ADVANCES",
        "CCS_EXTERNAL_BALANCE_TRANSFER",
        "CCS_OTHER_FEES",
        "CGOF_RECOVERY_FEE",
        "UNPAID_CAPITALIZED_INTEREST",
        "UNPAID_CAPITALIZED_INTEREST_CHARGE_OFF",
        "FRAUD_RECOVERY_AMT",
        "FRAUD_RECOVERY_AMOUNT",
        "TOTAL_RECOVERIES",
        "FRAUD_WRITEOFF_CURRENT_MONTH",
        "TOTAL_FRAUD_RECOVERY_AMOUNT"
      ],
      "tags": []
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "contracts::gsam::services::profiles::customTags",
    "content": {
      "_type": "profile",
      "name": "customTags",
      "package": "contracts::gsam::services::profiles",
      "stereotypes": [],
      "tags": ["minLength", "default", "pattern", "tags", "format"]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "datamarts::data_intelligence::domain::torrent::messages::v1::UDProperty",
    "content": {
      "_type": "profile",
      "name": "UDProperty",
      "package": "datamarts::data_intelligence::domain::torrent::messages::v1",
      "stereotypes": [],
      "tags": ["primaryKey", "avro_java_string"]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "datamarts::ep::domain::docknight::meta::docknight",
    "content": {
      "_type": "profile",
      "name": "docknight",
      "package": "datamarts::ep::domain::docknight::meta",
      "stereotypes": ["dataset", "testDataset"],
      "tags": []
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "datamarts::finance::domain::capitalattribution::Analytics",
    "content": {
      "_type": "profile",
      "name": "Analytics",
      "package": "datamarts::finance::domain::capitalattribution",
      "stereotypes": [
        "UnitOfAccount",
        "PassOver",
        "attributeChange",
        "activityChange"
      ],
      "tags": ["sourceFromColumn"]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "datamarts::finance::domain::cmaoperationalstore::AllocationTransfer",
    "content": {
      "_type": "profile",
      "name": "AllocationTransfer",
      "package": "datamarts::finance::domain::cmaoperationalstore",
      "stereotypes": ["scalable", "nonscalable"],
      "tags": []
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "datamarts::finance::domain::cmaoperationalstore::ApplicableRegime",
    "content": {
      "_type": "profile",
      "name": "ApplicableRegime",
      "package": "datamarts::finance::domain::cmaoperationalstore",
      "stereotypes": [
        "Standardized",
        "Advanced",
        "SLR",
        "CCAR_SLR",
        "CCAR_Std",
        "CBal",
        "IRBC",
        "G_SIB",
        "Any"
      ],
      "tags": []
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "datamarts::finance::domain::cmaoperationalstore::Avro",
    "content": {
      "_type": "profile",
      "name": "Avro",
      "package": "datamarts::finance::domain::cmaoperationalstore",
      "stereotypes": ["wide", "notAvroField", "nullable"],
      "tags": ["default", "aliases", "namespace"]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "datamarts::finance::domain::cmaoperationalstore::Model",
    "content": {
      "_type": "profile",
      "name": "Model",
      "package": "datamarts::finance::domain::cmaoperationalstore",
      "stereotypes": ["ReadOnly"],
      "tags": []
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "datamarts::finance::domain::cmaoperationalstore::OperationalStore",
    "content": {
      "_type": "profile",
      "name": "OperationalStore",
      "package": "datamarts::finance::domain::cmaoperationalstore",
      "stereotypes": [
        "datasetKey",
        "milestoneFieldIn",
        "milestoneFieldOut",
        "classHashField",
        "appendOnly",
        "ManualUpload",
        "injectable"
      ],
      "tags": ["tabularInputHeader", "permitDomain"]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "datamarts::finance::domain::cmaoperationalstore::ParentDataset",
    "content": {
      "_type": "profile",
      "name": "ParentDataset",
      "package": "datamarts::finance::domain::cmaoperationalstore",
      "stereotypes": ["BankingBookDebtAndHedge"],
      "tags": []
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "datamarts::finance::domain::cmaoperationalstore::Resource",
    "content": {
      "_type": "profile",
      "name": "Resource",
      "package": "datamarts::finance::domain::cmaoperationalstore",
      "stereotypes": [
        "MarketRiskSecuritizationCombinedRestricted",
        "DataWithRwa",
        "Metadata",
        "DataBalanceSheet",
        "EmeaReport",
        "CbalDataAggregation",
        "CbalDataRestricted",
        "CbalDataUnrestricted",
        "NsfiExposuresDataUnrestricted",
        "NsfiExposuresDataRestricted",
        "BalanceSheetDataRestricted",
        "Y14MQData",
        "CCAROrchestratorBalanceSheetData",
        "CCAROrchestratorDataWithRWA",
        "GsibDataRestricted",
        "Sold_CDS_DataSets",
        "CapitalCalcInputData",
        "CCAR_STORE_IRP",
        "CCAR_STORE_CVA",
        "CCAR_STORE_Commodities",
        "CCAR_STORE_Credit",
        "CCAR_STORE_EM",
        "CCAR_STORE_Equities",
        "CCAR_STORE_FX",
        "CCAR_STORE_GLP",
        "CCAR_STORE_Mortgages",
        "CCAR_STORE_PSI",
        "CCAR_STORE_Prime_Services",
        "CCAR_STORE_SSG",
        "CCAR_STORE_OTCBal",
        "CCAR_STORE_TopDown",
        "Capital",
        "SampleClass"
      ],
      "tags": []
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "datamarts::finance::domain::cmaoperationalstore::RestrictedResource",
    "content": {
      "_type": "profile",
      "name": "RestrictedResource",
      "package": "datamarts::finance::domain::cmaoperationalstore",
      "stereotypes": ["DataWithIcr", "SftCapitalResultWithIcr"],
      "tags": []
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "datamarts::finance::domain::limits::ThresholdProfile",
    "content": {
      "_type": "profile",
      "name": "ThresholdProfile",
      "package": "datamarts::finance::domain::limits",
      "stereotypes": ["ThresholdCalculator"],
      "tags": []
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "datamarts::ops::domain::agreement::model::AgreementProfile",
    "content": {
      "_type": "profile",
      "name": "AgreementProfile",
      "package": "datamarts::ops::domain::agreement::model",
      "stereotypes": ["legacy", "strategic"],
      "tags": ["comment", "termProfile", "agreementType", "requirementJira"]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "datamarts::ops::domain::bdm::sapiens::profiles::decision",
    "content": {
      "_type": "profile",
      "name": "decision",
      "package": "datamarts::ops::domain::bdm::sapiens::profiles",
      "stereotypes": [],
      "tags": ["name", "id", "domainType", "dataType", "include"]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "datamarts::ops::domain::cap::ogm::ogm",
    "content": {
      "_type": "profile",
      "name": "ogm",
      "package": "datamarts::ops::domain::cap::ogm",
      "stereotypes": [
        "incoming",
        "outgoing",
        "undirected",
        "relationshipEntity",
        "startNode",
        "endNode",
        "transient",
        "uniqueTrue",
        "uniqueFalse",
        "primary",
        "dateLong",
        "wide"
      ],
      "tags": ["label", "type", "name", "dateString", "convert"]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "datamarts::ops::domain::controlevent::dpe::profiles::entity",
    "content": {
      "_type": "profile",
      "name": "entity",
      "package": "datamarts::ops::domain::controlevent::dpe::profiles",
      "stereotypes": ["id", "oneToMany"],
      "tags": ["type", "entity", "provider", "childEntity", "columnDefinition"]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "datamarts::ops::domain::controlevent::dpe::profiles::xPath",
    "content": {
      "_type": "profile",
      "name": "xPath",
      "package": "datamarts::ops::domain::controlevent::dpe::profiles",
      "stereotypes": [],
      "tags": [
        "xPath",
        "xPaths",
        "xPathContext",
        "xPathDeserialisation",
        "contextSensitiveXPath"
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "datamarts::ops::domain::nonFinancialRegulatoryReporting::regulatoryModels::regulatoryControlModel::common::RegModel",
    "content": {
      "_type": "profile",
      "name": "RegModel",
      "package": "datamarts::ops::domain::nonFinancialRegulatoryReporting::regulatoryModels::regulatoryControlModel::common",
      "stereotypes": ["businessKey"],
      "tags": []
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "datamarts::ops::domain::postexecution::tradeTracker::ClassName",
    "content": {
      "_type": "profile",
      "name": "ClassName",
      "package": "datamarts::ops::domain::postexecution::tradeTracker",
      "stereotypes": [],
      "tags": ["name"]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "datamarts::ops::domain::regops::EmirPostTradeReporting::AssetClass",
    "content": {
      "_type": "profile",
      "name": "AssetClass",
      "package": "datamarts::ops::domain::regops::EmirPostTradeReporting",
      "stereotypes": [
        "ETD",
        "Commodity",
        "Credit",
        "Equity",
        "InterestRate",
        "ForeignExchange"
      ],
      "tags": []
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "datamarts::ops::domain::regops::EmirPostTradeReporting::Obligation",
    "content": {
      "_type": "profile",
      "name": "Obligation",
      "package": "datamarts::ops::domain::regops::EmirPostTradeReporting",
      "stereotypes": ["CollateralAndValuation", "Trade"],
      "tags": []
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "datamarts::ops::domain::traceability::dictionary",
    "content": {
      "_type": "profile",
      "name": "dictionary",
      "package": "datamarts::ops::domain::traceability",
      "stereotypes": ["regProjection"],
      "tags": ["modelSource"]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "datamarts::ops::domain::traceability::neo4JTesting::traceability",
    "content": {
      "_type": "profile",
      "name": "traceability",
      "package": "datamarts::ops::domain::traceability::neo4JTesting",
      "stereotypes": [
        "NodeEntity",
        "ID",
        "Version",
        "TimeStamp",
        "VersionedRel",
        "VersionlessRel",
        "Transient"
      ],
      "tags": []
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "datamarts::ops::domain::trackit::ui::meta::profiles::entity",
    "content": {
      "_type": "profile",
      "name": "entity",
      "package": "datamarts::ops::domain::trackit::ui::meta::profiles",
      "stereotypes": ["id", "oneToMany"],
      "tags": ["type", "entity", "provider", "childEntity", "columnDefinition"]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "datamarts::ops::domain::trackit::ui::meta::profiles::xPath",
    "content": {
      "_type": "profile",
      "name": "xPath",
      "package": "datamarts::ops::domain::trackit::ui::meta::profiles",
      "stereotypes": [],
      "tags": [
        "xPath",
        "xPaths",
        "xPathContext",
        "xPathDeserialisation",
        "contextSensitiveXPath"
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "model::domain::profiles::general",
    "content": {
      "_type": "profile",
      "name": "general",
      "package": "model::domain::profiles",
      "stereotypes": [],
      "tags": ["typeVariant"]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "model::domain::referenceData::entity::pwm::Privacy",
    "content": {
      "_type": "profile",
      "name": "Privacy",
      "package": "model::domain::referenceData::entity::pwm",
      "stereotypes": ["private"],
      "tags": []
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "model::domain::referenceData::product::loans::enterprise::studentLoan::InterestRateStyle",
    "content": {
      "_type": "profile",
      "name": "InterestRateStyle",
      "package": "model::domain::referenceData::product::loans::enterprise::studentLoan",
      "stereotypes": [],
      "tags": []
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "model::domain::referenceData::product::loans::shared::InterestRateStyle",
    "content": {
      "_type": "profile",
      "name": "InterestRateStyle",
      "package": "model::domain::referenceData::product::loans::shared",
      "stereotypes": ["Decimal", "WholeNumber", "BasisPoints"],
      "tags": []
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "model::domain::referenceData::product::loans::sharedV2::InterestRateStyle",
    "content": {
      "_type": "profile",
      "name": "InterestRateStyle",
      "package": "model::domain::referenceData::product::loans::sharedV2",
      "stereotypes": ["Decimal", "WholeNumber", "BasisPoints"],
      "tags": []
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "model::domain::referenceData::product::loans::v2::corporate::StatesClassification",
    "content": {
      "_type": "profile",
      "name": "StatesClassification",
      "package": "model::domain::referenceData::product::loans::v2::corporate",
      "stereotypes": [
        "MemoSubmitted",
        "CommitteeApproved",
        "Committed",
        "DealClosed",
        "ProductSetup"
      ],
      "tags": []
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "model::domain::transactional::trading::inquiry::secdiv::SystemAttribute",
    "content": {
      "_type": "profile",
      "name": "SystemAttribute",
      "package": "model::domain::transactional::trading::inquiry::secdiv",
      "stereotypes": ["hidden"],
      "tags": []
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "model::external::droit::current::Droit",
    "content": {
      "_type": "profile",
      "name": "Droit",
      "package": "model::external::droit::current",
      "stereotypes": [],
      "tags": ["fieldName", "optional"]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "model::external::droit::current::DroitEnum",
    "content": {
      "_type": "profile",
      "name": "DroitEnum",
      "package": "model::external::droit::current",
      "stereotypes": [],
      "tags": ["enumValue"]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "model::external::droit::old::DroitEnum",
    "content": {
      "_type": "profile",
      "name": "DroitEnum",
      "package": "model::external::droit::old",
      "stereotypes": [],
      "tags": ["enumValue"]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "model::external::fix::v5_0sp2::fixtradingcommunity::fixprotocol",
    "content": {
      "_type": "profile",
      "name": "fixprotocol",
      "package": "model::external::fix::v5_0sp2::fixtradingcommunity",
      "stereotypes": ["Message", "Component"],
      "tags": [
        "tagName",
        "countTag",
        "valueRepresentation",
        "groupName",
        "groupRequired",
        "messageType",
        "messageCategory",
        "dataType"
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "model::producers::equities::orderManagement::eqCashRegOps::bestExecution::eqEMEABestExecution::requirements",
    "content": {
      "_type": "profile",
      "name": "requirements",
      "package": "model::producers::equities::orderManagement::eqCashRegOps::bestExecution::eqEMEABestExecution",
      "stereotypes": ["Message"],
      "tags": ["dr", "br"]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "model::producers::equities::orderManagement::eqCashRegOps::eqEmeaCashRegOpsTransaction::requirements",
    "content": {
      "_type": "profile",
      "name": "requirements",
      "package": "model::producers::equities::orderManagement::eqCashRegOps::eqEmeaCashRegOpsTransaction",
      "stereotypes": ["Message"],
      "tags": ["dr", "br"]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Enumeration",
    "path": "model::producers::operations::contractFactory::latest2x::trading::contract::terms::com::DisruptionFallback",
    "content": {
      "_type": "Enumeration",
      "name": "DisruptionFallback",
      "package": "model::producers::operations::contractFactory::latest2x::trading::contract::terms::com",
      "taggedValues": [
        {
          "tag": { "profile": "ui::meta::pure::profiles::doc", "value": "doc" },
          "value": "This is a tagged Value Description"
        }
      ],
      "values": [
        { "value": "AverageDailyPriceDisruption" },
        { "value": "CalculationAgentDetermination" },
        { "value": "DelayedPublicationOrAnnouncement" },
        { "value": "FallbackReferenceDealers" },
        { "value": "FallbackReferencePrice" },
        { "value": "NegotiatedFallback" },
        { "value": "NoFaultTermination" },
        { "value": "Postponement" }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Enumeration",
    "path": "model::producers::operations::contractFactory::latest2x::trading::contract::terms::shared::option::TriggerType",
    "content": {
      "_type": "Enumeration",
      "name": "TriggerType",
      "package": "model::producers::operations::contractFactory::latest2x::trading::contract::terms::shared::option",
      "values": [
        {
          "taggedValues": [
            {
              "tag": {
                "profile": "ui::meta::pure::profiles::doc",
                "value": "doc"
              },
              "value": "breach means that the asset level is either larger or equal to the barrier level, or smaller or equal to the barrier level"
            }
          ],
          "value": "Touch"
        },
        {
          "taggedValues": [
            {
              "tag": {
                "profile": "ui::meta::pure::profiles::doc",
                "value": "doc"
              },
              "value": "breach means that the asset level is either strictly larger than the barrier level, or strictly smaller than the barrier level"
            }
          ],
          "value": "Break"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "model::producers::regulatory::nonFinancialRegulatoryReporting::reportingObligations::requirements",
    "content": {
      "_type": "profile",
      "name": "requirements",
      "package": "model::producers::regulatory::nonFinancialRegulatoryReporting::reportingObligations",
      "stereotypes": ["Message"],
      "tags": ["dr", "br", "mdr", "dus"]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "model_candidate::domain::referenceData::entity::pwm::Privacy",
    "content": {
      "_type": "profile",
      "name": "Privacy",
      "package": "model_candidate::domain::referenceData::entity::pwm",
      "stereotypes": ["private"],
      "tags": []
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "model_legacy::domain::system::dotbosi",
    "content": {
      "_type": "profile",
      "name": "dotbosi",
      "package": "model_legacy::domain::system",
      "stereotypes": ["ignore"],
      "tags": []
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "model_legacy::domain::trade::contract::fpml",
    "content": {
      "_type": "profile",
      "name": "fpml",
      "package": "model_legacy::domain::trade::contract",
      "stereotypes": ["fpml"],
      "tags": ["codingScheme"]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::relationship::Association",
    "path": "ui::TestAssociation",
    "content": {
      "_type": "association",
      "name": "TestAssociation",
      "package": "ui",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "testClassProp",
          "type": "ui::TestClass"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "testClassSibling",
          "type": "ui::TestClassSibling"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::TestClass",
    "content": {
      "_type": "class",
      "constraints": [
        {
          "functionDefinition": {
            "_type": "lambda",
            "body": [
              {
                "_type": "func",
                "function": "equal",
                "parameters": [
                  {
                    "_type": "property",
                    "parameters": [{ "_type": "var", "name": "this" }],
                    "property": "a"
                  },
                  {
                    "_type": "string",
                    "multiplicity": { "lowerBound": 1, "upperBound": 1 },
                    "values": ["aa"]
                  }
                ]
              }
            ],
            "parameters": [{ "_type": "var", "name": "this" }]
          },
          "name": "name"
        },
        {
          "functionDefinition": {
            "_type": "lambda",
            "body": [
              {
                "_type": "func",
                "function": "equal",
                "parameters": [
                  {
                    "_type": "property",
                    "parameters": [{ "_type": "var", "name": "this" }],
                    "property": "b"
                  },
                  {
                    "_type": "integer",
                    "multiplicity": { "lowerBound": 1, "upperBound": 1 },
                    "values": [1]
                  }
                ]
              }
            ],
            "parameters": [{ "_type": "var", "name": "this" }]
          },
          "name": "1"
        }
      ],
      "name": "TestClass",
      "package": "ui",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "a",
          "type": "String"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 2 },
          "name": "b",
          "stereotypes": [
            {
              "profile": "ui::mapping::editor::domain::ProfileTest",
              "value": "stereotype1"
            }
          ],
          "taggedValues": [
            {
              "tag": {
                "profile": "ui::mapping::editor::domain::ProfileTest",
                "value": "tag2"
              },
              "value": "lets write a tag"
            }
          ],
          "type": "Integer"
        },
        {
          "multiplicity": { "lowerBound": 0 },
          "name": "name",
          "type": "Boolean"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "person",
          "type": "ui::meta::pure::constraints::tests::model::Person"
        }
      ],
      "qualifiedProperties": [
        {
          "body": [
            {
              "_type": "func",
              "function": "plus",
              "parameters": [
                {
                  "_type": "collection",
                  "multiplicity": { "lowerBound": 2, "upperBound": 2 },
                  "values": [
                    {
                      "_type": "property",
                      "parameters": [{ "_type": "var", "name": "s" }],
                      "property": "arms"
                    },
                    {
                      "_type": "integer",
                      "multiplicity": { "lowerBound": 1, "upperBound": 1 },
                      "values": [4]
                    }
                  ]
                }
              ]
            }
          ],
          "name": "calculate",
          "parameters": [
            {
              "_type": "var",
              "class": "ui::mapping::editor::domain::Anyone",
              "multiplicity": { "lowerBound": 1, "upperBound": 1 },
              "name": "s"
            }
          ],
          "returnMultiplicity": { "lowerBound": 1, "upperBound": 1 },
          "returnType": "Integer"
        }
      ],
      "stereotypes": [
        {
          "profile": "ui::meta::pure::profiles::temporal",
          "value": "businesstemporal"
        }
      ],
      "superTypes": ["ui::mapping::editor::domain::Animal"],
      "taggedValues": [
        {
          "tag": {
            "profile": "ui::mapping::editor::domain::ProfileTest",
            "value": "tag1"
          },
          "value": "test"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::TestClassSibling",
    "content": {
      "_type": "class",
      "name": "TestClassSibling",
      "package": "ui",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "anythingGoes",
          "type": "Boolean"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Enumeration",
    "path": "ui::TestEnumeration",
    "content": {
      "_type": "Enumeration",
      "name": "TestEnumeration",
      "package": "ui",
      "stereotypes": [
        {
          "profile": "ui::mapping::editor::domain::ProfileTest",
          "value": "stereotype2"
        }
      ],
      "taggedValues": [
        {
          "tag": {
            "profile": "ui::mapping::editor::domain::ProfileTest",
            "value": "tag1"
          },
          "value": "Enumeration Tag"
        }
      ],
      "values": [
        {
          "stereotypes": [
            {
              "profile": "ui::mapping::editor::domain::ProfileTest",
              "value": "stereotype1"
            }
          ],
          "taggedValues": [
            {
              "tag": {
                "profile": "ui::mapping::editor::domain::ProfileTest",
                "value": "tag1"
              },
              "value": "enumATag"
            }
          ],
          "value": "enumA"
        },
        { "value": "enumB" },
        { "value": "enumC" }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::mapping::editor::domain::Anyone",
    "content": {
      "_type": "class",
      "name": "Anyone",
      "package": "ui::mapping::editor::domain",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "legs",
          "type": "Integer"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "arms",
          "type": "Integer"
        }
      ],
      "superTypes": ["ui::mapping::editor::domain::Human"],
      "taggedValues": [
        {
          "tag": {
            "profile": "ui::mapping::editor::domain::ProfileTest",
            "value": "tag1"
          },
          "value": "hello"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::mapping::editor::domain::Animal",
    "content": {
      "_type": "class",
      "name": "Animal",
      "package": "ui::mapping::editor::domain",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "legs",
          "type": "Integer"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "arms",
          "type": "Integer"
        }
      ],
      "superTypes": ["ui::mapping::editor::domain::Organism"]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::mapping::editor::domain::Cat",
    "content": {
      "_type": "class",
      "name": "Cat",
      "package": "ui::mapping::editor::domain",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "breed",
          "type": "String"
        },
        {
          "multiplicity": { "lowerBound": 0 },
          "name": "parents",
          "type": "ui::mapping::editor::domain::Dog"
        }
      ],
      "superTypes": ["ui::mapping::editor::domain::Pet"]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::mapping::editor::domain::Dog",
    "content": {
      "_type": "class",
      "name": "Dog",
      "package": "ui::mapping::editor::domain",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "breed",
          "type": "String"
        },
        {
          "multiplicity": { "lowerBound": 0 },
          "name": "parents",
          "type": "ui::mapping::editor::domain::Dog"
        }
      ],
      "superTypes": ["ui::mapping::editor::domain::Pet"]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::mapping::editor::domain::Human",
    "content": {
      "_type": "class",
      "name": "Human",
      "package": "ui::mapping::editor::domain",
      "properties": [
        {
          "multiplicity": { "lowerBound": 0 },
          "name": "parents",
          "type": "ui::mapping::editor::domain::Human"
        },
        {
          "multiplicity": { "lowerBound": 0 },
          "name": "siblings",
          "type": "ui::mapping::editor::domain::Human"
        }
      ],
      "superTypes": ["ui::mapping::editor::domain::Organism"]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::mapping::editor::domain::Something",
    "content": {
      "_type": "class",
      "name": "Something",
      "package": "ui::mapping::editor::domain",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "legs",
          "type": "Integer"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "arms",
          "type": "Integer"
        }
      ],
      "superTypes": ["ui::mapping::editor::domain::Human"]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::mapping::editor::domain::Organism",
    "content": {
      "_type": "class",
      "name": "Organism",
      "package": "ui::mapping::editor::domain",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "planet",
          "type": "String"
        },
        {
          "multiplicity": { "lowerBound": 0, "upperBound": 1 },
          "name": "description",
          "type": "String"
        },
        {
          "multiplicity": { "lowerBound": 0, "upperBound": 1 },
          "name": "founder",
          "type": "ui::mapping::editor::domain::Human"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::mapping::editor::domain::Other",
    "content": {
      "_type": "class",
      "name": "Other",
      "package": "ui::mapping::editor::domain",
      "properties": [
        {
          "multiplicity": { "lowerBound": 0 },
          "name": "friend",
          "type": "ui::mapping::editor::domain::Something"
        },
        {
          "multiplicity": { "lowerBound": 0 },
          "name": "otherFriend",
          "type": "ui::mapping::editor::domain::Anyone"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::mapping::editor::domain::Pet",
    "content": {
      "_type": "class",
      "name": "Pet",
      "package": "ui::mapping::editor::domain",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "name",
          "type": "String"
        }
      ],
      "superTypes": ["ui::mapping::editor::domain::Animal"]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "ui::mapping::editor::domain::ProfileTest",
    "content": {
      "_type": "profile",
      "name": "ProfileTest",
      "package": "ui::mapping::editor::domain",
      "stereotypes": ["stereotype1", "stereotype2"],
      "tags": ["tag1", "tag2", "tag3"]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::mapping::editor::domain::Source_Something",
    "content": {
      "_type": "class",
      "name": "Source_Something",
      "package": "ui::mapping::editor::domain",
      "properties": [
        {
          "multiplicity": { "lowerBound": 0 },
          "name": "name",
          "type": "String"
        },
        {
          "multiplicity": { "lowerBound": 0 },
          "name": "lastName",
          "type": "String"
        },
        {
          "multiplicity": { "lowerBound": 0 },
          "name": "age",
          "type": "Integer"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::mapping::editor::domain::Target_Something",
    "content": {
      "_type": "class",
      "name": "Target_Something",
      "package": "ui::mapping::editor::domain",
      "properties": [
        {
          "multiplicity": { "lowerBound": 0 },
          "name": "fullName",
          "type": "String"
        },
        {
          "multiplicity": { "lowerBound": 0 },
          "name": "age",
          "type": "Integer"
        },
        {
          "multiplicity": { "lowerBound": 0 },
          "name": "description",
          "type": "String"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::text::Text",
    "path": "ui::mapping::editor::domain::TestElementTest",
    "content": {
      "_type": "text",
      "content": "test element test",
      "name": "TestElementTest",
      "package": "ui::mapping::editor::domain",
      "type": "plainText"
    }
  },
  {
    "classifierPath": "meta::pure::mapping::Mapping",
    "path": "ui::mapping::testMapping",
    "content": {
      "_type": "mapping",
      "classMappings": [
        {
          "_type": "pureInstance",
          "class": "ui::mapping::editor::domain::Target_Something",
          "id": "ui_mapping_editor_domain_Target_Something",
          "propertyMappings": [
            {
              "_type": "purePropertyMapping",
              "property": {
                "class": "ui::mapping::editor::domain::Target_Something",
                "property": "fullName"
              },
              "source": "ui_mapping_editor_domain_Target_Something",
              "transform": {
                "_type": "lambda",
                "body": [
                  {
                    "_type": "property",
                    "parameters": [{ "_type": "var", "name": "src" }],
                    "property": "name"
                  }
                ],
                "parameters": []
              }
            },
            {
              "_type": "purePropertyMapping",
              "property": {
                "class": "ui::mapping::editor::domain::Target_Something",
                "property": "age"
              },
              "source": "ui_mapping_editor_domain_Target_Something",
              "transform": {
                "_type": "lambda",
                "body": [
                  {
                    "_type": "integer",
                    "multiplicity": { "lowerBound": 1, "upperBound": 1 },
                    "values": [25]
                  }
                ],
                "parameters": []
              }
            },
            {
              "_type": "purePropertyMapping",
              "property": {
                "class": "ui::mapping::editor::domain::Target_Something",
                "property": "description"
              },
              "source": "ui_mapping_editor_domain_Target_Something",
              "transform": {
                "_type": "lambda",
                "body": [
                  {
                    "_type": "property",
                    "parameters": [{ "_type": "var", "name": "src" }],
                    "property": "lastName"
                  }
                ],
                "parameters": []
              }
            }
          ],
          "root": false,
          "srcClass": "ui::mapping::editor::domain::Source_Something"
        },
        {
          "_type": "pureInstance",
          "class": "ui::mapping::editor::domain::Target_Something",
          "id": "targetSomething",
          "propertyMappings": [
            {
              "_type": "purePropertyMapping",
              "property": {
                "class": "ui::mapping::editor::domain::Target_Something",
                "property": "fullName"
              },
              "source": "targetSomething",
              "transform": {
                "_type": "lambda",
                "body": [
                  {
                    "_type": "string",
                    "multiplicity": { "lowerBound": 1, "upperBound": 1 },
                    "values": ["bye"]
                  }
                ],
                "parameters": []
              }
            },
            {
              "_type": "purePropertyMapping",
              "property": {
                "class": "ui::mapping::editor::domain::Target_Something",
                "property": "age"
              },
              "source": "targetSomething",
              "transform": {
                "_type": "lambda",
                "body": [
                  {
                    "_type": "integer",
                    "multiplicity": { "lowerBound": 1, "upperBound": 1 },
                    "values": [11]
                  }
                ],
                "parameters": []
              }
            },
            {
              "_type": "purePropertyMapping",
              "property": {
                "class": "ui::mapping::editor::domain::Target_Something",
                "property": "description"
              },
              "source": "targetSomething",
              "transform": {
                "_type": "lambda",
                "body": [
                  {
                    "_type": "string",
                    "multiplicity": { "lowerBound": 1, "upperBound": 1 },
                    "values": ["hello"]
                  }
                ],
                "parameters": []
              }
            }
          ],
          "root": false
        },
        {
          "_type": "operation",
          "class": "ui::mapping::editor::domain::Target_Something",
          "id": "unionOfSomething",
          "operation": "STORE_UNION",
          "parameters": [
            "ui_mapping_editor_domain_Target_Something",
            "targetSomething"
          ],
          "root": true
        }
      ],
      "enumerationMappings": [],
      "includedMappings": [],
      "name": "testMapping",
      "package": "ui::mapping",
      "tests": []
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "ui::meta::DAX::metamodel::DAXAttribute",
    "content": {
      "_type": "profile",
      "name": "DAXAttribute",
      "package": "ui::meta::DAX::metamodel",
      "stereotypes": ["Ignore", "PrimaryKey", "PublicKey"],
      "tags": ["Description", "DataType", "PhysicalFieldNameOrPosition"]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "ui::meta::DAX::metamodel::DAXProfile",
    "content": {
      "_type": "profile",
      "name": "DAXProfile",
      "package": "ui::meta::DAX::metamodel",
      "stereotypes": ["ContractDecl", "ValDSFn", "DataSetFn", "PrimaryDataSet"],
      "tags": ["Id", "Name", "Description", "DatastoreName", "DatasetName"]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "ui::meta::adl::graph",
    "content": {
      "_type": "profile",
      "name": "graph",
      "package": "ui::meta::adl",
      "stereotypes": ["domainModel", "IRI", "universe"],
      "tags": [
        "namespace",
        "iriName",
        "associationExpression",
        "sameAs",
        "lineage",
        "iriField"
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "ui::meta::apistore::api",
    "content": {
      "_type": "profile",
      "name": "api",
      "package": "ui::meta::apistore",
      "stereotypes": ["function", "graphql"],
      "tags": [
        "name",
        "fitDivision",
        "fitFunction",
        "fitActivity",
        "graphqlSingle",
        "graphqlMulti"
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "ui::meta::avro::utils::Avro",
    "content": {
      "_type": "profile",
      "name": "Avro",
      "package": "ui::meta::avro::utils",
      "stereotypes": ["ignore"],
      "tags": ["default", "type"]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "ui::meta::avro::utils::tests::AvroProperty",
    "content": {
      "_type": "profile",
      "name": "AvroProperty",
      "package": "ui::meta::avro::utils::tests",
      "stereotypes": [],
      "tags": ["p1", "p2", "p3"]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "ui::meta::bosi::bosi",
    "content": {
      "_type": "profile",
      "name": "bosi",
      "package": "ui::meta::bosi",
      "stereotypes": [
        "subobject",
        "indexed",
        "entity",
        "none",
        "event",
        "lifecycleRoot",
        "parentChild",
        "generated",
        "documentEntity",
        "indexedLifecycleId",
        "indexedParentId",
        "abstract"
      ],
      "tags": [
        "dontIntern",
        "objectType",
        "parent",
        "child",
        "subobject",
        "key",
        "documentstore"
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "ui::meta::bosi::general",
    "content": {
      "_type": "profile",
      "name": "general",
      "package": "ui::meta::bosi",
      "stereotypes": [
        "interface",
        "enum",
        "enableConcrete",
        "derive",
        "transient",
        "persisted",
        "nonNavigable",
        "versioned",
        "ignored"
      ],
      "tags": [
        "implementationBody",
        "singularName",
        "typeVariant",
        "length",
        "precision",
        "scale",
        "roundingMode",
        "sqlTypeVariant"
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "ui::meta::controlevent::projection",
    "content": {
      "_type": "profile",
      "name": "projection",
      "package": "ui::meta::controlevent",
      "stereotypes": [],
      "tags": ["from"]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "ui::meta::curb::metamodel::Curb",
    "content": {
      "_type": "profile",
      "name": "Curb",
      "package": "ui::meta::curb::metamodel",
      "stereotypes": [
        "hasDate",
        "isHidden",
        "dependentAttribute",
        "extendedAttribute",
        "outofScope",
        "derivedAttribute",
        "runDate"
      ],
      "tags": [
        "semantic",
        "tags",
        "attributeKind",
        "keys",
        "unit",
        "longDescription",
        "briefDescription",
        "sources",
        "owners",
        "extensionTag",
        "ezQuery",
        "aggregationFunction",
        "supportedDatabases",
        "possibleAdditionalTables",
        "headAliases",
        "tailAliases",
        "fkHeadAliases",
        "fkTailAliases",
        "keyMap",
        "fkPosition",
        "numberFormat",
        "numberPrecision"
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "ui::meta::dsb::bi::profiles::BiToolkit",
    "content": {
      "_type": "profile",
      "name": "BiToolkit",
      "package": "ui::meta::dsb::bi::profiles",
      "stereotypes": ["eligible"],
      "tags": []
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "ui::meta::dsb::domain::FunctionTypes",
    "content": {
      "_type": "profile",
      "name": "FunctionTypes",
      "package": "ui::meta::dsb::domain",
      "stereotypes": ["datePeriod"],
      "tags": []
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "ui::meta::dsb::domain::config::DataSetConfig",
    "content": {
      "_type": "profile",
      "name": "DataSetConfig",
      "package": "ui::meta::dsb::domain::config",
      "stereotypes": ["universeConfig"],
      "tags": []
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "ui::meta::dsf::metamodel::DSF",
    "content": {
      "_type": "profile",
      "name": "DSF",
      "package": "ui::meta::dsf::metamodel",
      "stereotypes": ["PrimaryKey", "Measure", "Dimension", "Mapping"],
      "tags": ["universe"]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "ui::meta::flatten::metamodel::flatten",
    "content": {
      "_type": "profile",
      "name": "flatten",
      "package": "ui::meta::flatten::metamodel",
      "stereotypes": ["flatten", "exclude"],
      "tags": ["groupName", "fullPath", "name", "scope", "enumValue"]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "ui::meta::governance::dataPrivacy::Category",
    "content": {
      "_type": "profile",
      "name": "Category",
      "package": "ui::meta::governance::dataPrivacy",
      "stereotypes": [
        "PersonalIdentifiersAndContactInformation",
        "SubsidiaryPersonalInformation",
        "PersonalFinancialInformation"
      ],
      "tags": []
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "ui::meta::governance::dataPrivacy::NormalizedFieldType",
    "content": {
      "_type": "profile",
      "name": "NormalizedFieldType",
      "package": "ui::meta::governance::dataPrivacy",
      "stereotypes": [
        "NAME",
        "ADDRESS",
        "PHONE_NO",
        "EMAIL",
        "USERNAME",
        "INTERNAL_GS_ID",
        "PHOTO",
        "DIGITIAL_IDENTIFIER",
        "SENSITIVE_DIGITAL_IDENTIFER",
        "GS_CORP_CONTACT_INFO",
        "CORP_CONTACT_INFO",
        "GOVT_ID",
        "BACKGROUND_INFO",
        "SENSITIVE_BACKGROUND_INFO",
        "DEMOGRAPHIC_INFO",
        "SENSITIVE_DEMOGRAPIC_INFO",
        "BEHAVIORAL_INFO",
        "HEALTH_INFO",
        "BIOMETRIC_INFO",
        "FINANCIAL_ACCT_NO",
        "PERSONAL_FINANCIAL_INFO",
        "SENSITIVE_PERSONAL_FINANCIAL_INFO"
      ],
      "tags": []
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "ui::meta::governance::dgo::dataDomainModel",
    "content": {
      "_type": "profile",
      "name": "dataDomainModel",
      "package": "ui::meta::governance::dgo",
      "stereotypes": ["certified", "reviewed"],
      "tags": [
        "controlsPass",
        "allControlsPass",
        "controlsFail",
        "selfAssessmentDate",
        "certificationDate",
        "reviewDate",
        "resolutionDueDate",
        "maturityLevel"
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "ui::meta::governance::dgo::gdpr",
    "content": {
      "_type": "profile",
      "name": "gdpr",
      "package": "ui::meta::governance::dgo",
      "stereotypes": [
        "BirthName",
        "Bonus",
        "CitizenshipNationality",
        "CivilMaritalSttaus",
        "CompensationInformation",
        "ContactDetails",
        "CorrespondenceMeetingsPreferences",
        "CVAndApplication",
        "DateOfBirth",
        "DateOfChangeOfJob",
        "DevelopmentNeedsAndTrainingReceived",
        "FlexibleWorkingProcesses",
        "Gender",
        "GradeRoleLevel",
        "ImmigrationStatusOrWorkEligibility",
        "LeaveAbsenceData",
        "LineManagerData",
        "Name",
        "NameButNotIncludingOwnLLoginID",
        "Other",
        "PeerUpwardAndDownwardFeedback",
        "Photograph",
        "PlaceOfBirth",
        "PositionHeld",
        "QualificationLicensesCertification",
        "RecordOfRegistrationWithAnyApplicableRegulatoryAuthority",
        "RestructureAndRedundancyPlans",
        "RiskAssessments",
        "SalaryAllowance",
        "TalentProgrammes",
        "WorkContactDdetails",
        "WorkerID"
      ],
      "tags": []
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "ui::meta::java::collectionType",
    "content": {
      "_type": "profile",
      "name": "collectionType",
      "package": "ui::meta::java",
      "stereotypes": ["List", "Set", "Map"],
      "tags": []
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "ui::meta::java::enumValue",
    "content": {
      "_type": "profile",
      "name": "enumValue",
      "package": "ui::meta::java",
      "stereotypes": ["Default"],
      "tags": []
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "ui::meta::java::floatType",
    "content": {
      "_type": "profile",
      "name": "floatType",
      "package": "ui::meta::java",
      "stereotypes": ["Float", "BigDecimal", "Double"],
      "tags": []
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "ui::meta::java::generation",
    "content": {
      "_type": "profile",
      "name": "generation",
      "package": "ui::meta::java",
      "stereotypes": ["opaque", "container", "reference"],
      "tags": []
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "ui::meta::java::immutables",
    "content": {
      "_type": "profile",
      "name": "immutables",
      "package": "ui::meta::java",
      "stereotypes": ["Auxiliary"],
      "tags": []
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "ui::meta::java::integerType",
    "content": {
      "_type": "profile",
      "name": "integerType",
      "package": "ui::meta::java",
      "stereotypes": ["Integer", "Long"],
      "tags": []
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "ui::meta::java::jsonProperty",
    "content": {
      "_type": "profile",
      "name": "jsonProperty",
      "package": "ui::meta::java",
      "stereotypes": ["customName", "ignoreProperties", "ignoreProperty"],
      "tags": ["value"]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "ui::meta::java::stringType",
    "content": {
      "_type": "profile",
      "name": "stringType",
      "package": "ui::meta::java",
      "stereotypes": ["byteArray"],
      "tags": []
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "ui::meta::java::temporalType",
    "content": {
      "_type": "profile",
      "name": "temporalType",
      "package": "ui::meta::java",
      "stereotypes": [
        "Instant",
        "LocalDate",
        "LocalDateTime",
        "LocalTime",
        "OffsetDateTime",
        "OffsetTime",
        "ZonedDateTime"
      ],
      "tags": []
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "ui::meta::protocols::pure::v1_0_0::transformation::toPureGrammar::tests::domain::TestStereotype",
    "content": {
      "_type": "profile",
      "name": "TestStereotype",
      "package": "ui::meta::protocols::pure::v1_0_0::transformation::toPureGrammar::tests::domain",
      "stereotypes": ["ST1", "ST2"],
      "tags": []
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "ui::meta::protocols::pure::v1_0_0::transformation::toPureGrammar::tests::domain::TestTaggedValue",
    "content": {
      "_type": "profile",
      "name": "TestTaggedValue",
      "package": "ui::meta::protocols::pure::v1_0_0::transformation::toPureGrammar::tests::domain",
      "stereotypes": [],
      "tags": ["T1", "T2"]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "ui::meta::protocols::pure::v1_4_0::transformation::toPureGrammar::tests::domain::TestStereotype",
    "content": {
      "_type": "profile",
      "name": "TestStereotype",
      "package": "ui::meta::protocols::pure::v1_4_0::transformation::toPureGrammar::tests::domain",
      "stereotypes": ["ST1", "ST2"],
      "tags": []
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "ui::meta::protocols::pure::v1_4_0::transformation::toPureGrammar::tests::domain::TestTaggedValue",
    "content": {
      "_type": "profile",
      "name": "TestTaggedValue",
      "package": "ui::meta::protocols::pure::v1_4_0::transformation::toPureGrammar::tests::domain",
      "stereotypes": [],
      "tags": ["T1", "T2"]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "ui::meta::protocols::pure::v1_5_0::transformation::toPureGrammar::tests::domain::TestStereotype",
    "content": {
      "_type": "profile",
      "name": "TestStereotype",
      "package": "ui::meta::protocols::pure::v1_5_0::transformation::toPureGrammar::tests::domain",
      "stereotypes": ["ST1", "ST2"],
      "tags": []
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "ui::meta::protocols::pure::v1_5_0::transformation::toPureGrammar::tests::domain::TestTaggedValue",
    "content": {
      "_type": "profile",
      "name": "TestTaggedValue",
      "package": "ui::meta::protocols::pure::v1_5_0::transformation::toPureGrammar::tests::domain",
      "stereotypes": [],
      "tags": ["T1", "T2"]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "ui::meta::protocols::pure::vX_X_X::transformation::toPureGrammar::tests::domain::TestStereotype",
    "content": {
      "_type": "profile",
      "name": "TestStereotype",
      "package": "ui::meta::protocols::pure::vX_X_X::transformation::toPureGrammar::tests::domain",
      "stereotypes": ["ST1", "ST2"],
      "tags": []
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "ui::meta::protocols::pure::vX_X_X::transformation::toPureGrammar::tests::domain::TestTaggedValue",
    "content": {
      "_type": "profile",
      "name": "TestTaggedValue",
      "package": "ui::meta::protocols::pure::vX_X_X::transformation::toPureGrammar::tests::domain",
      "stereotypes": [],
      "tags": ["T1", "T2"]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::constraints::tests::complex::PersonWithComplexConstraint",
    "content": {
      "_type": "class",
      "constraints": [
        {
          "functionDefinition": {
            "_type": "lambda",
            "body": [
              {
                "_type": "func",
                "function": "greaterThan",
                "parameters": [
                  {
                    "_type": "func",
                    "function": "length",
                    "parameters": [
                      {
                        "_type": "property",
                        "parameters": [{ "_type": "var", "name": "this" }],
                        "property": "fullName"
                      }
                    ]
                  },
                  {
                    "_type": "integer",
                    "multiplicity": { "lowerBound": 1, "upperBound": 1 },
                    "values": [1]
                  }
                ]
              }
            ],
            "parameters": [{ "_type": "var", "name": "this" }]
          },
          "name": "c2"
        }
      ],
      "name": "PersonWithComplexConstraint",
      "package": "ui::meta::pure::constraints::tests::complex",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "fullName",
          "type": "String"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::constraints::tests::model::Address",
    "content": {
      "_type": "class",
      "name": "Address",
      "package": "ui::meta::pure::constraints::tests::model",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "line1",
          "type": "String"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "line2",
          "type": "String"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "city",
          "type": "String"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "postCode",
          "type": "String"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Enumeration",
    "path": "ui::meta::pure::constraints::tests::model::Degree",
    "content": {
      "_type": "Enumeration",
      "name": "Degree",
      "package": "ui::meta::pure::constraints::tests::model",
      "values": [{ "value": "BSc" }, { "value": "MSc" }, { "value": "PHd" }]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::constraints::tests::model::Firm",
    "content": {
      "_type": "class",
      "constraints": [
        {
          "functionDefinition": {
            "_type": "lambda",
            "body": [
              {
                "_type": "func",
                "function": "endsWith",
                "parameters": [
                  {
                    "_type": "property",
                    "parameters": [{ "_type": "var", "name": "this" }],
                    "property": "legalName"
                  },
                  {
                    "_type": "string",
                    "multiplicity": { "lowerBound": 1, "upperBound": 1 },
                    "values": ["LTD"]
                  }
                ]
              }
            ],
            "parameters": [{ "_type": "var", "name": "this" }]
          },
          "name": "0"
        }
      ],
      "name": "Firm",
      "package": "ui::meta::pure::constraints::tests::model",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "legalName",
          "type": "String"
        },
        {
          "multiplicity": { "lowerBound": 0 },
          "name": "applicants",
          "type": "ui::meta::pure::constraints::tests::model::Person"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::constraints::tests::model::GSEmployee",
    "content": {
      "_type": "class",
      "constraints": [
        {
          "functionDefinition": {
            "_type": "lambda",
            "body": [
              {
                "_type": "func",
                "function": "startsWith",
                "parameters": [
                  {
                    "_type": "property",
                    "parameters": [
                      {
                        "_type": "property",
                        "parameters": [{ "_type": "var", "name": "this" }],
                        "property": "firm"
                      }
                    ],
                    "property": "legalName"
                  },
                  {
                    "_type": "string",
                    "multiplicity": { "lowerBound": 1, "upperBound": 1 },
                    "values": ["Goldman"]
                  }
                ]
              }
            ],
            "parameters": [{ "_type": "var", "name": "this" }]
          },
          "name": "nameStartsWithGS"
        },
        {
          "functionDefinition": {
            "_type": "lambda",
            "body": [
              {
                "_type": "func",
                "function": "contains",
                "parameters": [
                  {
                    "_type": "property",
                    "parameters": [{ "_type": "var", "name": "this" }],
                    "property": "degreesHeld"
                  },
                  {
                    "_type": "func",
                    "function": "extractEnumValue",
                    "parameters": [
                      {
                        "_type": "string",
                        "multiplicity": { "lowerBound": 1, "upperBound": 1 },
                        "values": [
                          "ui::meta::pure::constraints::tests::model::Degree"
                        ]
                      },
                      {
                        "_type": "string",
                        "multiplicity": { "lowerBound": 1, "upperBound": 1 },
                        "values": ["BSc"]
                      }
                    ]
                  }
                ]
              }
            ],
            "parameters": [{ "_type": "var", "name": "this" }]
          },
          "name": "hasDegrees"
        },
        {
          "functionDefinition": {
            "_type": "lambda",
            "body": [
              {
                "_type": "property",
                "parameters": [{ "_type": "var", "name": "this" }],
                "property": "isSmart"
              }
            ],
            "parameters": [{ "_type": "var", "name": "this" }]
          },
          "name": "shouldBeSmart"
        }
      ],
      "name": "GSEmployee",
      "package": "ui::meta::pure::constraints::tests::model",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "firm",
          "type": "ui::meta::pure::constraints::tests::model::Firm"
        }
      ],
      "superTypes": ["ui::meta::pure::constraints::tests::model::Person"]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::constraints::tests::model::GSEmployeeWithTitle",
    "content": {
      "_type": "class",
      "constraints": [
        {
          "functionDefinition": {
            "_type": "lambda",
            "body": [
              {
                "_type": "func",
                "function": "isNotEmpty",
                "parameters": [
                  {
                    "_type": "property",
                    "parameters": [{ "_type": "var", "name": "this" }],
                    "property": "title"
                  }
                ]
              }
            ],
            "parameters": [{ "_type": "var", "name": "this" }]
          },
          "name": "titleNotEmpty"
        }
      ],
      "name": "GSEmployeeWithTitle",
      "package": "ui::meta::pure::constraints::tests::model",
      "properties": [
        {
          "multiplicity": { "lowerBound": 0, "upperBound": 1 },
          "name": "title",
          "type": "String"
        }
      ],
      "superTypes": ["ui::meta::pure::constraints::tests::model::GSEmployee"]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::constraints::tests::model::Person",
    "content": {
      "_type": "class",
      "constraints": [
        {
          "functionDefinition": {
            "_type": "lambda",
            "body": [
              {
                "_type": "func",
                "function": "lessThan",
                "parameters": [
                  {
                    "_type": "func",
                    "function": "length",
                    "parameters": [
                      {
                        "_type": "property",
                        "parameters": [{ "_type": "var", "name": "this" }],
                        "property": "lastName"
                      }
                    ]
                  },
                  {
                    "_type": "integer",
                    "multiplicity": { "lowerBound": 1, "upperBound": 1 },
                    "values": [10]
                  }
                ]
              }
            ],
            "parameters": [{ "_type": "var", "name": "this" }]
          },
          "name": "lastName"
        },
        {
          "functionDefinition": {
            "_type": "lambda",
            "body": [
              {
                "_type": "func",
                "function": "greaterThan",
                "parameters": [
                  {
                    "_type": "property",
                    "parameters": [{ "_type": "var", "name": "this" }],
                    "property": "age"
                  },
                  {
                    "_type": "integer",
                    "multiplicity": { "lowerBound": 1, "upperBound": 1 },
                    "values": [0]
                  }
                ]
              }
            ],
            "parameters": [{ "_type": "var", "name": "this" }]
          },
          "name": "age"
        },
        {
          "functionDefinition": {
            "_type": "lambda",
            "body": [
              {
                "_type": "func",
                "function": "if",
                "parameters": [
                  {
                    "_type": "property",
                    "parameters": [{ "_type": "var", "name": "this" }],
                    "property": "isSmart"
                  },
                  {
                    "_type": "lambda",
                    "body": [
                      {
                        "_type": "func",
                        "function": "greaterThan",
                        "parameters": [
                          {
                            "_type": "func",
                            "function": "size",
                            "parameters": [
                              {
                                "_type": "property",
                                "parameters": [
                                  { "_type": "var", "name": "this" }
                                ],
                                "property": "degreesHeld"
                              }
                            ]
                          },
                          {
                            "_type": "integer",
                            "multiplicity": {
                              "lowerBound": 1,
                              "upperBound": 1
                            },
                            "values": [0]
                          }
                        ]
                      }
                    ],
                    "parameters": []
                  },
                  {
                    "_type": "lambda",
                    "body": [
                      {
                        "_type": "func",
                        "function": "isEmpty",
                        "parameters": [
                          {
                            "_type": "property",
                            "parameters": [{ "_type": "var", "name": "this" }],
                            "property": "degreesHeld"
                          }
                        ]
                      }
                    ],
                    "parameters": []
                  }
                ]
              }
            ],
            "parameters": [{ "_type": "var", "name": "this" }]
          },
          "name": "2"
        },
        {
          "functionDefinition": {
            "_type": "lambda",
            "body": [
              {
                "_type": "func",
                "function": "lessThan",
                "parameters": [
                  {
                    "_type": "func",
                    "function": "length",
                    "parameters": [
                      {
                        "_type": "property",
                        "parameters": [{ "_type": "var", "name": "this" }],
                        "property": "firstName"
                      }
                    ]
                  },
                  {
                    "_type": "integer",
                    "multiplicity": { "lowerBound": 1, "upperBound": 1 },
                    "values": [10]
                  }
                ]
              }
            ],
            "parameters": [{ "_type": "var", "name": "this" }]
          },
          "name": "warningExample"
        }
      ],
      "name": "Person",
      "package": "ui::meta::pure::constraints::tests::model",
      "properties": [
        {
          "multiplicity": { "lowerBound": 0, "upperBound": 1 },
          "name": "application",
          "type": "ui::meta::pure::constraints::tests::model::Firm"
        }
      ],
      "superTypes": [
        "ui::meta::pure::constraints::tests::model::PersonWithoutConstraints"
      ],
      "taggedValues": [
        {
          "tag": { "profile": "ui::meta::pure::profiles::doc", "value": "doc" },
          "value": "Constraint are any valid PURE boolean expression"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::constraints::tests::model::PersonWithoutConstraints",
    "content": {
      "_type": "class",
      "name": "PersonWithoutConstraints",
      "package": "ui::meta::pure::constraints::tests::model",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "firstName",
          "type": "String"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "lastName",
          "type": "String"
        },
        {
          "multiplicity": { "lowerBound": 0, "upperBound": 2 },
          "name": "nickNames",
          "type": "String"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "age",
          "type": "Integer"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "isSmart",
          "type": "Boolean"
        },
        {
          "multiplicity": { "lowerBound": 0 },
          "name": "degreesHeld",
          "type": "ui::meta::pure::constraints::tests::model::Degree"
        }
      ],
      "qualifiedProperties": [
        {
          "body": [
            {
              "_type": "string",
              "multiplicity": { "lowerBound": 1, "upperBound": 1 },
              "values": ["make this test pass"]
            }
          ],
          "name": "xza",
          "parameters": [],
          "returnMultiplicity": { "lowerBound": 1, "upperBound": 1 },
          "returnType": "String"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::constraints::tests::xstore::model::Degree",
    "content": {
      "_type": "class",
      "name": "Degree",
      "package": "ui::meta::pure::constraints::tests::xstore::model",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "name",
          "type": "String"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "personId",
          "type": "Integer"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::constraints::tests::xstore::model::Person",
    "content": {
      "_type": "class",
      "name": "Person",
      "package": "ui::meta::pure::constraints::tests::xstore::model",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "id",
          "type": "Integer"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "firstName",
          "type": "String"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "lastName",
          "type": "String"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::constraints::tests::xstore::model::PersonWithDegree",
    "content": {
      "_type": "class",
      "name": "PersonWithDegree",
      "package": "ui::meta::pure::constraints::tests::xstore::model",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "firstName",
          "type": "String"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "lastName",
          "type": "String"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "ui::meta::pure::executionPlan::profiles::serverVersion",
    "content": {
      "_type": "profile",
      "name": "serverVersion",
      "package": "ui::meta::pure::executionPlan::profiles",
      "stereotypes": [],
      "tags": ["exclude", "start"]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "ui::meta::pure::functions::test::tests::myProfile",
    "content": {
      "_type": "profile",
      "name": "myProfile",
      "package": "ui::meta::pure::functions::test::tests",
      "stereotypes": ["myStereotype"],
      "tags": []
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::mapping::modelToModel::test::constraints::src::_S_Person",
    "content": {
      "_type": "class",
      "constraints": [
        {
          "functionDefinition": {
            "_type": "lambda",
            "body": [
              {
                "_type": "func",
                "function": "lessThan",
                "parameters": [
                  {
                    "_type": "func",
                    "function": "length",
                    "parameters": [
                      {
                        "_type": "property",
                        "parameters": [{ "_type": "var", "name": "this" }],
                        "property": "fullName"
                      }
                    ]
                  },
                  {
                    "_type": "integer",
                    "multiplicity": { "lowerBound": 1, "upperBound": 1 },
                    "values": [25]
                  }
                ]
              }
            ],
            "parameters": [{ "_type": "var", "name": "this" }]
          },
          "name": "testConstraint"
        }
      ],
      "name": "_S_Person",
      "package": "ui::meta::pure::mapping::modelToModel::test::constraints::src",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "fullName",
          "type": "String"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::mapping::modelToModel::test::constraintsManager::SourceType",
    "content": {
      "_type": "class",
      "name": "SourceType",
      "package": "ui::meta::pure::mapping::modelToModel::test::constraintsManager",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "val",
          "type": "String"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::mapping::modelToModel::test::constraintsManager::TargetType",
    "content": {
      "_type": "class",
      "constraints": [
        {
          "functionDefinition": {
            "_type": "lambda",
            "body": [
              {
                "_type": "func",
                "function": "greaterThan",
                "parameters": [
                  {
                    "_type": "func",
                    "function": "length",
                    "parameters": [
                      {
                        "_type": "property",
                        "parameters": [{ "_type": "var", "name": "this" }],
                        "property": "name"
                      }
                    ]
                  },
                  {
                    "_type": "integer",
                    "multiplicity": { "lowerBound": 1, "upperBound": 1 },
                    "values": [16]
                  }
                ]
              }
            ],
            "parameters": [{ "_type": "var", "name": "this" }]
          },
          "name": "name_WrongSize"
        },
        {
          "functionDefinition": {
            "_type": "lambda",
            "body": [
              {
                "_type": "func",
                "function": "startsWith",
                "parameters": [
                  {
                    "_type": "property",
                    "parameters": [{ "_type": "var", "name": "this" }],
                    "property": "name"
                  },
                  {
                    "_type": "string",
                    "multiplicity": { "lowerBound": 1, "upperBound": 1 },
                    "values": ["o"]
                  }
                ]
              }
            ],
            "parameters": [{ "_type": "var", "name": "this" }]
          },
          "name": "name_WrongStart"
        }
      ],
      "name": "TargetType",
      "package": "ui::meta::pure::mapping::modelToModel::test::constraintsManager",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "name",
          "type": "String"
        }
      ],
      "superTypes": [
        "ui::meta::pure::mapping::modelToModel::test::constraintsManager::Top"
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::mapping::modelToModel::test::constraintsManager::Top",
    "content": {
      "_type": "class",
      "name": "Top",
      "package": "ui::meta::pure::mapping::modelToModel::test::constraintsManager",
      "properties": [
        {
          "multiplicity": { "lowerBound": 0 },
          "name": "errors",
          "type": "String"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::mapping::Mapping",
    "path": "ui::meta::pure::mapping::modelToModel::test::constraintsManager::m2m",
    "content": {
      "_type": "mapping",
      "classMappings": [
        {
          "_type": "pureInstance",
          "class": "ui::meta::pure::mapping::modelToModel::test::constraintsManager::TargetType",
          "id": "ui_meta_pure_mapping_modelToModel_test_constraintsManager_TargetType",
          "propertyMappings": [
            {
              "_type": "purePropertyMapping",
              "property": {
                "class": "ui::meta::pure::mapping::modelToModel::test::constraintsManager::TargetType",
                "property": "name"
              },
              "source": "ui_meta_pure_mapping_modelToModel_test_constraintsManager_TargetType",
              "transform": {
                "_type": "lambda",
                "body": [
                  {
                    "_type": "property",
                    "parameters": [{ "_type": "var", "name": "src" }],
                    "property": "val"
                  }
                ],
                "parameters": []
              }
            }
          ],
          "root": true,
          "srcClass": "ui::meta::pure::mapping::modelToModel::test::constraintsManager::SourceType"
        }
      ],
      "enumerationMappings": [],
      "includedMappings": [],
      "name": "m2m",
      "package": "ui::meta::pure::mapping::modelToModel::test::constraintsManager",
      "tests": []
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::mapping::modelToModel::test::delta::v1::Address",
    "content": {
      "_type": "class",
      "name": "Address",
      "package": "ui::meta::pure::mapping::modelToModel::test::delta::v1",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "add",
          "type": "String"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::mapping::modelToModel::test::delta::v1::Firm",
    "content": {
      "_type": "class",
      "name": "Firm",
      "package": "ui::meta::pure::mapping::modelToModel::test::delta::v1",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "legalName",
          "type": "String"
        },
        {
          "multiplicity": { "lowerBound": 0 },
          "name": "employees",
          "type": "ui::meta::pure::mapping::modelToModel::test::delta::v1::Person"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "count",
          "type": "Integer"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::mapping::modelToModel::test::delta::v1::More",
    "content": {
      "_type": "class",
      "name": "More",
      "package": "ui::meta::pure::mapping::modelToModel::test::delta::v1",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "name",
          "type": "String"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::mapping::modelToModel::test::delta::v1::Person",
    "content": {
      "_type": "class",
      "name": "Person",
      "package": "ui::meta::pure::mapping::modelToModel::test::delta::v1",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "name",
          "type": "String"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "address",
          "type": "ui::meta::pure::mapping::modelToModel::test::delta::v1::Address"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "more",
          "type": "ui::meta::pure::mapping::modelToModel::test::delta::v1::More"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::mapping::modelToModel::test::delta::v2::Address",
    "content": {
      "_type": "class",
      "name": "Address",
      "package": "ui::meta::pure::mapping::modelToModel::test::delta::v2",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "newAdd",
          "type": "String"
        },
        {
          "multiplicity": { "lowerBound": 0, "upperBound": 1 },
          "name": "useless",
          "type": "ui::meta::pure::mapping::modelToModel::test::delta::v2::Useless"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::mapping::modelToModel::test::delta::v2::Firm",
    "content": {
      "_type": "class",
      "name": "Firm",
      "package": "ui::meta::pure::mapping::modelToModel::test::delta::v2",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "newLegalName",
          "type": "String"
        },
        {
          "multiplicity": { "lowerBound": 0 },
          "name": "employees",
          "type": "ui::meta::pure::mapping::modelToModel::test::delta::v2::Person"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "count",
          "type": "Integer"
        },
        {
          "multiplicity": { "lowerBound": 0, "upperBound": 1 },
          "name": "new",
          "type": "Integer"
        },
        {
          "multiplicity": { "lowerBound": 0, "upperBound": 1 },
          "name": "useless",
          "type": "ui::meta::pure::mapping::modelToModel::test::delta::v2::Useless"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::mapping::modelToModel::test::delta::v2::More",
    "content": {
      "_type": "class",
      "name": "More",
      "package": "ui::meta::pure::mapping::modelToModel::test::delta::v2",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "name",
          "type": "String"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::mapping::modelToModel::test::delta::v2::Person",
    "content": {
      "_type": "class",
      "name": "Person",
      "package": "ui::meta::pure::mapping::modelToModel::test::delta::v2",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "name",
          "type": "String"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "address",
          "type": "ui::meta::pure::mapping::modelToModel::test::delta::v2::Address"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "more",
          "type": "ui::meta::pure::mapping::modelToModel::test::delta::v2::More"
        },
        {
          "multiplicity": { "lowerBound": 0, "upperBound": 1 },
          "name": "useless",
          "type": "ui::meta::pure::mapping::modelToModel::test::delta::v2::Useless"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::mapping::modelToModel::test::delta::v2::Useless",
    "content": {
      "_type": "class",
      "name": "Useless",
      "package": "ui::meta::pure::mapping::modelToModel::test::delta::v2"
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::mapping::modelToModel::test::distinct::Source",
    "content": {
      "_type": "class",
      "name": "Source",
      "package": "ui::meta::pure::mapping::modelToModel::test::distinct",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "someNumber",
          "type": "Integer"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::mapping::modelToModel::test::distinct::Target",
    "content": {
      "_type": "class",
      "name": "Target",
      "package": "ui::meta::pure::mapping::modelToModel::test::distinct",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "someNumber",
          "type": "Integer"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::mapping::modelToModel::test::embedded::dest::Firm",
    "content": {
      "_type": "class",
      "name": "Firm",
      "package": "ui::meta::pure::mapping::modelToModel::test::embedded::dest",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "legalName",
          "type": "String"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::mapping::modelToModel::test::embedded::dest::Person",
    "content": {
      "_type": "class",
      "name": "Person",
      "package": "ui::meta::pure::mapping::modelToModel::test::embedded::dest",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "name",
          "type": "String"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::mapping::modelToModel::test::embedded::source::EmploymentRecord",
    "content": {
      "_type": "class",
      "name": "EmploymentRecord",
      "package": "ui::meta::pure::mapping::modelToModel::test::embedded::source",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "employeeName",
          "type": "String"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "employerLegalName",
          "type": "String"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::mapping::modelToModel::test::enumerationMapping::enumToEnum::model::MiddleProduct",
    "content": {
      "_type": "class",
      "name": "MiddleProduct",
      "package": "ui::meta::pure::mapping::modelToModel::test::enumerationMapping::enumToEnum::model",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "id",
          "type": "Integer"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "type",
          "type": "ui::meta::pure::mapping::modelToModel::test::enumerationMapping::enumToEnum::model::MiddleProductType"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::mapping::modelToModel::test::enumerationMapping::enumToEnum::model::MiddleProduct2",
    "content": {
      "_type": "class",
      "name": "MiddleProduct2",
      "package": "ui::meta::pure::mapping::modelToModel::test::enumerationMapping::enumToEnum::model",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "id",
          "type": "Integer"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "type",
          "type": "ui::meta::pure::mapping::modelToModel::test::enumerationMapping::enumToEnum::model::MiddleProductType2"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Enumeration",
    "path": "ui::meta::pure::mapping::modelToModel::test::enumerationMapping::enumToEnum::model::MiddleProductType",
    "content": {
      "_type": "Enumeration",
      "name": "MiddleProductType",
      "package": "ui::meta::pure::mapping::modelToModel::test::enumerationMapping::enumToEnum::model",
      "values": [{ "value": "MP1" }, { "value": "MP2" }, { "value": "MP3" }]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Enumeration",
    "path": "ui::meta::pure::mapping::modelToModel::test::enumerationMapping::enumToEnum::model::MiddleProductType2",
    "content": {
      "_type": "Enumeration",
      "name": "MiddleProductType2",
      "package": "ui::meta::pure::mapping::modelToModel::test::enumerationMapping::enumToEnum::model",
      "values": [{ "value": "MP21" }, { "value": "MP22" }, { "value": "MP23" }]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::mapping::modelToModel::test::enumerationMapping::enumToEnum::model::MiddleTrade",
    "content": {
      "_type": "class",
      "name": "MiddleTrade",
      "package": "ui::meta::pure::mapping::modelToModel::test::enumerationMapping::enumToEnum::model",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "id",
          "type": "Integer"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "type",
          "type": "ui::meta::pure::mapping::modelToModel::test::enumerationMapping::enumToEnum::model::MiddleTradeType"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::mapping::modelToModel::test::enumerationMapping::enumToEnum::model::MiddleTrade2",
    "content": {
      "_type": "class",
      "name": "MiddleTrade2",
      "package": "ui::meta::pure::mapping::modelToModel::test::enumerationMapping::enumToEnum::model",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "id",
          "type": "Integer"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "type",
          "type": "ui::meta::pure::mapping::modelToModel::test::enumerationMapping::enumToEnum::model::MiddleTradeType2"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Enumeration",
    "path": "ui::meta::pure::mapping::modelToModel::test::enumerationMapping::enumToEnum::model::MiddleTradeType",
    "content": {
      "_type": "Enumeration",
      "name": "MiddleTradeType",
      "package": "ui::meta::pure::mapping::modelToModel::test::enumerationMapping::enumToEnum::model",
      "values": [{ "value": "MT1" }, { "value": "MT2" }, { "value": "MT3" }]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Enumeration",
    "path": "ui::meta::pure::mapping::modelToModel::test::enumerationMapping::enumToEnum::model::MiddleTradeType2",
    "content": {
      "_type": "Enumeration",
      "name": "MiddleTradeType2",
      "package": "ui::meta::pure::mapping::modelToModel::test::enumerationMapping::enumToEnum::model",
      "values": [{ "value": "MT21" }, { "value": "MT22" }, { "value": "MT23" }]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::mapping::modelToModel::test::enumerationMapping::enumToEnum::model::SourceProduct",
    "content": {
      "_type": "class",
      "name": "SourceProduct",
      "package": "ui::meta::pure::mapping::modelToModel::test::enumerationMapping::enumToEnum::model",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "id",
          "type": "Integer"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "type",
          "type": "Integer"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::mapping::modelToModel::test::enumerationMapping::enumToEnum::model::SourceProduct2",
    "content": {
      "_type": "class",
      "name": "SourceProduct2",
      "package": "ui::meta::pure::mapping::modelToModel::test::enumerationMapping::enumToEnum::model",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "id",
          "type": "Integer"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "type",
          "type": "Integer"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::mapping::modelToModel::test::enumerationMapping::enumToEnum::model::SourceTrade",
    "content": {
      "_type": "class",
      "name": "SourceTrade",
      "package": "ui::meta::pure::mapping::modelToModel::test::enumerationMapping::enumToEnum::model",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "id",
          "type": "Integer"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "type",
          "type": "Integer"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::mapping::modelToModel::test::enumerationMapping::enumToEnum::model::SourceTrade2",
    "content": {
      "_type": "class",
      "name": "SourceTrade2",
      "package": "ui::meta::pure::mapping::modelToModel::test::enumerationMapping::enumToEnum::model",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "id",
          "type": "Integer"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "type",
          "type": "Integer"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::mapping::modelToModel::test::enumerationMapping::enumToEnum::model::TargetProduct",
    "content": {
      "_type": "class",
      "name": "TargetProduct",
      "package": "ui::meta::pure::mapping::modelToModel::test::enumerationMapping::enumToEnum::model",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "id",
          "type": "Integer"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "type",
          "type": "ui::meta::pure::mapping::modelToModel::test::enumerationMapping::enumToEnum::model::TargetProductType"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Enumeration",
    "path": "ui::meta::pure::mapping::modelToModel::test::enumerationMapping::enumToEnum::model::TargetProductType",
    "content": {
      "_type": "Enumeration",
      "name": "TargetProductType",
      "package": "ui::meta::pure::mapping::modelToModel::test::enumerationMapping::enumToEnum::model",
      "values": [
        { "value": "TP1" },
        { "value": "TP2" },
        { "value": "TP3" },
        { "value": "TP4" }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::mapping::modelToModel::test::enumerationMapping::enumToEnum::model::TargetTrade",
    "content": {
      "_type": "class",
      "name": "TargetTrade",
      "package": "ui::meta::pure::mapping::modelToModel::test::enumerationMapping::enumToEnum::model",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "id",
          "type": "Integer"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "type",
          "type": "ui::meta::pure::mapping::modelToModel::test::enumerationMapping::enumToEnum::model::TargetTradeType"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Enumeration",
    "path": "ui::meta::pure::mapping::modelToModel::test::enumerationMapping::enumToEnum::model::TargetTradeType",
    "content": {
      "_type": "Enumeration",
      "name": "TargetTradeType",
      "package": "ui::meta::pure::mapping::modelToModel::test::enumerationMapping::enumToEnum::model",
      "values": [
        { "value": "TT1" },
        { "value": "TT2" },
        { "value": "TT3" },
        { "value": "TT4" }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Enumeration",
    "path": "ui::meta::pure::mapping::modelToModel::test::enumerationMapping::primitiveTypeToEnum::model::ProductType",
    "content": {
      "_type": "Enumeration",
      "name": "ProductType",
      "package": "ui::meta::pure::mapping::modelToModel::test::enumerationMapping::primitiveTypeToEnum::model",
      "values": [{ "value": "A" }, { "value": "B" }, { "value": "C" }]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::mapping::modelToModel::test::enumerationMapping::primitiveTypeToEnum::model::SourceProduct",
    "content": {
      "_type": "class",
      "name": "SourceProduct",
      "package": "ui::meta::pure::mapping::modelToModel::test::enumerationMapping::primitiveTypeToEnum::model",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "id",
          "type": "Integer"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "type",
          "type": "Integer"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::mapping::modelToModel::test::enumerationMapping::primitiveTypeToEnum::model::SourceProduct2",
    "content": {
      "_type": "class",
      "name": "SourceProduct2",
      "package": "ui::meta::pure::mapping::modelToModel::test::enumerationMapping::primitiveTypeToEnum::model",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "id",
          "type": "Integer"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "type",
          "type": "Integer"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::mapping::modelToModel::test::enumerationMapping::primitiveTypeToEnum::model::SourceTrade",
    "content": {
      "_type": "class",
      "name": "SourceTrade",
      "package": "ui::meta::pure::mapping::modelToModel::test::enumerationMapping::primitiveTypeToEnum::model",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "id",
          "type": "Integer"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "type",
          "type": "String"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::mapping::modelToModel::test::enumerationMapping::primitiveTypeToEnum::model::SourceTrade2",
    "content": {
      "_type": "class",
      "name": "SourceTrade2",
      "package": "ui::meta::pure::mapping::modelToModel::test::enumerationMapping::primitiveTypeToEnum::model",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "id",
          "type": "Integer"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "type",
          "type": "String"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::mapping::modelToModel::test::enumerationMapping::primitiveTypeToEnum::model::TargetProduct",
    "content": {
      "_type": "class",
      "name": "TargetProduct",
      "package": "ui::meta::pure::mapping::modelToModel::test::enumerationMapping::primitiveTypeToEnum::model",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "id",
          "type": "Integer"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "type",
          "type": "ui::meta::pure::mapping::modelToModel::test::enumerationMapping::primitiveTypeToEnum::model::ProductType"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::mapping::modelToModel::test::enumerationMapping::primitiveTypeToEnum::model::TargetTrade",
    "content": {
      "_type": "class",
      "name": "TargetTrade",
      "package": "ui::meta::pure::mapping::modelToModel::test::enumerationMapping::primitiveTypeToEnum::model",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "id",
          "type": "Integer"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "type",
          "type": "ui::meta::pure::mapping::modelToModel::test::enumerationMapping::primitiveTypeToEnum::model::TradeType"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Enumeration",
    "path": "ui::meta::pure::mapping::modelToModel::test::enumerationMapping::primitiveTypeToEnum::model::TradeType",
    "content": {
      "_type": "Enumeration",
      "name": "TradeType",
      "package": "ui::meta::pure::mapping::modelToModel::test::enumerationMapping::primitiveTypeToEnum::model",
      "values": [{ "value": "P" }, { "value": "Q" }, { "value": "R" }]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::mapping::modelToModel::test::groupBy::Product",
    "content": {
      "_type": "class",
      "name": "Product",
      "package": "ui::meta::pure::mapping::modelToModel::test::groupBy",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "name",
          "type": "String"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "price",
          "type": "Integer"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::mapping::modelToModel::test::milestoning::Related",
    "content": {
      "_type": "class",
      "name": "Related",
      "package": "ui::meta::pure::mapping::modelToModel::test::milestoning",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "value",
          "type": "String"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::mapping::modelToModel::test::milestoning::TargetProdWithRelated",
    "content": {
      "_type": "class",
      "name": "TargetProdWithRelated",
      "package": "ui::meta::pure::mapping::modelToModel::test::milestoning",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "name",
          "type": "String"
        },
        {
          "multiplicity": { "lowerBound": 0 },
          "name": "related",
          "type": "ui::meta::pure::mapping::modelToModel::test::milestoning::Related"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::mapping::modelToModel::test::milestoning::TestProduct",
    "content": {
      "_type": "class",
      "name": "TestProduct",
      "package": "ui::meta::pure::mapping::modelToModel::test::milestoning",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "id",
          "type": "Integer"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "name",
          "type": "String"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "type",
          "type": "String"
        }
      ],
      "stereotypes": [
        {
          "profile": "ui::meta::pure::profiles::temporal",
          "value": "businesstemporal"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::mapping::modelToModel::test::shared::dest::Address",
    "content": {
      "_type": "class",
      "name": "Address",
      "package": "ui::meta::pure::mapping::modelToModel::test::shared::dest",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "street",
          "type": "String"
        },
        {
          "multiplicity": { "lowerBound": 0, "upperBound": 1 },
          "name": "extension",
          "type": "ui::meta::pure::mapping::modelToModel::test::shared::dest::AddressExtension"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::mapping::modelToModel::test::shared::dest::AddressExtension",
    "content": {
      "_type": "class",
      "name": "AddressExtension",
      "package": "ui::meta::pure::mapping::modelToModel::test::shared::dest",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "stuff",
          "type": "String"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::mapping::modelToModel::test::shared::dest::Firm",
    "content": {
      "_type": "class",
      "name": "Firm",
      "package": "ui::meta::pure::mapping::modelToModel::test::shared::dest",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "legalName",
          "taggedValues": [
            {
              "tag": {
                "profile": "ui::meta::relational::transform::transform",
                "value": "varCharLength"
              },
              "value": "500"
            }
          ],
          "type": "String"
        },
        {
          "multiplicity": { "lowerBound": 0 },
          "name": "employees",
          "type": "ui::meta::pure::mapping::modelToModel::test::shared::dest::Person"
        },
        {
          "multiplicity": { "lowerBound": 0 },
          "name": "addresses",
          "type": "ui::meta::pure::mapping::modelToModel::test::shared::dest::Address"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "count",
          "type": "Integer"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::mapping::modelToModel::test::shared::dest::FirmEmployee",
    "content": {
      "_type": "class",
      "name": "FirmEmployee",
      "package": "ui::meta::pure::mapping::modelToModel::test::shared::dest",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "firmName",
          "type": "String"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "fullName",
          "type": "String"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::mapping::modelToModel::test::shared::dest::Person",
    "content": {
      "_type": "class",
      "name": "Person",
      "package": "ui::meta::pure::mapping::modelToModel::test::shared::dest",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "firstName",
          "type": "String"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "lastName",
          "type": "String"
        },
        {
          "multiplicity": { "lowerBound": 0 },
          "name": "addresses",
          "type": "ui::meta::pure::mapping::modelToModel::test::shared::dest::Address"
        },
        {
          "multiplicity": { "lowerBound": 0, "upperBound": 1 },
          "name": "firm",
          "type": "ui::meta::pure::mapping::modelToModel::test::shared::dest::Firm"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::mapping::modelToModel::test::shared::dest::Product",
    "content": {
      "_type": "class",
      "name": "Product",
      "package": "ui::meta::pure::mapping::modelToModel::test::shared::dest",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "name",
          "type": "String"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "subProductName",
          "type": "String"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "bondDetailStatus",
          "type": "String"
        },
        {
          "multiplicity": { "lowerBound": 0, "upperBound": 1 },
          "name": "region",
          "type": "String"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::mapping::modelToModel::test::shared::dest::Product2Simple",
    "content": {
      "_type": "class",
      "name": "Product2Simple",
      "package": "ui::meta::pure::mapping::modelToModel::test::shared::dest",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "name",
          "type": "String"
        },
        {
          "multiplicity": { "lowerBound": 0, "upperBound": 1 },
          "name": "region",
          "type": "ui::meta::pure::mapping::modelToModel::test::shared::dest::Region"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Enumeration",
    "path": "ui::meta::pure::mapping::modelToModel::test::shared::dest::Region",
    "content": {
      "_type": "Enumeration",
      "name": "Region",
      "package": "ui::meta::pure::mapping::modelToModel::test::shared::dest",
      "values": [{ "value": "NewYork" }, { "value": "London" }]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Enumeration",
    "path": "ui::meta::pure::mapping::modelToModel::test::shared::dest::Side",
    "content": {
      "_type": "Enumeration",
      "name": "Side",
      "package": "ui::meta::pure::mapping::modelToModel::test::shared::dest",
      "values": [{ "value": "Buy" }, { "value": "Sell" }]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::mapping::modelToModel::test::shared::dest::Trade",
    "content": {
      "_type": "class",
      "name": "Trade",
      "package": "ui::meta::pure::mapping::modelToModel::test::shared::dest",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "side",
          "type": "ui::meta::pure::mapping::modelToModel::test::shared::dest::Side"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "productName",
          "taggedValues": [
            {
              "tag": {
                "profile": "ui::meta::relational::transform::transform",
                "value": "varCharLength"
              },
              "value": "50"
            }
          ],
          "type": "String"
        },
        {
          "multiplicity": { "lowerBound": 0, "upperBound": 1 },
          "name": "productRegion",
          "type": "String"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::mapping::modelToModel::test::shared::dest::Vehicle",
    "content": {
      "_type": "class",
      "name": "Vehicle",
      "package": "ui::meta::pure::mapping::modelToModel::test::shared::dest",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "wheelCount",
          "type": "Integer"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "engine",
          "type": "Boolean"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "roadster",
          "type": "Boolean"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::mapping::modelToModel::test::shared::src::Address",
    "content": {
      "_type": "class",
      "name": "Address",
      "package": "ui::meta::pure::mapping::modelToModel::test::shared::src",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "street",
          "type": "String"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "city",
          "type": "String"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "state",
          "type": "String"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "zipCode",
          "type": "Integer"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::mapping::modelToModel::test::shared::src::Applicant",
    "content": {
      "_type": "class",
      "name": "Applicant",
      "package": "ui::meta::pure::mapping::modelToModel::test::shared::src",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "dateOfBirth",
          "type": "StrictDate"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "previousApplication",
          "type": "ui::meta::pure::mapping::modelToModel::test::shared::src::Application"
        }
      ],
      "superTypes": [
        "ui::meta::pure::mapping::modelToModel::test::shared::src::User"
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::mapping::modelToModel::test::shared::src::Application",
    "content": {
      "_type": "class",
      "name": "Application",
      "package": "ui::meta::pure::mapping::modelToModel::test::shared::src",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "applicant",
          "type": "ui::meta::pure::mapping::modelToModel::test::shared::src::Applicant"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "employee",
          "type": "ui::meta::pure::mapping::modelToModel::test::shared::src::Employee"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "previousEmployeer",
          "type": "ui::meta::pure::mapping::modelToModel::test::shared::src::Employer"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::mapping::modelToModel::test::shared::src::Employee",
    "content": {
      "_type": "class",
      "name": "Employee",
      "package": "ui::meta::pure::mapping::modelToModel::test::shared::src",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "salary",
          "type": "Integer"
        }
      ],
      "superTypes": [
        "ui::meta::pure::mapping::modelToModel::test::shared::src::User"
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::mapping::modelToModel::test::shared::src::Employer",
    "content": {
      "_type": "class",
      "name": "Employer",
      "package": "ui::meta::pure::mapping::modelToModel::test::shared::src",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "name",
          "type": "String"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "address",
          "type": "ui::meta::pure::mapping::modelToModel::test::shared::src::Address"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::mapping::modelToModel::test::shared::src::Member",
    "content": {
      "_type": "class",
      "name": "Member",
      "package": "ui::meta::pure::mapping::modelToModel::test::shared::src",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "memberShipFee",
          "type": "Integer"
        }
      ],
      "superTypes": [
        "ui::meta::pure::mapping::modelToModel::test::shared::src::User"
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::mapping::modelToModel::test::shared::src::Membership",
    "content": {
      "_type": "class",
      "name": "Membership",
      "package": "ui::meta::pure::mapping::modelToModel::test::shared::src",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "products",
          "type": "ui::meta::pure::mapping::modelToModel::test::shared::src::Product"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "member",
          "type": "ui::meta::pure::mapping::modelToModel::test::shared::src::Member"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "startDate",
          "type": "StrictDate"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::mapping::modelToModel::test::shared::src::Product",
    "content": {
      "_type": "class",
      "name": "Product",
      "package": "ui::meta::pure::mapping::modelToModel::test::shared::src",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "instructor",
          "type": "ui::meta::pure::mapping::modelToModel::test::shared::src::Employee"
        },
        {
          "multiplicity": { "lowerBound": 0 },
          "name": "sessions",
          "type": "ui::meta::pure::mapping::modelToModel::test::shared::src::Session"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::mapping::modelToModel::test::shared::src::ProductWithRegion",
    "content": {
      "_type": "class",
      "name": "ProductWithRegion",
      "package": "ui::meta::pure::mapping::modelToModel::test::shared::src",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "region",
          "type": "String"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::mapping::modelToModel::test::shared::src::Session",
    "content": {
      "_type": "class",
      "name": "Session",
      "package": "ui::meta::pure::mapping::modelToModel::test::shared::src",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "location",
          "type": "ui::meta::pure::mapping::modelToModel::test::shared::src::Address"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "date",
          "type": "StrictDate"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "time",
          "type": "Integer"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::mapping::modelToModel::test::shared::src::User",
    "content": {
      "_type": "class",
      "name": "User",
      "package": "ui::meta::pure::mapping::modelToModel::test::shared::src",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "userName",
          "type": "String"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "password",
          "type": "String"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "firstName",
          "type": "String"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "lastName",
          "type": "String"
        },
        {
          "multiplicity": { "lowerBound": 0, "upperBound": 1 },
          "name": "email",
          "type": "String"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "startDate",
          "type": "StrictDate"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "address",
          "type": "ui::meta::pure::mapping::modelToModel::test::shared::src::Address"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::mapping::modelToModel::test::shared::src::_Bicycle",
    "content": {
      "_type": "class",
      "name": "_Bicycle",
      "package": "ui::meta::pure::mapping::modelToModel::test::shared::src",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "roadster",
          "type": "Boolean"
        }
      ],
      "superTypes": [
        "ui::meta::pure::mapping::modelToModel::test::shared::src::_RoadVehicle"
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::mapping::modelToModel::test::shared::src::_Car",
    "content": {
      "_type": "class",
      "name": "_Car",
      "package": "ui::meta::pure::mapping::modelToModel::test::shared::src",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "engine",
          "type": "Boolean"
        }
      ],
      "superTypes": [
        "ui::meta::pure::mapping::modelToModel::test::shared::src::_RoadVehicle"
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::mapping::modelToModel::test::shared::src::_Firm",
    "content": {
      "_type": "class",
      "name": "_Firm",
      "package": "ui::meta::pure::mapping::modelToModel::test::shared::src",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "name",
          "type": "String"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::mapping::modelToModel::test::shared::src::_FirmX",
    "content": {
      "_type": "class",
      "name": "_FirmX",
      "package": "ui::meta::pure::mapping::modelToModel::test::shared::src",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "name",
          "type": "String"
        },
        {
          "multiplicity": { "lowerBound": 0 },
          "name": "pathToEmployeesSet1",
          "type": "ui::meta::pure::mapping::modelToModel::test::shared::src::_PersonSrc1"
        },
        {
          "multiplicity": { "lowerBound": 0 },
          "name": "pathToEmployeesSet2",
          "type": "ui::meta::pure::mapping::modelToModel::test::shared::src::_PersonSrc2"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::mapping::modelToModel::test::shared::src::_Person",
    "content": {
      "_type": "class",
      "name": "_Person",
      "package": "ui::meta::pure::mapping::modelToModel::test::shared::src",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "fullName",
          "type": "String"
        },
        {
          "multiplicity": { "lowerBound": 0 },
          "name": "addresses",
          "type": "ui::meta::pure::mapping::modelToModel::test::shared::dest::Address"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::mapping::modelToModel::test::shared::src::_PersonSrc1",
    "content": {
      "_type": "class",
      "name": "_PersonSrc1",
      "package": "ui::meta::pure::mapping::modelToModel::test::shared::src",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "nameFrom1",
          "type": "String"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::mapping::modelToModel::test::shared::src::_PersonSrc2",
    "content": {
      "_type": "class",
      "name": "_PersonSrc2",
      "package": "ui::meta::pure::mapping::modelToModel::test::shared::src",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "nameFrom2",
          "type": "String"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::mapping::modelToModel::test::shared::src::_Person_Address",
    "content": {
      "_type": "class",
      "name": "_Person_Address",
      "package": "ui::meta::pure::mapping::modelToModel::test::shared::src",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "name",
          "type": "String"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "street",
          "type": "String"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::mapping::modelToModel::test::shared::src::_Product",
    "content": {
      "_type": "class",
      "name": "_Product",
      "package": "ui::meta::pure::mapping::modelToModel::test::shared::src",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "name",
          "type": "String"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "subProductName",
          "type": "String"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "bondDetailStatus",
          "type": "String"
        }
      ],
      "superTypes": [
        "ui::meta::pure::mapping::modelToModel::test::shared::src::ProductWithRegion"
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::mapping::modelToModel::test::shared::src::_Product2",
    "content": {
      "_type": "class",
      "name": "_Product2",
      "package": "ui::meta::pure::mapping::modelToModel::test::shared::src",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "name",
          "type": "String"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "subProductName",
          "type": "String"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "bondDetailStatus",
          "type": "String"
        },
        {
          "multiplicity": { "lowerBound": 0, "upperBound": 1 },
          "name": "region",
          "type": "ui::meta::pure::mapping::modelToModel::test::shared::dest::Region"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::mapping::modelToModel::test::shared::src::_RoadVehicle",
    "content": {
      "_type": "class",
      "name": "_RoadVehicle",
      "package": "ui::meta::pure::mapping::modelToModel::test::shared::src",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "wheelCount",
          "type": "Integer"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::mapping::modelToModel::test::shared::src::_S_Person",
    "content": {
      "_type": "class",
      "name": "_S_Person",
      "package": "ui::meta::pure::mapping::modelToModel::test::shared::src",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "fullName",
          "type": "String"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::type::Class",
    "path": "ui::meta::pure::mapping::modelToModel::test::shared::src::_Trade",
    "content": {
      "_type": "class",
      "name": "_Trade",
      "package": "ui::meta::pure::mapping::modelToModel::test::shared::src",
      "properties": [
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "side",
          "type": "Integer"
        },
        {
          "multiplicity": { "lowerBound": 1, "upperBound": 1 },
          "name": "product",
          "type": "ui::meta::pure::mapping::modelToModel::test::shared::src::_Product"
        }
      ]
    }
  },
  {
    "classifierPath": "meta::pure::mapping::Mapping",
    "path": "ui::meta::pure::mapping::modelToModel::test::shared::src::bobby",
    "content": {
      "_type": "mapping",
      "classMappings": [
        {
          "_type": "pureInstance",
          "class": "ui::meta::pure::mapping::modelToModel::test::shared::src::_Bicycle",
          "id": "ui_meta_pure_mapping_modelToModel_test_shared_src__Bicycle",
          "propertyMappings": [
            {
              "_type": "purePropertyMapping",
              "property": {
                "class": "ui::meta::pure::mapping::modelToModel::test::shared::src::_Bicycle",
                "property": "roadster"
              },
              "source": "ui_meta_pure_mapping_modelToModel_test_shared_src__Bicycle",
              "transform": {
                "_type": "lambda",
                "body": [
                  {
                    "_type": "boolean",
                    "multiplicity": { "lowerBound": 1, "upperBound": 1 },
                    "values": [true]
                  }
                ],
                "parameters": []
              }
            }
          ],
          "root": true,
          "srcClass": "ui::meta::pure::mapping::modelToModel::test::shared::src::Application"
        }
      ],
      "enumerationMappings": [],
      "includedMappings": [],
      "name": "bobby",
      "package": "ui::meta::pure::mapping::modelToModel::test::shared::src",
      "tests": []
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "ui::meta::pure::metamodel::treepath::tests::TPP",
    "content": {
      "_type": "profile",
      "name": "TPP",
      "package": "ui::meta::pure::metamodel::treepath::tests",
      "stereotypes": [
        "Root",
        "ExistingProperty",
        "DerivedProperty",
        "SimpleProperty"
      ],
      "tags": ["name", "description"]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "ui::meta::pure::profiles::CDE",
    "content": {
      "_type": "profile",
      "name": "CDE",
      "package": "ui::meta::pure::profiles",
      "stereotypes": ["Tier1", "Tier2"],
      "tags": []
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "ui::meta::pure::profiles::DataPrivacyClassification",
    "content": {
      "_type": "profile",
      "name": "DataPrivacyClassification",
      "package": "ui::meta::pure::profiles",
      "stereotypes": ["PC0", "PC1", "PC2", "PC3"],
      "tags": []
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "ui::meta::pure::profiles::GraphNode",
    "content": {
      "_type": "profile",
      "name": "GraphNode",
      "package": "ui::meta::pure::profiles",
      "stereotypes": [
        "UseCase",
        "Runtime",
        "PackageMetadata",
        "Service",
        "DomainModel",
        "ExecutableMapping"
      ],
      "tags": []
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "ui::meta::pure::profiles::Lineage",
    "content": {
      "_type": "profile",
      "name": "Lineage",
      "package": "ui::meta::pure::profiles",
      "stereotypes": ["Association"],
      "tags": ["RefinerDatabase"]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "ui::meta::pure::profiles::access",
    "content": {
      "_type": "profile",
      "name": "access",
      "package": "ui::meta::pure::profiles",
      "stereotypes": ["public", "protected", "private", "externalizable"],
      "tags": []
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "ui::meta::pure::profiles::cipher",
    "content": {
      "_type": "profile",
      "name": "cipher",
      "package": "ui::meta::pure::profiles",
      "stereotypes": ["Cipher", "Decipher"],
      "tags": []
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "ui::meta::pure::profiles::devStatus",
    "content": {
      "_type": "profile",
      "name": "devStatus",
      "package": "ui::meta::pure::profiles",
      "stereotypes": ["inProgress"],
      "tags": []
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "ui::meta::pure::profiles::doc",
    "content": {
      "_type": "profile",
      "name": "doc",
      "package": "ui::meta::pure::profiles",
      "stereotypes": ["deprecated"],
      "tags": ["doc", "todo"]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "ui::meta::pure::profiles::equality",
    "content": {
      "_type": "profile",
      "name": "equality",
      "package": "ui::meta::pure::profiles",
      "stereotypes": ["Key"],
      "tags": []
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "ui::meta::pure::profiles::infosec",
    "content": {
      "_type": "profile",
      "name": "infosec",
      "package": "ui::meta::pure::profiles",
      "stereotypes": ["sensitive"],
      "tags": []
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "ui::meta::pure::profiles::milestoning",
    "content": {
      "_type": "profile",
      "name": "milestoning",
      "package": "ui::meta::pure::profiles",
      "stereotypes": [
        "generatedmilestoningproperty",
        "generatedmilestoningdateproperty"
      ],
      "tags": []
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "ui::meta::pure::profiles::report",
    "content": {
      "_type": "profile",
      "name": "report",
      "package": "ui::meta::pure::profiles",
      "stereotypes": [],
      "tags": [
        "regulator",
        "name",
        "mailinglist",
        "group",
        "frequency",
        "direct",
        "regulation",
        "purpose",
        "primaryOwner",
        "secondaryOwner"
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "ui::meta::pure::profiles::tdsLibrary",
    "content": {
      "_type": "profile",
      "name": "tdsLibrary",
      "package": "ui::meta::pure::profiles",
      "stereotypes": ["tds"],
      "tags": []
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "ui::meta::pure::profiles::temporal",
    "content": {
      "_type": "profile",
      "name": "temporal",
      "package": "ui::meta::pure::profiles",
      "stereotypes": ["bitemporal", "businesstemporal", "processingtemporal"],
      "tags": []
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "ui::meta::pure::profiles::temporaryLazyExclusion",
    "content": {
      "_type": "profile",
      "name": "temporaryLazyExclusion",
      "package": "ui::meta::pure::profiles",
      "stereotypes": ["exclude"],
      "tags": []
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "ui::meta::pure::profiles::test",
    "content": {
      "_type": "profile",
      "name": "test",
      "package": "ui::meta::pure::profiles",
      "stereotypes": [
        "Test",
        "BeforePackage",
        "AfterPackage",
        "ToFix",
        "ExcludeLazy"
      ],
      "tags": ["excludePlatform", "sensitiveToStereotype"]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "ui::meta::pure::profiles::typemodifiers",
    "content": {
      "_type": "profile",
      "name": "typemodifiers",
      "package": "ui::meta::pure::profiles",
      "stereotypes": ["abstract"],
      "tags": []
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "ui::meta::pure::quality::model::rule",
    "content": {
      "_type": "profile",
      "name": "rule",
      "package": "ui::meta::pure::quality::model",
      "stereotypes": ["skipTests"],
      "tags": ["rule", "severity", "category", "description", "ignore"]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "ui::meta::pure::service::service",
    "content": {
      "_type": "profile",
      "name": "service",
      "package": "ui::meta::pure::service",
      "stereotypes": ["disableStreaming"],
      "tags": ["contentType", "contentDisposition", "url", "paramsExample"]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "ui::meta::pure::transition::secdiv::store::runtime::SystemAttribute",
    "content": {
      "_type": "profile",
      "name": "SystemAttribute",
      "package": "ui::meta::pure::transition::secdiv::store::runtime",
      "stereotypes": ["hidden"],
      "tags": []
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "ui::meta::pure::versioning::versioning",
    "content": {
      "_type": "profile",
      "name": "versioning",
      "package": "ui::meta::pure::versioning",
      "stereotypes": [],
      "tags": ["identifierSource"]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "ui::meta::relational::transform::transform",
    "content": {
      "_type": "profile",
      "name": "transform",
      "package": "ui::meta::relational::transform",
      "stereotypes": ["tinyInteger", "bigInteger"],
      "tags": ["varCharLength"]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "ui::meta::up::up",
    "content": {
      "_type": "profile",
      "name": "up",
      "package": "ui::meta::up",
      "stereotypes": [
        "indexed",
        "optimisticallyLocked",
        "primaryKey",
        "service",
        "read",
        "create",
        "update",
        "delete",
        "upsert",
        "fullSync",
        "bulkUpsert",
        "stateMachine",
        "versioned",
        "wide",
        "derived",
        "createdByAuditProperty",
        "updatedByAuditProperty",
        "createdDateAuditProperty",
        "auditIdentity",
        "auditIdentityKey",
        "nonPersistent",
        "watermarked",
        "staged"
      ],
      "tags": [
        "associationExpression",
        "authorizationExpression",
        "databaseTable",
        "databaseColumn",
        "processingTemporalFromColumn",
        "processingTemporalToColumn",
        "businessTemporalFromColumn",
        "businessTemporalToColumn",
        "timezoneConversion",
        "processingTemporalTimezoneConversion",
        "businessTemporalTimezoneConversion",
        "processingTemporalToIsInclusive",
        "businessTemporalToIsInclusive",
        "processingTemporalInfinityDate",
        "businessTemporalInfinityDate",
        "processingTemporalDefaultIfNotSpecified",
        "includeAuditProperties",
        "auditPropertyTimezoneConversion",
        "primaryKeyStrategy",
        "primaryKeySimulatedSequenceName",
        "defaultValue",
        "initialValue",
        "maxLength",
        "relationshipType",
        "foreignKeyOwner",
        "serviceInterceptorClass",
        "tree",
        "unique",
        "uniquelyIndexed",
        "nonUniquelyIndexed",
        "bulkUploadUniqueKey",
        "qualifiedExpression",
        "nonPersistentDataLoaderClass",
        "orderBy",
        "watermarkName",
        "watermarkProvider",
        "numericPrecision",
        "trimString"
      ]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "ui::meta::xml::xml",
    "content": {
      "_type": "profile",
      "name": "xml",
      "package": "ui::meta::xml",
      "stereotypes": ["attribute", "extendedPrimitive"],
      "tags": []
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::extension::Profile",
    "path": "ui::meta::xsd::Xsd",
    "content": {
      "_type": "profile",
      "name": "Xsd",
      "package": "ui::meta::xsd",
      "stereotypes": [],
      "tags": ["originalValue"]
    }
  },
  {
    "classifierPath": "meta::pure::metamodel::diagram::Diagram",
    "path": "ui::testDiagram",
    "content": {
      "_type": "diagram",
      "classViews": [
        {
          "class": "ui::mapping::editor::domain::Human",
          "id": "06c2b45e-25d5-4e6c-aba9-8fc985958927",
          "position": { "x": 578.9999961853027, "y": 224.98577880859375 },
          "rectangle": { "height": 55, "width": 112.8984375 }
        },
        {
          "class": "ui::mapping::editor::domain::Something",
          "id": "abe13f41-8b54-4013-98ea-7a8ea2e20ca9",
          "position": { "x": 846.9999961853027, "y": 339.98577880859375 },
          "rectangle": { "height": 55, "width": 98.86376953125 }
        },
        {
          "class": "ui::mapping::editor::domain::Anyone",
          "id": "72b5ba37-b5ac-41d1-ada5-cfe132542bc7",
          "position": { "x": 314.99999618530273, "y": 387.98577880859375 },
          "rectangle": { "height": 67, "width": 98.86376953125 }
        },
        {
          "class": "ui::mapping::editor::domain::Other",
          "id": "2ce40294-a427-4833-b3f7-646cdbe85adb",
          "position": { "x": 546.9318771362305, "y": 622.4715576171875 },
          "rectangle": { "height": 31, "width": 52.00390625 }
        }
      ],
      "generalizationViews": [
        {
          "line": {
            "points": [
              { "x": 364.43188095092773, "y": 421.48577880859375 },
              { "x": 635.4492149353027, "y": 252.48577880859375 }
            ]
          },
          "sourceView": "72b5ba37-b5ac-41d1-ada5-cfe132542bc7",
          "targetView": "06c2b45e-25d5-4e6c-aba9-8fc985958927"
        },
        {
          "line": {
            "points": [
              { "x": 896.4318809509277, "y": 367.48577880859375 },
              { "x": 635.4492149353027, "y": 252.48577880859375 }
            ]
          },
          "sourceView": "abe13f41-8b54-4013-98ea-7a8ea2e20ca9",
          "targetView": "06c2b45e-25d5-4e6c-aba9-8fc985958927"
        }
      ],
      "name": "testDiagram",
      "package": "ui",
      "propertyViews": [
        {
          "line": {
            "points": [
              { "x": 572.9338302612305, "y": 637.9715576171875 },
              { "x": 364.43188095092773, "y": 421.48577880859375 }
            ]
          },
          "property": {
            "class": "ui::mapping::editor::domain::Other",
            "property": "otherFriend"
          },
          "sourceView": "2ce40294-a427-4833-b3f7-646cdbe85adb",
          "targetView": "72b5ba37-b5ac-41d1-ada5-cfe132542bc7"
        },
        {
          "line": {
            "points": [
              { "x": 572.9338302612305, "y": 637.9715576171875 },
              { "x": 694.5517029224175, "y": 549.2286682128906 },
              { "x": 896.4318809509277, "y": 367.48577880859375 }
            ]
          },
          "property": {
            "class": "ui::mapping::editor::domain::Other",
            "property": "friend"
          },
          "sourceView": "2ce40294-a427-4833-b3f7-646cdbe85adb",
          "targetView": "abe13f41-8b54-4013-98ea-7a8ea2e20ca9"
        }
      ]
    }
  }
]
