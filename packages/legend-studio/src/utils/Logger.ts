/**
 * Copyright (c) 2020-present, Goldman Sachs
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

export enum CORE_LOG_EVENT {
  // APPLICATION
  APPLICATION_LOADED = 'APPLICATION_LOADED',
  APPLICATION_LOAD_FAILED = 'APPLICATION_LOAD_FAILED',
  // CONFIG
  CONFIG_CONFIGURATION_FETCHING_PROBLEM = 'CONFIG_CONFIGURATION_FETCHING_PROBLEM',
  CONFIG_VERSION_INFO_FETCHING_PROBLEM = 'CONFIG_VERSION_INFO_FETCHING_PROBLEM',
  CONFIG_USER_ID_FETCHING_PROBLEM = 'CONFIG_USER_ID_FETCHING_PROBLEM',
  CONFIG_UNKNOWN_FEATURE_FLAG_PROBLEM = 'CONFIG_UNKNOWN_FEATURE_FLAG_PROBLEM',
  // GRAPH
  GRAPH_PROBLEM = 'GRAPH_PROBLEM',
  GRAPH_SYSTEM_BUILT = 'GRAPH_SYSTEM_BUILT',
  GRAPH_DEPENDENCIES_PREPROCESSED = 'GRAPH_DEPENDENCIES_PREPROCESSED',
  GRAPH_DEPENDENCIES_PROCESSED = 'GRAPH_DEPENDENCIES_PROCESSED',
  GRAPH_DEPENDENCIES_BUILT = 'GRAPH_DEPENDENCIES_BUILT',
  GRAPH_GENERATIONS_START = 'GRAPH_GENERATIONS_START',
  GRAPH_GENERATIONS_BUILT = 'GRAPH_GENERATIONS_BUILT',
  GRAPH_ENTITIES_FETCHED = 'GRAPH_ENTITIES_FETCHED',
  GRAPH_ENTITIES_GENERATED = 'GRAPH_ENTITIES_GENERATED',
  GRAPH_BUILD_STARTED = 'GRAPH_BUILD_STARTED',
  GRAPH_BUILD_INITIALIZED = 'GRAPH_BUILD_INITIALIZED',
  GRAPH_BUILD_DATA_MODEL_PARSED = 'GRAPH_BUILD_DATA_MODEL_PARSED',
  GRAPH_HASHES_PREPROCESSED = 'GRAPH_HASHES_PREPROCESSED',
  GRAPH_HASHES_DISPOSED = 'GRAPH_HASHES_DISPOSED',
  GRAPH_BUILT = 'GRAPH_BUILT',
  GRAPH_COMPILED = 'GRAPH_COMPILED',
  GRAPH_BUILD_FAILED = 'GRAPH_BUILD_FAILED',
  GRAPH_REBUILDING = 'GRAPH_REBUILDING',
  GRAPH_REBUILT = 'GRAPH_REBUILT',
  GRAPH_MODEL_TO_GRAMMAR_TRANSFORMED = 'GRAPH_MODEL_TO_GRAMMAR_TRANSFORMED',
  GRAPH_GRAMMAR_TO_MODEL_TRANSFORMED = 'GRAPH_GRAMMAR_TO_MODEL_TRANSFORMED',
  GRAPH_META_MODEL_TO_PROTOCOL_TRANSFORMED = 'GRAPH_META_MODEL_TO_PROTOCOL_TRANSFORMED',
  GRAPH_COMPILE_CONTEXT_COLLECTED = 'GRAPH_COMPILE_CONTEXT_COLLECTED',
  GRAPH_PROTOCOL_SERIALIZED = 'GRAPH_PROTOCOL_SERIALIZED',
  GRAPH_CHANGES_DETECTED = 'GRAPH_CHANGES_DETECTED',
  GRAPH_INITIALIZED = 'GRAPH_INITIALIZED',
  GRAPH_HASH_SNAPSHOTED = 'GRAPH_HASH_SNAPSHOTED',
  GRAPH_BUILD_ELEMENTS_INITIALIZED_AND_INDEXED = 'GRAPH_BUILD_ELEMENTS_INITIALIZED_AND_INDEXED',
  GRAPH_BUILD_SECTION_INDICES_BUILT = 'GRAPH_BUILD_SECTION_INDICES_BUILT',
  GRAPH_BUILD_DOMAIN_MODELS_BUILT = 'GRAPH_BUILD_DOMAIN_MODELS_BUILT',
  GRAPH_BUILD_STORES_BUILT = 'GRAPH_BUILD_STORES_BUILT',
  GRAPH_BUILD_MAPPINGS_BUILT = 'GRAPH_BUILD_MAPPINGS_BUILT',
  GRAPH_BUILD_CONNECTIONS_AND_RUNTIMES_BUILT = 'GRAPH_BUILD_CONNECTIONS_AND_RUNTIMES_BUILT',
  GRAPH_BUILD_RUNTIMES_BUILT = 'GRAPH_BUILD_RUNTIMES_BUILT',
  GRAPH_BUILD_DIAGRAMS_BUILT = 'GRAPH_BUILD_DIAGRAMS_BUILT',
  GRAPH_BUILD_FILE_GENERATIONS_BUILT = 'GRAPH_BUILD_FILE_GENERATIONS_BUILT',
  GRAPH_BUILD_GENERATION_TREE_BUILT = 'GRAPH_BUILD_GENERATION_TREE_BUILT',
  GRAPH_BUILD_OTHER_ELEMENTS_BUILT = 'GRAPH_BUILD_OTHER_ELEMENTS_BUILT',
  GRAPH_BUILD_SERVICES_BUILT = 'GRAPH_BUILD_SERVICES_BUILT',
  // CHANGE DETECTION
  CHANGE_DETECTION_RESTARTED = 'CHANGE_DETECTION_RESTARTED',
  CHANGE_DETECTION_LOCAL_HASHES_INDEX_BUILT = 'CHANGE_DETECTION_LOCAL_HASHES_INDEX_BUILT',
  CHANGE_DETECTION_WORKSPACE_HASHES_INDEX_BUILT = 'CHANGE_DETECTION_WORKSPACE_HASHES_INDEX_BUILT',
  CHANGE_DETECTION_PROJECT_LATEST_HASHES_INDEX_BUILT = 'CHANGE_DETECTION_PROJECT_LATEST_HASHES_INDEX_BUILT',
  CHANGE_DETECTION_WORKSPACE_UPDATE_CONFLICTS_COMPUTED = 'CHANGE_DETECTION_WORKSPACE_UPDATE_CONFLICTS_COMPUTED',
  CHANGE_DETECTION_CONFLICT_RESOLUTION_CONFLICTS_COMPUTED = 'CHANGE_DETECTION_CONFLICT_RESOLUTION_CONFLICTS_COMPUTED',
  // SDLC
  SDLC_UPDATE_WORKSPACE = 'SDLC_UPDATE_WORKSPACE',
  SDLC_SYNC_WORKSPACE = 'SDLC_SYNC_WORKSPACE',
  // GENERATION
  GENERATED_MODEL = 'GENERATED_MODEL',
  // PROBLEM
  SERVICE_REGISTRATION_PROBLEM = 'SERVICE_REGISTRATION_PROBLEM',
  GENERATION_PROBLEM = 'GENERATION_PROBLEM',
  MODEL_LOADER_PROBLEM = 'MODEL_LOADER_PROBLEM',
  PROJECT_DEPENDENCY_PROBLEM = 'PROJECT_DEPENDENCY_PROBLEM',
  EXECUTION_PROBLEM = 'EXECUTION_PROBLEM',
  COMPILATION_PROBLEM = 'COMPILATION_PROBLEM',
  PARSING_PROBLEM = 'PARSING_PROBLEM',
  CHANGE_DETECTION_PROBLEM = 'CHANGE_DETECTION_PROBLEM',
  SETUP_PROBLEM = 'SETUP_PROBLEM',
  SDLC_PROBLEM = 'SDLC_PROBLEM',
  CODE_GENERATION_PROBLEM = 'CODE_GENERATION_PROBLEM',
  PACKAGE_TREE_PROBLEM = 'PACKAGE_TREE_PROBLEM',
  SERVICE_TEST_PROBLEM = 'SERVICE_TEST_PROBLEM',
  UNSUPPORTED_ENTITY_DETECTED = 'UNSUPPORTED_ENTITY_DETECTED',
  ILLEGAL_APPLICATION_STATE_OCCURRED = 'ILLEGAL_APPLICATION_STATE_OCCURRED',
  // OTHER
  EDITOR_FONT_LOADED = 'EDITOR_FONT_LOADED',
  DEVELOPMENT_MODE = '[DEVELOPMENT]',
  NONE = 'NONE',
}

export const SKIP_LOGGING_INFO = Symbol('SKIP_LOGGING_INFO');

// We use numeric enum here for because we want to do comparison
// In order to retrieve the name of the enum we can do reverse mapping, for example: LogLevel[LogLevel.INFO] -> INFO
// https://www.typescriptlang.org/docs/handbook/enums.html#reverse-mappings
export enum LOG_LEVEL {
  DEBUG = 1,
  INFO,
  WARN,
  ERROR,
  SILENT,
}

export class Logger {
  level: LOG_LEVEL = LOG_LEVEL.DEBUG;
  previousLevelBeforeMuting: LOG_LEVEL = LOG_LEVEL.DEBUG;

  setLogLevel = (level: LOG_LEVEL): void => {
    this.level = level;
  };
  /**
   * Mute logging, if a level is specified, mute all event of lower severity than that level
   */
  mute = (level?: LOG_LEVEL): void => {
    this.previousLevelBeforeMuting = this.level;
    this.level = level ?? LOG_LEVEL.SILENT;
  };
  unmute = (): void => {
    this.level = this.previousLevelBeforeMuting;
  };
  runInSilent = (fn: Function, level?: LOG_LEVEL): void => {
    this.mute(level);
    fn();
    this.unmute();
  };

  debug = (eventType: CORE_LOG_EVENT, ...info: unknown[]): void =>
    this.level > LOG_LEVEL.DEBUG
      ? undefined
      : // eslint-disable-next-line no-console
        console.debug(
          eventType !== CORE_LOG_EVENT.NONE
            ? info.filter((i) => i !== SKIP_LOGGING_INFO).length
              ? `${eventType}:`
              : eventType
            : '',
          ...info.filter((i) => i !== SKIP_LOGGING_INFO),
        );

  info = (eventType: CORE_LOG_EVENT, ...info: unknown[]): void =>
    this.level > LOG_LEVEL.INFO
      ? undefined
      : // eslint-disable-next-line no-console
        console.info(
          eventType !== CORE_LOG_EVENT.NONE
            ? info.filter((i) => i !== SKIP_LOGGING_INFO).length
              ? `${eventType}:`
              : eventType
            : '',
          ...info.filter((i) => i !== SKIP_LOGGING_INFO),
        );

  warn = (eventType: CORE_LOG_EVENT, ...info: unknown[]): void =>
    this.level > LOG_LEVEL.WARN
      ? undefined
      : // eslint-disable-next-line no-console
        console.warn(
          eventType !== CORE_LOG_EVENT.NONE
            ? info.filter((i) => i !== SKIP_LOGGING_INFO).length
              ? `${eventType}:`
              : eventType
            : '',
          ...info.filter((i) => i !== SKIP_LOGGING_INFO),
        );

  error = (eventType: CORE_LOG_EVENT, ...info: unknown[]): void =>
    this.level > LOG_LEVEL.ERROR
      ? undefined
      : // eslint-disable-next-line no-console
        console.error(
          eventType !== CORE_LOG_EVENT.NONE
            ? info.filter((i) => i !== SKIP_LOGGING_INFO).length
              ? `${eventType}:`
              : eventType
            : '',
          ...info.filter((i) => i !== SKIP_LOGGING_INFO),
        );
}
