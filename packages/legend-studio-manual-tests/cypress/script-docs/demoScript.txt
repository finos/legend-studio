0. Create project and workspace -> explain the flow
1. (Class) ADD -- Class Person
2. ADD -- Class Firm:
        DND -- employees (*)
3. HACKERMODE -- add legalName to Firm
4. Show different generation views of other (e.g. Avro)
5. (Profile) Talk about Profile -> extension to the model:
6. ADD -- Profile Extension
        Tag doc -> DND this to Person tagged values
        Stereotype important -> DND this to Person stereotypes

/*
Class Person should have properties `firstName` and `lastName`, stereotype
Class LegalEntity empty
Class Firm should have properties `employees`, `legalName`, `incType`, derived props `firstEmployee`, constraint size,
super type LegalEntity
*/

7. (SuperType) ADD -- LegalEntity (first create such a class) and set as parent of Firm
8. Observe the diagram live update
// Beyond are stuffs that other UML tools don't quite offer
9. (Constraint) ADD -- a constraint to Firm (employees size > 2)
        size: $this.employees->size() > 2
10. (Derived Property) ADD -- a derived property (note: this is structural derivation)
        firstEmployee: $this.employees->first()
        // F9 -> compile
11. (Diagram) ADD -- Diagram Diagram
        DND Firm, Person, LegalEntity
        Hover property press 'a' -> move property out
        Click on Person and add 'firstName' 'lastName'
// Commiting a review not in Int; after creating review click on `review detail` and check if they match no. of changes, etc.
// Mapping and SDLC
12. (SDLC) Basic saving, creating a review -> send it to friend -> happy path
/*
In `other` create class NPerson with `fullName`
Enumeration IncType with values `LLC` and `CORP`
Class NFirm with `name`, `nEmployees` (NPerson type), `incType` (IncType type), constraint for name starting with `GS`
*/
13. (Mapping)
	Create one file `MyMapping`
        add package `other`
        Map Person to NPerson -> from source Person DND firstName and lastName to create fullName property
        Execute -> explain that it is generating and compiling Java code -> show plan
        Add NEmp to NFirm
        then map Firm to NFirm -> from source DND incType, legalName, employees
        execute -> should show source contraint. add 2 more employees to source Person (also change incType to string)
        make target constraint defect
        execute -> show defects in execution result
        add Enumeration `incType`
        add enum `incType` to NFirm
        add string `incType` to Firm
        make enumerationMapping for `incType` string to enum -> add enums LLC and CORP with two strings each (`LLC`, `Llc`, `Corp`, `Corporation`)
        add to Firm Mapping
        execute and show the enum
        (show the plan as well)
        save to a test -> run the test

14. SDLC
        local changes
        workspace changes
        conflict?
