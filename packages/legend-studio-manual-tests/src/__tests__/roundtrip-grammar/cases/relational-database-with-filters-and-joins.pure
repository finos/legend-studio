###Relational
Database store::relational::tests::dbIncWithStoreFilter
(
  Table personTable
  (
    ID INTEGER PRIMARY KEY,
    FIRSTNAME VARCHAR(200),
    LASTNAME VARCHAR(200),
    AGE INTEGER,
    ADDRESSID INTEGER,
    FIRMID INTEGER,
    MANAGERID INTEGER
  )

  View PersonView
  (
    ~filter PersonFilter
    ID: personTable.ID PRIMARY KEY,
    FIRSTNAME: personTable.FIRSTNAME,
    LASTNAME: personTable.LASTNAME,
    AGE: personTable.AGE
  )

  Filter PersonFilter(personTable.AGE > 110)
  Filter personMappingFilter(PersonView.AGE < 200)
)

Database model::realtional::test::PersonDB
(
  Schema PersonSchema
  (
    Table PersonTable
    (
      milestoning
      (
        processing(PROCESSING_IN = in_z, PROCESSING_OUT = out_z, OUT_IS_INCLUSIVE = true, INFINITY_DATE = %2015-10-26T00:00:00),
        business(BUS_FROM = from_z, BUS_THRU = thru_z, INFINITY_DATE = %9999-12-31T00:00:00.0000)
      )

      ID INTEGER PRIMARY KEY,
      NAME VARCHAR(200),
      in_z DATE,
      out_z DATE,
      from_z DATE,
      thru_z DATE
    )
  )
)

Database _meta::relational::tests::dbInc
(
  Schema productSchema
  (
    Table productTable
    (
      ID INTEGER PRIMARY KEY,
      NAME VARCHAR(200)
    )
  )

  Table personTable
  (
    ID INTEGER PRIMARY KEY,
    FIRSTNAME VARCHAR(200),
    LASTNAME VARCHAR(200),
    AGE INTEGER,
    ADDRESSID INTEGER,
    FIRMID INTEGER,
    MANAGERID INTEGER
  )
  Table PersonTableExtension
  (
    ID INTEGER PRIMARY KEY,
    FIRSTNAME VARCHAR(200),
    LASTNAME VARCHAR(200),
    AGE INTEGER,
    ADDRESSID INTEGER,
    FIRMID INTEGER,
    MANAGERID INTEGER,
    birthDate DATE
  )
  Table differentPersonTable
  (
    ID INTEGER PRIMARY KEY,
    FIRSTNAME VARCHAR(200),
    LASTNAME VARCHAR(200),
    AGE INTEGER,
    ADDRESSID INTEGER,
    FIRMID INTEGER,
    MANAGERID INTEGER
  )
  Table firmTable
  (
    ID INTEGER PRIMARY KEY,
    LEGALNAME VARCHAR(200),
    ADDRESSID INTEGER,
    CEOID INTEGER
  )
  Table firmExtensionTable
  (
    firmId INTEGER PRIMARY KEY,
    legalName VARCHAR(200),
    establishedDate DATE
  )
  Table otherFirmTable
  (
    ID INTEGER PRIMARY KEY,
    LEGALNAME VARCHAR(200),
    ADDRESSID INTEGER
  )
  Table addressTable
  (
    ID INTEGER PRIMARY KEY,
    TYPE INTEGER,
    NAME VARCHAR(200),
    STREET VARCHAR(100),
    COMMENTS VARCHAR(100)
  )
  Table locationTable
  (
    ID INTEGER PRIMARY KEY,
    PERSONID INTEGER,
    PLACE VARCHAR(200),
    date DATE
  )
  Table placeOfInterestTable
  (
    ID INTEGER PRIMARY KEY,
    locationID INTEGER PRIMARY KEY,
    NAME VARCHAR(200)
  )

  View PersonFirmView
  (
    PERSON_ID: personTable.ID PRIMARY KEY,
    lastName: personTable.LASTNAME,
    firm_name: [_meta::relational::tests::dbInc]@Firm_Person | firmTable.LEGALNAME
  )
  View FirstNameAddress
  (
    ~distinct
    firstName: personTable.FIRSTNAME PRIMARY KEY,
    address: [_meta::relational::tests::dbInc]@Address_Person | addressTable.NAME PRIMARY KEY
  )
  View personViewWithGroupBy
  (
    ~groupBy
    (
      personTable.ID
    )
    id: personTable.ID PRIMARY KEY,
    maxage: max(personTable.AGE)
  )
  View PersonViewWithDistinct
  (
    ~distinct
    id: [_meta::relational::tests::dbInc]@PersonWithPersonView | personTable.ID PRIMARY KEY,
    firstName: [_meta::relational::tests::dbInc]@PersonWithPersonView | personTable.FIRSTNAME,
    lastName: [_meta::relational::tests::dbInc]@PersonWithPersonView | personTable.LASTNAME,
    firmId: [_meta::relational::tests::dbInc]@PersonWithPersonView | personTable.FIRMID
  )

  Join personViewWithFirmTable(firmTable.ID = PersonViewWithDistinct.firmId)
  Join PersonWithPersonView(personTable.ID = personViewWithGroupBy.id and personTable.AGE = personViewWithGroupBy.maxage)
  Join Address_Firm(addressTable.ID = firmTable.ADDRESSID)
  Join Address_Person(addressTable.ID = personTable.ADDRESSID)
  Join Firm_Ceo(firmTable.CEOID = personTable.ID)
  Join Firm_Person(firmTable.ID = personTable.FIRMID)
  Join Firm_Person1(firmTable.ID = personTable.FIRMID and firmTable.LEGALNAME = 'Firm X')
  Join Firm_Person2(firmTable.ID = personTable.FIRMID and personTable.FIRSTNAME = 'Peter')
  Join FirmExtension_PersonExtension(firmExtensionTable.firmId = PersonTableExtension.FIRMID)
  Join Person_Location(personTable.ID = locationTable.PERSONID)
  Join Person_Manager(personTable.MANAGERID = {target}.ID)
  Join location_PlaceOfInterest(locationTable.ID = placeOfInterestTable.locationID)
  Join Person_OtherFirm(personTable.FIRMID = otherFirmTable.ID)

  Filter FirmXFilter(firmTable.LEGALNAME = 'Firm X')
  Filter FirmBFilter(firmTable.LEGALNAME = 'Firm B')
)

Database _meta::relational::tests::db
(
  include _meta::relational::tests::dbInc

  Schema productSchema
  (
    Table synonymTable
    (
      ID INTEGER PRIMARY KEY,
      PRODID INTEGER,
      TYPE VARCHAR(200),
      NAME VARCHAR(200)
    )
  )

  Table interactionTable
  (
    ID INTEGER PRIMARY KEY,
    sourceId INTEGER,
    targetId INTEGER,
    time INTEGER,
    active VARCHAR(1)
  )
  Table tradeTable
  (
    ID INTEGER PRIMARY KEY,
    prodId INTEGER,
    accountID INTEGER,
    quantity FLOAT,
    tradeDate DATE,
    settlementDateTime TIMESTAMP
  )
  Table accountTable
  (
    ID INTEGER PRIMARY KEY,
    name VARCHAR(200),
    createDate DATE
  )
  Table tradeEventTable
  (
    EVENT_ID INTEGER PRIMARY KEY,
    trade_id INTEGER,
    eventType VARCHAR(10),
    eventDate DATE,
    person_id INTEGER
  )
  Table orderTable
  (
    ID INTEGER PRIMARY KEY,
    prodId INTEGER,
    accountID INTEGER,
    quantity INTEGER,
    orderDate DATE,
    settlementDateTime TIMESTAMP
  )
  Table orderPnlTable
  (
    ORDER_ID INTEGER PRIMARY KEY,
    pnl FLOAT,
    from_z DATE,
    thru_z DATE
  )
  Table salesPersonTable
  (
    PERSON_ID INTEGER PRIMARY KEY,
    ACCOUNT_ID INTEGER PRIMARY KEY,
    NAME VARCHAR(200),
    from_z DATE,
    thru_z DATE
  )
  Table otherNamesTable
  (
    PERSON_ID INTEGER,
    OTHER_NAME VARCHAR(200)
  )
  Table tableWithQuotedColumns
  (
    ID INTEGER PRIMARY KEY,
    "FIRST NAME" VARCHAR(200) PRIMARY KEY,
    "LAST NAME" VARCHAR(200) PRIMARY KEY,
    "1columnStartsWithNumber" VARCHAR(200)
  )

  View interactionViewMaxTime
  (
    ~filter PositiveInteractionTimeFilter
    ~groupBy
    (
      interactionTable.sourceId,
      interactionTable.targetId
    )
    sourceId: interactionTable.sourceId,
    targetId: interactionTable.targetId,
    maxTime: max(interactionTable.time)
  )
  View tradeEventViewMaxTradeEventDate
  (
    ~groupBy
    (
      tradeEventTable.trade_id
    )
    trade_id: tradeEventTable.trade_id,
    maxTradeEventDate: max(tradeEventTable.eventDate)
  )
  View orderPnlView
  (
    ~filter NonNegativePnlFilter
    ~distinct
    ORDER_ID: orderPnlTable.ORDER_ID PRIMARY KEY,
    pnl: orderPnlTable.pnl,
    accountId: [_meta::relational::tests::db]@OrderPnlTable_Order > [_meta::relational::tests::db]@Order_Account | accountTable.ID,
    supportContact: [_meta::relational::tests::db]@OrderPnlTable_Order > [_meta::relational::tests::db]@Order_SalesPerson | salesPersonTable.NAME,
    supportContactId: [_meta::relational::tests::db]@OrderPnlTable_Order > [_meta::relational::tests::db]@Order_SalesPerson | salesPersonTable.PERSON_ID
  )
  View orderPnlViewOnView
  (
    ORDER_ID: orderPnlView.ORDER_ID PRIMARY KEY,
    pnl: orderPnlView.pnl
  )
  View orderNegativePnlView
  (
    ~filter LessThanEqualZeroPnlFilter
    ~distinct
    ORDER_ID: orderPnlTable.ORDER_ID PRIMARY KEY,
    pnl: orderPnlTable.pnl,
    accountId: [_meta::relational::tests::db]@OrderPnlTable_Order > [_meta::relational::tests::db]@Order_Account | accountTable.ID,
    supportContact: [_meta::relational::tests::db]@OrderPnlTable_Order > [_meta::relational::tests::db]@Order_SalesPerson | salesPersonTable.NAME,
    supportContactId: [_meta::relational::tests::db]@OrderPnlTable_Order > [_meta::relational::tests::db]@Order_SalesPerson | salesPersonTable.PERSON_ID
  )
  View orderNegativePnlViewOnView
  (
    ORDER_ID: orderNegativePnlView.ORDER_ID PRIMARY KEY,
    pnl: orderNegativePnlView.pnl
  )
  View accountOrderPnlView
  (
    ~groupBy
    (
      orderTable.accountID
    )
    accountId: orderTable.accountID PRIMARY KEY,
    orderPnl: sum([_meta::relational::tests::db]@OrderPnlTable_Order | orderPnlTable.pnl)
  )

  Join Product_Synonym(productSchema.synonymTable.PRODID = productSchema.productTable.ID)
  Join Trade_Product(tradeTable.prodId = productSchema.productTable.ID)
  Join Trade_Account(tradeTable.accountID = accountTable.ID)
  Join Interaction_Source(interactionTable.sourceId = personTable.ID)
  Join Interaction_Target(interactionTable.targetId = personTable.ID)
  Join InteractionTable_InteractionViewMaxTime(interactionTable.sourceId = interactionViewMaxTime.sourceId and interactionTable.targetId = interactionViewMaxTime.targetId)
  Join Trade_TradeEvent(tradeTable.ID = tradeEventTable.trade_id)
  Join Trade_TradeEventViewMaxTradeEventDate(tradeTable.ID = tradeEventViewMaxTradeEventDate.trade_id)
  Join TradeEvent_Person(tradeEventTable.person_id = personTable.ID)
  Join Interaction_Interaction(interactionTable.sourceId = {target}.sourceId and interactionTable.targetId = {target}.targetId)
  Join Order_SalesPerson(orderTable.accountID = salesPersonTable.ACCOUNT_ID)
  Join Order_Account(orderTable.accountID = accountTable.ID)
  Join OrderPnlView_Order(orderPnlView.ORDER_ID = orderTable.ID)
  Join OrderPnlViewOnView_Order(orderPnlViewOnView.ORDER_ID = orderTable.ID)
  Join OrderNetativePnlView_Order(orderNegativePnlView.ORDER_ID = orderTable.ID)
  Join OrderNegativePnlViewOnView_Order(orderNegativePnlViewOnView.ORDER_ID = orderTable.ID)
  Join OrderPnlView_Person(orderPnlView.supportContactId = personTable.ID)
  Join SalesPerson_PersonView(salesPersonTable.PERSON_ID = PersonFirmView.PERSON_ID)
  Join OrderPnlTable_Order(orderPnlTable.ORDER_ID = orderTable.ID)
  Join AccountPnlView_Account(accountOrderPnlView.accountId = accountTable.ID)
  Join Person_OtherNames(personTable.ID = otherNamesTable.PERSON_ID)

  Filter PositiveInteractionTimeFilter(interactionTable.time > 0)
  Filter ProductSynonymFilter(productSchema.synonymTable.ID != 1)
  Filter NonNegativePnlFilter(orderPnlTable.pnl > 0)
  Filter LessThanEqualZeroPnlFilter(orderPnlTable.pnl <= 0)
)
