[
  {
    "path": "demo::externalFormat::flatdata::allTypes::models::Gender",
    "content": {
      "_type": "Enumeration",
      "name": "Gender",
      "package": "demo::externalFormat::flatdata::allTypes::models",
      "values": [
        {
          "value": "MALE"
        },
        {
          "value": "FEMALE"
        },
        {
          "value": "OTHER"
        }
      ]
    },
    "classifierPath": "meta::pure::metamodel::type::Enumeration"
  },
  {
    "path": "demo::externalFormat::flatdata::allTypes::models::Person",
    "content": {
      "_type": "class",
      "name": "Person",
      "package": "demo::externalFormat::flatdata::allTypes::models",
      "properties": [
        {
          "multiplicity": {
            "lowerBound": 1,
            "upperBound": 1
          },
          "name": "name",
          "type": "String"
        },
        {
          "multiplicity": {
            "lowerBound": 1,
            "upperBound": 1
          },
          "name": "gender",
          "type": "demo::externalFormat::flatdata::allTypes::models::Gender"
        }
      ]
    },
    "classifierPath": "meta::pure::metamodel::type::Class"
  },
  {
    "path": "demo::externalFormat::flatdata::allTypes::models::AllTypesRecord",
    "content": {
      "_type": "class",
      "name": "AllTypesRecord",
      "package": "demo::externalFormat::flatdata::allTypes::models",
      "properties": [
        {
          "multiplicity": {
            "lowerBound": 1,
            "upperBound": 1
          },
          "name": "string",
          "type": "String"
        },
        {
          "multiplicity": {
            "lowerBound": 0,
            "upperBound": 1
          },
          "name": "optionalString",
          "type": "String"
        },
        {
          "multiplicity": {
            "lowerBound": 1,
            "upperBound": 1
          },
          "name": "integer",
          "type": "Integer"
        },
        {
          "multiplicity": {
            "lowerBound": 0,
            "upperBound": 1
          },
          "name": "optionalInteger",
          "type": "Integer"
        },
        {
          "multiplicity": {
            "lowerBound": 1,
            "upperBound": 1
          },
          "name": "customInteger",
          "type": "Integer"
        },
        {
          "multiplicity": {
            "lowerBound": 1,
            "upperBound": 1
          },
          "name": "float",
          "type": "Float"
        },
        {
          "multiplicity": {
            "lowerBound": 0,
            "upperBound": 1
          },
          "name": "optionalFloat",
          "type": "Float"
        },
        {
          "multiplicity": {
            "lowerBound": 1,
            "upperBound": 1
          },
          "name": "customFloat",
          "type": "Float"
        },
        {
          "multiplicity": {
            "lowerBound": 1,
            "upperBound": 1
          },
          "name": "decimal",
          "type": "Float"
        },
        {
          "multiplicity": {
            "lowerBound": 0,
            "upperBound": 1
          },
          "name": "optionalDecimal",
          "type": "Float"
        },
        {
          "multiplicity": {
            "lowerBound": 1,
            "upperBound": 1
          },
          "name": "customDecimal",
          "type": "Float"
        },
        {
          "multiplicity": {
            "lowerBound": 1,
            "upperBound": 1
          },
          "name": "boolean",
          "type": "Boolean"
        },
        {
          "multiplicity": {
            "lowerBound": 0,
            "upperBound": 1
          },
          "name": "optionalBoolean",
          "type": "Boolean"
        },
        {
          "multiplicity": {
            "lowerBound": 1,
            "upperBound": 1
          },
          "name": "customBoolean",
          "type": "Boolean"
        },
        {
          "multiplicity": {
            "lowerBound": 1,
            "upperBound": 1
          },
          "name": "date",
          "type": "StrictDate"
        },
        {
          "multiplicity": {
            "lowerBound": 0,
            "upperBound": 1
          },
          "name": "optionalDate",
          "type": "StrictDate"
        },
        {
          "multiplicity": {
            "lowerBound": 1,
            "upperBound": 1
          },
          "name": "customDate",
          "type": "StrictDate"
        },
        {
          "multiplicity": {
            "lowerBound": 1,
            "upperBound": 1
          },
          "name": "dateTime",
          "type": "DateTime"
        },
        {
          "multiplicity": {
            "lowerBound": 0,
            "upperBound": 1
          },
          "name": "optionalDateTime",
          "type": "DateTime"
        },
        {
          "multiplicity": {
            "lowerBound": 1,
            "upperBound": 1
          },
          "name": "customDateTime",
          "type": "DateTime"
        }
      ]
    },
    "classifierPath": "meta::pure::metamodel::type::Class"
  },
  {
    "path": "demo::externalFormat::flatdata::simple::models::TargetPerson",
    "content": {
      "_type": "class",
      "name": "TargetPerson",
      "package": "demo::externalFormat::flatdata::simple::models",
      "properties": [
        {
          "multiplicity": {
            "lowerBound": 1,
            "upperBound": 1
          },
          "name": "fullName",
          "type": "String"
        }
      ]
    },
    "classifierPath": "meta::pure::metamodel::type::Class"
  },
  {
    "path": "demo::externalFormat::flatdata::simple::models::Person",
    "content": {
      "_type": "class",
      "constraints": [
        {
          "functionDefinition": {
            "_type": "lambda",
            "body": [
              {
                "_type": "func",
                "function": "greaterThan",
                "parameters": [
                  {
                    "_type": "func",
                    "function": "length",
                    "parameters": [
                      {
                        "_type": "property",
                        "property": "lastName",
                        "parameters": [
                          {
                            "_type": "var",
                            "name": "this"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "_type": "integer",
                    "value": 1
                  }
                ]
              }
            ],
            "parameters": []
          },
          "name": "lastNameInvalid"
        }
      ],
      "name": "Person",
      "package": "demo::externalFormat::flatdata::simple::models",
      "properties": [
        {
          "multiplicity": {
            "lowerBound": 1,
            "upperBound": 1
          },
          "name": "firstName",
          "type": "String"
        },
        {
          "multiplicity": {
            "lowerBound": 1,
            "upperBound": 1
          },
          "name": "lastName",
          "type": "String"
        }
      ]
    },
    "classifierPath": "meta::pure::metamodel::type::Class"
  },
  {
    "path": "demo::externalFormat::flatdata::allTypes::binding::EnumBinding",
    "content": {
      "_type": "binding",
      "contentType": "application/x.flatdata",
      "includedStores": [],
      "modelUnit": {
        "packageableElementExcludes": [],
        "packageableElementIncludes": [
          "demo::externalFormat::flatdata::allTypes::models::Person"
        ]
      },
      "name": "EnumBinding",
      "package": "demo::externalFormat::flatdata::allTypes::binding",
      "schemaSet": "demo::externalFormat::flatdata::allTypes::schemaSet::EnumSchemaSet"
    },
    "classifierPath": "meta::external::shared::format::binding::Binding"
  },
  {
    "path": "demo::externalFormat::flatdata::simple::binding::PersonBinding",
    "content": {
      "_type": "binding",
      "contentType": "application/x.flatdata",
      "includedStores": [],
      "modelUnit": {
        "packageableElementExcludes": [],
        "packageableElementIncludes": [
          "demo::externalFormat::flatdata::simple::models::Person"
        ]
      },
      "name": "PersonBinding",
      "package": "demo::externalFormat::flatdata::simple::binding",
      "schemaSet": "demo::externalFormat::flatdata::simple::schemaSet::PersonSchema"
    },
    "classifierPath": "meta::external::shared::format::binding::Binding"
  },
  {
    "path": "demo::externalFormat::flatdata::allTypes::binding::AllTypesBinding",
    "content": {
      "_type": "binding",
      "contentType": "application/x.flatdata",
      "includedStores": [],
      "modelUnit": {
        "packageableElementExcludes": [],
        "packageableElementIncludes": [
          "demo::externalFormat::flatdata::allTypes::models::AllTypesRecord"
        ]
      },
      "name": "AllTypesBinding",
      "package": "demo::externalFormat::flatdata::allTypes::binding",
      "schemaSet": "demo::externalFormat::flatdata::allTypes::schemaSet::AllTypesSchemaSet"
    },
    "classifierPath": "meta::external::shared::format::binding::Binding"
  },
  {
    "path": "demo::externalFormat::flatdata::simple::mapping::M2MMapping",
    "content": {
      "_type": "mapping",
      "classMappings": [
        {
          "_type": "pureInstance",
          "class": "demo::externalFormat::flatdata::simple::models::TargetPerson",
          "propertyMappings": [
            {
              "_type": "purePropertyMapping",
              "explodeProperty": false,
              "property": {
                "class": "demo::externalFormat::flatdata::simple::models::TargetPerson",
                "property": "fullName"
              },
              "source": "",
              "transform": {
                "_type": "lambda",
                "body": [
                  {
                    "_type": "func",
                    "function": "plus",
                    "parameters": [
                      {
                        "_type": "collection",
                        "multiplicity": {
                          "lowerBound": 3,
                          "upperBound": 3
                        },
                        "values": [
                          {
                            "_type": "property",
                            "property": "firstName",
                            "parameters": [
                              {
                                "_type": "var",
                                "name": "src"
                              }
                            ]
                          },
                          {
                            "_type": "string",
                            "value": " "
                          },
                          {
                            "_type": "property",
                            "property": "lastName",
                            "parameters": [
                              {
                                "_type": "var",
                                "name": "src"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "parameters": []
              }
            }
          ],
          "root": true,
          "srcClass": "demo::externalFormat::flatdata::simple::models::Person"
        }
      ],
      "enumerationMappings": [],
      "includedMappings": [],
      "name": "M2MMapping",
      "package": "demo::externalFormat::flatdata::simple::mapping",
      "tests": []
    },
    "classifierPath": "meta::pure::mapping::Mapping"
  },
  {
    "path": "demo::externalFormat::flatdata::simple::service::FlatdataWithM2MChainingMerged",
    "content": {
      "_type": "service",
      "autoActivateUpdates": true,
      "documentation": "Demonstrates usage of internalize with flatdata",
      "execution": {
        "_type": "pureSingleExecution",
        "func": {
          "_type": "lambda",
          "body": [
            {
              "_type": "func",
              "function": "serialize",
              "parameters": [
                {
                  "_type": "func",
                  "function": "from",
                  "parameters": [
                    {
                      "_type": "func",
                      "function": "graphFetch",
                      "parameters": [
                        {
                          "_type": "func",
                          "function": "getAll",
                          "parameters": [
                            {
                              "_type": "packageableElementPtr",
                              "fullPath": "demo::externalFormat::flatdata::simple::models::TargetPerson"
                            }
                          ]
                        },
                        {
                          "_type": "classInstance",
                          "type": "rootGraphFetchTree",
                          "value": {
                            "subTrees": [
                              {
                                "_type": "propertyGraphFetchTree",
                                "subTrees": [],
                                "subTypeTrees": [],
                                "property": "fullName",
                                "parameters": []
                              }
                            ],
                            "subTypeTrees": [],
                            "_type": "rootGraphFetchTree",
                            "class": "demo::externalFormat::flatdata::simple::models::TargetPerson"
                          }
                        }
                      ]
                    },
                    {
                      "_type": "packageableElementPtr",
                      "fullPath": "demo::externalFormat::flatdata::simple::mapping::M2MMapping"
                    },
                    {
                      "_type": "func",
                      "function": "mergeRuntimes",
                      "parameters": [
                        {
                          "_type": "collection",
                          "multiplicity": {
                            "lowerBound": 2,
                            "upperBound": 2
                          },
                          "values": [
                            {
                              "_type": "func",
                              "function": "getRuntimeWithModelQueryConnection",
                              "parameters": [
                                {
                                  "_type": "packageableElementPtr",
                                  "fullPath": "demo::externalFormat::flatdata::simple::models::Person"
                                },
                                {
                                  "_type": "packageableElementPtr",
                                  "fullPath": "demo::externalFormat::flatdata::simple::binding::PersonBinding"
                                },
                                {
                                  "_type": "var",
                                  "name": "data"
                                }
                              ]
                            },
                            {
                              "_type": "func",
                              "function": "getRuntimeWithModelQueryConnection",
                              "parameters": [
                                {
                                  "_type": "packageableElementPtr",
                                  "fullPath": "demo::externalFormat::flatdata::simple::models::Person"
                                },
                                {
                                  "_type": "packageableElementPtr",
                                  "fullPath": "demo::externalFormat::flatdata::simple::binding::PersonBinding"
                                },
                                {
                                  "_type": "var",
                                  "name": "data1"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "_type": "classInstance",
                  "type": "rootGraphFetchTree",
                  "value": {
                    "subTrees": [
                      {
                        "_type": "propertyGraphFetchTree",
                        "subTrees": [],
                        "subTypeTrees": [],
                        "property": "firstName",
                        "parameters": []
                      },
                      {
                        "_type": "propertyGraphFetchTree",
                        "subTrees": [],
                        "subTypeTrees": [],
                        "property": "lastName",
                        "parameters": []
                      }
                    ],
                    "subTypeTrees": [],
                    "_type": "rootGraphFetchTree",
                    "class": "demo::externalFormat::flatdata::simple::models::Person"
                  }
                }
              ]
            }
          ],
          "parameters": [
            {
              "_type": "var",
              "name": "data",
              "multiplicity": {
                "lowerBound": 1,
                "upperBound": 1
              },
              "class": "String"
            },
            {
              "_type": "var",
              "name": "data1",
              "multiplicity": {
                "lowerBound": 1,
                "upperBound": 1
              },
              "class": "String"
            }
          ]
        }
      },
      "name": "FlatdataWithM2MChainingMerged",
      "owners": ["maheha"],
      "package": "demo::externalFormat::flatdata::simple::service",
      "pattern": "/flatdata/showcase/flatdataWithM2MChaining",
      "testSuites": [
        {
          "_type": "serviceTestSuite",
          "id": "testSuite_1",
          "testData": {
            "connectionsTestData": []
          },
          "tests": [
            {
              "_type": "serviceTest",
              "assertions": [
                {
                  "_type": "equalToJson",
                  "expected": {
                    "_type": "externalFormat",
                    "contentType": "application/json",
                    "data": "[ {\n  \"fullName\" : \"John Doe\"\n}, {\n  \"fullName\" : \"Olive Yew\"\n} ]"
                  },
                  "id": "assertion_1"
                }
              ],
              "id": "test_1",
              "keys": [],
              "parameters": [
                {
                  "name": "data",
                  "value": {
                    "_type": "string",
                    "sourceInformation": {
                      "sourceId": "",
                      "startLine": 54,
                      "startColumn": 20,
                      "endLine": 54,
                      "endColumn": 62
                    },
                    "value": "First Name,Last Name\nJohn,Doe\nOlive,Yew"
                  }
                },
                {
                  "name": "data1",
                  "value": {
                    "_type": "string",
                    "sourceInformation": {
                      "sourceId": "",
                      "startLine": 55,
                      "startColumn": 21,
                      "endLine": 55,
                      "endColumn": 63
                    },
                    "value": "First Name,Last Name\nJohn,Doe\nOlive,Yew"
                  }
                }
              ],
              "serializationFormat": "PURE"
            }
          ]
        }
      ]
    },
    "classifierPath": "meta::legend::service::metamodel::Service"
  },
  {
    "path": "demo::externalFormat::flatdata::simple::schemaSet::PersonSchema",
    "content": {
      "_type": "externalFormatSchemaSet",
      "format": "FlatData",
      "name": "PersonSchema",
      "package": "demo::externalFormat::flatdata::simple::schemaSet",
      "schemas": [
        {
          "content": "section Person: DelimitedWithHeadings \n{  \n  delimiter: ',';  \n  scope.untilEof;   \n  nullString: '';\n  \n  Record  \n  { \n    'First Name' : STRING; \n    'Last Name' : STRING; \n  }\n}"
        }
      ]
    },
    "classifierPath": "meta::external::shared::format::metamodel::SchemaSet"
  },
  {
    "path": "demo::externalFormat::flatdata::allTypes::schemaSet::EnumSchemaSet",
    "content": {
      "_type": "externalFormatSchemaSet",
      "format": "FlatData",
      "name": "EnumSchemaSet",
      "package": "demo::externalFormat::flatdata::allTypes::schemaSet",
      "schemas": [
        {
          "content": "section Person: DelimitedWithHeadings\n{\n  scope.untilEof;\n  delimiter: ',';\n\n  Record\n  {\n    name: STRING;\n    gender: STRING;\n  }\n}"
        }
      ]
    },
    "classifierPath": "meta::external::shared::format::metamodel::SchemaSet"
  },
  {
    "path": "demo::externalFormat::flatdata::allTypes::schemaSet::AllTypesSchemaSet",
    "content": {
      "_type": "externalFormatSchemaSet",
      "format": "FlatData",
      "name": "AllTypesSchemaSet",
      "package": "demo::externalFormat::flatdata::allTypes::schemaSet",
      "schemas": [
        {
          "content": "section AllTypes: DelimitedWithHeadings\n{\n  scope.untilEof;\n  nullString: 'null';  \n  delimiter: '~';\n\n  Record\n  {\n    string: STRING;\n    optionalString: STRING(optional);\n    integer: INTEGER;\n    optionalInteger: INTEGER(optional);\n    customInteger: INTEGER(format='#,##0');\n    float: DECIMAL;\n    optionalFloat: DECIMAL(optional);\n    customFloat: DECIMAL(format='#,##0.0#');\n    decimal: DECIMAL;\n    optionalDecimal: DECIMAL(optional);\n    customDecimal: DECIMAL(format='#,##0.0#');\n    boolean: BOOLEAN;\n    optionalBoolean: BOOLEAN(optional);\n    customBoolean: BOOLEAN(trueString='Y', falseString='N');\n    date: DATE;\n    optionalDate: DATE(optional);\n    customDate: DATE(format=['MM/dd/yyyy', 'MM dd yyyy']);\n    dateTime: DATETIME;\n    optionalDateTime: DATETIME(optional);\n    customDateTime: DATETIME(format=['dd/MM/yyyy HH:mm:ss', 'dd MM yyyy HH:mm:ss']);\n  }\n}"
        }
      ]
    },
    "classifierPath": "meta::external::shared::format::metamodel::SchemaSet"
  }
]
