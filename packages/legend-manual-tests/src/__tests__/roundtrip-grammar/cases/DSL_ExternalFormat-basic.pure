###ExternalFormat
SchemaSet test::tradeSchema
{
  format: FlatData;
  schemas: [
    {
      content: 'section trade: DelimitedWithHeadings\n{\n  scope.untilEof;\n  delimiter: \',\';\n  nullString: \'\';\n\n  Record\n  {\n    Product           : STRING;\n    Quantity          : INTEGER;\n    \'Trade Time\'      : DATETIME;\n    Price             : DECIMAL;\n    \'Price Ccy\'       : STRING;\n   \'Settlement Ccy\'  : STRING(optional);\n    \'Settlement Rate\' : DECIMAL(optional);\n   \'Settlement Date\' : DATE;\n   \'Confirmed At\'    : DATETIME(optional);\n   \'Expiry Date\'     : DATE(optional);\n   \'Executions\'      : INTEGER(optional);\n }\n}';
    }
  ];
}

Binding test::gen::TestBinding
{
  schemaSet: test::tradeSchema;
  contentType: 'application/x.flatdata';
  modelIncludes: [
    test::gen::Trade
  ];
}


###Pure
Class test::gen::Trade
{
  product: String[1];
  quantity: Integer[1];
  tradeTime: DateTime[1];
  price: Float[1];
  priceCcy: String[1];
  settlementCcy: String[0..1];
  settlementRate: Float[0..1];
  settlementDate: StrictDate[1];
  confirmedAt: DateTime[0..1];
  expiryDate: StrictDate[0..1];
  executions: Integer[0..1];
}


###Mapping
Mapping test::trade::SelfMapping
(
)


###Runtime
Runtime test::runtime
{
  mappings:
  [
    test::trade::SelfMapping
  ];
  connections:
  [
    test::gen::TestBinding:
    [
      c1:
      #{
        ExternalFormatConnection
        {
          store: test::gen::TestBinding;
          source: UrlStream
          {
            url: 'executor:default';
          };
        }
      }#
    ]
  ];
}
