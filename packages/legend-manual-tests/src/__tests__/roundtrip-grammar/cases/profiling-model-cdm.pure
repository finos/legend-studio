###Diagram
Diagram cdm::AveragingModel::AveragingModelDiagram
{
  classView 690d6987-ecf3-450b-b828-2e73dc7791c5
  {
    class: model::external::cdm::OptionExercise;
    position: (543.3906326293945,5.217041015625);
    rectangle: (252.35888671875,86.0);
  }
  classView 09735b17-26fd-4cdc-8ad9-4e0f38667cee
  {
    class: model::external::cdm::FxRateObservable;
    position: (286.00000381469727,568.9166870117188);
    rectangle: (293.2275390625,86.0);
  }
  classView cbe90df4-84e5-482d-9056-549b13c8922b
  {
    class: model::external::cdm::OptionStrike;
    position: (531.0000038146973,131.7882080078125);
    rectangle: (276.78125,128.0);
  }
  classView 088ff0c5-81ef-44ff-aa49-7f41c60364d7
  {
    class: model::external::cdm::OptionFeature;
    position: (46.000003814697266,167.80560302734375);
    rectangle: (220.51904296875,114.0);
  }
  propertyView
  {
    property: model::external::cdm::OptionExercise.strike;
    source: 690d6987-ecf3-450b-b828-2e73dc7791c5;
    target: cbe90df4-84e5-482d-9056-549b13c8922b;
    points: [(669.5700759887695,48.217041015625),(669.3906288146973,195.7882080078125)];
  }
}

Diagram FpML::model::CreditFpMLDiagram
{
  classView e6e4239c-1bea-4ca7-9500-f8efd5f63902
  {
    class: FpML::model::CreditDefaultSwap;
    position: (735.0,670.0);
    rectangle: (319.76611328125,100.0);
  }
  classView 397ec68f-d946-4871-a4c8-f286351524ea
  {
    class: FpML::model::GeneralTerms;
    position: (432.0,879.0);
    rectangle: (352.5458984375,226.0);
  }
  classView 40addac2-31ef-4119-8e8e-cc4f53500e25
  {
    class: FpML::model::ProtectionTerms;
    position: (978.0,886.0);
    rectangle: (291.95458984375,100.0);
  }
  classView d17593f1-a7fb-4374-987f-ade9983875e8
  {
    class: FpML::model::CreditEvents;
    position: (998.0,1082.0);
    rectangle: (252.88525390625,254.0);
  }
  classView aa9f7b2b-ffc8-4c32-8be8-bf1e079dea43
  {
    class: FpML::model::ReferenceInformation;
    position: (-2.0,920.0);
    rectangle: (253.47607421875,142.0);
  }
  classView 49abcf90-13ef-46fe-ab3d-7662f1c17c25
  {
    class: FpML::model::IndexReferenceInformation;
    position: (258.0,1193.0);
    rectangle: (253.513671875,212.0);
  }
  classView 76886536-f20c-42c5-8ada-1387aa3cc8fd
  {
    class: FpML::model::BasketReferenceInformation;
    position: (638.0,1234.0);
    rectangle: (245.779296875,128.0);
  }
  propertyView
  {
    property: FpML::model::CreditDefaultSwap.generalTerms;
    source: e6e4239c-1bea-4ca7-9500-f8efd5f63902;
    target: 397ec68f-d946-4871-a4c8-f286351524ea;
    points: [(894.883056640625,720.0),(608.27294921875,992.0)];
  }
  propertyView
  {
    property: FpML::model::CreditDefaultSwap.protectionTerms;
    source: e6e4239c-1bea-4ca7-9500-f8efd5f63902;
    target: 40addac2-31ef-4119-8e8e-cc4f53500e25;
    points: [(894.883056640625,720.0),(1123.977294921875,936.0)];
  }
  propertyView
  {
    property: FpML::model::ProtectionTerms.creditEvents;
    source: 40addac2-31ef-4119-8e8e-cc4f53500e25;
    target: d17593f1-a7fb-4374-987f-ade9983875e8;
    points: [(1123.977294921875,936.0),(1124.442626953125,1209.0)];
  }
  propertyView
  {
    property: FpML::model::GeneralTerms.basketReferenceInformation;
    source: 397ec68f-d946-4871-a4c8-f286351524ea;
    target: 76886536-f20c-42c5-8ada-1387aa3cc8fd;
    points: [(608.27294921875,992.0),(760.8896484375,1298.0)];
  }
  propertyView
  {
    property: FpML::model::GeneralTerms.indexReferenceInformation;
    source: 397ec68f-d946-4871-a4c8-f286351524ea;
    target: 49abcf90-13ef-46fe-ab3d-7662f1c17c25;
    points: [(608.27294921875,992.0),(384.7568359375,1299.0)];
  }
  propertyView
  {
    property: FpML::model::GeneralTerms.referenceInformation;
    source: 397ec68f-d946-4871-a4c8-f286351524ea;
    target: aa9f7b2b-ffc8-4c32-8be8-bf1e079dea43;
    points: [(608.27294921875,992.0),(124.738037109375,991.0)];
  }
}


###Text
Text FpML::model::Version
{
  type: plainText;
  content: 'Credit FpML 5.12';
}

Text model::external::cdm::VersionInfo
{
  type: plainText;
  content: 'This model version is 2.147.1';
}

Text cdm::AveragingModel::AveragingModelNotes
{
  type: plainText;
  content: 'OptionStrike - the definition of Price property is credit specific. ISDA to investigate.\r\nPlaceholder - function to evaluate weights for parametric dates required in ObservationDates class. ISDA to review CDM feasibility for such functions.\r\nPlaceholder - for refactoring FxRateObservable in future. Provisions within FxDisruption FpML class (within FxSingleLeg) to be reviewed so to design a harmonized FxRateObservable that can be re-used.\r\nPlaceholder - for qualification function constraint which would determine when fxRateObservable is applicable';
}


###Pure
Profile model::external::cdm::metadata
{
  stereotypes: [key, reference, scheme, id, template, location, address];
}

Enum {meta::pure::profiles::doc.doc = 'Defines which type of bullion is applicable for a Bullion Transaction.'} FpML::model::BullionTypeEnum
{
  Gold,
  Palladium,
  Platinum,
  Silver,
  Rhodium,
  RhodiumSponge,
  Iridium,
  Ruthenium,
  Osmium
}

Enum {meta::pure::profiles::doc.doc = 'The Specified Price in respect of a Transaction and a Commodity Reference Price.'} FpML::model::SpecifiedPriceEnum
{
  Afternoon,
  Ask,
  Bid,
  Closing,
  High,
  Index,
  MeanOfBidAndAsk,
  LocationalMarginal,
  Low,
  MarginalHourly,
  MarketClearing,
  MeanOfHighAndLow,
  Morning,
  Official,
  Opening,
  OSP,
  Settlement,
  Spot,
  Midpoint,
  NationalSingle,
  WeightedAverage,
  UnWeightedAverage
}

Enum {meta::pure::profiles::doc.doc = 'Represents the enumeration list to identify the settlement status of the collateral.'} model::external::cdm::CollateralStatusEnum
{
  {meta::pure::profiles::doc.doc = 'Indicates the collateral balance amount in full, inclusive of any pre-agreed collateral positions in transit for settlement.'} FullAmount,
  {meta::pure::profiles::doc.doc = 'Indicates the collateral is settled and not an in transit pre-agreed collateral amount/s.'} SettledAmount,
  {meta::pure::profiles::doc.doc = 'Indicates collateral amount in transit settlement cycle only, excluding settled collateral amount/s.'} InTransitAmount
}

Enum model::external::cdm::FeeTypeEnum
{
  {meta::pure::profiles::doc.doc = 'A cash flow associated with an amendment lifecycle event.'} Amendment,
  {meta::pure::profiles::doc.doc = 'A cash flow resulting from the assignment of a contract to a new counterparty.'} Assignment,
  {meta::pure::profiles::doc.doc = 'A cash flow associated with an increase lifecycle event.'} Increase,
  {meta::pure::profiles::doc.doc = 'The novation fee.'} Novation,
  {meta::pure::profiles::doc.doc = 'A cash flow associated with a partial termination lifecycle event.'} PartialTermination,
  {meta::pure::profiles::doc.doc = 'A cash flow associated with a termination lifecycle event.'} Termination,
  {meta::pure::profiles::doc.doc = 'An upfront cashflow associated to the swap to adjust for a difference between the swap price and the current market price.'} Upfront
}

Enum {meta::pure::profiles::doc.doc = 'The mode of expression of a price.'} FpML::model::PriceExpressionEnum
{
  AbsoluteTerms,
  PercentageOfNotional
}

Enum {meta::pure::profiles::doc.doc = 'The type of averaging used in an Asian option.'} FpML::model::AveragingInOutEnum
{
  In,
  Out,
  Both
}

Enum {meta::pure::profiles::doc.doc = 'Represents an enumeration list to identify the Maturity.'} model::external::cdm::MaturityTypeEnum
{
  {meta::pure::profiles::doc.doc = 'Denotes a period from now until maturity date.'} RemainingMaturity,
  {meta::pure::profiles::doc.doc = 'Denotes a period from issuance until maturity date.'} OriginalMaturity,
  {meta::pure::profiles::doc.doc = 'Denotes a period from issuance date until now.'} FromIssuance
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify how the composition of Dividends is to be determined.'} model::external::cdm::DividendCompositionEnum
{
  {meta::pure::profiles::doc.doc = 'The Equity Amount Receiver determines the composition of dividends (subject to conditions).'} EquityAmountReceiverElection,
  {meta::pure::profiles::doc.doc = 'The Calculation Agent determines the composition of dividends (subject to conditions).'} CalculationAgentElection
}

Enum {meta::pure::profiles::doc.doc = 'The type of averaging used in an Asian option. A type used to report the status of a position.'} FpML::model::PositionStatusEnum
{
  New,
  Existing,
  Closed
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify the identification the form of applicable matrix.'} model::external::cdm::MatrixTypeEnum
{
  {meta::pure::profiles::doc.doc = 'The ISDA-published Credit Derivatives Physical Settlement Matrix.'} CreditDerivativesPhysicalSettlementMatrix,
  {meta::pure::profiles::doc.doc = 'The ISDA-published Equity Derivatives Matrix.'} EquityDerivativesMatrix,
  {meta::pure::profiles::doc.doc = 'The ISDA-published 2000 ISDA Definitions Settlement Matrix for Early Terminations and Swaptions.'} SettlementMatrix
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify points in the day when option exercise and valuation can occur.'} model::external::cdm::TimeTypeEnum
{
  {meta::pure::profiles::doc.doc = 'The official closing time of the exchange on the valuation date.'} Close,
  {meta::pure::profiles::doc.doc = 'The official opening time of the exchange on the valuation date.'} Open,
  {meta::pure::profiles::doc.doc = 'The time at which the official settlement price is determined.'} OSP,
  {meta::pure::profiles::doc.doc = 'The time specified in the element equityExpirationTime or valuationTime (as appropriate).'} SpecificTime,
  {meta::pure::profiles::doc.doc = 'The time at which the official settlement price (following the auction by the exchange) is determined by the exchange.'} XETRA,
  {meta::pure::profiles::doc.doc = 'The official closing time of the derivatives exchange on which a derivative contract is listed on that security underlier.'} DerivativesClose,
  {meta::pure::profiles::doc.doc = 'The time is determined as provided in the relevant Master Confirmation.'} AsSpecifiedInMasterConfirmation
}

Enum {meta::pure::profiles::doc.doc = 'Refers to one on the 3 Amounts'} FpML::model::DividendAmountTypeEnum
{
  RecordAmount,
  ExAmount,
  PaidAmount,
  AsSpecifiedInMasterConfirmation
}

Enum {meta::pure::profiles::doc.doc = 'A list that specifies type of voting rights process, i.e. whether voting rights are passed along to buyer or retained by seller.'} FpML::model::LoanTradingVotingRightsEnum
{
  PassedOnToBuyer,
  RetainedBySeller
}

Enum {meta::pure::profiles::doc.doc = 'A duration code for a Repo or Securities Lending transaction. There are many business and market rules that are derived from the duration of the transaction.'} FpML::model::RepoDurationEnum
{
  Open,
  Term,
  Overnight
}

Enum {meta::pure::profiles::doc.doc = 'Code values for different styles of ways of calculation methods.'} FpML::model::InflationCalculationStyleEnum
{
  YearOnYear,
  ZeroCoupon
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to define the supplements to a base set of ISDA Definitions that are applicable to the transaction.'} model::external::cdm::ContractualSupplementEnum
{
  {meta::pure::profiles::doc.doc = 'Standard Terms Supplement for ABX Transactions.'} ABX,
  {meta::pure::profiles::doc.doc = 'Standard Terms Supplement for Asset-Backed Tranche Transactions.'} ABXTranche,
  {meta::pure::profiles::doc.doc = 'ISDA Standard Terms Supplement for use with Credit Derivative Transactions on Leveraged Loans.'} CDSonLeveragedLoans,
  {meta::pure::profiles::doc.doc = 'ISDA Standard Terms Supplement for use with Credit Derivative Transactions on Mortgage-backed Security with Pay-As-You-Go or Physical Settlement.'} CDSonMBS,
  {meta::pure::profiles::doc.doc = 'Standard Terms Supplement for CDX Untranched Transactions.'} CDX,
  {meta::pure::profiles::doc.doc = 'Standard Terms Supplement for CDX Emerging Markets Untranched Transactions.'} CDXEmergingMarkets,
  {meta::pure::profiles::doc.doc = 'Standard Terms Supplement for CDX Emerging Markets Diversified Untranched Transactions..'} CDXEmergingMarketsDiversified,
  {meta::pure::profiles::doc.doc = 'Standard Terms Supplement for CDX Swaption Transactions.'} CDXSwaption,
  {meta::pure::profiles::doc.doc = 'Standard Terms Supplement for Dow Jones CDX Tranche Transactions.'} CDXTranche,
  {meta::pure::profiles::doc.doc = 'Standard Terms Supplement for CMBX Transactions.'} CMBX,
  {meta::pure::profiles::doc.doc = 'Standard Terms Supplement for Single Name European CMBS Transactions.'} EuropeanCMBS,
  {meta::pure::profiles::doc.doc = 'Standard Terms Supplement for Single Name European RMBS Transactions.'} EuropeanRMBS,
  {meta::pure::profiles::doc.doc = 'Standard Terms Supplement for IOS Transactions.'} IOS,
  {meta::pure::profiles::doc.doc = 'Supplement to the 1999 ISDA Credit Derivatives Definitions Relating to Convertible, Exchangeable or Accreting Obligations dated November 9, 2001.'} ISDA1999CreditConvertibleExchangeableAccretingObligations,
  {meta::pure::profiles::doc.doc = 'Restructuring Supplement to the 1999 ISDA Credit Derivatives Definitions dated May 11, 2001.'} ISDA1999CreditRestructuring,
  {meta::pure::profiles::doc.doc = 'Supplement Relating to Successor and Credit Events to the 1999 ISDA Credit Derivatives Definitions dated November 28, 2001.'} ISDA1999CreditSuccessorAndCreditEvents,
  {meta::pure::profiles::doc.doc = 'Additional Provisions for LPN dated December 6, 2007.'} ISDA2003AdditionalProvisionsLPN,
  {meta::pure::profiles::doc.doc = 'Additional Provisions for Contingent Credit Spread Transactions dated August 15, 2008.'} ISDA2003ContingentCreditSpreadTransaction,
  {meta::pure::profiles::doc.doc = '2005 Matrix Supplement to the 2003 ISDA Credit Derivatives.'} ISDA2003Credit2005MatrixSupplement,
  {meta::pure::profiles::doc.doc = 'Additional Provisions for the Argentine Republic: Excluded Obligations and Excluded Deliverable Obligations dated December 21, 2005.'} ISDA2003CreditArgentineRepublic,
  {meta::pure::profiles::doc.doc = 'ISDA Credit Derivatives Determinations Committees and Auction Settlement Supplement to the 2003 ISDA Credit Derivatives Definitions (published on [TBD]).'} ISDA2003CreditAuctionSupplement,
  {meta::pure::profiles::doc.doc = 'May 2003 Supplement to the 2003 ISDA Credit Derivatives Definitions.'} ISDA2003CreditMay2003,
  {meta::pure::profiles::doc.doc = 'Additional Provisions for Physically Settled Default Swaps Monoline Insurer as Reference Entity dated May 9, 2003.'} ISDA2003CreditMonolineInsurers,
  {meta::pure::profiles::doc.doc = 'Additional Provisions for Physically Settled Default Swaps Monoline Insurer as Reference Entity dated January 21, 2005.'} ISDA2003CreditMonolineInsurers2005,
  {meta::pure::profiles::doc.doc = 'Additional Provisions for the Republic of Hungary: Obligation Characteristics and Deliverable Obligation Characteristics dated August 13, 2004.'} ISDA2003CreditRepublicOfHungary,
  {meta::pure::profiles::doc.doc = 'Additional Provisions for the Republic of Hungary: Obligation Characteristics and Deliverable Obligation Characteristics dated February 14, 2005.'} ISDA2003CreditRepublicOfHungary2005,
  {meta::pure::profiles::doc.doc = 'Additional Provisions for the Russian Federation: Obligation Characteristics and Deliverable Obligation Characteristics dated August 13, 2004.'} ISDA2003CreditRussianFederation,
  {meta::pure::profiles::doc.doc = 'Additional Provisions for Credit Derivative Transactions - U.S. Municipal Entity as Reference Entity dated September 17, 2004.'} ISDA2003CreditUSMunicipals,
  {meta::pure::profiles::doc.doc = 'Additional Provisions for STMicroelectronics NV dated December 6, 2007.'} ISDA2003STMicroelectronicsNV,
  {meta::pure::profiles::doc.doc = '2007 Full Lookthrough Depository Receipt Supplement to the 2002 Equity Derivatives Definitions.'} ISDA2007FullLookthroughDepositoryReceiptSupplement,
  {meta::pure::profiles::doc.doc = '2007 Partial Lookthrough Depository Receipt Supplement to the 2002 ISDA Equity Derivatives Definitions.'} ISDA2007PartialLookthroughDepositoryReceiptSupplement,
  {meta::pure::profiles::doc.doc = 'Additional Provisions for Physically Settled Default Swaps Monoline Insurer.'} ISDACreditMonolineInsurers,
  {meta::pure::profiles::doc.doc = 'Additional Provisions for Fixed Recovery Credit Default Swap Transactions'} ISDADeliveryRestrictions,
  {meta::pure::profiles::doc.doc = 'Additional Provisions for Fixed Recovery Credit Default Swap Transactions.'} ISDAFixedRecovery,
  {meta::pure::profiles::doc.doc = 'Additional Provisions for LPN Reference Entities.'} ISDALPNReferenceEntities,
  {meta::pure::profiles::doc.doc = 'Canadian Supplement to the 2004 Americas Interdealer Master Equity Derivatives Confirmation Agreement dated March 29, 2004.'} ISDAMarch2004EquityCanadianSupplement,
  {meta::pure::profiles::doc.doc = 'Additional Provisions for Recovery Lock Credit Default Swap Transactions.'} ISDARecoveryLock,
  {meta::pure::profiles::doc.doc = 'Additional Provisions for Secured Deliverable Obligation Characteristic.'} ISDASecuredDeliverableObligationCharacteristic,
  {meta::pure::profiles::doc.doc = 'Standard Terms Supplement for Syndicated Secured Loan Credit Default Swap Index Transactions.'} LCDX,
  {meta::pure::profiles::doc.doc = 'Standard Terms Supplement for Syndicated Secured Loan Credit Default Swap Index Tranche Transactions.'} LCDXTranche,
  {meta::pure::profiles::doc.doc = 'Standard Terms Supplement for MBX Transactions.'} MBX,
  {meta::pure::profiles::doc.doc = 'Standard Terms Supplement for Municipal CDX Untranched Transactions.'} MCDX,
  {meta::pure::profiles::doc.doc = 'Standard Terms Supplement for PO Index Transactions.'} PO,
  {meta::pure::profiles::doc.doc = 'Standard Terms Supplement for PrimeX Transactions.'} PrimeX,
  {meta::pure::profiles::doc.doc = 'Standard Terms Supplement for Standard CDX Tranche Transactions.'} StandardCDXTranche,
  {meta::pure::profiles::doc.doc = 'Standard Syndicated Secured Loan Credit Default Swap Standard Terms Supplement.'} StandardLCDS,
  {meta::pure::profiles::doc.doc = 'Standard Terms Supplement for Standard Syndicated Secured Loan Credit Default Swap Bullet Transactions.'} StandardLCDSBullet,
  {meta::pure::profiles::doc.doc = 'Standard Terms Supplement for Standard Syndicated Secured Loan Credit Default Swap Index Bullet Transactions.'} StandardLCDXBullet,
  {meta::pure::profiles::doc.doc = 'Standard Terms Supplement for Standard Syndicated Secured Loan Credit Default Swap Index Bullet Tranche Transactions.'} StandardLCDXBulletTranche,
  {meta::pure::profiles::doc.doc = 'Standard Terms Supplement for Standard iTraxx Europe Tranched Transactions.'} StandardiTraxxEuropeTranche,
  {meta::pure::profiles::doc.doc = 'Syndicated Secured Loan Credit Default Swap Standard Terms Supplement.'} SyndicatedSecuredLoanCDS,
  {meta::pure::profiles::doc.doc = 'Standard Terms Supplement for TRX Transactions.'} TRX,
  {meta::pure::profiles::doc.doc = 'Standard Terms Supplement for TRX.II Transactions.'} TRX_II,
  {meta::pure::profiles::doc.doc = 'Standard Terms Supplement for iTraxx Asia Excluding Japan.'} iTraxxAsiaExJapan,
  {meta::pure::profiles::doc.doc = 'Standard Terms Supplement for iTraxx Asia Ex-Japan Swaption Transactions.'} iTraxxAsiaExJapanSwaption,
  {meta::pure::profiles::doc.doc = 'Standard Terms Supplement for iTraxx Asia Excluding Japan Tranched Transactions.'} iTraxxAsiaExJapanTranche,
  {meta::pure::profiles::doc.doc = 'Standard Terms Supplement for iTraxx Australia.'} iTraxxAustralia,
  {meta::pure::profiles::doc.doc = 'Standard Terms Supplement for iTraxx Australia Swaption Transactions.'} iTraxxAustraliaSwaption,
  {meta::pure::profiles::doc.doc = 'Standard Terms Supplement for iTraxx Australia Tranched Transactions.'} iTraxxAustraliaTranche,
  {meta::pure::profiles::doc.doc = 'Standard Terms Supplement for iTraxx CJ.'} iTraxxCJ,
  {meta::pure::profiles::doc.doc = 'Standard Terms Supplement for iTraxx CJ Tranched Transactions.'} iTraxxCJTranche,
  {meta::pure::profiles::doc.doc = 'Standard Terms Supplement for iTraxx Europe Transactions.'} iTraxxEurope,
  {meta::pure::profiles::doc.doc = 'Standard Terms Supplement for iTraxx Europe Dealer Form.'} iTraxxEuropeDealer,
  {meta::pure::profiles::doc.doc = 'Standard Terms Supplement for iTraxx Europe Non-Dealer Form.'} iTraxxEuropeNonDealer,
  {meta::pure::profiles::doc.doc = 'Standard Terms Supplement for iTraxx Europe Swaption Transactions.'} iTraxxEuropeSwaption,
  {meta::pure::profiles::doc.doc = 'Standard Terms Supplement for iTraxx Europe Tranched Transactions.'} iTraxxEuropeTranche,
  {meta::pure::profiles::doc.doc = 'Standard Terms Supplement for iTraxx Japan.'} iTraxxJapan,
  {meta::pure::profiles::doc.doc = 'Standard Terms Supplement for iTraxx Japan Swaption Transactions.'} iTraxxJapanSwaption,
  {meta::pure::profiles::doc.doc = 'Standard Terms Supplement for iTraxx Japan Tranched Transactions.'} iTraxxJapanTranche,
  {meta::pure::profiles::doc.doc = 'Standard Terms Supplement for iTraxx LevX.'} iTraxxLevX,
  {meta::pure::profiles::doc.doc = 'Standard Terms Supplement for iTraxx SDI 75 Dealer Transactions.'} iTraxxSDI75Dealer,
  {meta::pure::profiles::doc.doc = 'Standard Terms Supplement for iTraxx SDI 75 Non-Dealer Transactions.'} iTraxxSDI75NonDealer,
  {meta::pure::profiles::doc.doc = 'Standard Terms Supplement for iTraxx SovX.'} iTraxxSovX
}

Enum {meta::pure::profiles::doc.doc = 'Average calculation method e.g. Arithmetic, Harmonic)'} FpML::model::FxAveragingMethodEnum
{
  Arithmetic,
  Harmonic
}

Enum {meta::pure::profiles::doc.doc = 'Defines how adjustments will be made to the contract should one or more of the extraordinary events occur.'} FpML::model::MethodOfAdjustmentEnum
{
  CalculationAgent,
  OptionsExchange
}

Enum {meta::pure::profiles::doc.doc = 'The contract specifies whether which price must satisfy the boundary condition.'} FpML::model::RealisedVarianceMethodEnum
{
  Previous,
  Last,
  Both
}

Enum {meta::pure::profiles::doc.doc = 'Top level ISDA FRO category.'} model::external::cdm::FloatingRateIndexCategoryEnum
{
  {meta::pure::profiles::doc.doc = 'The rate is observed directly from a screen.'} ScreenRate,
  {meta::pure::profiles::doc.doc = 'The rate is calculated by the calculation agents from multiple observations.'} Calculated,
  {meta::pure::profiles::doc.doc = 'The rate is obtained by polling several other banks.'} ReferenceBanks
}

Enum {meta::pure::profiles::doc.doc = 'The specification of whether calculated rates are set relative to the beginning or end of a calculation period, or another date. The specification of whether calculated rates are set relative to the first or last day of a calculation period. - For use with pre-trade Credit Limit Check messages.'} FpML::model::ObservationPeriodDatesEnum
{
  SetInAdvance,
  Standard,
  FixingDate
}

Enum {meta::pure::profiles::doc.doc = 'Element to define how to deal with a none standard calculation period within a swap stream. Element to define how to deal with a none standard calculation period within a swap stream.'} FpML::model::StubPeriodTypeEnum
{
  ShortInitial,
  ShortFinal,
  LongInitial,
  LongFinal
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify the method of calculating payment obligations when a floating rate is negative (either due to a quoted negative floating rate or by operation of a spread that is subtracted from the floating rate).'} model::external::cdm::NegativeInterestRateTreatmentEnum
{
  {meta::pure::profiles::doc.doc = 'Negative Interest Rate Method. Per 2000 ISDA Definitions, Section 6.4 Negative Interest Rates, paragraphs (b) and (c).'} NegativeInterestRateMethod,
  {meta::pure::profiles::doc.doc = 'Zero Interest Rate Method. Per 2000 ISDA Definitions, Section 6.4. Negative Interest Rates, paragraphs (d) and (e).'} ZeroInterestRateMethod,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Definitions section 6.8.6'} ZeroInterestRateExcludingSpreadMethod
}

Enum {meta::pure::profiles::doc.doc = 'A list with a single \'all\' value to explicitly indicate all assets are applicable.'} FpML::model::LoanAllAssetsEnum
{
  All
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values used in both the obligations and deliverable obligations of the credit default swap to represent a class or type of securities which apply.'} model::external::cdm::ObligationCategoryEnum
{
  {meta::pure::profiles::doc.doc = 'ISDA term \'Payment\'.'} Payment,
  {meta::pure::profiles::doc.doc = 'ISDA term \'Borrowed Money\'.'} BorrowedMoney,
  {meta::pure::profiles::doc.doc = 'ISDA term \'Reference Obligations Only\'.'} ReferenceObligationsOnly,
  {meta::pure::profiles::doc.doc = 'ISDA term \'Bond\'.'} Bond,
  {meta::pure::profiles::doc.doc = 'ISDA term \'Loan\'.'} Loan,
  {meta::pure::profiles::doc.doc = 'ISDA term \'Bond or Loan\'.'} BondOrLoan
}

Enum {meta::pure::profiles::doc.doc = 'The enumeration values to specify the Commodity Reference Prices specified in the Annex to the 2005 ISDA Commodity Definitions.'} model::external::cdm::CommodityReferencePriceEnum
{
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Sub-Annex A, Section 7.1 Commodity Reference Prices, as amended and supplemented through the date on which parties enter into the relevant transaction.'} ALUMINIUM_ALLOY_LME_15_MONTH,
  {meta::pure::profiles::doc.doc = 'A code for the NYMEX Central Appalachian Coal commodity'} COAL_CENTRAL_APPALACHIAN_NYMEX,
  {meta::pure::profiles::doc.doc = 'A code for the ICE Futures U.S. (\u2018ICUS\u2019) Cocoa commodity'} COCOA_ICE,
  {meta::pure::profiles::doc.doc = 'A code for the ICUS Coffee C commodity'} COFFEE_ARABICA_ICE,
  {meta::pure::profiles::doc.doc = 'A code for the ICUS Coffee C commodity'} COFFEE_ROBUSTA_ICE,
  {meta::pure::profiles::doc.doc = 'A code for the COMEX (\u2018CMX\u2019) Copper Grade #1 commodity'} COPPER_COMEX,
  {meta::pure::profiles::doc.doc = 'A code for the Chicago Board of Trade (\u2018CBOT\u2019) Corn commodity'} CORN_CBOT,
  {meta::pure::profiles::doc.doc = 'A code for the ICUS Cotton No. 2 commodity'} COTTON_NO__2_ICE,
  {meta::pure::profiles::doc.doc = 'A code for the CBOT Ethanol commodity'} ETHANOL_CBOT,
  {meta::pure::profiles::doc.doc = 'A code for the CME Feeder Cattle commodity'} FEEDER_CATTLE_CME,
  {meta::pure::profiles::doc.doc = 'A code for the ICUS Frozen Concentrated Orange Juice commodity'} FROZEN_CONCENTRATED_ORANGE_JUICE_NO__1_ICE,
  {meta::pure::profiles::doc.doc = 'A code for the NYMEX Gasoline Blendstock (RBOB) commodity'} GASOLINE_RBOB_NEW_YORK_ICE,
  {meta::pure::profiles::doc.doc = 'A code for the NYMEX Gasoline Blendstock (RBOB) commodity'} GASOLINE_RBOB_NEW_YORK_NYMEX,
  {meta::pure::profiles::doc.doc = 'A code for the CMX Gold commodity'} GOLD_COMEX,
  {meta::pure::profiles::doc.doc = 'A code for the NYMEX No. 2 Heating Oil, New York Harbor commodity'} HEATING_OIL_NEW_YORK_NYMEX,
  {meta::pure::profiles::doc.doc = 'A code for the CME Lean Hogs commodity'} LEAN_HOGS_CME,
  {meta::pure::profiles::doc.doc = 'A code for the CME Live Cattle commodity'} LIVE_CATTLE_CME,
  {meta::pure::profiles::doc.doc = 'A code for the CME Random Length Lumber commodity'} LUMBER_CME,
  {meta::pure::profiles::doc.doc = 'A code for the CME Milk Class III commodity'} MILK_CLASS_III_CME,
  {meta::pure::profiles::doc.doc = 'A code for the CME Non Fat Dry Milk commodity'} MILK_NONFAT_DRY_CME,
  {meta::pure::profiles::doc.doc = 'A code for the NYMEX Natural Gas commodity'} NATURAL_GAS_NYMEX,
  {meta::pure::profiles::doc.doc = 'A code for the NYMEX Panhandle Basis Swap commodity'} NATURAL_GAS_PEPL__TEXOK_MAINLINE__INSIDE_FERC,
  {meta::pure::profiles::doc.doc = 'A code for the NYMEX Waha Basis Swap commodity'} NATURAL_GAS_W__TEXAS__WAHA__INSIDE_FERC,
  {meta::pure::profiles::doc.doc = 'A code for the CBOT Oats commodity'} OATS_CBOT,
  {meta::pure::profiles::doc.doc = 'A code for the NYMEX Crude Oil, Light Sweet commodity'} OIL_WTI_NYMEX,
  {meta::pure::profiles::doc.doc = 'A code for the NYMEX Palladium commodity'} PALLADIUM_NYMEX,
  {meta::pure::profiles::doc.doc = 'A code for the NYMEX Platinum commodity'} PLATINUM_NYMEX,
  {meta::pure::profiles::doc.doc = 'A code for the CBOT Rough Rice commodity'} RICE_CBOT,
  {meta::pure::profiles::doc.doc = 'A code for the CMX Silver commodity'} SILVER_COMEX,
  {meta::pure::profiles::doc.doc = 'A code for the CBOT Soybeans commodity'} SOYBEANS_CBOT,
  {meta::pure::profiles::doc.doc = 'A code for the CBOT Soybean Meal commodity'} SOYBEAN_MEAL_CBOT,
  {meta::pure::profiles::doc.doc = 'A code for the CBOT Soybean Oil commodity'} SOYBEAN_OIL_CBOT,
  {meta::pure::profiles::doc.doc = 'A code for the ICUS Sugar No. 11 commodity'} SUGAR___11__WORLD__ICE,
  {meta::pure::profiles::doc.doc = 'A code for the ICUS Sugar No. 16 commodity'} SUGAR___16__US__ICE,
  {meta::pure::profiles::doc.doc = 'A code for the CBOT Wheat commodity'} WHEAT_CBOT,
  {meta::pure::profiles::doc.doc = 'A code for the Kansas City Board of Trade (\u2018KCBT\u2019)Wheat commodity'} WHEAT_HRW_KCBOT,
  {meta::pure::profiles::doc.doc = 'A code for the Wheat commodity'} WHEAT_RED_SPRING_MGE
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify the interpolation method, e.g. linear.'} model::external::cdm::InterpolationMethodEnum
{
  {meta::pure::profiles::doc.doc = 'Linear Interpolation applicable.'} LinearZeroYield,
  {meta::pure::profiles::doc.doc = 'No Interpolation applicable.'} None
}

Enum {meta::pure::profiles::doc.doc = 'Describes the date source calendar for a contract whereby the prices are from the underlying commodity price source (e.g. exchange traded futures contract), but the dates are based off another calendar (e.g. the listed option on the futures contract).'} FpML::model::CalendarSourceEnum
{
  ListedOption,
  Future
}

Enum {meta::pure::profiles::doc.doc = 'Lists the enumerated values to specify the day type classification used in counting the number of days between two dates.'} model::external::cdm::DayTypeEnum
{
  {meta::pure::profiles::doc.doc = 'Applies when calculating the number of days between two dates the count includes only business days.'} Business,
  {meta::pure::profiles::doc.doc = 'Applies when calculating the number of days between two dates the count includes all calendar days.'} Calendar,
  {meta::pure::profiles::doc.doc = 'Applies when calculating the number of days between two dates the count includes only currency business days.'} CurrencyBusiness,
  {meta::pure::profiles::doc.doc = 'Applies when calculating the number of days between two dates the count includes only stock exchange business days.'} ExchangeBusiness,
  {meta::pure::profiles::doc.doc = 'Applies when calculating the number of days between two dates the count includes only scheduled trading days.'} ScheduledTradingDay
}

Enum {meta::pure::profiles::doc.doc = 'On partial fill and fill order events, indicates whether the order was already resting on the order book and providing liquidity (passive) or the order initiated the trade and thus took liquidity (aggressive).This field shall be left blank if not relevant.'} FpML::model::PassiveOrAggressiveEnum
{
  Passive,
  Aggressive
}

Enum {meta::pure::profiles::doc.doc = 'The type of independent amount convention.'} FpML::model::IndependentAmountConventionEnum
{
  NettedAfterThreshold,
  NettedBeforeThreshold,
  Segregated
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify the specified entity terms for the Event of Default or Termination Event specified.'} model::external::cdm::SpecifiedEntityTermsEnum
{
  {meta::pure::profiles::doc.doc = 'No Specified Entity is provided'} None,
  {meta::pure::profiles::doc.doc = 'Any Affiliate is a Specified Entity.'} AnyAffiliate,
  {meta::pure::profiles::doc.doc = 'The Specified Entity is provided.'} NamedSpecifiedEntity,
  {meta::pure::profiles::doc.doc = 'Any Material Subsidiary.'} MaterialSubsidiary,
  {meta::pure::profiles::doc.doc = 'Non standard Specified Entity terms are provided.'} OtherSpecifiedEntity
}

Enum {meta::pure::profiles::doc.doc = 'A list with a single \'all\' value to explicitly indicate all transactions are applicable.'} FpML::model::LoanAllTransactionsEnum
{
  All
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify the date by reference to which the dividend will be paid.'} model::external::cdm::DividendDateReferenceEnum
{
  {meta::pure::profiles::doc.doc = 'The dividend date will be specified ad-hoc by the parties, typically on the dividend ex-date.'} AdHocDate,
  {meta::pure::profiles::doc.doc = 'If \'Dividend Payment Date(s)\' is specified in the Transaction Supplement as \'Cash Settlement Payment Date\', then the Dividend Payment Date in respect of a Dividend Amount shall be the Cash Settlement Payment Date relating to the end of the Dividend Period during which the Shares commenced trading \'ex\' the relevant dividend on the Exchange.'} CashSettlementPaymentDate,
  {meta::pure::profiles::doc.doc = 'If \'Dividend Payment Date(s)\' is specified in the Transaction Supplement as \'Cash Settlement Payment Date \u2013 Ex Dividend\'\', then the Dividend Payment Date in respect of a Dividend Amount shall be the Cash Settlement Payment Date relating to the end of the Dividend Period during which the Shares commenced trading \'ex\' the relevant dividend on the Exchange.'} CashSettlePaymentDateExDiv,
  {meta::pure::profiles::doc.doc = 'If \'Dividend Payment Date(s)\' is specified in the Transaction Supplement as \'Cash Settlement Payment Date \u2013 Issuer Payment\', then the Dividend Payment Date in respect of a Dividend Amount shall be the Cash Settlement Payment Date relating to the end of the Dividend Period during which the issuer pays the relevant dividend to a holder of record provided that in the case where the Equity Amount Payer is the party specified to be the sole Hedging Party and the Hedging Party has not received the Dividend Amount by such date, then the date falling a number of Currency Business Days as specified in the Cash Settlement Payment Date after actual receipt by the Hedging Party of the Received Ex Amount or Paid Ex Amount (as applicable).'} CashSettlePaymentDateIssuerPayment,
  {meta::pure::profiles::doc.doc = 'Total of dividends which go ex, paid on next following Equity Payment Date, which is immediately following the Dividend Period during which the Shares commence trading ex-dividend on the Exchange.'} CumulativeEquityExDiv,
  {meta::pure::profiles::doc.doc = 'Total of paid dividends, paid on next following Equity Payment Date, which is immediately following the Dividend Period during which the dividend is paid by the Issuer to the holders of record of a Share.'} CumulativeEquityPaid,
  {meta::pure::profiles::doc.doc = 'Total of paid dividends, paid on next following Equity Payment Date, which is immediately following the Dividend Ex Date, unless the Dividend Ex Date is between the Equity Valuation and Payment Date in which case the dividend is deferred to the following Equity Payment Date'} CumulativeEquityExDivBeforeReset,
  {meta::pure::profiles::doc.doc = 'Total of paid dividends, paid on next following Equity Payment Date, which is immediately following the Dividend Pay Date, unless the Dividend Pay Date is between the Equity Valuation and Payment Date (not including the Valuation Date) in which case the dividend is deferred to the following Equity Payment Date'} CumulativeEquityPaidBeforeReset,
  {meta::pure::profiles::doc.doc = 'Total of paid dividends, paid on next following Equity Payment Date, which is immediately following the Dividend Pay Date, unless the Dividend Pay Date is between the Equity Valuation and Payment Date (including the Valuation Date) in which case the dividend is deferred to the following Equity Payment Date'} CumulativeEquityPaidInclReset,
  {meta::pure::profiles::doc.doc = 'Total of dividends which go ex, paid on next following Interest Payment Date, which is immediately following the Dividend Period during which the Shares commence trading ex-dividend on the Exchange, or where the date on which the Shares commence trading ex-dividend is a Payment Date, such Payment Date.'} CumulativeInterestExDiv,
  {meta::pure::profiles::doc.doc = 'Total of paid dividends, paid on next following Interest Payment Date, which is immediately following the Dividend Period during which the dividend is paid by the Issuer to the holders of record of a Share.'} CumulativeInterestPaid,
  {meta::pure::profiles::doc.doc = 'Total of paid dividends, paid on next following Interest Payment Date, which is immediately following the Dividend Pay Date, unless the Dividend Pay Date is between the Equity Valuation and Payment Date (including the Valuation Date) in which case the dividend is deferred to the following Interest Payment Date.'} CumulativeInterestPaidInclReset,
  {meta::pure::profiles::doc.doc = 'Total of paid dividends, paid on next following Interest Payment Date, which is immediately following the Dividend Pay Date, unless the Dividend Pay Date is between the Equity Valuation and Payment Date (not including the Valuation Date) in which case the dividend is deferred to the following Interest Payment Date.'} CumulativeInterestPaidBeforeReset,
  {meta::pure::profiles::doc.doc = 'Date on which the dividend will be paid by the issuer.'} DividendPaymentDate,
  {meta::pure::profiles::doc.doc = 'In respect of each Dividend Period, the relevant Dividend Valuation Date.'} DividendValuationDate,
  {meta::pure::profiles::doc.doc = 'Equity payment date of the swap.'} EquityPaymentDate,
  {meta::pure::profiles::doc.doc = 'Date on which a holder of the security is entitled to the dividend.'} ExDate,
  {meta::pure::profiles::doc.doc = 'If \'Dividend Payment Date(s)\' is specified in the Transaction Supplement as \'Floating Amount Payment Date\', then the Dividend Payment Date in respect of a Dividend Amount shall be the first Payment Date falling at least one Settlement Cycle after the date that the Shares have commenced trading \'ex\' the relevant dividend on the Exchange.'} FloatingAmountPaymentDate,
  {meta::pure::profiles::doc.doc = 'The next payment date of the swap.'} FollowingPaymentDate,
  {meta::pure::profiles::doc.doc = 'Date on which the dividend will be recorded in the books of the paying agent.'} RecordDate,
  {meta::pure::profiles::doc.doc = 'If \'Dividend Payment Date(s)\' is specified in the Transaction Supplement as \'Share Payment\', then the Dividend Payment Date in respect of a Dividend Amount shall fall on a date on or before the date that is two (or any other number that is specified in the Transaction Supplement) Currency Business Days following the day on which the Issuer of the Shares pays the relevant dividend to holders of record of the Shares.'} SharePayment,
  {meta::pure::profiles::doc.doc = 'Termination date of the swap.'} TerminationDate,
  {meta::pure::profiles::doc.doc = 'Pays a fraction of the Dividend Amount on each Unwind Trade Settlement Date which occurs after the Dividend Ex Date, until position is fully unwound OR on the next Equity Pay Date after the Dividend Pay Date. This will be whichever date comes first or a combination of both.'} UnwindOrEquityExDiv,
  {meta::pure::profiles::doc.doc = 'Pays a fraction of the Dividend Amount on each Unwind Trade Settlement Date which occurs after the Dividend Pay Date, until position is fully unwound OR on the next Equity Pay Date after the Dividend Pay Date. This will be whichever date comes first or a combination of both.'} UnwindOrEquityPaid,
  {meta::pure::profiles::doc.doc = 'Pays a fraction of the Dividend Amount on each Unwind Trade Settlement Date which occurs after the Dividend Ex Date, until position is fully unwound OR on the next Interest Pay Date after the Dividend Ex Date. This will be whichever date comes first or a combination of both.'} UnwindOrInterestExDiv,
  {meta::pure::profiles::doc.doc = 'Pays a fraction of the Dividend Amount on each Unwind Trade Settlement Date which occurs after the Dividend Pay Date, until position is fully unwound OR on the next Interest Pay Date after the Dividend Pay Date. This will be whichever date comes first or a combination of both.'} UnwindOrInterestPaid,
  {meta::pure::profiles::doc.doc = 'Pays a fraction of the total on each Unwind Trade Settlement Date which occurs after the Dividend Ex Date, until trade is fully unwound.'} UnwindExDiv,
  {meta::pure::profiles::doc.doc = 'Pays a fraction of the total on each Unwind Trade Settlement Date which occurs after the Dividend Pay Date, until trade is fully unwound.'} UnwindPaid
}

Enum {meta::pure::profiles::doc.doc = 'Used in conjunction with an exchange-based pricing source. Identifies a date source calendar from which the pricing dates and thus roll to the next contract will be based off (e.g. pricing is based on the NYMEX WTI First Nearby Futures Contract, if Future is chosen, the pricing will roll to the next futures contract on expiration, if ListedOption is chosen, the pricing will roll to the next futures contract on the Option expiration date which is three business days before the expiration of the NYMEX WTI futures contract.) Omitting this element will result in the default behavior expected with the pricing source described within the commodity element.'} model::external::cdm::RollSourceCalendarEnum
{
  ListedOption,
  Future
}

Enum {meta::pure::profiles::doc.doc = 'Specifies whether the option is a call or a put.'} FpML::model::PutCallEnum
{
  Put,
  Call
}

Enum {meta::pure::profiles::doc.doc = 'The type of accounting method applied to inventory treatment.'} FpML::model::InventoryAccountingMethodEnum
{
  FIFO,
  LIFO,
  WeightedAverage
}

Enum {meta::pure::profiles::doc.doc = 'Defines the different cash settlement methods for a product where cash settlement is applicable.'} model::external::cdm::CashSettlementMethodEnum
{
  {meta::pure::profiles::doc.doc = 'An ISDA defined cash settlement method used for the determination of the applicable cash settlement amount. The method is defined in the 2006 ISDA Definitions, Section 18.3. Cash Settlement Methods, paragraph (a).'} CashPriceMethod,
  {meta::pure::profiles::doc.doc = 'An ISDA defined cash settlement method used for the determination of the applicable cash settlement amount. The method is defined in the 2006 ISDA Definitions, Section 18.3. Cash Settlement Methods, paragraph (b).'} CashPriceAlternateMethod,
  {meta::pure::profiles::doc.doc = 'An ISDA defined cash settlement method used for the determination of the applicable cash settlement amount. The method is defined in the 2006 ISDA Definitions, Section 18.3. Cash Settlement Methods, paragraph (c).'} ParYieldCurveAdjustedMethod,
  {meta::pure::profiles::doc.doc = 'An ISDA defined cash settlement method used for the determination of the applicable cash settlement amount. The method is defined in the 2006 ISDA Definitions, Section 18.3. Cash Settlement Methods, paragraph (d).'} ZeroCouponYieldAdjustedMethod,
  {meta::pure::profiles::doc.doc = 'An ISDA defined cash settlement method used for the determination of the applicable cash settlement amount. The method is defined in the 2006 ISDA Definitions, Section 18.3. Cash Settlement Methods, paragraph (e).'} ParYieldCurveUnadjustedMethod,
  {meta::pure::profiles::doc.doc = 'An ISDA defined cash settlement method used for the determination of the applicable cash settlement amount. The method is defined in the 2006 ISDA Definitions, Section 18.3. Cash Settlement Methods, paragraph (f) (published in Supplement number 23).'} CrossCurrencyMethod,
  {meta::pure::profiles::doc.doc = 'An ISDA defined cash settlement method (yield curve) used for the determination of the applicable cash settlement amount. The method is defined in the 2006 ISDA Definitions, Section 18.3. Cash Settlement Methods, paragraph (g) (published in Supplement number 28). The method is defined in the 2021 ISDA Definitions, section 18.2.6.'} CollateralizedCashPriceMethod,
  {meta::pure::profiles::doc.doc = 'An ISDA defined cash settlement method used for the determination of the applicable cash settlement amount. The method is defined in the 2021 ISDA Definitions, Section 18.2.1.'} MidMarketIndicativeQuotations,
  {meta::pure::profiles::doc.doc = 'An ISDA defined cash settlement method used for the determination of the applicable cash settlement amount. The method is defined in the 2021 ISDA Definitions, Section 18.2.2.'} MidMarketIndicativeQuotationsAlternate,
  {meta::pure::profiles::doc.doc = 'An ISDA defined cash settlement method used for the determination of the applicable cash settlement amount. The method is defined in the 2021 ISDA Definitions, Section 18.2.3.'} MidMarketCalculationAgentDetermination,
  {meta::pure::profiles::doc.doc = 'An ISDA defined cash settlement method used for the determination of the applicable cash settlement amount. The method is defined in the 2021 ISDA Definitions, Section 18.2.4.'} ReplacementValueFirmQuotations,
  {meta::pure::profiles::doc.doc = 'An ISDA defined cash settlement method used for the determination of the applicable cash settlement amount. The method is defined in the 2021 ISDA Definitions, Section 18.2.5'} ReplacementValueCalculationAgentDetermination
}

Enum {meta::pure::profiles::doc.doc = 'Represents an enumeration list that identifies the type of debt.'} model::external::cdm::DebtClassEnum
{
  {meta::pure::profiles::doc.doc = 'Identifies a debt instrument that has periodic income payments and value derived from or backed by a specified pool of underlying assets which could be mortgages or other obligations.'} AssetBacked,
  {meta::pure::profiles::doc.doc = 'Identifies a debt instrument that can be converted into common shares.'} Convertible,
  {meta::pure::profiles::doc.doc = 'Identifies a debt instrument as one issued by financial institutions to count towards regulatory capital, including term and perpetual subordinated debt, contingently convertible and others.  Excludes preferred share capital.'} RegCap,
  {meta::pure::profiles::doc.doc = 'Identifies a debt instrument athat has non-standard interest or principal features, with full recourse to the issuer.'} Structured,
  {meta::pure::profiles::doc.doc = 'Identifies a debt instrument that has a periodic coupon, a defined maturity, and is not backed by any specific asset. The seniority and the structure of the income and principal payments can optionally be defined in DebtType.DebtEconomics.'} Vanilla,
  {meta::pure::profiles::doc.doc = 'Identifies a debt instrument that can be converted primarily at the election of the holder into common shares of the Issuer.'} HolderConvertible,
  {meta::pure::profiles::doc.doc = 'Identifies a debt instrument that can be converted primarily at the election of the holder into common shares of a party other than the Issuer.'} HolderExchangeable,
  {meta::pure::profiles::doc.doc = 'Identifies a debt instrument that can be converted at the election of the Issuer into common shares of the Issuer.  Also known as reverse convertible.'} IssuerConvertible,
  {meta::pure::profiles::doc.doc = 'Identifies a debt instrument that can be converted at the election of the Issuer into common shares of a party other than the Issuer.  Also known as reverse exchangeable.'} IssuerExchangeable
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify the convention for adjusting any relevant date if it would otherwise fall on a day that is not a valid business day.'} model::external::cdm::BusinessDayConventionEnum
{
  {meta::pure::profiles::doc.doc = 'The non-business date will be adjusted to the first following day that is a business day'} FOLLOWING,
  {meta::pure::profiles::doc.doc = 'Per 2000 ISDA Definitions, Section 4.11. FRN Convention; Eurodollar Convention. FRN is included here as a type of business day convention although it does not strictly fall within ISDA\'s definition of a Business Day Convention and does not conform to the simple definition given above.'} FRN,
  {meta::pure::profiles::doc.doc = 'The non-business date will be adjusted to the first following day that is a business day unless that day falls in the next calendar month, in which case that date will be the first preceding day that is a business day.'} MODFOLLOWING,
  {meta::pure::profiles::doc.doc = 'The non-business day will be adjusted to the first preceding day that is a business day.'} PRECEDING,
  {meta::pure::profiles::doc.doc = 'The non-business date will be adjusted to the first preceding day that is a business day unless that day falls in the previous calendar month, in which case that date will be the first following day that us a business day.'} MODPRECEDING,
  {meta::pure::profiles::doc.doc = 'The non-business date will be adjusted to the nearest day that is a business day - i.e. if the non-business day falls on any day other than a Sunday or a Monday, it will be the first preceding day that is a business day, and will be the first following business day if it falls on a Sunday or a Monday.'} NEAREST,
  {meta::pure::profiles::doc.doc = 'The date will not be adjusted if it falls on a day that is not a business day.'} NONE,
  {meta::pure::profiles::doc.doc = 'The date adjustments conventions are defined elsewhere, so it is not required to specify them here.'} NotApplicable
}

Enum {meta::pure::profiles::doc.doc = 'The type of update to a record in a report.'} FpML::model::UpdateTypeEnum
{
  Created,
  Modified,
  Deleted
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify whether rate calculations occur relative to the first or last day of a calculation period. Done in uppercase due to a bug in code generation. This enumeration is used to represent the definitions of modular calculated rates as described in the 2021 ISDA Definitions, section 7.'} model::external::cdm::ObservationPeriodDatesEnum
{
  {meta::pure::profiles::doc.doc = 'Calculations occur relative to the first day of a calculation period.'} SetInAdvance,
  {meta::pure::profiles::doc.doc = 'Calculations occur relative to the last day of a calculation period (set in arrears).'} Standard,
  {meta::pure::profiles::doc.doc = 'Calculations occur relative to a previously defined reset date, e.g. for a fallback rate.'} FixingDate
}

Enum {meta::pure::profiles::doc.doc = 'Provides a list of possible types of cash prices, applicable when PriceTypeEnum is itself of type CashPrice.'} model::external::cdm::CashPriceTypeEnum
{
  {meta::pure::profiles::doc.doc = 'Denotes the amount payable by the buyer to the seller for an option. The premium is paid on the specified premium payment date or on each premium payment date if specified.'} Premium,
  {meta::pure::profiles::doc.doc = 'A generic term for describing a non-scheduled cashflow that can be associated either with the initial contract, with some later corrections to it (e.g. a correction to the day count fraction that has a cashflow impact) or with some lifecycle events. Fees that are specifically associated with termination and partial termination, increase, amendment, and exercise events are qualified accordingly.'} Fee,
  {meta::pure::profiles::doc.doc = 'Denotes a discount factor expressed as a decimal, e.g. 0.95.'} Discount
}

Enum {meta::pure::profiles::doc.doc = 'Provides enumerated values for financial units, generally used in the context of defining quantities for securities.'} model::external::cdm::FinancialUnitEnum
{
  {meta::pure::profiles::doc.doc = 'Denotes financial contracts, such as listed futures and options.'} Contract,
  {meta::pure::profiles::doc.doc = 'Denotes a Contractual Product as defined in the CDM.  This unit type would be used when the price applies to the whole product, for example, in the case of a premium expressed as a cash amount.'} ContractualProduct,
  {meta::pure::profiles::doc.doc = 'Denotes a price expressed in index points, e.g. for a stock index.'} IndexUnit,
  {meta::pure::profiles::doc.doc = 'Denotes a log normal volatility, expressed in %/month, where the percentage is represented as a decimal. For example, 0.15 means a log-normal volatility of 15% per month.'} LogNormalVolatility,
  {meta::pure::profiles::doc.doc = 'Denotes the number of units of financial stock shares.'} Share,
  {meta::pure::profiles::doc.doc = 'Denotes a value (expressed in currency units) for a one day change in a valuation date, which is typically used for expressing sensitivity to the passage of time, also known as theta risk, or carry, or other names.'} ValuePerDay,
  {meta::pure::profiles::doc.doc = 'Denotes a value (expressed in currency units) per percent change in the underlying rate which is typically used for expressing sensitivity to volatility changes, also known as vega risk.'} ValuePerPercent,
  {meta::pure::profiles::doc.doc = 'Denotes a quantity (expressed as a decimal value) represented the weight of a component in a basket.'} Weight
}

Enum {meta::pure::profiles::doc.doc = 'Specifies a Repo or Security Lending arangement: Everdeen or Extendible.'} FpML::model::ExtensionStyleEnum
{
  Evergreen,
  Extendable
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify the normalized exceptions applicable to an Initial Margin CSA.'} model::external::cdm::ExceptionEnum
{
  {meta::pure::profiles::doc.doc = 'The election is applicable.'} Applicable,
  {meta::pure::profiles::doc.doc = 'The exception is not applicable. ISDA 2016 Credit Support Annex for Initial Margin, paragraph 13, General Principles. | ISDA 2018 Credit Support Annex for Initial Margin, paragraph 13, General Principles.'} NotApplicable,
  {meta::pure::profiles::doc.doc = 'An alternative approach is described in the document as follows.'} Other
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify the list of information providers.'} model::external::cdm::InformationProviderEnum
{
  {meta::pure::profiles::doc.doc = 'The Association of Banks in Singapore.'} AssocBanksSingapore,
  {meta::pure::profiles::doc.doc = 'The central bank of Canada.'} BankOfCanada,
  {meta::pure::profiles::doc.doc = 'The Bank Of England.'} BankOfEngland,
  {meta::pure::profiles::doc.doc = 'The central bank of Japan.'} BankOfJapan,
  {meta::pure::profiles::doc.doc = 'Bloomberg LP.'} Bloomberg,
  {meta::pure::profiles::doc.doc = 'The European Central Bank.'} EuroCentralBank,
  {meta::pure::profiles::doc.doc = 'The Federal Home Loan Bank of San Francisco, or its successor.'} FHLBSF,
  {meta::pure::profiles::doc.doc = 'The Federal Reserve, the central bank of the United States.'} FederalReserve,
  {meta::pure::profiles::doc.doc = 'International Swaps and Derivatives Association, Inc.'} ISDA,
  Other,
  {meta::pure::profiles::doc.doc = 'The Reserve Bank of Australia.'} ReserveBankAustralia,
  {meta::pure::profiles::doc.doc = 'The Reserve Bank of New Zealand.'} ReserveBankNewZealand,
  {meta::pure::profiles::doc.doc = 'Reuters Group Plc.'} Reuters,
  {meta::pure::profiles::doc.doc = 'South African Futures Exchange, or its successor.'} SAFEX,
  {meta::pure::profiles::doc.doc = 'Telerate, Inc.'} Telerate
}

Enum {meta::pure::profiles::doc.doc = 'The specification of how disruption fallbacks will be represented.'} FpML::model::DisruptionFallbacksEnum
{
  AsSpecifiedInMasterAgreement,
  AsSpecifiedInConfirmation
}

Enum {meta::pure::profiles::doc.doc = 'Defines whether conditions precedent have been met in a given syndicated loan deal.'} FpML::model::ConditionsPrecedentMetEnum
{
  No,
  Waived,
  Yes
}

Enum model::external::cdm::GrossOrNetEnum
{
  {meta::pure::profiles::doc.doc = 'Denotes a negotiated price for a security or listed product, including as applicable any commissions, discounts, accrued interest, and rebates.'} Gross,
  {meta::pure::profiles::doc.doc = 'Denotes a negotiated price for a security or listed product, excluding as applicable any commissions, discounts, accrued interest, and rebates.'} Net,
  {meta::pure::profiles::doc.doc = 'Denotes the amount of commission on the trade.'} Commission
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify the type of the option. In FpML, OptionTypeEnum is a union with PutCallEnum, which specifies whether the option is a put or a call.'} model::external::cdm::OptionTypeEnum
{
  {meta::pure::profiles::doc.doc = 'A put option gives the holder the right to sell the underlying asset by a certain date for a certain price.'} Put,
  {meta::pure::profiles::doc.doc = 'A call option gives the holder the right to buy the underlying asset by a certain date for a certain price.'} Call,
  {meta::pure::profiles::doc.doc = 'A \'payer\' option: If you buy a \'payer\' option you have the right but not the obligation to enter into the underlying swap transaction as the \'fixed\' rate/price payer and receive float.'} Payer,
  {meta::pure::profiles::doc.doc = 'A \'receiver\' option: If you buy a \'receiver\' option you have the right but not the obligation to enter into the underlying swap transaction as the \'fixed\' rate/price receiver and pay float.'} Receiver,
  {meta::pure::profiles::doc.doc = 'A straddle strategy, which involves the simultaneous buying of a put and a call of the same underlier, at the same strike and same expiration date'} Straddle
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify the period, e.g. day, week.'} model::external::cdm::PeriodEnum
{
  {meta::pure::profiles::doc.doc = 'Day'} D,
  {meta::pure::profiles::doc.doc = 'Week'} W,
  {meta::pure::profiles::doc.doc = 'Month'} M,
  {meta::pure::profiles::doc.doc = 'Year'} Y
}

Enum {meta::pure::profiles::doc.doc = 'The specification of whether a barrier has effect for the current expiry period, or globally to the whole product.'} FpML::model::FxBarrierScopeEnum
{
  Global,
  PerExpiry
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify the business centers.'} model::external::cdm::BusinessCenterEnum
{
  {meta::pure::profiles::doc.doc = 'Abu Dhabi, United Arab Emirates'} AEAD,
  {meta::pure::profiles::doc.doc = 'Dubai, United Arab Emirates'} AEDU,
  {meta::pure::profiles::doc.doc = 'Yerevan, Armenia'} AMYE,
  {meta::pure::profiles::doc.doc = 'Luanda, Angola'} AOLU,
  {meta::pure::profiles::doc.doc = 'Buenos Aires, Argentina'} ARBA,
  {meta::pure::profiles::doc.doc = 'Vienna, Austria'} ATVI,
  {meta::pure::profiles::doc.doc = 'Adelaide, Australia'} AUAD,
  {meta::pure::profiles::doc.doc = 'Brisbane, Australia'} AUBR,
  {meta::pure::profiles::doc.doc = 'Canberra, Australia'} AUCA,
  {meta::pure::profiles::doc.doc = 'Darwin, Australia'} AUDA,
  {meta::pure::profiles::doc.doc = 'Melbourne, Australia'} AUME,
  {meta::pure::profiles::doc.doc = 'Perth, Australia'} AUPE,
  {meta::pure::profiles::doc.doc = 'Sydney, Australia'} AUSY,
  {meta::pure::profiles::doc.doc = 'Bridgetown, Barbados'} BBBR,
  {meta::pure::profiles::doc.doc = 'Dhaka, Bangladesh'} BDDH,
  {meta::pure::profiles::doc.doc = 'Brussels, Belgium'} BEBR,
  {meta::pure::profiles::doc.doc = 'Sofia, Bulgaria'} BGSO,
  {meta::pure::profiles::doc.doc = 'Manama, Bahrain'} BHMA,
  {meta::pure::profiles::doc.doc = 'Hamilton, Bermuda'} BMHA,
  {meta::pure::profiles::doc.doc = 'Bandar Seri Begawan, Brunei'} BNBS,
  {meta::pure::profiles::doc.doc = 'La Paz, Bolivia'} BOLP,
  {meta::pure::profiles::doc.doc = 'Brazil Business Day. This means a business day in any of Sao Paulo, Rio de Janeiro or Brasilia not otherwise declared as a financial market holiday by the Bolsa de Mercadorias & Futuros (BM&F)'} BRBD,
  {meta::pure::profiles::doc.doc = 'Brasilia, Brazil'} BRBR,
  {meta::pure::profiles::doc.doc = 'Rio de Janeiro, Brazil'} BRRJ,
  {meta::pure::profiles::doc.doc = 'Sao Paulo, Brazil'} BRSP,
  {meta::pure::profiles::doc.doc = 'Nassau, Bahamas'} BSNA,
  {meta::pure::profiles::doc.doc = 'Gaborone, Botswana'} BWGA,
  {meta::pure::profiles::doc.doc = 'Minsk, Belarus'} BYMI,
  {meta::pure::profiles::doc.doc = 'Calgary, Canada'} CACL,
  {meta::pure::profiles::doc.doc = 'Montreal, Canada'} CAMO,
  {meta::pure::profiles::doc.doc = 'Ottawa, Canada'} CAOT,
  {meta::pure::profiles::doc.doc = 'Toronto, Canada'} CATO,
  {meta::pure::profiles::doc.doc = 'Vancouver, Canada'} CAVA,
  {meta::pure::profiles::doc.doc = 'Winnipeg, Canada'} CAWI,
  {meta::pure::profiles::doc.doc = 'Basel, Switzerland'} CHBA,
  {meta::pure::profiles::doc.doc = 'Geneva, Switzerland'} CHGE,
  {meta::pure::profiles::doc.doc = 'Zurich, Switzerland'} CHZU,
  {meta::pure::profiles::doc.doc = 'Abidjan, Cote d\'Ivoire'} CIAB,
  {meta::pure::profiles::doc.doc = 'Santiago, Chile'} CLSA,
  {meta::pure::profiles::doc.doc = 'Beijing, China'} CNBE,
  {meta::pure::profiles::doc.doc = 'Shanghai, China'} CNSH,
  {meta::pure::profiles::doc.doc = 'Bogota, Colombia'} COBO,
  {meta::pure::profiles::doc.doc = 'San Jose, Costa Rica'} CRSJ,
  {meta::pure::profiles::doc.doc = 'Nicosia, Cyprus'} CYNI,
  {meta::pure::profiles::doc.doc = 'Prague, Czech Republic'} CZPR,
  {meta::pure::profiles::doc.doc = 'Cologne, Germany'} DECO,
  {meta::pure::profiles::doc.doc = 'Dusseldorf, Germany'} DEDU,
  {meta::pure::profiles::doc.doc = 'Frankfurt, Germany'} DEFR,
  {meta::pure::profiles::doc.doc = 'Hamburg, Germany'} DEHH,
  {meta::pure::profiles::doc.doc = 'Leipzig, Germany'} DELE,
  {meta::pure::profiles::doc.doc = 'Mainz, Germany'} DEMA,
  {meta::pure::profiles::doc.doc = 'Munich, Germany'} DEMU,
  {meta::pure::profiles::doc.doc = 'Stuttgart, Germany'} DEST,
  {meta::pure::profiles::doc.doc = 'Copenhagen, Denmark'} DKCO,
  {meta::pure::profiles::doc.doc = 'Santo Domingo, Dominican Republic'} DOSD,
  {meta::pure::profiles::doc.doc = 'Algiers, Algeria'} DZAL,
  {meta::pure::profiles::doc.doc = 'Tallinn, Estonia'} EETA,
  {meta::pure::profiles::doc.doc = 'Cairo, Egypt'} EGCA,
  {meta::pure::profiles::doc.doc = 'ESAS Settlement Day (as defined in 2006 ISDA Definitions Section 7.1 and Supplement Number 15 to the 2000 ISDA Definitions)'} ESAS,
  {meta::pure::profiles::doc.doc = 'Barcelona, Spain'} ESBA,
  {meta::pure::profiles::doc.doc = 'Madrid, Spain'} ESMA,
  {meta::pure::profiles::doc.doc = 'Addis Ababa, Ethiopia'} ETAA,
  {meta::pure::profiles::doc.doc = 'TARGET (euro \'Business Center\')'} EUTA,
  {meta::pure::profiles::doc.doc = 'Helsinki, Finland'} FIHE,
  {meta::pure::profiles::doc.doc = 'Paris, France'} FRPA,
  {meta::pure::profiles::doc.doc = 'Edinburgh, Scotland'} GBED,
  {meta::pure::profiles::doc.doc = 'London, United Kingdom'} GBLO,
  {meta::pure::profiles::doc.doc = 'Tbilisi, Georgia'} GETB,
  {meta::pure::profiles::doc.doc = 'Saint Peter Port, Guernsey'} GGSP,
  {meta::pure::profiles::doc.doc = 'Accra, Ghana'} GHAC,
  {meta::pure::profiles::doc.doc = 'Athens, Greece'} GRAT,
  {meta::pure::profiles::doc.doc = 'Hong Kong, Hong Kong'} HKHK,
  {meta::pure::profiles::doc.doc = 'Tegucigalpa, Honduras'} HNTE,
  {meta::pure::profiles::doc.doc = 'Zagreb, Republic of Croatia'} HRZA,
  {meta::pure::profiles::doc.doc = 'Budapest, Hungary'} HUBU,
  {meta::pure::profiles::doc.doc = 'Jakarta, Indonesia'} IDJA,
  {meta::pure::profiles::doc.doc = 'Dublin, Ireland'} IEDU,
  {meta::pure::profiles::doc.doc = 'Jerusalem, Israel'} ILJE,
  {meta::pure::profiles::doc.doc = 'Tel Aviv, Israel'} ILTA,
  {meta::pure::profiles::doc.doc = 'Bangalore, India'} INBA,
  {meta::pure::profiles::doc.doc = 'Chennai, India'} INCH,
  {meta::pure::profiles::doc.doc = 'Hyderabad, India'} INHY,
  {meta::pure::profiles::doc.doc = 'Kolkata, India'} INKO,
  {meta::pure::profiles::doc.doc = 'Mumbai, India'} INMU,
  {meta::pure::profiles::doc.doc = 'New Delhi, India'} INND,
  {meta::pure::profiles::doc.doc = 'Tehran, Iran'} IRTE,
  {meta::pure::profiles::doc.doc = 'Reykjavik, Iceland'} ISRE,
  {meta::pure::profiles::doc.doc = 'Milan, Italy'} ITMI,
  {meta::pure::profiles::doc.doc = 'Rome, Italy'} ITRO,
  {meta::pure::profiles::doc.doc = 'Turin, Italy'} ITTU,
  {meta::pure::profiles::doc.doc = 'St. Helier, Channel Islands, Jersey'} JESH,
  {meta::pure::profiles::doc.doc = 'Kingston, Jamaica'} JMKI,
  {meta::pure::profiles::doc.doc = 'Amman, Jordan'} JOAM,
  {meta::pure::profiles::doc.doc = 'Tokyo, Japan'} JPTO,
  {meta::pure::profiles::doc.doc = 'Nairobi, Kenya'} KENA,
  {meta::pure::profiles::doc.doc = 'Seoul, Republic of Korea'} KRSE,
  {meta::pure::profiles::doc.doc = 'Kuwait City, Kuwait'} KWKC,
  {meta::pure::profiles::doc.doc = 'George Town, Cayman Islands'} KYGE,
  {meta::pure::profiles::doc.doc = 'Almaty, Kazakhstan'} KZAL,
  {meta::pure::profiles::doc.doc = 'Beirut, Lebanon'} LBBE,
  {meta::pure::profiles::doc.doc = 'Colombo, Sri Lanka'} LKCO,
  {meta::pure::profiles::doc.doc = 'Luxembourg, Luxembourg'} LULU,
  {meta::pure::profiles::doc.doc = 'Riga, Latvia'} LVRI,
  {meta::pure::profiles::doc.doc = 'Casablanca, Morocco'} MACA,
  {meta::pure::profiles::doc.doc = 'Rabat, Morocco'} MARA,
  {meta::pure::profiles::doc.doc = 'Monaco, Monaco'} MCMO,
  {meta::pure::profiles::doc.doc = 'Macau, Macao'} MOMA,
  {meta::pure::profiles::doc.doc = 'Valletta, Malta'} MTVA,
  {meta::pure::profiles::doc.doc = 'Port Louis, Mauritius'} MUPL,
  {meta::pure::profiles::doc.doc = 'Male, Maldives'} MVMA,
  {meta::pure::profiles::doc.doc = 'Lilongwe, Malawi'} MWLI,
  {meta::pure::profiles::doc.doc = 'Mexico City, Mexico'} MXMC,
  {meta::pure::profiles::doc.doc = 'Kuala Lumpur, Malaysia'} MYKL,
  {meta::pure::profiles::doc.doc = 'Labuan, Malaysia'} MYLA,
  {meta::pure::profiles::doc.doc = 'Windhoek, Namibia'} NAWI,
  {meta::pure::profiles::doc.doc = 'Abuja, Nigeria'} NGAB,
  {meta::pure::profiles::doc.doc = 'Lagos, Nigeria'} NGLA,
  {meta::pure::profiles::doc.doc = 'Amsterdam, Netherlands'} NLAM,
  {meta::pure::profiles::doc.doc = 'Rotterdam, Netherlands'} NLRO,
  {meta::pure::profiles::doc.doc = 'Oslo, Norway'} NOOS,
  {meta::pure::profiles::doc.doc = 'Kathmandu, Nepal'} NPKA,
  {meta::pure::profiles::doc.doc = 'New York Fed Business Day (as defined in 2006 ISDA Definitions Section 1.9 and 2000 ISDA Definitions Section 1.9)'} NYFD,
  {meta::pure::profiles::doc.doc = 'New York Stock Exchange Business Day (as defined in 2006 ISDA Definitions Section 1.10 and 2000 ISDA Definitions Section 1.10)'} NYSE,
  {meta::pure::profiles::doc.doc = 'Auckland, New Zealand'} NZAU,
  {meta::pure::profiles::doc.doc = 'Wellington, New Zealand'} NZWE,
  {meta::pure::profiles::doc.doc = 'Muscat, Oman'} OMMU,
  {meta::pure::profiles::doc.doc = 'Panama City, Panama'} PAPC,
  {meta::pure::profiles::doc.doc = 'Lima, Peru'} PELI,
  {meta::pure::profiles::doc.doc = 'Manila, Philippines'} PHMA,
  {meta::pure::profiles::doc.doc = 'Makati, Philippines'} PHMK,
  {meta::pure::profiles::doc.doc = 'Karachi, Pakistan'} PKKA,
  {meta::pure::profiles::doc.doc = 'Warsaw, Poland'} PLWA,
  {meta::pure::profiles::doc.doc = 'San Juan, Puerto Rico'} PRSJ,
  {meta::pure::profiles::doc.doc = 'Lisbon, Portugal'} PTLI,
  {meta::pure::profiles::doc.doc = 'Doha, Qatar'} QADO,
  {meta::pure::profiles::doc.doc = 'Bucarest, Romania'} ROBU,
  {meta::pure::profiles::doc.doc = 'Belgrade, Serbia'} RSBE,
  {meta::pure::profiles::doc.doc = 'Moscow, Russian Federation'} RUMO,
  {meta::pure::profiles::doc.doc = 'Abha, Saudi Arabia'} SAAB,
  {meta::pure::profiles::doc.doc = 'Jeddah, Saudi Arabia'} SAJE,
  {meta::pure::profiles::doc.doc = 'Riyadh, Saudi Arabia'} SARI,
  {meta::pure::profiles::doc.doc = 'Stockholm, Sweden'} SEST,
  {meta::pure::profiles::doc.doc = 'Singapore, Singapore'} SGSI,
  {meta::pure::profiles::doc.doc = 'Ljubljana, Slovenia'} SILJ,
  {meta::pure::profiles::doc.doc = 'Bratislava, Slovakia'} SKBR,
  {meta::pure::profiles::doc.doc = 'Dakar, Senegal'} SNDA,
  {meta::pure::profiles::doc.doc = 'San Salvador, El Salvador'} SVSS,
  {meta::pure::profiles::doc.doc = 'Bangkok, Thailand'} THBA,
  {meta::pure::profiles::doc.doc = 'Tunis, Tunisia'} TNTU,
  {meta::pure::profiles::doc.doc = 'Ankara, Turkey'} TRAN,
  {meta::pure::profiles::doc.doc = 'Istanbul, Turkey'} TRIS,
  {meta::pure::profiles::doc.doc = 'Port of Spain, Trinidad and Tobago'} TTPS,
  {meta::pure::profiles::doc.doc = 'Taipei, Taiwan'} TWTA,
  {meta::pure::profiles::doc.doc = 'Dar es Salaam, Tanzania'} TZDA,
  {meta::pure::profiles::doc.doc = 'Dodoma, Tanzania'} TZDO,
  {meta::pure::profiles::doc.doc = 'Kiev, Ukraine'} UAKI,
  {meta::pure::profiles::doc.doc = 'Kampala, Uganda'} UGKA,
  {meta::pure::profiles::doc.doc = 'Boston, Massachusetts, United States'} USBO,
  {meta::pure::profiles::doc.doc = 'Chicago, United States'} USCH,
  {meta::pure::profiles::doc.doc = 'Charlotte, North Carolina, United States'} USCR,
  {meta::pure::profiles::doc.doc = 'Washington, District of Columbia, United States'} USDC,
  {meta::pure::profiles::doc.doc = 'Denver, United States'} USDN,
  {meta::pure::profiles::doc.doc = 'Detroit, Michigan, United States'} USDT,
  {meta::pure::profiles::doc.doc = 'U.S. Government Securities Business Day (as defined in 2006 ISDA Definitions Section 1.11 and 2000 ISDA Definitions Section 1.11)'} USGS,
  {meta::pure::profiles::doc.doc = 'Honolulu, Hawaii, United States'} USHL,
  {meta::pure::profiles::doc.doc = 'Houston, United States'} USHO,
  {meta::pure::profiles::doc.doc = 'Los Angeles, United States'} USLA,
  {meta::pure::profiles::doc.doc = 'Mobile, Alabama, United States'} USMB,
  {meta::pure::profiles::doc.doc = 'Minneapolis, United States'} USMN,
  {meta::pure::profiles::doc.doc = 'New York, United States'} USNY,
  {meta::pure::profiles::doc.doc = 'Portland, Oregon, United States'} USPO,
  {meta::pure::profiles::doc.doc = 'Sacramento, California, United States'} USSA,
  {meta::pure::profiles::doc.doc = 'Seattle, United States'} USSE,
  {meta::pure::profiles::doc.doc = 'Wichita, United States'} USWT,
  {meta::pure::profiles::doc.doc = 'Montevideo, Uruguay'} UYMO,
  {meta::pure::profiles::doc.doc = 'Caracas, Venezuela'} VECA,
  {meta::pure::profiles::doc.doc = 'Road Town, Virgin Islands (British)'} VGRT,
  {meta::pure::profiles::doc.doc = 'Hanoi, Vietnam'} VNHA,
  {meta::pure::profiles::doc.doc = 'Ho Chi Minh (formerly Saigon), Vietnam'} VNHC,
  {meta::pure::profiles::doc.doc = 'Aden, Yemen'} YEAD,
  {meta::pure::profiles::doc.doc = 'Johannesburg, South Africa'} ZAJO,
  {meta::pure::profiles::doc.doc = 'Lusaka, Zambia'} ZMLU,
  {meta::pure::profiles::doc.doc = 'Harare, Zimbabwe'} ZWHA,
  {meta::pure::profiles::doc.doc = 'Abu Dhabi Securities Exchange https://www.adx.ae/'} ADSM,
  {meta::pure::profiles::doc.doc = 'Argus Media Fertilizer Reports. http://www.argusmedia.com/Fertilizer'} AGRUSFMB,
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Section 7.2 Certain Definitions Relating To Commodity Reference Prices'} APPI,
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Section 7.2 Certain Definitions Relating To Commodity Reference Prices'} ARGUSCRUDE,
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Section 7.2 Certain Definitions Relating To Commodity Reference Prices'} ARGUSEUROPEANGAS,
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Section 7.2 Certain Definitions Relating To Commodity Reference Prices'} ARGUSEUROPEANPRODUCTS,
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Section 7.2 Certain Definitions Relating To Commodity Reference Prices'} ARGUSINTERNATIONALLPG,
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Section 7.2 Certain Definitions Relating To Commodity Reference Prices.'} ARGUSMCCLOSKEYSCOALREPORT,
  {meta::pure::profiles::doc.doc = 'The Argus US Products report. http://www.argusmedia.com/Petroleum/Petroleum-Products/Argus-US-Products'} ARGUSUSPRODUCTS,
  {meta::pure::profiles::doc.doc = 'Australian Securities Exchange http://www.asx.com.au/'} ASX,
  {meta::pure::profiles::doc.doc = 'Australian Wheat Board. www.awb.com.au'} AWB,
  {meta::pure::profiles::doc.doc = 'Australian Wool Exchange. http://www.awex.com.au/home.html'} AWEX,
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Section 7.2 Certain Definitions Relating To Commodity Reference Prices.'} BALTICEXCHANGE,
  {meta::pure::profiles::doc.doc = 'The business calendar of the Bank Negara Malaysia Policy Committee.'} BANKNEGARAMALAYSIAPOLICYCOMMITTEE,
  {meta::pure::profiles::doc.doc = 'The business calendar for the Belpex power exchange (www.belpex.be).'} BELPEX,
  {meta::pure::profiles::doc.doc = 'BlueNext Power Market.'} BLUENEXT,
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Section 7.2 Certain Definitions Relating To Commodity Reference Prices.'} BMandF,
  {meta::pure::profiles::doc.doc = 'The settlement business calendar for Bursa Malaysia.'} BURSAMALAYSIASETTLEMENT,
  {meta::pure::profiles::doc.doc = 'The trading business calendar for Bursa Malaysia.'} BURSAMALAYSIATRADING,
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Section 7.2 Certain Definitions Relating To Commodity Reference Prices'} CANADIANGASPRICEREPORTER,
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Section 7.2 Certain Definitions Relating To Commodity Reference Prices.'} CBOTSOFT,
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Section 7.2 Certain Definitions Relating To Commodity Reference Prices.'} CMAIAROMATICSMARKETREPORT,
  {meta::pure::profiles::doc.doc = 'CMAI Global Plastics and Polymers Market Report. http://www.ihs.com/products/chemical/index.aspx?pu=1&rd=cmai'} CMAIGLOBALPLASTICSANDPOLYMERSMARKETREPORT,
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Section 7.2 Certain Definitions Relating To Commodity Reference Prices.'} CMAIMETHANOLMARKETREPORT,
  {meta::pure::profiles::doc.doc = 'CMAI Monomers Market Report. http://www.ihs.com/products/chemical/index.aspx?pu=1&rd=cmai'} CMAIMONOMERSMARKETREPORT,
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Section 7.2 Certain Definitions Relating To Commodity Reference Prices.'} CMEDAIRY,
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Section 7.2 Certain Definitions Relating To Commodity Reference Prices.'} CMENONDAIRYSOFT,
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Section 7.2 Certain Definitions Relating To Commodity Reference Prices.'} COMEX,
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Section 7.2 Certain Definitions Relating To Commodity Reference Prices.'} CRU,
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Section 7.2 Certain Definitions Relating To Commodity Reference Prices.'} CRULONG,
  {meta::pure::profiles::doc.doc = 'The business calendar for statistical publications by the by the United States Department of Energy (DOE).'} DEPARTMENTOFENERGY,
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Section 7.2 Certain Definitions Relating To Commodity Reference Prices.'} DEWITTBENZENEDERIVATIVES,
  {meta::pure::profiles::doc.doc = 'Dubai Mercantile Exchange. http://www.dubaimerc.com/'} DME,
  {meta::pure::profiles::doc.doc = 'Dow Jones US Calendar. http://www.dowjones.com/'} DOWJONES,
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Section 7.2 Certain Definitions Relating To Commodity Reference Prices.'} DOWJONESENERGYSERVICE,
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Section 7.2 Certain Definitions Relating To Commodity Reference Prices.'} DowJonesPower,
  {meta::pure::profiles::doc.doc = 'European Energy Exchange-Coal'} EEXCOAL,
  {meta::pure::profiles::doc.doc = 'European Energy Exchange-Emissions Rights'} EEXEMISSIONS,
  {meta::pure::profiles::doc.doc = 'European Energy Exchange-Gas'} EEXGAS,
  {meta::pure::profiles::doc.doc = 'European Energy Exchange-Power'} EEXPOWER,
  {meta::pure::profiles::doc.doc = 'TBD.'} EURONEXMATIF,
  {meta::pure::profiles::doc.doc = 'FERTECON Limited Information Services. http://fertecon.com/current_information_services.asp'} FERTECON,
  {meta::pure::profiles::doc.doc = 'Fertilizer Week. http://www.crugroup.com/market-analysis/products/fertilizerweek'} FERTILIZERWEEK,
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Section 7.2 Certain Definitions Relating To Commodity Reference Prices.'} GASDAILY,
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Section 7.2 Certain Definitions Relating To Commodity Reference Prices.'} GASDAILYPRICEGUIDE,
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Section 7.2 Certain Definitions Relating To Commodity Reference Prices.'} GLOBALCOAL,
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Section 7.2 Certain Definitions Relating To Commodity Reference Prices.'} HERENREPORT,
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Section 7.2 Certain Definitions Relating To Commodity Reference Prices.'} ICE10XDAILY,
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Section 7.2 Certain Definitions Relating To Commodity Reference Prices.'} ICE10XMONTHLY,
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Section 7.2 Certain Definitions Relating To Commodity Reference Prices.'} ICECANADA,
  {meta::pure::profiles::doc.doc = 'European Climate Exchange.'} ICEECX,
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Section 7.2 Certain Definitions Relating To Commodity Reference Prices.'} ICEGAS,
  {meta::pure::profiles::doc.doc = 'The business calendar oil and refined product contracts on ICE Futures Europe.'} ICEOIL,
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Section 7.2 Certain Definitions Relating To Commodity Reference Prices.'} ICEUSAGRICULTURAL,
  {meta::pure::profiles::doc.doc = 'The business calendar for publication of ICIS Benzene (Europe) data.'} ICISPRICINGBENZENEEUROPE,
  {meta::pure::profiles::doc.doc = 'The business calendar for publication of ICIS Ethylene (Europe) data.'} ICISPRICINGETHYLENEEUROPE,
  {meta::pure::profiles::doc.doc = 'The business calendar for publication of ICIS Polyproylene (Europe) data.'} ICISPRICINGPOLYPROPYLENEEUROPE,
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Section 7.2 Certain Definitions Relating To Commodity Reference Prices.'} INSIDEFERC,
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Section 7.2 Certain Definitions Relating To Commodity Reference Prices.'} JAPANMOFTSRR,
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Section 7.2 Certain Definitions Relating To Commodity Reference Prices.'} KCBOT,
  {meta::pure::profiles::doc.doc = 'The banking business calendar in Kuala Lumpur.'} KUALALUMPURBANK,
  {meta::pure::profiles::doc.doc = 'The business calendar for the Labuan Bank (Malaysia).'} LABUANBANK,
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Section 7.2 Certain Definitions Relating To Commodity Reference Prices.'} LIFFELONDONSOFT,
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Section 7.2 Certain Definitions Relating To Commodity Reference Prices.'} LME,
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Section 7.2 Certain Definitions Relating To Commodity Reference Prices.'} LONDONBULLIONMARKET,
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Section 7.2 Certain Definitions Relating To Commodity Reference Prices.'} LONDONBULLIONMARKETGOLDAMONLY,
  {meta::pure::profiles::doc.doc = 'The London Platinum and Palladium Market in London on which members quote prices for the buying and selling of Platinum and Palladium.'} LONDONPLATINUMPALLADIUMMARKET,
  {meta::pure::profiles::doc.doc = 'Minneapolis Grain Exchange http://www.mgex.com/'} MGEX,
  {meta::pure::profiles::doc.doc = 'The business calendar for the N2EX UK power exchange (https://www.n2ex.com/aboutn2ex).'} N2EX,
  {meta::pure::profiles::doc.doc = 'NASDAQ-OMX (Formerly known as Nordpool). http://www.nasdaqomx.com/commodities'} NASDAQOMX,
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Section 7.2 Certain Definitions Relating To Commodity Reference Prices.'} NATURALGASWEEK,
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Article XIV.'} NERC,
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Section 7.2 Certain Definitions Relating To Commodity Reference Prices.'} NGI,
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Section 7.2 Certain Definitions Relating To Commodity Reference Prices.'} NGX,
  {meta::pure::profiles::doc.doc = 'The Nuclear Market Review report as published by Trade tech. http://www.uranium.info/nuclear_market_review.php'} NUCLEARMARKETREVIEW,
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Section 7.2 Certain Definitions Relating To Commodity Reference Prices.'} NYMEXELECTRICITY,
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Section 7.2 Certain Definitions Relating To Commodity Reference Prices.'} NYMEXGAS,
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Section 7.2 Certain Definitions Relating To Commodity Reference Prices.'} NYMEXNATURALGAS,
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Section 7.2 Certain Definitions Relating To Commodity Reference Prices.'} NYMEXOIL,
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Section 7.2 Certain Definitions Relating To Commodity Reference Prices.'} OFFICIALBOARDMARKETS,
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Section 7.2 Certain Definitions Relating To Commodity Reference Prices.'} OPISLPGAS,
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Section 7.2 Certain Definitions Relating To Commodity Reference Prices.'} OPISPROPANE,
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Section 7.2 Certain Definitions Relating To Commodity Reference Prices.'} PAPERPACKAGINGMONITOR,
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Section 7.2 Certain Definitions Relating To Commodity Reference Prices.'} PAPERTRADER,
  {meta::pure::profiles::doc.doc = 'Pertamina-Indonesia. http://www.pertamina.com/'} PERTAMINA,
  {meta::pure::profiles::doc.doc = 'PetroChemWire Publication Calendar. http://www.petrochemwire.com/'} PETROCHEMWIRE,
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Section 7.2 Certain Definitions Relating To Commodity Reference Prices'} PIXPULPBENCHMARKINDICES,
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Section 7.2 Certain Definitions Relating To Commodity Reference Prices'} PLATTSAPAGMARKETSCAN,
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Section 7.2 Certain Definitions Relating To Commodity Reference Prices'} PLATTSBUNKERWIRE,
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Section 7.2 Certain Definitions Relating To Commodity Reference Prices'} PLATTSCLEANTANKERWIRE,
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Section 7.2 Certain Definitions Relating To Commodity Reference Prices'} PLATTSCRUDEOILMARKETWIRE,
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Section 7.2 Certain Definitions Relating To Commodity Reference Prices'} PLATTSDIRTYTANKERWIRE,
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Section 7.2 Certain Definitions Relating To Commodity Reference Prices'} PLATTSEUROPEANGAS,
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Section 7.2 Certain Definitions Relating To Commodity Reference Prices'} PLATTSEUROPEANMARKETSCAN,
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Section 7.2 Certain Definitions Relating To Commodity Reference Prices'} PLATTSMETALSALERT,
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Section 7.2 Certain Definitions Relating To Commodity Reference Prices'} PLATTSOILGRAM,
  {meta::pure::profiles::doc.doc = 'The Steel Index Iron Ore Service. http://www.thesteelindex.com/en/iron-ore'} PLATTSTSIIRONORE,
  {meta::pure::profiles::doc.doc = 'The Steel Index Scrap Reference Prices. http://www.thesteelindex.com/en/scrapprices'} PLATTSTSISCRAP,
  {meta::pure::profiles::doc.doc = 'The Steel Index. http://www.thesteelindex.com/en/price-specifications'} PLATTSTSISTEEL,
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Section 7.2 Certain Definitions Relating To Commodity Reference Prices.'} PLATTSUSMARKETSCAN,
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Section 7.2 Certain Definitions Relating To Commodity Reference Prices.'} PULPANDPAPERINTERNATIONAL,
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Section 7.2 Certain Definitions Relating To Commodity Reference Prices.'} PULPANDPAPERWEEK,
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Section 7.2 Certain Definitions Relating To Commodity Reference Prices.'} RIMPRODUCTSINTELLIGENCEDAILY,
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Section 7.2 Certain Definitions Relating To Commodity Reference Prices.'} SAFEXSOFT,
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Section 7.2 Certain Definitions Relating To Commodity Reference Prices.'} SFESOFT,
  {meta::pure::profiles::doc.doc = 'Singapore Exchange. www.sgx.com'} SGX,
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Section 7.2 Certain Definitions Relating To Commodity Reference Prices.'} SICOM,
  {meta::pure::profiles::doc.doc = 'Standard and Poor\'s GSCI. http://us.spindices.com/index-family/commodities/sp-gsci'} SPGSCI,
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Section 7.2 Certain Definitions Relating To Commodity Reference Prices.'} STATISTICHESBUNDESAMT,
  {meta::pure::profiles::doc.doc = 'Tokyo Grain Exchange. www.tge.or.jp'} TGE,
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Section 7.2 Certain Definitions Relating To Commodity Reference Prices.'} TOCOMOIL,
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Section 7.2 Certain Definitions Relating To Commodity Reference Prices.'} TOCOMPRECIOUS,
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Section 7.2 Certain Definitions Relating To Commodity Reference Prices.'} TOCOMSOFT,
  {meta::pure::profiles::doc.doc = 'The Ux Consulting Company. http://www.uxc.com/products/uxw_overview.aspx'} UXWEEKLY,
  {meta::pure::profiles::doc.doc = 'Per 2005 ISDA Commodity Definitions, Section 7.2 Certain Definitions Relating To Commodity Reference Prices.'} WORLDPULPMONTHLY
}

Enum {meta::pure::profiles::doc.doc = 'Identifies United Kingdom Eligible Collateral Assets classification categories based on UK Onshored EMIR Uncleared Margin Rules. Eligible Collateral asset classes for both initial margin (IM) and variation margin (VM) posted and collected between specified entities. Please note: UK EMIR regulation will detail which eligible collateral assets classes apply to each type of entity pairing (counterparty) and which apply to posting of IM and VM.'} model::external::cdm::UK_EMIR_EligibleCollateralEnum
{
  {meta::pure::profiles::doc.doc = 'Denotes cash in the form of money credited to an account in any currency, or similar claims for the repayment of money, such as money market deposits.'} UK_EMIRTypeA,
  {meta::pure::profiles::doc.doc = 'Denotes gold in the form of allocated pure gold bullion of recognised good delivery.'} UK_EMIRTypeB,
  {meta::pure::profiles::doc.doc = 'Denotes debt securities issued by the central government of the United Kingdom or the Bank of England.'} UK_EMIRTypeC,
  {meta::pure::profiles::doc.doc = 'Denotes debt securities issued by United Kingdom regional governments or local authorities whose exposures are treated as exposures to the central government of the United Kingdom in accordance with Article 115(2) of Regulation (EU) No 575/2013.'} UK_EMIRTypeD,
  {meta::pure::profiles::doc.doc = 'Denotes debt securities issued by United Kingdom public sector entities whose exposures are treated as exposures to the central government, regional government or local authority of the United Kingdom in accordance with Article 116(4) of Regulation (EU) No 575/2013.'} UK_EMIRTypeE,
  {meta::pure::profiles::doc.doc = 'Denotes debt securities issued by United Kingdom regional governments or local authorities other than those referred to in (TypeD).'} UK_EMIRTypeF,
  {meta::pure::profiles::doc.doc = 'Denotes debt securities issued by United Kingdom public sector entities other than those referred to in (TypeE).'} UK_EMIRTypeG,
  {meta::pure::profiles::doc.doc = 'Denotes debt securities issued by multilateral development banks listed in Article 117(2) of Regulation (EU) No 575/2013.'} UK_EMIRTypeH,
  {meta::pure::profiles::doc.doc = 'Denotes debt securities issued by the international organisations listed in Article 118 of Regulation (EU) No 575/2013.'} UK_EMIRTypeI,
  {meta::pure::profiles::doc.doc = 'Denotes debt securities issued by third countries\' governments or central banks.'} UK_EMIRTypeJ,
  {meta::pure::profiles::doc.doc = 'Denotes debt securities issued by third countries\' regional governments or local authorities that meet the requirements of (TypeD) and (TypeE).'} UK_EMIRTypeK,
  {meta::pure::profiles::doc.doc = 'Denotes debt securities issued by third countries\' regional governments or local authorities other than those referred to in (TypeD) and (TypeE).'} UK_EMIRTypeL,
  {meta::pure::profiles::doc.doc = 'Denotes debt securities issued by credit institutions or investment firms including bonds admitted to the register of regulated covered bonds maintained under Regulation 7(1)(b) of the Regulated Covered Bonds Regulations 2008 (SI 2008/346).'} UK_EMIRTypeM,
  {meta::pure::profiles::doc.doc = 'Denotes corporate bonds.'} UK_EMIRTypeN,
  {meta::pure::profiles::doc.doc = 'Denotes the most senior tranche of a securitisation, as defined in Article 4(61) of Regulation (EU) No 575/2013, that is not a re-securitisation as defined in Article 4(63) of that Regulation.'} UK_EMIRTypeO,
  {meta::pure::profiles::doc.doc = 'Denotes convertible bonds provided that they can be converted only into equities which are included in an index specified pursuant to point (a) of Article 197 (8) of Regulation (EU) No 575/2013.'} UK_EMIRTypeP,
  {meta::pure::profiles::doc.doc = 'Denotes equities included in an index specified pursuant to point (a) of Article 197(8) of Regulation (EU) No 575/2013.'} UK_EMIRTypeQ,
  {meta::pure::profiles::doc.doc = 'Denotes shares or units in undertakings for UK UCITS, provided that the conditions set out in Article 5 of EU Regulation 2016/2251 (as modified by the Technical Standards (European Market Infrastructure) (EU Exit) (No. 3) Instrument 2019) are met.'} UK_EMIRTypeR
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify the margin approach specific to Initial Margin agreements.'} model::external::cdm::MarginApproachEnum
{
  {meta::pure::profiles::doc.doc = '(A) If the \'Distinct Margin Flow (IM) Approach\' is specified as applicable in Paragraph 13, the following provisions will apply: (1) \'Credit Support Amount (IM)\' means, with respect to a party as the Pledgor, for any Calculation Date (IM), (i) the Margin Amount (IM) applicable to the Pledgor, if any, minus (ii) the Pledgor\u2019s Threshold (IM); provided, however, that the Credit Support Amount (IM) will be deemed to be zero whenever the calculation of the Credit Support Amount (IM) yields a number less than zero. (2) No Amendment to Obligations in respect of Margin Amount (IA). The posting obligation of a Pledgor in respect of any amount that constitutes a Margin Amount (IA) under any Other CSA shall not be affected or amended in any way by the provisions of this Annex.'} Distinct,
  {meta::pure::profiles::doc.doc = '(B) If the \'Allocated Margin Flow (IM/IA) Approach\' is specified as applicable in Paragraph 13, the following provisions will apply: (1) \'Credit Support Amount (IM)\' means, with respect to a party as the Pledgor, for any Calculation Date (IM), (i) the Margin Amount (IM) applicable to the Pledgor, if any, minus (ii) the Pledgor\u2019s Threshold (IM); provided, however, that the Credit Support Amount (IM) will be deemed to be zero whenever the calculation of the Credit Support Amount (IM) yields a number less than zero. (2) Amendment to Obligations in respect of Margin Amount (IA). The posting obligation of a Pledgor in respect of any amount that constitutes a Margin Amount (IA) under any Other CSA shall be reduced on an aggregate basis by the amount of the Pledgor\u2019s Credit Support Amount (IM); provided, however, that if, after such reduction, any such Margin Amount (IA) would be a negative amount, such Margin Amount (IA) will be deemed to be zero.'} Allocated,
  {meta::pure::profiles::doc.doc = '(C) If the \'Greater of Margin Flow (IM/IA) Approach\' is specified as applicable in Paragraph 13, the following provisions will apply: (1) \'Credit Support Amount (IM)\' means, with respect to a party as the Pledgor, for any Calculation Date (IM), the greater of (i)(A) the Margin Amount (IM) applicable to the Pledgor, if any, minus (B) the Pledgor\u2019s Threshold (IM) and (ii) the Margin Amount (IA); provided, however, that the Credit Support Amount (IM) will be deemed to be zero whenever the calculation of the Credit Support Amount (IM) yields a number less than zero. (2) Amendment to Obligations in respect of Margin Amount (IA).  The posting obligation of a Pledgor in respect of any amount that constitutes a Margin Amount (IA) under any Other CSA, other than such obligations of a Pledgor under this Annex, shall be reduced to zero.'} GreaterOf
}

Enum {meta::pure::profiles::doc.doc = 'Defines the fee type.'} FpML::model::FeeElectionEnum
{
  FlatFee,
  AmortizedFee,
  FundingFee,
  FlatFeeAndFundingFee,
  AmortizedFeeAndFundingFee
}

Enum {meta::pure::profiles::doc.doc = 'The method of calculating payment obligations when a floating rate is negative (either due to a quoted negative floating rate or by operation of a spread that is subtracted from the floating rate). The method of calculating payment obligations when a floating rate is negative (either due to a quoted negative floating rate or by operation of a spread that is subtracted from the floating rate). - For use with pre-trade Credit Limit Check messages.'} FpML::model::NegativeInterestRateTreatmentEnum
{
  NegativeInterestRateMethod,
  ZeroInterestRateMethod,
  ZeroInterestRateMethodExcludingSpread
}

Enum {meta::pure::profiles::doc.doc = 'The specification of methods for converting rates from one basis to another.'} FpML::model::RateTreatmentEnum
{
  BondEquivalentYield,
  MoneyMarketYield
}

Enum {meta::pure::profiles::doc.doc = 'The specification of whether an OTC option will be exercised.'} FpML::model::ExerciseActionEnum
{
  FullExercise,
  PartialExercise,
  Abandon
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify the method according to which an amount or a date is determined.'} model::external::cdm::DeterminationMethodEnum
{
  {meta::pure::profiles::doc.doc = 'Agreed separately between the parties.'} AgreedInitialPrice,
  {meta::pure::profiles::doc.doc = 'As specified in Master Confirmation.'} AsSpecifiedInMasterConfirmation,
  {meta::pure::profiles::doc.doc = 'Determined by the Calculation Agent.'} CalculationAgent,
  {meta::pure::profiles::doc.doc = 'Official Closing Price.'} ClosingPrice,
  {meta::pure::profiles::doc.doc = 'Determined by the Currency of Equity Dividends.'} DividendCurrency,
  {meta::pure::profiles::doc.doc = 'The initial Index Level is the level of the Expiring Contract as provided in the Master Confirmation.'} ExpiringContractLevel,
  {meta::pure::profiles::doc.doc = 'Determined by the Hedging Party.'} HedgeExecution,
  {meta::pure::profiles::doc.doc = 'Issuer Payment Currency.'} IssuerPaymentCurrency,
  {meta::pure::profiles::doc.doc = 'Net Asset Value.'} NAV,
  {meta::pure::profiles::doc.doc = 'Opening Price of the Market.'} OpenPrice,
  {meta::pure::profiles::doc.doc = 'Official Settlement Price.'} OSPPrice,
  {meta::pure::profiles::doc.doc = 'Settlement Currency.'} SettlementCurrency,
  {meta::pure::profiles::doc.doc = 'Date on which the strike is determined in respect of a forward starting swap.'} StrikeDateDetermination,
  {meta::pure::profiles::doc.doc = 'Official Trade-Weighted Average Price.'} TWAPPrice,
  {meta::pure::profiles::doc.doc = 'Price determined at valuation time.'} ValuationTime,
  {meta::pure::profiles::doc.doc = 'Official Volume-Weighted Average Price.'} VWAPPrice
}

Enum {meta::pure::profiles::doc.doc = 'The enumeration values to specify the actions associated with transactions.'} model::external::cdm::ActionEnum
{
  {meta::pure::profiles::doc.doc = 'A new instance of a transaction event, which is also characterized by the fact that the eventIdentifier has an associated version 1.'} New,
  {meta::pure::profiles::doc.doc = 'A correction of a prior instance of the transaction event. The eventIdentifier has an associated version greater than 1.'} Correct,
  {meta::pure::profiles::doc.doc = 'A cancellation of a prior instance of the transaction event. The eventIdentifier has an associated version greater than 1.'} Cancel
}

Enum {meta::pure::profiles::doc.doc = 'Identifies US Eligible Collateral Assets classification categories based on Uncleared Margin Rules published by the CFTC and the US Prudential Regulator. Note: While the same basic categories exist in the CFTC and US Prudential Regulators margin rules, the precise definitions or application of those rules could differ between the two rules.'} model::external::cdm::US_CFTC_PR_EligibleCollateralEnum
{
  {meta::pure::profiles::doc.doc = 'Denotes immediately available cash funds denominated in USD, a major currency, a currency of settlement for the uncleared swap.'} US_CFTC_PRType1,
  {meta::pure::profiles::doc.doc = 'Denotes a security that is issued by, or unconditionally guaranteed as to the timely payment of principal and interest by, the U.S. Department of the Treasury.'} US_CFTC_PRType2,
  {meta::pure::profiles::doc.doc = 'Denotes a security that is issued by, or unconditionally guaranteed as to the timely payment of principal and interest by, a U.S. government agency (other than the U.S. Department of Treasury) whose obligations are fully guaranteed by the full faith and credit of the United States government.'} US_CFTC_PRType3,
  {meta::pure::profiles::doc.doc = 'Denotes a security that is issued by, or fully guaranteed as to the payment of principal and interest by, the European Central Bank or a sovereign entity that is assigned no higher than a 20 percent risk weight under the capital rules applicable to swap dealers subject to regulation by a prudential regulator.'} US_CFTC_PRType4,
  {meta::pure::profiles::doc.doc = 'Denotes a publicly traded debt security issued by, or an asset-backed security fully guaranteed as to the timely payment of principal and interest by, a U.S. Government-sponsored enterprise that is operating with capital support or another form of direct financial assistance received from the U.S. government that enables the repayments of the U.S. Government-sponsored enterprise\'s eligible securities.'} US_CFTC_PRType5A,
  {meta::pure::profiles::doc.doc = 'Denotes a publicly traded debt security, but not an asset backed security, that is investment grade and issued by a U.S. Government-sponsored enterprise that is not operating with capital support or another form of direct financial assistance received from the U.S. government.'} US_CFTC_PRType5B,
  {meta::pure::profiles::doc.doc = 'Denotes a security that is issued by, or fully guaranteed as to the payment of principal and interest by, the Bank for International Settlements, the International Monetary Fund, or a multilateral development bank.'} US_CFTC_PRType6,
  {meta::pure::profiles::doc.doc = 'Denotes publicly-traded debt, but not an asset backed security, that is investment grade and is not a debt security issued by a  U.S. Government-sponsored enterprise. This category excludes a security issued by a non-bank financial institution supervised by the board of governors of the Federal Reserve System under Title I of the Dodd-Frank Wall Street Reform and Consumer Protection Act. This category also excludes a security issued by any of the following entities, by a company that would be any of the following entities if it were the organized under the laws of the United States or any State, or in either case by an affiliate of such an entity: the party posting the collateral, a bank holding company, a savings and loan holding company, a U.S. intermediate holding company, a foreign bank, a depositary institution, a securities holding company, a broker, a dealer, a futures commission merchant, a swap dealer, or a security-based swap dealer.'} US_CFTC_PRType7,
  {meta::pure::profiles::doc.doc = 'Denotes a publicly traded common equity security that is included in the Standard & Poor\'s Composite 500 Index or related indexes. This category excludes a security issued by a non-bank financial institution supervised by the board of governors of the Federal Reserve System under Title I of the Dodd-Frank Wall Street Reform and Consumer Protection Act. This category also excludes a security issued by any of the following entities, by a company that would be any of the following entities if it were the organized under the laws of the United States or any State, or in either case by an affiliate of such an entity: the party posting the collateral, a bank holding company, a savings and loan holding company, a U.S. intermediate holding company, a foreign bank, a depositary institution, a securities holding company, a broker, a dealer, a futures commission merchant, a swap dealer, or a security-based swap dealer.'} US_CFTC_PRType8A,
  {meta::pure::profiles::doc.doc = 'Denotes a publicly traded common equity security that is included in the Standard & Poor\'s Composite 1500 Index or related indexes. This category excludes a security issued by a non-bank financial institution supervised by the board of governors of the Federal Reserve System under Title I of the Dodd-Frank Wall Street Reform and Consumer Protection Act. This category also excludes a security issued by any of the following entities, by a company that would be any of the following entities if it were the organized under the laws of the United States or any State, or in either case by an affiliate of such an entity: the party posting the collateral, a bank holding company, a savings and loan holding company, a U.S. intermediate holding company, a foreign bank, a depositary institution, a securities holding company, a broker, a dealer, a futures commission merchant, a swap dealer, or a security-based swap dealer.'} US_CFTC_PRType8B,
  {meta::pure::profiles::doc.doc = 'Denotes a publicly traded common equity security that is included in an index that a regulated swap entity\'s supervisor in a foreign jurisdiction recognizes for purposes of including publicly traded common equity as initial margin under applicable regulatory policy, if held in that foreign jurisdiction. This category excludes a security issued by a non-bank financial institution supervised by the board of governors of the Federal Reserve System under Title I of the Dodd-Frank Wall Street Reform and Consumer Protection Act. This category also excludes a security issued by any of the following entities, by a company that would be any of the following entities if it were the organized under the laws of the United States or any State, or in either case by an affiliate of such an entity: the party posting the collateral, a bank holding company, a savings and loan holding company, a U.S. intermediate holding company, a foreign bank, a depositary institution, a securities holding company, a broker, a dealer, a futures commission merchant, a swap dealer, or a security-based swap dealer.'} US_CFTC_PRType8C,
  {meta::pure::profiles::doc.doc = 'Denotes securities in the form of redeemable securities in a pooled investment fund representing the security-holder\'s proportional interest in the fund\'s net assets and that are issued and redeemed only on the basis of the market value of the fund\'s net assets prepared each business day after the security-holder makes its investment commitment or redemption request to the fund, if the fund\'s investments are limited to the following: (A) securities that are issued by, or unconditionally guaranteed as to the timely payment of principal and interest by, the U.S. Department of the Treasury, and immediately-available cash funds denominated in U.S. dollars; or (B) securities denominated in a common currency and issued by, or fully guaranteed as to the payment of principal and interest by, the European Central Bank or a sovereign entity that is assigned no higher than a 20 percent risk weight under the capital rules applicable to swap dealers subject to regulation by a prudential regulator, and immediately-available cash funds denominated in the same currency; and (C) assets of the fund may not be transferred through securities lending, securities borrowing, repurchase agreements, reverse repurchase agreements, or other means that involve the fund having rights to acquire the same or similar assets from the transferee.'} US_CFTC_PRType9,
  {meta::pure::profiles::doc.doc = 'Denotes Gold.'} US_CTFC_PRType10
}

Enum {meta::pure::profiles::doc.doc = 'A list that defines the status of a task.'} FpML::model::TaskStatusEnum
{
  Active,
  Cleared,
  Cancelled
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify how a contract has been executed, e.g. electronically, verbally, ...'} model::external::cdm::ExecutionTypeEnum
{
  {meta::pure::profiles::doc.doc = 'Execution via electronic execution facility, derivatives contract market, or other electronic message such as an instant message.'} Electronic,
  {meta::pure::profiles::doc.doc = 'Bilateral execution between counterparties not pursuant to the rules of a SEF or DCM.'} OffFacility
}

Enum {meta::pure::profiles::doc.doc = 'ESMA Benchmark Index Code'} FpML::model::EsmaBenchmarkIndexCode
{
  BBSW,
  BUBO,
  CDOR,
  CIBO,
  EONA,
  EONS,
  EURI,
  EUUS,
  EUCH,
  FUSW,
  GCFR,
  ISDA,
  JIBA,
  LIBI,
  LIBO,
  MAAA,
  MOSP,
  NIBO,
  PFAN,
  PRBO,
  STBO,
  SWAP,
  TLBO,
  TREA,
  TIBO,
  WIBO
}

Enum {meta::pure::profiles::doc.doc = 'Identifies an agency rating as a simple scale boundary of minimum or maximum.'} model::external::cdm::CreditNotationBoundaryEnum
{
  {meta::pure::profiles::doc.doc = 'Denotes a minumum boundary'} Minimum,
  {meta::pure::profiles::doc.doc = 'Denotes a maxiumum boundary'} Maximum
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify the legal agreement publisher.'} model::external::cdm::LegalAgreementPublisherEnum
{
  {meta::pure::profiles::doc.doc = 'Association Fran\u00E7aise des Banques.'} AFB,
  {meta::pure::profiles::doc.doc = 'BNY Mellon'} BNYM,
  {meta::pure::profiles::doc.doc = 'ISDA and Clearstream'} ISDAClearstream,
  {meta::pure::profiles::doc.doc = 'ISDA and Euroclear'} ISDAEuroclear,
  {meta::pure::profiles::doc.doc = 'International Swaps and Derivatives Association, Inc.'} ISDA,
  {meta::pure::profiles::doc.doc = 'International Securities Lending Association'} ISLA,
  {meta::pure::profiles::doc.doc = 'JP Morgan'} JPMorgan
}

Enum {meta::pure::profiles::doc.doc = 'The enumeration values indicating the BusinessEvent function associated input instructions.'} model::external::cdm::InstructionFunctionEnum
{
  Execution,
  ContractFormation,
  QuantityChange,
  Renegotiation,
  Compression
}

Enum {meta::pure::profiles::doc.doc = 'The type of amount referenced by the accrual.'} FpML::model::AccrualReferenceAmountTypeEnum
{
  Commitment,
  Funded,
  Other,
  Unfunded,
  Unutilized,
  Utilized
}

Enum {meta::pure::profiles::doc.doc = 'The type of telephone number used to reach a contact.'} FpML::model::TelephoneTypeEnum
{
  Work,
  Mobile,
  Fax,
  Personal
}

Enum {meta::pure::profiles::doc.doc = 'Second level ISDA FRO category.'} model::external::cdm::FloatingRateIndexStyleEnum
{
  {meta::pure::profiles::doc.doc = 'An ISDA-defined calculated rate done using arithmetic averaging.'} AverageFRO,
  {meta::pure::profiles::doc.doc = 'An ISDA-defined calculated rate done using arithmetic averaging.'} CompoundedFRO,
  {meta::pure::profiles::doc.doc = 'A published index calculated using compounding.'} CompoundedIndex,
  {meta::pure::profiles::doc.doc = 'A published index using a methodology defined by the publisher, e.g. S&P 500.'} Index,
  Other,
  Overnight,
  {meta::pure::profiles::doc.doc = 'A published rate computed using an averaging methodology.'} PublishedAverage,
  {meta::pure::profiles::doc.doc = 'A rate representing the market rate for swaps of a given maturity.'} SwapRate,
  {meta::pure::profiles::doc.doc = 'A rate specified over a given term, such as a libor-type rate.'} TermRate
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify the actual quotation style (e.g. PointsUpFront, TradedSpread) used to quote a credit default swap fee leg.'} model::external::cdm::QuotationStyleEnum
{
  {meta::pure::profiles::doc.doc = 'When quotation style is \'PointsUpFront\', the initialPoints element of the Credit Default Swap feeLeg should be populated'} PointsUpFront,
  {meta::pure::profiles::doc.doc = 'When quotation style is \'TradedSpread\', the marketFixedRate element of the Credit Default Swap feeLeg should be populated'} TradedSpread,
  {meta::pure::profiles::doc.doc = 'When quotation style is \'Price\', the marketPrice element of the Credit Default Swap feeLeg should be populated'} Price
}

Enum {meta::pure::profiles::doc.doc = 'An arithmetic operator that can be passed to a function'} model::external::cdm::ArithmeticOperationEnum
{
  {meta::pure::profiles::doc.doc = 'Addition'} Add,
  {meta::pure::profiles::doc.doc = 'Subtraction'} Subtract,
  {meta::pure::profiles::doc.doc = 'Multiplication'} Multiply,
  {meta::pure::profiles::doc.doc = 'Division'} Divide,
  {meta::pure::profiles::doc.doc = 'Max of 2 values'} Max,
  {meta::pure::profiles::doc.doc = 'Min of 2 values'} Min
}

Enum {meta::pure::profiles::doc.doc = 'Indicates the actual quotation style of of PointsUpFront or TradedSpread that was used to quote this trade.'} FpML::model::QuotationStyleEnum
{
  PointsUpFront,
  TradedSpread,
  Price
}

Enum {meta::pure::profiles::doc.doc = 'Barrier Knock In or Out.'} FpML::model::CommodityKnockEnum
{
  In,
  Out
}

Enum {meta::pure::profiles::doc.doc = 'The specification of a time period containing values such as Today, Tomorrow etc.'} FpML::model::FxTenorPeriodEnum
{
  Broken,
  Today,
  Tomorrow,
  TomorrowNext,
  Spot,
  SpotNext
}

Enum model::external::cdm::CompareOp
{
  GreaterThan,
  GreaterThanOrEquals,
  Equals,
  LessThanOrEquals,
  LessThan
}

Enum {meta::pure::profiles::doc.doc = 'Specifies the order of repayment in the event of a sale or bankruptcy of the issuer or a related party (eg guarantor).'} model::external::cdm::DebtSeniorityEnum
{
  {meta::pure::profiles::doc.doc = 'Denotes debt which is secured over assets of the issuer or a related party (eg guarantor).'} Secured,
  {meta::pure::profiles::doc.doc = 'Denotes debt  which ranks pari passu with all other unsecured creditors of the issuer.'} Senior,
  {meta::pure::profiles::doc.doc = 'Denotes debt  owed to an unsecured creditor that in the event of a liquidation can only be paid after the claims of secured and senior creditors have been met.'} Subordinated
}

Enum {meta::pure::profiles::doc.doc = 'Used in both the obligations and deliverable obligations of the credit default swap to represent a class or type of securities which apply.'} FpML::model::ObligationCategoryEnum
{
  Payment,
  BorrowedMoney,
  ReferenceObligationsOnly,
  Bond,
  Loan,
  BondOrLoan
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify the type of averaging used in an Asian option.'} model::external::cdm::AveragingInOutEnum
{
  {meta::pure::profiles::doc.doc = 'The average price is used to derive the strike price. Also known as \'Asian strike\' style option.'} In,
  {meta::pure::profiles::doc.doc = 'The average price is used to derive the expiration price. Also known as \'Asian price\' style option.'} Out,
  {meta::pure::profiles::doc.doc = 'The average price is used to derive both the strike and the expiration price.'} Both
}

Enum {meta::pure::profiles::doc.doc = 'The specification of whether payments occur relative to the calculation period start or end date, or the reset date. The specification of whether payments occur relative to the calculation period start or end date, or the reset date. - For use with pre-trade Credit Limit Check messages.'} FpML::model::PayRelativeToEnum
{
  CalculationPeriodStartDate,
  CalculationPeriodEndDate,
  LastPricingDate,
  ResetDate,
  ValuationDate
}

Enum {meta::pure::profiles::doc.doc = 'Represents an enumeration list that specifies the general rule for repayment of principal.'} model::external::cdm::DebtPrincipalEnum
{
  {meta::pure::profiles::doc.doc = 'Denotes that the principal is paid all at once on maturity of the debt insrument. Bullet debt instruments cannot be redeemed early by an issuer, which means they are non-callable.'} Bullet,
  {meta::pure::profiles::doc.doc = 'Denotes that the principal on the debt can be repaid early, in whole or in part, at the option of the issuer.'} Callable,
  {meta::pure::profiles::doc.doc = 'Denotes that the principal on the debt can be repaid early, in whole or in part, at the option of the holder.'} Puttable,
  {meta::pure::profiles::doc.doc = 'Denotes that the principal on the debt is paid down regularly, along with its interest expense over the life of the debt instrument.  Includes amortising instruments with a bullet balance repayment at maturity.'} Amortising,
  {meta::pure::profiles::doc.doc = 'Denotes that the principal on the debt is calculated with reference to one or more specified inflation rates.'} InflationLinked,
  {meta::pure::profiles::doc.doc = 'Denotes that the  principal on the debt is calculated with reference to one or more price or other indices (other than inflation rates).'} IndexLinked,
  {meta::pure::profiles::doc.doc = 'Denotes that the  principal on the debt is calculated with reference to other underlyings (not being floating interest rates, inflation rates or indices) or with a non-linear relationship to floating interest rates, inflation rates or indices.'} OtherStructured,
  {meta::pure::profiles::doc.doc = 'Denotes a stripped bond representing only the principal component.'} PrincipalOnly
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify the methodology according to which sensitivities to (i) equity indices, funds and ETFs, and (ii) commodity indices are computed. ISDA 2016 Credit Support Annex for Initial Margin, paragraph 13, General Principles, (gg)(2).'} model::external::cdm::SensitivitiesEnum
{
  {meta::pure::profiles::doc.doc = 'The parties agree that in respect of the relevant sensitivities, the delta is allocated back to individual constituents.'} Alternative,
  {meta::pure::profiles::doc.doc = 'The relevant sensitivities are addressed by the standard preferred approach where the entire delta is put into the applicable asset class/category.'} Standard
}

Enum {meta::pure::profiles::doc.doc = 'The specification of whether a payout will occur on an option depending upon whether the spot rate is at or above or at or below the trigger rate.'} FpML::model::TriggerConditionEnum
{
  AtOrAbove,
  AtOrBelow,
  Above,
  Below
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify the Additional Type of transaction that can require the collection or delivery of initial margin under a given regulatory regime for the purposes of Covered Transactions, as specified in ISDA 2016 Credit Support Annex for Initial Margin, paragraph 13, General Principles, (b)(B).'} model::external::cdm::AdditionalTypeEnum
{
  {meta::pure::profiles::doc.doc = 'No Additional Type of transaction is applicable to the regulatory regulatory regime.'} NotApplicable,
  {meta::pure::profiles::doc.doc = 'Single stock equity option or index option transaction as referred to in the transitional provisions (if any) of the EMIR RTS.'} EquityOptionOrIndexOption,
  Other
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify the legal agreement name.'} model::external::cdm::LegalAgreementNameEnum
{
  {meta::pure::profiles::doc.doc = 'Clause Library'} ClauseLibrary,
  {meta::pure::profiles::doc.doc = 'A Credit Support Deed legal agreement.'} CreditSupportDeed,
  {meta::pure::profiles::doc.doc = 'A Credit Support Annex legal agreement.'} CreditSupportAnnex,
  {meta::pure::profiles::doc.doc = 'A Collateral Transfer Agreement'} CollateralTransferAgreement,
  {meta::pure::profiles::doc.doc = 'Global Master Securities Lending Agreement'} GMSLA,
  {meta::pure::profiles::doc.doc = 'A Master Agreement.'} MasterAgreement,
  {meta::pure::profiles::doc.doc = 'A Security Agreement.'} SecurityAgreement
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify the Credit Support Document Terms'} model::external::cdm::CreditSupportDocumentTermsEnum
{
  {meta::pure::profiles::doc.doc = 'A specified Credit Support Document is provided'} Specified,
  {meta::pure::profiles::doc.doc = 'Any guarantee, collateral arrangement and/or other agreement or arrangement which provides for credit support with respect to the party\u2019s obligations under this Agreement.'} Any,
  {meta::pure::profiles::doc.doc = 'No Credit Support Document is specified.'} None
}

Enum {meta::pure::profiles::doc.doc = 'The qualification of the type of asset transfer.'} model::external::cdm::AssetTransferTypeEnum
{
  {meta::pure::profiles::doc.doc = 'The transfer of assets takes place without a corresponding exchange of payment.'} FreeOfPayment
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify the list of floating rate index.'} model::external::cdm::FloatingRateIndexEnum
{
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} AED_EBOR_Reuters,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} AED_EIBOR,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix and 2006 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} AUD_AONIA,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} AUD_AONIA_OIS_Compound_1,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} AUD_AONIA_OIS_COMPOUND,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} AUD_AONIA_OIS_COMPOUND_SwapMarker,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} AUD_BBR_AUBBSW,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} AUD_BBR_BBSW,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} AUD_BBR_BBSW_Bloomberg,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} AUD_BBR_BBSY__BID_,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} AUD_BBR_ISDC,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} AUD_BBSW,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} AUD_BBSW_Quarterly_Swap_Rate_ICAP,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} AUD_BBSW_Semi_Annual_Swap_Rate_ICAP,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} AUD_BBSY_Bid,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} AUD_LIBOR_BBA,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} AUD_LIBOR_BBA_Bloomberg,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} AUD_LIBOR_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} AUD_Quarterly_Swap_Rate_ICAP,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} AUD_Quarterly_Swap_Rate_ICAP_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} AUD_Semi_Annual_Swap_Rate_11_00_BGCANTOR,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} AUD_Semi_Annual_Swap_Rate_BGCANTOR_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} AUD_Semi_annual_Swap_Rate_ICAP,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} AUD_Semi_Annual_Swap_Rate_ICAP_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} AUD_Swap_Rate_Reuters,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} BRL_CDI,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} CAD_BA_CDOR,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} CAD_BA_CDOR_Bloomberg,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} CAD_BA_ISDD,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} CAD_BA_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} CAD_BA_Reuters,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} CAD_BA_Telerate,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} CAD_CDOR,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix and 2006 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} CAD_CORRA,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} CAD_CORRA_OIS_Compound_1,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} CAD_CORRA_OIS_COMPOUND,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} CAD_ISDA_Swap_Rate,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} CAD_LIBOR_BBA,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} CAD_LIBOR_BBA_Bloomberg,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} CAD_LIBOR_BBA_SwapMarker,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} CAD_LIBOR_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} CAD_REPO_CORRA,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} CAD_TBILL_ISDD,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} CAD_TBILL_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} CAD_TBILL_Reuters,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} CAD_TBILL_Telerate,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} CHF_3M_LIBOR_SWAP_CME_vs_LCH_ICAP,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} CHF_3M_LIBOR_SWAP_CME_vs_LCH_ICAP_Bloomberg,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} CHF_3M_LIBOR_SWAP_EUREX_vs_LCH_ICAP,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} CHF_3M_LIBOR_SWAP_EUREX_vs_LCH_ICAP_Bloomberg,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} CHF_6M_LIBOR_SWAP_CME_vs_LCH_ICAP,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} CHF_6M_LIBORSWAP_CME_vs_LCH_ICAP_Bloomberg,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} CHF_6M_LIBOR_SWAP_EUREX_vs_LCH_ICAP,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} CHF_6M_LIBOR_SWAP_EUREX_vs_LCH_ICAP_Bloomberg,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} CHF_Annual_Swap_Rate,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} CHF_Annual_Swap_Rate_11_00_ICAP,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} CHF_Annual_Swap_Rate_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} CHF_Basis_Swap_3m_vs_6m_LIBOR_11_00_ICAP,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} CHF_ISDAFIX_Swap_Rate,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} CHF_LIBOR,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} CHF_LIBOR_BBA,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} CHF_LIBOR_BBA_Bloomberg,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} CHF_LIBOR_ISDA,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} CHF_LIBOR_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} CHF_OIS_11_00_ICAP,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix and 2006 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} CHF_SARON,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} CHF_SARON_OIS_Compound_1,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} CHF_SARON_OIS_COMPOUND,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} CHF_TOIS_OIS_COMPOUND,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} CHF_USD_Basis_Swaps_11_00_ICAP,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} CL_CLICP_Bloomberg,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} CLP_ICP,
  {meta::pure::profiles::doc.doc = 'Refers to the Indice Camara Promedio (\'ICP\') rate for Chilean Pesos which, for a Reset Date, is determined and published by the Asociacion de Bancos e Instituciones Financieras de Chile A.G. (\'ABIF\') in accordance with the \'Reglamento Indice de Camara Promedio\' of the ABIF as published in the Diario Oficial de la Republica de Chile (the \'ICP Rules\') and which is reported on the ABIF website by not later than 10:00 a.m., Santiago time, on that Reset Date.'} CLP_TNA,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} CNH_HIBOR,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} CNH_HIBOR_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} CNH_HIBOR_TMA,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} CNY_7_Repo_Compounding_Date,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} CNY_CNREPOFIX_CFXS_Reuters,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} CNY_Deposit_Rate,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} CNY_Fixing_Repo_Rate,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} CNY_LPR,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} CNY_PBOCB_Reuters,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} CNY_Quarterly_7_day_Repo_Non_Deliverable_Swap_Rate_TRADITION,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} CNY_Quarterly_7_day_Repo_Non_Deliverable_Swap_Rate_TRADITION_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} CNY_Quarterly_7D_Repo_NDS_Rate_Tradition,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} CNY_Semi_Annual_Swap_Rate_11_00_BGCANTOR,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} CNY_Semi_Annual_Swap_Rate_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} CNY_SHIBOR,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} CNY_SHIBOR_OIS_Compound,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} CNY_Shibor_OIS_Compounding,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction..'} CNY_SHIBOR_Reuters,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} COP_IBR_OIS_Compound_1,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} COP_IBR_OIS_COMPOUND,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} CZK_Annual_Swap_Rate_11_00_BGCANTOR,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} CZK_Annual_Swap_Rate_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} CZK_CZEONIA,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} CZK_CZEONIA_OIS_Compound,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} CZK_PRIBOR,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} CZK_PRIBOR_PRBO,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} CZK_PRIBOR_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} DKK_CIBOR,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} DKK_CIBOR2,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} DKK_CIBOR2_Bloomberg,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} DKK_CIBOR2_DKNA13,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} DKK_CIBOR_DKNA13,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} DKK_CIBOR_DKNA13_Bloomberg,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} DKK_CIBOR_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} DKK_CITA,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} DKK_CITA_DKNA14_COMPOUND,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} DKK_DKKOIS_OIS_COMPOUND,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} DKK_Tom_Next_OIS_Compound,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} EUR_3M_EURIBOR_SWAP_CME_vs_LCH_ICAP,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} EUR_3M_EURIBOR_SWAP_CME_vs_LCH_ICAP_Bloomberg,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} EUR_3M_EURIBOR_SWAP_EUREX_vs_LCH_ICAP,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} EUR_3M_EURIBOR_SWAP_EUREX_vs_LCH_ICAP_Bloomberg,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} EUR_6M_EURIBOR_SWAP_CME_vs_LCH_ICAP,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} EUR_6M_EURIBOR_SWAP_CME_vs_LCH_ICAP_Bloomberg,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} EUR_6M_EURIBOR_SWAP_EUREX_vs_LCH_ICAP,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} EUR_6M_EURIBOR_SWAP_EUREX_vs_LCH_ICAP_Bloomberg,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} EUR_Annual_Swap_Rate_10_00,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} EUR_Annual_Swap_Rate_10_00_BGCANTOR,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} EUR_Annual_Swap_Rate_10_00_Bloomberg,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} EUR_Annual_Swap_Rate_10_00_ICAP,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} EUR_Annual_Swap_Rate_10_00_SwapMarker,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} EUR_Annual_Swap_Rate_10_00_TRADITION,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} EUR_Annual_Swap_Rate_11_00,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} EUR_Annual_Swap_Rate_11_00_Bloomberg,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} EUR_Annual_Swap_Rate_11_00_ICAP,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} EUR_Annual_Swap_Rate_11_00_SwapMarker,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} EUR_Annual_Swap_Rate_3_Month,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} EUR_Annual_Swap_Rate_3_Month_SwapMarker,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} EUR_Annual_Swap_Rate_4_15_TRADITION,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} EUR_Annual_Swap_Rate_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} EUR_Basis_Swap_EONIA_vs_3m_EUR_IBOR_Swap_Rates_A_360_10_00_ICAP,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} EUR_CNO_TEC10,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} EUR_EONIA,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} EUR_EONIA_AVERAGE_1,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} EUR_EONIA_Average,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} EUR_EONIA_OIS_10_00_BGCANTOR,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} EUR_EONIA_OIS_10_00_ICAP,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} EUR_EONIA_OIS_10_00_TRADITION,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} EUR_EONIA_OIS_11_00_ICAP,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} EUR_EONIA_OIS_4_15_TRADITION,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} EUR_EONIA_OIS_Compound_1,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} EUR_EONIA_OIS_COMPOUND,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} EUR_EONIA_OIS_COMPOUND_Bloomberg,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} EUR_EONIA_Swap_Index,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} EUR_EURIBOR,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} EUR_EURIBOR_Act_365,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} EUR_EURIBOR_Act_365_Bloomberg,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} EUR_EURIBOR_Annual_Bond_Swap_vs_1m_11_00_ICAP,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} EUR_EURIBOR_Basis_Swap_1m_vs_3m_Euribor_11_00_ICAP,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} EUR_EURIBOR_Basis_Swap_3m_vs_6m_11_00_ICAP,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} EUR_EURIBOR_ICE_Swap_Rate_11_00,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} EUR_EURIBOR_ICE_Swap_Rate_12_00,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} EUR_EURIBOR_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} EUR_EURIBOR_Reuters,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} EUR_EURIBOR_Telerate,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} EUR_EURONIA_OIS_Compound_1,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} EUR_EURONIA_OIS_COMPOUND,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix and 2006 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} EUR_EuroSTR,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix and 2006 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} EUR_EuroSTR_Average_12M,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix and 2006 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} EUR_EuroSTR_Average_1M,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix and 2006 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} EUR_EuroSTR_Average_1W,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix and 2006 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} EUR_EuroSTR_Average_3M,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix and 2006 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} EUR_EuroSTR_Average_6M,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} EUR_EuroSTR_COMPOUND,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix and 2006 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} EUR_EuroSTR_Compounded_Index,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} EUR_EuroSTR_OIS_Compound,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} EUR_ISDA_EURIBOR_Swap_Rate_11_00,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} EUR_ISDA_EURIBOR_Swap_Rate_12_00,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} EUR_ISDA_LIBOR_Swap_Rate_10_00,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} EUR_ISDA_LIBOR_Swap_Rate_11_00,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} EUR_LIBOR,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} EUR_LIBOR_BBA,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} EUR_LIBOR_BBA_Bloomberg,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} EUR_LIBOR_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} EUR_TAM_CDC,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} EUR_TEC10_CNO,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} EUR_TEC10_CNO_SwapMarker,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} EUR_TEC10_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} EUR_TEC5_CNO,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} EUR_TEC5_CNO_SwapMarker,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} EUR_TEC5_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} EUR_TMM_CDC_COMPOUND,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} EUR_USD_Basis_Swaps_11_00_ICAP,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} GBP_6M_LIBOR_SWAP_CME_vs_LCH_ICAP,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} GBP_6M_LIBOR_SWAP_CME_vs_LCH_ICAP_Bloomberg,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} GBP_6M_LIBOR_SWAP_EUREX_vs_LCH_ICAP,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} GBP_6M_LIBOR_SWAP_EUREX_vs_LCH_ICAP_Bloomberg,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} GBP_ISDA_Swap_Rate,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} GBP_LIBOR,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} GBP_LIBOR_BBA,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} GBP_LIBOR_BBA_Bloomberg,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} GBP_LIBOR_ICE_Swap_Rate,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} GBP_LIBOR_ISDA,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} GBP_LIBOR_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} GBP_RONIA,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} GBP_RONIA_OIS_Compound,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} GBP_Semi_Annual_Swap_Rate,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} GBP_Semi_Annual_Swap_Rate_11_00_ICAP,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} GBP_Semi_Annual_Swap_Rate_11_00_TRADITION,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} GBP_Semi_Annual_Swap_Rate_4_15_TRADITION,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} GBP_Semi_Annual_Swap_Rate_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} GBP_Semi_Annual_Swap_Rate_SwapMarker26,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix and 2006 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} GBP_SONIA,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} GBP_SONIA_COMPOUND,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix and 2006 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} GBP_SONIA_Compounded_Index,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} GBP_SONIA_ICE_Swap_Rate,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix and 2006 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} GBP_SONIA_ICE_Term,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} GBP_SONIA_OIS_11_00_ICAP,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} GBP_SONIA_OIS_11_00_TRADITION,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} GBP_SONIA_OIS_4_15_TRADITION,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} GBP_SONIA_OIS_Compound,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix and 2006 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} GBP_SONIA_Refinitiv_Term,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} GBP_SONIA_Swap_Rate,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} GBP_UK_Base_Rate,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} GBP_USD_Basis_Swaps_11_00_ICAP,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} GBP_WMBA_RONIA_COMPOUND,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} GBP_WMBA_SONIA_COMPOUND,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} GRD_ATHIBOR_ATHIBOR,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} GRD_ATHIBOR_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} GRD_ATHIBOR_Telerate,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} GRD_ATHIMID_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} GRD_ATHIMID_Reuters,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} HKD_HIBOR,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} HKD_HIBOR_HIBOR_,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} HKD_HIBOR_HIBOR_Bloomberg,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} HKD_HIBOR_HKAB,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} HKD_HIBOR_HKAB_Bloomberg,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} HKD_HIBOR_ISDC,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} HKD_HIBOR_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix and 2006 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} HKD_HONIA,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} HKD_HONIA_OIS_Compound,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} HKD_HONIX_OIS_COMPOUND,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} HKD_ISDA_Swap_Rate_11_00,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} HKD_ISDA_Swap_Rate_4_00,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} HKD_Quarterly_Annual_Swap_Rate_11_00_BGCANTOR,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} HKD_Quarterly_Annual_Swap_Rate_11_00_TRADITION,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} HKD_Quarterly_Annual_Swap_Rate_4_00_BGCANTOR,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} HKD_Quarterly_Annual_Swap_Rate_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} HKD_Quarterly_Quarterly_Swap_Rate_11_00_ICAP,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} HKD_Quarterly_Quarterly_Swap_Rate_4_00_ICAP,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} HKD_Quarterly_Quarterly_Swap_Rate_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} HUF_BUBOR,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} HUF_BUBOR_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} HUF_BUBOR_Reuters,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} HUF_HUFONIA,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} IDR_IDMA_Bloomberg,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} IDR_IDRFIX,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} IDR_JIBOR,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} IDR_JIBOR_Reuters,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} IDR_SBI_Reuters,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} IDR_Semi_Annual_Swap_Rate_11_00_BGCANTOR,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} IDR_Semi_Annual_Swap_Rate_Non_deliverable_16_00_Tullett_Prebon,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} IDR_Semi_Annual_Swap_Rate_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} IDR_SOR_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} IDR_SOR_Reuters,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} IDR_SOR_Telerate,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} ILS_TELBOR,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} ILS_TELBOR01_Reuters,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} ILS_TELBOR_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} INR_BMK,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} INR_CMT,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} INR_FBIL_MIBOR_OIS_COMPOUND,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} INR_INBMK_REUTERS,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} INR_MIBOR_OIS,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} INR_MIBOR_OIS_Compound_1,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} INR_MIBOR_OIS_COMPOUND,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix and 2006 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} INR_MIFOR,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} INR_MIOIS,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} INR_MITOR_OIS_COMPOUND,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix and 2006 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} INR_Modified_MIFOR,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} INR_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} INR_Semi_Annual_Swap_Rate_11_30_BGCANTOR,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} INR_Semi_Annual_Swap_Rate_Non_deliverable_16_00_Tullett_Prebon,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} INR_Semi_Annual_Swap_Rate_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} ISK_REIBOR,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} ISK_REIBOR_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} ISK_REIBOR_Reuters,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} JPY_Annual_Swap_Rate_11_00_TRADITION,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} JPY_Annual_Swap_Rate_3_00_TRADITION,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} JPY_BBSF_Bloomberg_10_00,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} JPY_BBSF_Bloomberg_15_00,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} JPY_Euroyen_TIBOR,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} JPY_ISDA_Swap_Rate_10_00,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} JPY_ISDA_Swap_Rate_15_00,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} JPY_LIBOR,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} JPY_LIBOR_BBA,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} JPY_LIBOR_BBA_Bloomberg,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} JPY_LIBOR_FRASETT,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} JPY_LIBOR_ISDA,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} JPY_LIBOR_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} JPY_LIBOR_TSR_10_00,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} JPY_LIBOR_TSR_15_00,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} JPY_LTPR_MHBK,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} JPY_LTPR_MHCB,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} JPY_LTPR_TBC,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} JPY_MUTANCALL_TONAR,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} JPY_OIS_11_00_ICAP,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} JPY_OIS_11_00_TRADITION,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} JPY_OIS_3_00_TRADITION,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} JPY_Quoting_Banks_LIBOR,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix and 2006 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} JPY_STPR_Quoting_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} JPY_TIBOR,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} JPY_TIBOR_17096,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} JPY_TIBOR_17097,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} JPY_TIBOR_DTIBOR01,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} JPY_TIBOR_TIBM,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} JPY_TIBOR_TIBM__10_Banks_,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} JPY_TIBOR_TIBM__5_Banks_,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} JPY_TIBOR_TIBM__All_Banks_,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} JPY_TIBOR_TIBM__All_Banks__Bloomberg,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} JPY_TIBOR_TIBM_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} JPY_TIBOR_ZTIBOR,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix and 2006 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} JPY_TONA,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix and 2006 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} JPY_TONA_Average_180D,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix and 2006 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} JPY_TONA_Average_30D,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix and 2006 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} JPY_TONA_Average_90D,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix and 2006 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} JPY_TONA_Compounded_Index,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} JPY_TONA_OIS_Compound_1,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} JPY_TONA_OIS_COMPOUND,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix and 2006 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} JPY_TONA_TSR_10_00,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix and 2006 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} JPY_TONA_TSR_15_00,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix and 2006 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} JPY_TORF_QUICK,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} JPY_TSR_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} JPY_TSR_Reuters_10_00,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} JPY_TSR_Reuters_15_00,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} JPY_TSR_Telerate_10_00,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} JPY_TSR_Telerate_15_00,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} JPY_USD_Basis_Swaps_11_00_ICAP,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} KRW_Bond_3222,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} KRW_CD_3220,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} KRW_CD_91D,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} KRW_CD_KSDA_Bloomberg,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} KRW_Quarterly_Annual_Swap_Rate_3_30_ICAP,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} MXN_TIIE,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} MXN_TIIE_Banxico,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} MXN_TIIE_Banxico_Bloomberg,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} MXN_TIIE_Banxico_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} MXN_TIIE_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} MYR_KLIBOR,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} MYR_KLIBOR_BNM,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} MYR_KLIBOR_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} MYR_Quarterly_Swap_Rate_11_00_TRADITION,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} MYR_Quarterly_Swap_Rate_TRADITION_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} NOK_NIBOR,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} NOK_NIBOR_NIBR,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} NOK_NIBOR_NIBR_Bloomberg,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} NOK_NIBOR_NIBR_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} NOK_NIBOR_OIBOR,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} NOK_NIBOR_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix and 2006 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} NOK_NOWA,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} NOK_NOWA_OIS_Compound,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} NZD_BBR_BID,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} NZD_BBR_FRA,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} NZD_BBR_ISDC,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} NZD_BBR_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} NZD_BBR_Telerate,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} NZD_BKBM_Bid,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} NZD_BKBM_FRA,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} NZD_BKBM_FRA_Swap_Rate_ICAP,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix and 2006 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} NZD_NZIONA,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} NZD_NZIONA_OIS_Compound_1,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} NZD_NZIONA_OIS_COMPOUND,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} NZD_Semi_Annual_Swap_Rate_11_00_BGCANTOR,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} NZD_Semi_Annual_Swap_Rate_BGCANTOR_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} NZD_Swap_Rate_ICAP,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} NZD_Swap_Rate_ICAP_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} PHP_PHIREF,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} PHP_PHIREF_BAP,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} PHP_PHIREF_Bloomberg,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} PHP_PHIREF_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} PHP_Semi_Annual_Swap_Rate_11_00_BGCANTOR,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} PHP_Semi_Annual_Swap_Rate_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} PLN_POLONIA,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} PLN_POLONIA_OIS_Compound_1,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} PLN_POLONIA_OIS_COMPOUND,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} PLN_WIBID,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} PLN_WIBOR,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} PLN_WIBOR_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} PLN_WIBOR_WIBO,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} PLZ_WIBOR_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} PLZ_WIBOR_WIBO,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} REPOFUNDS_RATE_FRANCE_OIS_COMPOUND,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} REPOFUNDS_RATE_GERMANY_OIS_COMPOUND,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} REPOFUNDS_RATE_ITALY_OIS_COMPOUND,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} RON_Annual_Swap_Rate_11_00_BGCANTOR,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} RON_Annual_Swap_Rate_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} RON_RBOR_Reuters,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} RON_ROBID,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} RON_ROBOR,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} RUB_Annual_Swap_Rate_11_00_BGCANTOR,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} RUB_Annual_Swap_Rate_12_45_TRADITION,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} RUB_Annual_Swap_Rate_4_15_TRADITION,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} RUB_Annual_Swap_Rate_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} RUB_Annual_Swap_Rate_TRADITION_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} RUB_Key_Rate_CBRF,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} RUB_MosPrime,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} RUB_MOSPRIME_NFEA,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} RUB_MOSPRIME_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} RUB_RUONIA,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} RUB_RUONIA_OIS_Compound_1,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} RUB_RUONIA_OIS_COMPOUND,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} SAR_SAIBOR,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} SAR_SRIOR_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} SAR_SRIOR_SUAA,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} SEK_Annual_Swap_Rate,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} SEK_Annual_Swap_Rate_SESWFI,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} SEK_SIOR_OIS_COMPOUND,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} SEK_STIBOR,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} SEK_STIBOR_Bloomberg,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} SEK_STIBOR_OIS_Compound,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} SEK_STIBOR_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} SEK_STIBOR_SIDE,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} SGD_Semi_Annual_Currency_Basis_Swap_Rate_11_00_Tullett_Prebon,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} SGD_Semi_Annual_Currency_Basis_Swap_Rate_16_00_Tullett_Prebon,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} SGD_Semi_Annual_Swap_Rate_11_00_BGCANTOR,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} SGD_Semi_Annual_Swap_Rate_11_00_Tullett_Prebon,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} SGD_Semi_Annual_Swap_Rate_11_00_TRADITION,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} SGD_Semi_Annual_Swap_Rate_16_00_Tullett_Prebon,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} SGD_Semi_Annual_Swap_Rate_ICAP,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} SGD_Semi_Annual_Swap_Rate_ICAP_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} SGD_Semi_Annual_Swap_Rate_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} SGD_Semi_Annual_Swap_Rate_TRADITION_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} SGD_SIBOR,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} SGD_SIBOR_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} SGD_SIBOR_Reuters,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} SGD_SIBOR_Telerate,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} SGD_SONAR_OIS_COMPOUND,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} SGD_SONAR_OIS_VWAP_COMPOUND,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} SGD_SOR,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix and 2006 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} SGD_SORA,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} SGD_SORA_COMPOUND,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} SGD_SORA_OIS_Compound,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} SGD_SOR_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} SGD_SOR_Reuters,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} SGD_SOR_Telerate,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} SGD_SOR_VWAP,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} SGD_SOR_VWAP_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} SKK_BRIBOR_Bloomberg,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} SKK_BRIBOR_BRBO,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} SKK_BRIBOR_NBSK07,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} SKK_BRIBOR_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} THB_Semi_Annual_Swap_Rate_11_00_BGCANTOR,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} THB_Semi_Annual_Swap_Rate_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} THB_SOR_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} THB_SOR_Reuters,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} THB_SOR_Telerate,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} THB_THBFIX,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} THB_THBFIX_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} THB_THBFIX_Reuters,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix and 2006 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} THB_THOR,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} THB_THOR_COMPOUND,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} THB_THOR_OIS_Compound,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} TRY_Annual_Swap_Rate_11_00_TRADITION,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} TRY_Annual_Swap_Rate_11_15_BGCANTOR,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} TRY_Annual_Swap_Rate_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} TRY_Semi_Annual_Swap_Rate_TRADITION_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} TRY_TLREF_OIS_Compound_1,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} TRY_TLREF_OIS_COMPOUND,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} TRY_TRLIBOR,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} TRY_TRYIBOR_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} TRY_TRYIBOR_Reuters,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} TWD_Quarterly_Annual_Swap_Rate_11_00_BGCANTOR,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} TWD_Quarterly_Annual_Swap_Rate_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} TWD_Reference_Dealers,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} TWD_Reuters_6165,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix and 2006 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} TWD_TAIBIR01,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix and 2006 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} TWD_TAIBIR02,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} TWD_TAIBOR,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} TWD_TAIBOR_Bloomberg,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} TWD_TAIBOR_Reuters,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} TWD_Telerate_6165,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} TWD_TWCPBA,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} UK_Base_Rate,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_3M_LIBOR_SWAP_CME_vs_LCH_ICAP,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_3M_LIBOR_SWAP_CME_vs_LCH_ICAP_Bloomberg,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_6M_LIBOR_SWAP_CME_vs_LCH_ICAP,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_6M_LIBOR_SWAP_CME_vs_LCH_ICAP_Bloomberg,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix and 2006 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_AMERIBOR,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix and 2006 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_AMERIBOR_Average_30D,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix and 2006 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_AMERIBOR_Average_90D,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix and 2006 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_AMERIBOR_Term,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix and 2006 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_AMERIBOR_Term_Structure,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_Annual_Swap_Rate_11_00_BGCANTOR,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_Annual_Swap_Rate_11_00_TRADITION,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_Annual_Swap_Rate_4_00_TRADITION,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_BA_H_15,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_BA_Reference_Dealers,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_BMA_Municipal_Swap_Index,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix and 2006 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_BSBY,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_CD_H_15,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_CD_Reference_Dealers,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_CMS_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_CMS_Reference_Banks_ICAP_SwapPX,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_CMS_Reuters,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_CMS_Telerate,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} USD_CMT,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} USD_CMT_Average_1W,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_CMT_T7051,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_CMT_T7052,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_COF11_FHLBSF,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_COF11_Reuters,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_COF11_Telerate,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} USD_COFI,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_CP_H_15,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} USD_CP_Money_Market_Yield,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_CP_Reference_Dealers,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix and 2006 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_CRITR,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} USD_Federal_Funds,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_Federal_Funds_H_15,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_Federal_Funds_H_15_Bloomberg,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_Federal_Funds_H_15_OIS_COMPOUND,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} USD_Federal_Funds_OIS_Compound,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_Federal_Funds_Reference_Dealers,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_FFCB_DISCO,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_ISDAFIX3_Swap_Rate,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_ISDAFIX3_Swap_Rate_3_00,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_ISDA_Swap_Rate,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_ISDA_Swap_Rate_3_00,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} USD_LIBOR,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_LIBOR_BBA,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_LIBOR_BBA_Bloomberg,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} USD_LIBOR_ICE_Swap_Rate_11_00,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} USD_LIBOR_ICE_Swap_Rate_15_00,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_LIBOR_ISDA,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_LIBOR_LIBO,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_LIBOR_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} USD_Municipal_Swap_Index,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_Municipal_Swap_Libor_Ratio_11_00_ICAP,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_Municipal_Swap_Rate_11_00_ICAP,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_OIS_11_00_BGCANTOR,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_OIS_11_00_LON_ICAP,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_OIS_11_00_NY_ICAP,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_OIS_11_00_TRADITION,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_OIS_3_00_BGCANTOR,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_OIS_3_00_NY_ICAP,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_OIS_4_00_TRADITION,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix and 2006 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_Overnight_Bank_Funding_Rate,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} USD_Prime,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_Prime_H_15,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_Prime_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_S_P_Index_High_Grade,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} USD_SandP_Index_High_Grade,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_SIBOR_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_SIBOR_SIBO,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_SIFMA_Municipal_Swap_Index,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix and 2006 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_SOFR,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix and 2006 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_SOFR_Average_180D,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix and 2006 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_SOFR_Average_30D,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix and 2006 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_SOFR_Average_90D,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix and 2006 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_SOFR_CME_Term,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_SOFR_COMPOUND,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix and 2006 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_SOFR_Compounded_Index,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix and 2006 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_SOFR_ICE_Swap_Rate,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} USD_SOFR_OIS_Compound,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_Swap_Rate_BCMP1,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_TBILL_H_15,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_TBILL_H_15_Bloomberg,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_TBILL_Secondary_Market,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} USD_TBILL_Secondary_Market_Bond_Equivalent_Yield,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_TIBOR_ISDC,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_TIBOR_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_Treasury_19901_3_00_ICAP,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_Treasury_Rate_BCMP1,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_Treasury_Rate_ICAP_BrokerTec,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_Treasury_Rate_SwapMarker100,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_Treasury_Rate_SwapMarker99,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_Treasury_Rate_T19901,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} USD_Treasury_Rate_T500,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} VND_Semi_Annual_Swap_Rate_11_00_BGCANTOR,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} VND_Semi_Annual_Swap_Rate_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} ZAR_DEPOSIT_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} ZAR_DEPOSIT_SAFEX,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} ZAR_JIBAR,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} ZAR_JIBAR_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} ZAR_JIBAR_SAFEX,
  {meta::pure::profiles::doc.doc = 'Per 2021 ISDA Interest Rate Derivatives Definitions Floating Rate Matrix, as amended through the date on which parties enter into the relevant transaction.'} ZAR_Prime_Average_1,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} ZAR_PRIME_AVERAGE,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} ZAR_PRIME_AVERAGE_Reference_Banks,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} ZAR_Quarterly_Swap_Rate_1_00_TRADITION,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} ZAR_Quarterly_Swap_Rate_5_30_TRADITION,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions or Annex to the 2000 ISDA Definitions, Section 7.1 Rate Options, as amended and supplemented through the date on which parties enter into the relevant transaction.'} ZAR_Quarterly_Swap_Rate_TRADITION_Reference_Banks
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify an elective amount.'} model::external::cdm::ElectiveAmountEnum
{
  {meta::pure::profiles::doc.doc = 'The elective amount is zero.'} Zero,
  {meta::pure::profiles::doc.doc = 'The elective amount has no upper limit.'} Unlimited
}

Enum {meta::pure::profiles::doc.doc = ''} FpML::model::SupervisoryBodyEmir
{
  ESMA,
  UKFCA
}

Enum {meta::pure::profiles::doc.doc = 'Defines the frequency by which reporting recurs.'} FpML::model::ReportingFrequencyTypeEnum
{
  Annually,
  Biweekly,
  Daily,
  Monthly,
  Quarterly,
  Semiannually,
  Weekly
}

Enum {meta::pure::profiles::doc.doc = 'The type of credit approval request.'} FpML::model::SetCreditLimitResponseEnum
{
  SetCreditLimitFailed,
  SetCreditLimitSuccessful
}

Enum {meta::pure::profiles::doc.doc = 'The method of FRA discounting, if any, that will apply.'} FpML::model::FraDiscountingEnum
{
  ISDA,
  AFMA,
  NONE,
  ISDAYield
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify the treatment of Non-Cash Dividends.'} model::external::cdm::NonCashDividendTreatmentEnum
{
  {meta::pure::profiles::doc.doc = 'The treatment of any non-cash dividend shall be determined in accordance with the Potential Adjustment Event provisions.'} PotentialAdjustmentEvent,
  {meta::pure::profiles::doc.doc = 'Any non-cash dividend shall be treated as a Declared Cash Equivalent Dividend.'} CashEquivalent
}

Enum FpML::model::DealtCurrencyEnum
{
  ExchangedCurrency1,
  ExchangedCurrency2
}

Enum {meta::pure::profiles::doc.doc = 'Provides the enumerated values to identify the source or scheme for the type of product.'} model::external::cdm::ExternalProductTypeSourceEnum
{
  {meta::pure::profiles::doc.doc = 'Denotes a product type used in FpML, defined at the following location http://www.fpml.org/coding-scheme/product-taxonomy.'} FpMLProductType,
  {meta::pure::profiles::doc.doc = 'Issued by the members of the Association of National Numbering Agencies (ANNA), the Classification of Financial Instrument (CFI) code is used to define and describe financial instruments as a uniform set of codes for all market participants.'} CFI,
  {meta::pure::profiles::doc.doc = 'Denotes a user-specific scheme or taxonomy or other external sources not listed here.'} Other
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify the type of the master agreement governing the transaction.'} model::external::cdm::MasterAgreementTypeEnum
{
  {meta::pure::profiles::doc.doc = 'AFB Master Agreement for Foreign Exchange and Derivatives Transactions'} AFB,
  {meta::pure::profiles::doc.doc = 'A Bespoke (custom) Master Agreement, including one-off agreements for transactions'} Bespoke,
  {meta::pure::profiles::doc.doc = 'Clearing Master Agreement'} CMA,
  {meta::pure::profiles::doc.doc = 'Contrato Marco de Operaciones Financieras'} CMOF,
  {meta::pure::profiles::doc.doc = 'EEI Master Power Purchase and Sale Agreement'} EEIPower,
  {meta::pure::profiles::doc.doc = 'EFET General Agreement Concerning the Delivery and Acceptance of Electricity'} EFETElectricity,
  {meta::pure::profiles::doc.doc = 'EFET General Agreement Concerning The Delivery And Acceptance of Natural Gas'} EFETGas,
  {meta::pure::profiles::doc.doc = 'European Master Agreement and the Derivatives Annex (Banking Federation of the European Union)'} EMA,
  {meta::pure::profiles::doc.doc = 'Master Agreement Relating to transactions on Forward Financial Instruments (Federation Bancaire Francaise)'} FBF,
  {meta::pure::profiles::doc.doc = 'ICMA Global Master Agreement for REPO Trades'} GMRA,
  {meta::pure::profiles::doc.doc = 'ISLA Global Master Agreement for Securities Lending'} GMSLA,
  {meta::pure::profiles::doc.doc = 'FOA Grid Trade Master Agreement'} GTMA,
  {meta::pure::profiles::doc.doc = 'GasEDI Base Contract for Short-term Sale and Purchase of Natural Gas'} GasEDI,
  {meta::pure::profiles::doc.doc = 'German Master Agreement for Financial derivatives and Addendum for Options on Stock Exchange Indices or Securities'} German,
  {meta::pure::profiles::doc.doc = 'International Currency Options Market Master Agreement'} ICOM,
  {meta::pure::profiles::doc.doc = 'International Emissions Trading Association Emissions Reduction Purchase Agreement'} IETA_ERPA,
  {meta::pure::profiles::doc.doc = 'International Emissions Trading Association Emissions Trading Master Agreement'} IETA_ETMA,
  {meta::pure::profiles::doc.doc = 'International Emissions Trading Association International Emissions Trading Master Agreement'} IETA_IETMA,
  {meta::pure::profiles::doc.doc = 'International Foreign Exchange Master Agreement'} IFEMA,
  {meta::pure::profiles::doc.doc = 'International Foreign Exchange and Options Master Agreement'} IFEOMA,
  {meta::pure::profiles::doc.doc = 'ISDA Master Agreement'} ISDA,
  {meta::pure::profiles::doc.doc = 'ISDA-FIA Cleared Derivatives Execution Agreement'} ISDAFIA_CDEA,
  {meta::pure::profiles::doc.doc = 'Master agreement of Japan Securities Clearing Corporation'} JSCC,
  {meta::pure::profiles::doc.doc = 'International Bullion Master Agreement Terms published by the London Bullion Market Association'} LBMA,
  {meta::pure::profiles::doc.doc = 'Leadership in Energy Automated Processing'} LEAP,
  {meta::pure::profiles::doc.doc = 'CTA Master Coal Purchase and Sales Agreement'} MCPSA,
  {meta::pure::profiles::doc.doc = 'NAESB Base Contract for Sale and Purchase of Natural Gas'} NAESBGas,
  {meta::pure::profiles::doc.doc = 'Short Term Flat NBP Trading Terms and Conditions'} NBP,
  {meta::pure::profiles::doc.doc = 'Standard Documentation for Derivative Transactions on the Russian Financial Markets'} RussianDerivatives,
  {meta::pure::profiles::doc.doc = 'Master Agreement and Contractual Terms for Repurchase Agreements on the Russian Financial Market'} RussianRepo,
  {meta::pure::profiles::doc.doc = 'globalCOAL Standard Coal Trading Agreement'} SCoTA,
  {meta::pure::profiles::doc.doc = 'Swiss Master Agreement for OTC Derivatives Instruments'} Swiss,
  {meta::pure::profiles::doc.doc = 'TTF Hub Natural Gas Trading Terms and Conditions'} TTF,
  {meta::pure::profiles::doc.doc = 'Zeebrugge Hub Natural Gas Trading Terms and Conditions'} ZBT
}

Enum {meta::pure::profiles::doc.doc = 'The specification of, for American-style digitals, whether the trigger level must be touched or not touched.'} FpML::model::TouchConditionEnum
{
  Touch,
  Notouch
}

Enum {meta::pure::profiles::doc.doc = 'The type of CSA (credit support agreement/annex), e.g. for cash settlement purposes.'} FpML::model::CsaTypeEnum
{
  NoCSA,
  ExistingCSA,
  ReferenceVMCSA
}

Enum {meta::pure::profiles::doc.doc = 'Defines the outcome in the event that the barrier is triggered i.e. whether the product becomes active (Knockin) or is extinguished (Knockout). Omitting superseded values ReverseKnock[in|out].'} FpML::model::FxBarrierTypeSimpleEnum
{
  Knockin,
  Knockout
}

Enum {meta::pure::profiles::doc.doc = 'The type of credit approval request.'} FpML::model::LimitModelEnum
{
  Ping,
  Plus1ToStop,
  Plus1ToPing,
  PushToPing,
  PushToStop
}

Enum {meta::pure::profiles::doc.doc = 'The enumeration values to qualify the allowed units of time.'} model::external::cdm::TimeUnitEnum
{
  {meta::pure::profiles::doc.doc = 'Second'} Second,
  {meta::pure::profiles::doc.doc = 'Minute'} Minute,
  {meta::pure::profiles::doc.doc = 'Hour'} Hour,
  {meta::pure::profiles::doc.doc = 'Day'} Day,
  {meta::pure::profiles::doc.doc = 'Week'} Week,
  {meta::pure::profiles::doc.doc = 'Month'} Month,
  {meta::pure::profiles::doc.doc = 'Year'} Year
}

Enum {meta::pure::profiles::doc.doc = 'The enumeration values to qualify the type of account.'} model::external::cdm::AccountTypeEnum
{
  {meta::pure::profiles::doc.doc = 'Aggregate client account, as defined under ESMA MiFIR.'} AggregateClient,
  {meta::pure::profiles::doc.doc = 'The account contains trading activity or positions that belong to a client of the firm that opened the account.'} Client,
  {meta::pure::profiles::doc.doc = 'The account contains proprietary trading activity or positions, belonging to the firm that is the owner of the account.'} House
}

Enum {meta::pure::profiles::doc.doc = 'Defines the First Period or the Second Period, as specified in the 2002 ISDA Equity Derivatives Definitions.'} FpML::model::DividendPeriodEnum
{
  FirstPeriod,
  SecondPeriod
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify the method of calculating discounted payment amounts. This enumerations combines the FpML DiscountingTypeEnum and FraDiscountingEnum enumerations.'} model::external::cdm::DiscountingTypeEnum
{
  {meta::pure::profiles::doc.doc = 'As specified by the 2006 ISDA Definitions, Section 8.4. Discounting, paragraph (a).'} Standard,
  {meta::pure::profiles::doc.doc = 'As specified by the 2006 ISDA Definitions, Section 8.4. Discounting, paragraph (b).'} FRA,
  {meta::pure::profiles::doc.doc = 'As specified by the 2006 ISDA Definitions, Section 8.4. Discounting, paragraph (e).'} FRAYield,
  {meta::pure::profiles::doc.doc = 'As specified by the Australian Financial Markets Association (AFMA) OTC Financial Product Conventions. This discounting method should not be used for a trade documented under a legal framework where the 2006 ISDA Definitions have been incorporated.'} AFMA
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify the effective date of the Amendment to Termination Currency when specified as a specific date (e.g. the annex date). ISDA 2016 Credit Support Annex for Initial Margin, paragraph 13, General Principles, (t).'} model::external::cdm::AmendmentEffectiveDateEnum
{
  {meta::pure::profiles::doc.doc = 'The effective date corresponds to the Annex date.'} AnnexDate,
  {meta::pure::profiles::doc.doc = 'The effective date corresponds to the Deed date.'} DeedDate,
  {meta::pure::profiles::doc.doc = 'The effective date corresponds to the Agreement date.'} AgreementDate,
  {meta::pure::profiles::doc.doc = 'The effective date corresponds to the Amendment Effective Date (IM)'} AmendmentEffectiveDate
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify the type of ISDA Credit Support Agreement governing the transaction.'} model::external::cdm::CreditSupportAgreementTypeEnum
{
  {meta::pure::profiles::doc.doc = 'The ISDA 1994 Credit Support Annex New York Law (pledge) applies.'} ISDA1994CreditSupportAnnexNewYorkLaw,
  {meta::pure::profiles::doc.doc = 'The ISDA 1995 Credit Support Annex English Law (title transfer) applies.'} ISDA1995CreditSupportAnnexEnglishLaw,
  {meta::pure::profiles::doc.doc = 'The ISDA 1995 Credit Support Annex Japanese Law applies.'} ISDA1995CreditSupportAnnexJapaneseLaw,
  {meta::pure::profiles::doc.doc = 'The ISDA 1995 Credit Support Deed English Law (charge) applies.'} ISDA1995CreditSupportDeedEnglishLaw,
  {meta::pure::profiles::doc.doc = 'The ISDA 2001 Margin Provisions applies.'} ISDA2001MarginProvisions,
  {meta::pure::profiles::doc.doc = 'The ISDA 2013 Standard Credit Support Agreement.'} ISDA2013StandardCreditSupportAgreement,
  {meta::pure::profiles::doc.doc = 'The ISDA 2014 Standard Credit Support Agreement.'} ISDA2014StandardCreditSupportAgreement
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify how an exchange rate is quoted.'} model::external::cdm::QuoteBasisEnum
{
  {meta::pure::profiles::doc.doc = 'The amount of currency1 for one unit of currency2'} Currency1PerCurrency2,
  {meta::pure::profiles::doc.doc = 'The amount of currency2 for one unit of currency1'} Currency2PerCurrency1
}

Enum {meta::pure::profiles::doc.doc = 'The time of day which would be considered for valuing the knock event.'} FpML::model::TriggerTimeTypeEnum
{
  Closing,
  Anytime
}

Enum {meta::pure::profiles::doc.doc = 'Specifies the method by which asset swap spread is calculated, par-par or proceeds.'} FpML::model::SpreadCalculationMethodEnum
{
  ParPar,
  Proceeds
}

Enum {meta::pure::profiles::doc.doc = 'Represents the enumerated values to specify the credit watch rating.'} model::external::cdm::CreditRatingCreditWatchEnum
{
  {meta::pure::profiles::doc.doc = 'Denotes a rating may be raised.'} Positive,
  {meta::pure::profiles::doc.doc = 'Denotes a rating may be lowered.'} Negative,
  {meta::pure::profiles::doc.doc = 'Denotes a rating may be raised, lowered, or affirmed.'} Developing
}

Enum {meta::pure::profiles::doc.doc = 'Represents an enumeration list to identify the type of Equity.'} model::external::cdm::EquityTypeEnum
{
  {meta::pure::profiles::doc.doc = 'Identifies an Equity of Common stocks and shares.'} Ordinary,
  {meta::pure::profiles::doc.doc = 'Identifies an Equity of Non-Convertible Preference, Shares which hold priority to receive capital return in event of issuer liquidation.'} NonConvertiblePreference
}

Enum {meta::pure::profiles::doc.doc = 'Defines whether the agent bank is making an interest payment based on the lender pro-rata share at the end of the period (snapshot) or based on the lender position throughout the period.'} FpML::model::InterestCalculationMethodEnum
{
  ContractPositionThruPeriod,
  ProRataShareSnapshot
}

Enum {meta::pure::profiles::doc.doc = 'Represents the enumeration values that indicate the intended status of message type, such as expected call, notification of a call or a margin call.'} model::external::cdm::CallTypeEnum
{
  {meta::pure::profiles::doc.doc = 'Identifies an actionable Margin Call.'} MarginCall,
  {meta::pure::profiles::doc.doc = 'Identifies a notification of a Margin Call for legal obligation to notify other party to initiate a margin call when notifying party is calculation or valuation agent.'} Notification,
  {meta::pure::profiles::doc.doc = 'Identifies an expected Margin Call instruction for either party to notify the other or their service provider of an expected margin call movement.'} ExpectedCall
}

Enum {meta::pure::profiles::doc.doc = 'The Upper Bound Direction. It only contains the AtOrBelow and Below values.'} FpML::model::FxRegionUpperBoundDirectionEnum
{
  AtOrBelow,
  Below
}

Enum {meta::pure::profiles::doc.doc = 'Represents an enumeration list to identify the type of entity issuing the asset.'} model::external::cdm::IssuerTypeEnum
{
  {meta::pure::profiles::doc.doc = 'Specifies debt issued by international organisations and multilateral banks, entities constituted by treaties or with multiple sovereign members includes Multilateral development Banks.'} SupraNational,
  {meta::pure::profiles::doc.doc = 'Specifies Sovereign, Government Debt Securities including Central Banks.'} SovereignCentralBank,
  {meta::pure::profiles::doc.doc = 'Specifies debt issues by institutions or bodies, typically constituted by statute, with a function mandated by the government and subject to government supervision inclusive of profit- and non-profit making bodies. Includes the US Agencies and GSEs and the EU concept of public sector entities. Excluding any entities which are also Regional Government.'} QuasiGovernment,
  {meta::pure::profiles::doc.doc = 'Specifies Regional Government Issued Debt including states within countries, local authorities and municipalities.'} RegionalGovernment,
  {meta::pure::profiles::doc.doc = 'Specifies debt issued Securities by corporate bodies including Banks.'} Corporate,
  {meta::pure::profiles::doc.doc = 'Specifies a vehicle (with or without separate legal personality) designed for the purposes of collective investment towards a defined investment goal.'} Fund,
  {meta::pure::profiles::doc.doc = 'Specifies a vehicle setup for the purpose of acquisition and financing of specific assets on a limited recourse basis. E.g. asset backed securities, including securitisations.'} SpecialPurposeVehicle
}

Enum {meta::pure::profiles::doc.doc = 'Union of the enumerated values defined by the International Standards Organization (ISO) and the FpML nonISOCurrencyScheme which consists of offshore and historical currencies (https://www.fpml.org/coding-scheme/non-iso-currency), as of 28-Oct-2016.'} model::external::cdm::CurrencyCodeEnum
{
  {meta::pure::profiles::doc.doc = 'United Arab Emirates Dirham'} AED,
  {meta::pure::profiles::doc.doc = 'Afghanistan Afghani'} AFN,
  {meta::pure::profiles::doc.doc = 'Albanian Lek'} ALL,
  {meta::pure::profiles::doc.doc = 'Armenia Dram'} AMD,
  {meta::pure::profiles::doc.doc = 'Netherlands Antillean Guilder'} ANG,
  {meta::pure::profiles::doc.doc = 'Angolan Kwanza'} AOA,
  {meta::pure::profiles::doc.doc = 'Argentine Peso'} ARS,
  {meta::pure::profiles::doc.doc = 'Australian Dollar'} AUD,
  {meta::pure::profiles::doc.doc = 'Aruban Florin'} AWG,
  {meta::pure::profiles::doc.doc = 'Azerbaijan Manat'} AZN,
  {meta::pure::profiles::doc.doc = 'Bosnia And Herzegovina Mark'} BAM,
  {meta::pure::profiles::doc.doc = 'Barbados Dollar'} BBD,
  {meta::pure::profiles::doc.doc = 'Bangladeshi Taka'} BDT,
  {meta::pure::profiles::doc.doc = 'Bulgarian Lev'} BGN,
  {meta::pure::profiles::doc.doc = 'Bahraini Dinar'} BHD,
  {meta::pure::profiles::doc.doc = 'Burundi Franc'} BIF,
  {meta::pure::profiles::doc.doc = 'Bermudian Dollar'} BMD,
  {meta::pure::profiles::doc.doc = 'Brunei Dollar'} BND,
  {meta::pure::profiles::doc.doc = 'Bolivian Boliviano'} BOB,
  {meta::pure::profiles::doc.doc = 'Bolivian Mvdol'} BOV,
  {meta::pure::profiles::doc.doc = 'Brazilian Real'} BRL,
  {meta::pure::profiles::doc.doc = 'Bahamian Dollar'} BSD,
  {meta::pure::profiles::doc.doc = 'Bhutanese Ngultrum'} BTN,
  {meta::pure::profiles::doc.doc = 'Botwsana Pula'} BWP,
  {meta::pure::profiles::doc.doc = 'Belarusian Ruble'} BYN,
  {meta::pure::profiles::doc.doc = 'Belize Dollar'} BZD,
  {meta::pure::profiles::doc.doc = 'Canadian Dollar'} CAD,
  {meta::pure::profiles::doc.doc = 'Congolese Franc'} CDF,
  {meta::pure::profiles::doc.doc = 'Wirtschaftsring Euro'} CHE,
  {meta::pure::profiles::doc.doc = 'Swiss Franc'} CHF,
  {meta::pure::profiles::doc.doc = 'Wirtschaftsring Franc'} CHW,
  {meta::pure::profiles::doc.doc = 'Chilean Unidad de Fomento'} CLF,
  {meta::pure::profiles::doc.doc = 'Chilean Peso'} CLP,
  {meta::pure::profiles::doc.doc = 'Chinese Yuan Renminbi'} CNY,
  {meta::pure::profiles::doc.doc = 'Colombian Peso'} COP,
  {meta::pure::profiles::doc.doc = 'Colombian Unidad de Valor Real'} COU,
  {meta::pure::profiles::doc.doc = 'Costa Rican Colon'} CRC,
  {meta::pure::profiles::doc.doc = 'Cuban Peso Convertible'} CUC,
  {meta::pure::profiles::doc.doc = 'Cuban Peso'} CUP,
  {meta::pure::profiles::doc.doc = 'Cabo Verde Escudo'} CVE,
  {meta::pure::profiles::doc.doc = 'Czech Koruna'} CZK,
  {meta::pure::profiles::doc.doc = 'Djibouti Franc'} DJF,
  {meta::pure::profiles::doc.doc = 'Danish Krone'} DKK,
  {meta::pure::profiles::doc.doc = 'Dominican Peso'} DOP,
  {meta::pure::profiles::doc.doc = 'Algerian Dinar'} DZD,
  {meta::pure::profiles::doc.doc = 'Egyptian Pound'} EGP,
  {meta::pure::profiles::doc.doc = 'Eritrean Nakfa'} ERN,
  {meta::pure::profiles::doc.doc = 'Ethiopian Birr'} ETB,
  {meta::pure::profiles::doc.doc = 'Euro'} EUR,
  {meta::pure::profiles::doc.doc = 'Fijian Dollar'} FJD,
  {meta::pure::profiles::doc.doc = 'Falkland Islands Pound'} FKP,
  {meta::pure::profiles::doc.doc = 'British Pound Sterling'} GBP,
  {meta::pure::profiles::doc.doc = 'Georgian Lari'} GEL,
  {meta::pure::profiles::doc.doc = 'Ghana Cedi'} GHS,
  {meta::pure::profiles::doc.doc = 'Gibraltar Pound'} GIP,
  {meta::pure::profiles::doc.doc = 'Gambian Dalasi'} GMD,
  {meta::pure::profiles::doc.doc = 'Guinean Franc'} GNF,
  {meta::pure::profiles::doc.doc = 'Guatemalan Quetzal'} GTQ,
  {meta::pure::profiles::doc.doc = 'Guyanese Dollar'} GYD,
  {meta::pure::profiles::doc.doc = 'Hong Kong Dollar'} HKD,
  {meta::pure::profiles::doc.doc = 'Honduran Lempira'} HNL,
  {meta::pure::profiles::doc.doc = 'Croatian Kuna'} HRK,
  {meta::pure::profiles::doc.doc = 'Haitian Gourde'} HTG,
  {meta::pure::profiles::doc.doc = 'Hungarian Forint'} HUF,
  {meta::pure::profiles::doc.doc = 'Indonesian Rupiah'} IDR,
  {meta::pure::profiles::doc.doc = 'New Israeli Sheqel'} ILS,
  {meta::pure::profiles::doc.doc = 'Indian Rupee'} INR,
  {meta::pure::profiles::doc.doc = 'Iraqi Dinar'} IQD,
  {meta::pure::profiles::doc.doc = 'Iranian Rial'} IRR,
  {meta::pure::profiles::doc.doc = 'Icelandic Krona'} ISK,
  {meta::pure::profiles::doc.doc = 'Jamaican Dollar'} JMD,
  {meta::pure::profiles::doc.doc = 'Jordanian Dinar'} JOD,
  {meta::pure::profiles::doc.doc = 'Japanese Yen'} JPY,
  {meta::pure::profiles::doc.doc = 'Kenyan Shilling'} KES,
  {meta::pure::profiles::doc.doc = 'Kyrgyzstani Som'} KGS,
  {meta::pure::profiles::doc.doc = 'Cambodian Riel'} KHR,
  {meta::pure::profiles::doc.doc = 'Comorian Franc'} KMF,
  {meta::pure::profiles::doc.doc = 'North Korean Won'} KPW,
  {meta::pure::profiles::doc.doc = 'South Korean Won'} KRW,
  {meta::pure::profiles::doc.doc = 'Kuwaiti Dinar'} KWD,
  {meta::pure::profiles::doc.doc = 'Cayman Islands Dollar'} KYD,
  {meta::pure::profiles::doc.doc = 'Kazakhstani Tenge'} KZT,
  {meta::pure::profiles::doc.doc = 'Laotian Kip'} LAK,
  {meta::pure::profiles::doc.doc = 'Lebanese Pound'} LBP,
  {meta::pure::profiles::doc.doc = 'Sri Lankan Rupee'} LKR,
  {meta::pure::profiles::doc.doc = 'Liberian Dollar'} LRD,
  {meta::pure::profiles::doc.doc = 'Lesotho Loti'} LSL,
  {meta::pure::profiles::doc.doc = 'Libyan Dinar'} LYD,
  {meta::pure::profiles::doc.doc = 'Moroccan Dirham'} MAD,
  {meta::pure::profiles::doc.doc = 'Moldovan Leu'} MDL,
  {meta::pure::profiles::doc.doc = 'Malagasy Ariary'} MGA,
  {meta::pure::profiles::doc.doc = 'Macedonian Denar'} MKD,
  {meta::pure::profiles::doc.doc = 'Myanmar Kyat'} MMK,
  {meta::pure::profiles::doc.doc = 'Mongolian Tugrik'} MNT,
  {meta::pure::profiles::doc.doc = 'Macanese Pataca'} MOP,
  {meta::pure::profiles::doc.doc = 'Mauritanian Ouguiya'} MRU,
  {meta::pure::profiles::doc.doc = 'Mauritian Rupee'} MUR,
  {meta::pure::profiles::doc.doc = 'Maldivian Rufiyaa'} MVR,
  {meta::pure::profiles::doc.doc = 'Malawian Kwacha'} MWK,
  {meta::pure::profiles::doc.doc = 'Mexican Peso'} MXN,
  {meta::pure::profiles::doc.doc = 'Mexican Unidad de Inversion (UDI)'} MXV,
  {meta::pure::profiles::doc.doc = 'Malaysian Ringgit'} MYR,
  {meta::pure::profiles::doc.doc = 'Mozambique Metical'} MZN,
  {meta::pure::profiles::doc.doc = 'Namibia Dollar'} NAD,
  {meta::pure::profiles::doc.doc = 'Nigerian Naira'} NGN,
  {meta::pure::profiles::doc.doc = 'Nicaraguan Cordoba Oro'} NIO,
  {meta::pure::profiles::doc.doc = 'Norwegian Krone'} NOK,
  {meta::pure::profiles::doc.doc = 'Nepalese Rupee'} NPR,
  {meta::pure::profiles::doc.doc = 'New Zealand Dollar'} NZD,
  {meta::pure::profiles::doc.doc = 'Omani Rial'} OMR,
  {meta::pure::profiles::doc.doc = 'Panamanian Balboa'} PAB,
  {meta::pure::profiles::doc.doc = 'Peruvian Sol'} PEN,
  {meta::pure::profiles::doc.doc = 'Papua New Guinean Kina'} PGK,
  {meta::pure::profiles::doc.doc = 'Philippine Peso'} PHP,
  {meta::pure::profiles::doc.doc = 'Pakistani Rupee'} PKR,
  {meta::pure::profiles::doc.doc = 'Polish Zloty'} PLN,
  {meta::pure::profiles::doc.doc = 'Paraguayan Guarani'} PYG,
  {meta::pure::profiles::doc.doc = 'Qatari Rial'} QAR,
  {meta::pure::profiles::doc.doc = 'Romanian Leu'} RON,
  {meta::pure::profiles::doc.doc = 'Serbian Dinar'} RSD,
  {meta::pure::profiles::doc.doc = 'Russian Ruble'} RUB,
  {meta::pure::profiles::doc.doc = 'Rwandan Franc'} RWF,
  {meta::pure::profiles::doc.doc = 'Saudi Riyal'} SAR,
  {meta::pure::profiles::doc.doc = 'Solomon Islands Dollar'} SBD,
  {meta::pure::profiles::doc.doc = 'Seychellois Rupee'} SCR,
  {meta::pure::profiles::doc.doc = 'Sudanese Pound'} SDG,
  {meta::pure::profiles::doc.doc = 'Swedish Krona'} SEK,
  {meta::pure::profiles::doc.doc = 'Singapore Dollar'} SGD,
  {meta::pure::profiles::doc.doc = 'Saint Helena Pound'} SHP,
  {meta::pure::profiles::doc.doc = 'Sierra Leonean Leone'} SLL,
  {meta::pure::profiles::doc.doc = 'Somali Shilling'} SOS,
  {meta::pure::profiles::doc.doc = 'Surinam Dollar'} SRD,
  {meta::pure::profiles::doc.doc = 'South Sudanese Pound'} SSP,
  {meta::pure::profiles::doc.doc = 'Sao Tomean Dobra'} STN,
  {meta::pure::profiles::doc.doc = 'El Salvadoran Colon'} SVC,
  {meta::pure::profiles::doc.doc = 'Syrian Pound'} SYP,
  {meta::pure::profiles::doc.doc = 'Swazi Lilangeni'} SZL,
  {meta::pure::profiles::doc.doc = 'Thai Baht'} THB,
  {meta::pure::profiles::doc.doc = 'Tajikistani Somoni'} TJS,
  {meta::pure::profiles::doc.doc = 'Turkmenistan New Manat'} TMT,
  {meta::pure::profiles::doc.doc = 'Tunisian Dinar'} TND,
  {meta::pure::profiles::doc.doc = 'Tongan Pa\u2019anga'} TOP,
  {meta::pure::profiles::doc.doc = 'Turkish Lira'} TRY,
  {meta::pure::profiles::doc.doc = 'Trinidad and Tobago Dollar'} TTD,
  {meta::pure::profiles::doc.doc = 'New Taiwan Dollar'} TWD,
  {meta::pure::profiles::doc.doc = 'Tanzanian Shilling'} TZS,
  {meta::pure::profiles::doc.doc = 'Ukrainian Hryvnia'} UAH,
  {meta::pure::profiles::doc.doc = 'Ugandan Shilling'} UGX,
  {meta::pure::profiles::doc.doc = 'United States Dollar'} USD,
  {meta::pure::profiles::doc.doc = 'US Dollar (Next day)'} USN,
  {meta::pure::profiles::doc.doc = 'Uruguayan Peso en Unidades Indexadas (UI)'} UYI,
  {meta::pure::profiles::doc.doc = 'Uruguayan Peso'} UYU,
  {meta::pure::profiles::doc.doc = 'Uruguayan Unidad Previsional'} UYW,
  {meta::pure::profiles::doc.doc = 'Uzbekistani Som'} UZS,
  {meta::pure::profiles::doc.doc = 'Venezuelan Bol\u00EDvar Soberano'} VES,
  {meta::pure::profiles::doc.doc = 'Vietnamese Dong'} VND,
  {meta::pure::profiles::doc.doc = 'Vanuatu Vatu'} VUV,
  {meta::pure::profiles::doc.doc = 'Samoan Tala'} WST,
  {meta::pure::profiles::doc.doc = 'Central African CFA Franc'} XAF,
  {meta::pure::profiles::doc.doc = 'Silver'} XAG,
  {meta::pure::profiles::doc.doc = 'Gold'} XAU,
  {meta::pure::profiles::doc.doc = 'Bond Markets Unit European Composite Unit (EURCO)'} XBA,
  {meta::pure::profiles::doc.doc = 'Bond Markets Unit European Monetary Unit (E.M.U.-6)'} XBB,
  {meta::pure::profiles::doc.doc = 'Bond Markets Unit European Unit of Account 9 (E.U.A.-9)'} XBC,
  {meta::pure::profiles::doc.doc = 'Bond Markets Unit European Unit of Account 17 (E.U.A.-17)'} XBD,
  {meta::pure::profiles::doc.doc = 'East Caribbean Dollar'} XCD,
  {meta::pure::profiles::doc.doc = 'SDR (Special Drawing Right)'} XDR,
  {meta::pure::profiles::doc.doc = 'West African CFA Franc'} XOF,
  {meta::pure::profiles::doc.doc = 'Palladium'} XPD,
  {meta::pure::profiles::doc.doc = 'CFP (French Polynesian) Franc'} XPF,
  {meta::pure::profiles::doc.doc = 'Platinum'} XPT,
  {meta::pure::profiles::doc.doc = 'Bolivarian Alliance for the Americas Sucre'} XSU,
  {meta::pure::profiles::doc.doc = 'African Development Bank Unit of Account'} XUA,
  {meta::pure::profiles::doc.doc = 'The codes assigned for transactions where no currency is involved'} XXX,
  {meta::pure::profiles::doc.doc = 'Yemeni Rial'} YER,
  {meta::pure::profiles::doc.doc = 'South African Rand'} ZAR,
  {meta::pure::profiles::doc.doc = 'Zambian Kwacha'} ZMW,
  {meta::pure::profiles::doc.doc = 'Zimbabwean Dollar'} ZWL,
  {meta::pure::profiles::doc.doc = 'Offshore Chinese Yuan traded in Hong Kong.'} CNH,
  {meta::pure::profiles::doc.doc = 'Offshore Chinese Yuan traded in Taiwan.'} CNT,
  {meta::pure::profiles::doc.doc = 'Guernsey Pound.'} GGP,
  {meta::pure::profiles::doc.doc = 'Isle of Man Pound.'} IMP,
  {meta::pure::profiles::doc.doc = 'Jersey Pound.'} JEP,
  {meta::pure::profiles::doc.doc = 'Tuvaluan Dollar.'} KID,
  {meta::pure::profiles::doc.doc = 'Monegasque Franc.'} MCF,
  {meta::pure::profiles::doc.doc = 'Sammarinese Lira.'} SML,
  {meta::pure::profiles::doc.doc = 'Vatican Lira.'} VAL
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify the instances where the independent amount eligible collateral is not defined as a set of eligible collateral assets.'} model::external::cdm::IndependentAmountEligibilityEnum
{
  {meta::pure::profiles::doc.doc = 'None.'} None,
  {meta::pure::profiles::doc.doc = 'None, unless otherwise specified in a Confirmation.'} NoneUnlessSpecifiedInConfirmation
}

Enum {meta::pure::profiles::doc.doc = 'Specifies the types of collateral that are accepted by the Lender'} model::external::cdm::CollateralTypeEnum
{
  {meta::pure::profiles::doc.doc = 'Security Lending Trades against Cash collateral'} Cash,
  {meta::pure::profiles::doc.doc = 'Security Lending Trades against NonCash collateral'} NonCash,
  {meta::pure::profiles::doc.doc = 'Security Lending Trades against CashPool collateral'} CashPool
}

Enum {meta::pure::profiles::doc.doc = 'Enumeration for the different types of affirmation status.'} model::external::cdm::AffirmationStatusEnum
{
  Affirmed,
  Unaffirmed
}

Enum {meta::pure::profiles::doc.doc = 'The specification of how a calculation agent will be determined.'} FpML::model::CalculationAgentPartyEnum
{
  ExercisingParty,
  NonExercisingParty,
  AsSpecifiedInMasterAgreement,
  AsSpecifiedInStandardTermsSupplement,
  Both
}

Enum {meta::pure::profiles::doc.doc = 'The specification of how the premium for an FX OTC option is quoted.'} FpML::model::PremiumQuoteBasisEnum
{
  PercentageOfCallCurrencyAmount,
  PercentageOfPutCurrencyAmount,
  CallCurrencyPerPutCurrency,
  PutCurrencyPerCallCurrency,
  Explicit
}

Enum {meta::pure::profiles::doc.doc = 'The type of calculation formula to use when combining multiple rates.'} FpML::model::CalculationMethodEnum
{
  Averaging,
  Compounding,
  CompoundedIndex
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify the procedure under which the market value of posted collateral will be recalculated.'} model::external::cdm::RecalculationOfValueElectionEnum
{
  {meta::pure::profiles::doc.doc = 'The parties agree to consult'} ConsulationProcedure,
  {meta::pure::profiles::doc.doc = 'The procedures specified in an Other Regulatory CSA'} OtherRegulatoryCSAProcedure,
  {meta::pure::profiles::doc.doc = 'Description to be added'} NotApplicable,
  {meta::pure::profiles::doc.doc = 'Bespoke Recalculation of value terms are specified in the agreement.'} Specified
}

Enum {meta::pure::profiles::doc.doc = 'The specification of an interest rate stream payer or receiver party.'} FpML::model::PayerReceiverEnum
{
  Payer,
  Receiver
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify the form of the restructuring credit event that is applicable to the credit default swap.'} model::external::cdm::RestructuringEnum
{
  {meta::pure::profiles::doc.doc = 'Restructuring (Section 4.7) and Modified Restructuring Maturity Limitation and Conditionally Transferable Obligation (2014 Definitions: Section 3.31, 2003 Definitions: 2.32) apply.'} ModModR,
  {meta::pure::profiles::doc.doc = 'Restructuring (Section 4.7) and Restructuring Maturity Limitation and Fully Transferable Obligation (2014 Definitions: Section 3.31, 2003 Definitions: 2.32) apply.'} ModR,
  {meta::pure::profiles::doc.doc = 'Restructuring as defined in the applicable ISDA Credit Derivatives Definitions. (2003 or 2014).'} R
}

Enum {meta::pure::profiles::doc.doc = 'Represents an enumeration list that specifies the general rule for periodic interest rate payment.'} model::external::cdm::DebtInterestEnum
{
  {meta::pure::profiles::doc.doc = 'Denotes payment calculated with reference to a fixed interest rate.'} Fixed,
  {meta::pure::profiles::doc.doc = 'Denotes payment calculated with reference to a floating interest rate.'} Floating,
  {meta::pure::profiles::doc.doc = 'Denotes payment calculated with reference to one or more specified inflation rates.'} InflationLinked,
  {meta::pure::profiles::doc.doc = 'Denotes payment calculated with reference to one or more price or other indices (other than inflation rates).'} IndexLinked,
  {meta::pure::profiles::doc.doc = 'Denotes a stripped bond representing only the interest component.'} InterestOnly,
  {meta::pure::profiles::doc.doc = 'Denotes payment calculated with reference to other underlyings (not being floating interest rates, inflation rates or indices) or with a non-linear relationship to floating interest rates, inflation rates or indices.'} OtherStructured,
  {meta::pure::profiles::doc.doc = 'Denotes payment calculated with reference to the inverse of a floating interest rate.'} InverseFloating,
  {meta::pure::profiles::doc.doc = 'Denotes a zero coupon bond that does not pay intetrest.'} ZeroCoupon
}

Enum {meta::pure::profiles::doc.doc = 'How an exchange rate is quoted.'} FpML::model::QuoteBasisEnum
{
  Currency1PerCurrency2,
  Currency2PerCurrency1
}

Enum {meta::pure::profiles::doc.doc = 'Specifies whether a position is long (the transactor owns the securities) or short (the transactor has borrowed the securities).'} FpML::model::PositionTypeEnum
{
  Long,
  Short
}

Enum {meta::pure::profiles::doc.doc = 'Deprecated: In respect of a Transaction and a Commodity Reference Price, the relevant date or month for delivery of the underlying Commodity.'} FpML::model::DeliveryDatesEnum
{
  CalculationPeriod,
  FirstNearby,
  SecondNearby,
  ThirdNearby,
  FourthNearby,
  FifthNearby,
  SixthNearby,
  SeventhNearby,
  EighthNearby,
  NinthNearby,
  TenthNearby,
  EleventhNearby,
  TwelfthNearby,
  ThirteenthNearby,
  FourteenthNearby,
  FifteenthNearby,
  SixteenthNearby,
  SeventeenthNearby,
  EighteenthNearby,
  NineteenthNearby,
  TwentiethNearby,
  TwentyFirstNearby,
  TwentySecondNearby,
  TwentyThirdNearby,
  TwentyFourthNearby,
  TwentyFifthNearby,
  TwentySixthNearby,
  TwentySeventhNearby,
  TwentyEighthNearby,
  TwentyNinthNearby,
  ThirtiethNearby,
  ThirtyFirstNearby,
  ThirtySecondNearby,
  ThirtyThirdNearby,
  ThirtyFourthNearby,
  ThirtyFifthNearby,
  ThirtySixthNearby,
  ThirtySeventhNearby,
  ThirtyEighthNearby,
  ThirtyNinthNearby,
  FortiethNearby,
  FortyFirstNearby,
  FortySecondNearby,
  FortyThirdNearby,
  FortyFourthNearby,
  FortyFifthNearby,
  FortySixthNearby,
  FortySeventhNearby,
  FortyEighthNearby,
  FortyNinthNearby,
  FiftiethNearby,
  FiftyFirstNearby,
  FiftySecondNearby,
  FiftyThirdNearby,
  FiftyFourthNearby,
  FiftyFifthNearby,
  FiftySixthNearby,
  FiftySeventhNearby,
  FiftyEighthNearby,
  FiftyNinthNearby,
  Spot,
  FirstNearbyWeek,
  SecondNearbyWeek,
  ThirdNearbyWeek,
  FourthNearbyWeek,
  FifthNearbyWeek,
  SixthNearbyWeek,
  SeventhNearbyWeek,
  EighthNearbyWeek,
  NinthNearbyWeek,
  TenthNearbyWeek,
  EleventhNearbyWeek,
  TwelfthNearbyWeek,
  ThirteenthNearbyWeek,
  FourteenthNearbyWeek,
  FifteenthNearbyWeek,
  SixteenthNearbyWeek,
  SeventeenthNearbyWeek,
  EighteenthNearbyWeek,
  NineteenthNearbyWeek,
  TwentiethNearbyWeek,
  TwentyFirstNearbyWeek,
  TwentySecondNearbyWeek,
  TwentyThirdNearbyWeek,
  TwentyFourthearbyWeek,
  TwentyFifthNearbyWeek,
  TwentySixthNearbyWeek,
  TwentySeventhNearbyWeek,
  TwentyEighthNearbyWeek,
  TwentyNinthNearbyWeek,
  ThirtiethNearbyWeek,
  ThirtyFirstNearbyWeek,
  ThirtySecondNearbyWeek,
  ThirtyThirdNearbyWeek,
  ThirtyFourthNearbyWeek,
  ThirtyFifthNearbyWeek,
  ThirtySixthNearbyWeek,
  ThirtySeventhNearbyWeek,
  ThirtyEighthNearbyWeek,
  ThirtyNinthNearbyWeek,
  FortiethNearbyWeek,
  FortyFirstNearbyWeek,
  FortySecondNearbyWeek,
  FortyThirdNearbyWeek,
  FortyFourthNearbyWeek,
  FortyFifthNearbyWeek,
  FortySixthNearbyWeek,
  FortySeventhNearbyWeek,
  FortyEighthNearbyWeek,
  FortyNinthNearbyWeek,
  FiftiethNearbyWeek,
  FiftyFirstNearbyWeek,
  FiftySecondNearbyWeek
}

Enum {meta::pure::profiles::doc.doc = 'Represents the enumerated values to identify where a concentration limit is applied.'} model::external::cdm::ConcentrationLimitTypeEnum
{
  {meta::pure::profiles::doc.doc = 'Specifies a limit on a single asset in the portfolio'} Asset,
  {meta::pure::profiles::doc.doc = 'Specifies a limit on all cash valued in the base currency of the portfolio.'} BaseCurrencyEquivalent,
  {meta::pure::profiles::doc.doc = 'Specifies a limit on a single issuer in the portfolio.'} Issuer,
  {meta::pure::profiles::doc.doc = 'Specifies a limit on a single exchange in the portfolio.'} PrimaryExchange,
  {meta::pure::profiles::doc.doc = 'Specifies a limit on a single industry sector in the portfolio.'} IndustrySector,
  {meta::pure::profiles::doc.doc = 'Specifies a limit on a single issuer in the portfolio at the ultimate parent institution level.'} UltimateParentInstitution,
  {meta::pure::profiles::doc.doc = 'Specifies a limit on the outstanding amount of the issued asset on the market.'} IssueOutstandingAmount
}

Enum {meta::pure::profiles::doc.doc = 'Defines points in the day when equity option exercise and valuation can occur.'} FpML::model::TimeTypeEnum
{
  Close,
  Open,
  OSP,
  SpecificTime,
  XETRA,
  DerivativesClose,
  AsSpecifiedInMasterConfirmation
}

Enum {meta::pure::profiles::doc.doc = 'The enumeration values to specify the level at which the limit is set: customer business, proprietary business or account level. This is part of the CME specification for clearing credit limits, although not specified as a set of enumerated values as part of the clearing confirmation specification.'} model::external::cdm::LimitLevelEnum
{
  {meta::pure::profiles::doc.doc = 'The limit is set in relation to the proprietary business undertaken by the clearing counterparty.'} Account,
  {meta::pure::profiles::doc.doc = 'The limit is set in relation to the customer business undertaken by the clearing counterparty.'} Customer,
  {meta::pure::profiles::doc.doc = 'The limit is set at the account level in relation to the clearing counterparty.'} House
}

Enum FpML::model::DeliveryTypeEnum
{
  Firm,
  Interruptible
}

Enum {meta::pure::profiles::doc.doc = 'Provides enumerated values for capacity units, generally used in the context of defining quantities for commodities.'} model::external::cdm::CapacityUnitEnum
{
  {meta::pure::profiles::doc.doc = 'Denotes Allowances as standard unit.'} ALW,
  {meta::pure::profiles::doc.doc = 'Denotes a Barrel as a standard unit.'} BBL,
  {meta::pure::profiles::doc.doc = 'Denotes Billion Cubic Feet as a standard unit.'} BCF,
  {meta::pure::profiles::doc.doc = 'Denotes Board Feet as a standard unit.'} BDFT,
  {meta::pure::profiles::doc.doc = 'Denotes a Bushel as a standard unit of weight (48 lb or 21.7725 kg).'} BSH,
  {meta::pure::profiles::doc.doc = 'Denotes British Thermal Units as a standard unit.'} BTU,
  {meta::pure::profiles::doc.doc = 'Denotes Cubic Meters as a standard unit.'} CBM,
  {meta::pure::profiles::doc.doc = 'Denotes Certified Emissions Reduction as a standard unit.'} CER,
  {meta::pure::profiles::doc.doc = 'Denotes Climate Reserve Tonnes as a standard unit.'} CRT,
  {meta::pure::profiles::doc.doc = 'Denotes 10 grams as a standard unit used in precious metals contracts (e.g MCX).'} DAG,
  {meta::pure::profiles::doc.doc = 'Denotes a single day as a standard unit used in time charter trades.'} DAY,
  {meta::pure::profiles::doc.doc = 'Denotes Dry Metric Ton (Tonne) Units - Consists of a metric ton of mass excluding moisture.'} DMTU,
  {meta::pure::profiles::doc.doc = 'Denotes a Dekatherm as a standard unit.'} DTH,
  {meta::pure::profiles::doc.doc = 'Denotes Environmental Credit as a standard unit.'} ENVCRD,
  {meta::pure::profiles::doc.doc = 'Denotes Environmental Offset as a standard unit.'} ENVOFST,
  {meta::pure::profiles::doc.doc = 'Denotes a 40 ft. Equivalent Unit container as a standard unit.'} FEU,
  {meta::pure::profiles::doc.doc = 'Denotes a Gram as a standard unit.'} G,
  {meta::pure::profiles::doc.doc = 'Denotes a GB Hundredweight unit as standard unit.'} GBCWT,
  {meta::pure::profiles::doc.doc = 'Denotes a GB Gallon unit as standard unit.'} GBGAL,
  {meta::pure::profiles::doc.doc = 'Denotes a GB Ton as a standard unit.'} GBT,
  {meta::pure::profiles::doc.doc = 'Denotes a Gigajoule as a standard unit.'} GJ,
  {meta::pure::profiles::doc.doc = 'Denotes a Gigawatt as a standard unit.'} GW,
  {meta::pure::profiles::doc.doc = 'Denotes a Gigawatt-hour as a standard unit.'} GWH,
  {meta::pure::profiles::doc.doc = 'Denotes a Hectolitre as a standard unit.'} HL,
  {meta::pure::profiles::doc.doc = 'Denotes an Ingot as a standard unit.'} INGOT,
  {meta::pure::profiles::doc.doc = 'Denotes a Kilogram as a standard unit.'} KG,
  {meta::pure::profiles::doc.doc = 'Denotes a Kilolitre as a standard unit.'} KL,
  {meta::pure::profiles::doc.doc = 'Denotes a Kilowatt as a standard unit.'} KW,
  {meta::pure::profiles::doc.doc = 'Denotes a Kilowatt Day Capacity as a standard unit.'} KWDC,
  {meta::pure::profiles::doc.doc = 'Denotes a Kilowatt-hour as a standard unit.'} KWH,
  {meta::pure::profiles::doc.doc = 'Denotes a Kilowatt Hours Capacity as a standard unit.'} KWHC,
  {meta::pure::profiles::doc.doc = 'Denotes a Kilowatt Month Capacity as a standard unit.'} KWMC,
  {meta::pure::profiles::doc.doc = 'Denotes a Kilowatt Minute Capacity as a standard unit.'} KWMINC,
  {meta::pure::profiles::doc.doc = 'Denotes a Kilowatt Year Capacity as a standard unit.'} KWYC,
  {meta::pure::profiles::doc.doc = 'Denotes a Litre as a standard unit.'} L,
  {meta::pure::profiles::doc.doc = 'Denotes a Pound as a standard unit.'} LB,
  {meta::pure::profiles::doc.doc = 'Denotes a Thousand Barrels as a standard unit.'} MB,
  {meta::pure::profiles::doc.doc = 'Denotes a Thousand board feet, which are used in contracts on forestry underlyers as a standard unit.'} MBF,
  {meta::pure::profiles::doc.doc = 'Denotes a Megajoule as a standard unit.'} MJ,
  {meta::pure::profiles::doc.doc = 'Denotes a Million board feet, which are used in contracts on forestry underlyers as a standard unit.'} MMBF,
  {meta::pure::profiles::doc.doc = 'Denotes a Million Barrels as a standard unit.'} MMBBL,
  {meta::pure::profiles::doc.doc = 'Denotes a Million British Thermal Units as a standard unit.'} MMBTU,
  {meta::pure::profiles::doc.doc = 'Denotes a Thousand square feet as a standard unit.'} MSF,
  {meta::pure::profiles::doc.doc = 'Denotes a Metric Ton as a standard unit.'} MT,
  {meta::pure::profiles::doc.doc = 'Denotes a Megawatt as a standard unit.'} MW,
  {meta::pure::profiles::doc.doc = 'Denotes a Megawatt Day Capacity as a standard unit.'} MWDC,
  {meta::pure::profiles::doc.doc = 'Denotes a Megawatt-hour as a standard unit.'} MWH,
  {meta::pure::profiles::doc.doc = 'Denotes a Megawatt Hours Capacity as a standard unit.'} MWHC,
  {meta::pure::profiles::doc.doc = 'Denotes a Megawatt Month Capacity as a standard unit.'} MWMC,
  {meta::pure::profiles::doc.doc = 'Denotes a Megawatt Minute Capacity as a standard unit.'} MWMINC,
  {meta::pure::profiles::doc.doc = 'Denotes a Megawatt Year Capacity as a standard unit.'} MWYC,
  {meta::pure::profiles::doc.doc = 'Denotes a Troy Ounce as a standard unit.'} OZT,
  {meta::pure::profiles::doc.doc = 'Denotes a 20 ft. Equivalent Unit container as a standard unit.'} TEU,
  {meta::pure::profiles::doc.doc = 'Denotes a Thermal Unit as a standard unit.'} THERM,
  {meta::pure::profiles::doc.doc = 'Denotes US Hundredweight unit as a standard unit.'} USCWT,
  {meta::pure::profiles::doc.doc = 'Denotes a US Gallon unit as a standard unit.'} USGAL,
  {meta::pure::profiles::doc.doc = 'Denotes a US Ton as a standard unit.'} UST
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify how a calculation agent will be determined.'} model::external::cdm::PartyDeterminationEnum
{
  {meta::pure::profiles::doc.doc = 'The party that gives notice of exercise. Per 2000 ISDA Definitions, Section 11.1. Parties, paragraph (d).'} ExercisingParty,
  {meta::pure::profiles::doc.doc = 'The party that is given notice of exercise. Per 2000 ISDA Definitions, Section 11.1. Parties, paragraph (e).'} NonExercisingParty,
  {meta::pure::profiles::doc.doc = 'The Calculation Agent is determined by reference to the relevant master agreement.'} AsSpecifiedInMasterAgreement,
  {meta::pure::profiles::doc.doc = 'The Calculation Agent is determined by reference to the relevant standard terms supplement.'} AsSpecifiedInStandardTermsSupplement,
  {meta::pure::profiles::doc.doc = 'Both parties with joined rights to be a calculation agent.'} Both
}

Enum {meta::pure::profiles::doc.doc = 'The specification of how market disruption events will be represented.'} FpML::model::MarketDisruptionEventsEnum
{
  Applicable,
  NotApplicable,
  AsSpecifiedInMasterAgreement,
  AsSpecifiedInConfirmation
}

Enum {meta::pure::profiles::doc.doc = 'A list of types that a loan covenant obligation metric can be (i.e. maximum amount, minimum amount, precise amount).'} FpML::model::LoanCovenantObligationMetricValueTypeEnum
{
  Maximum,
  Minimum,
  Precise
}

Enum FpML::model::ExerciseStyleEnum
{
  American,
  Bermuda,
  European
}

Enum {meta::pure::profiles::doc.doc = 'The type of nearby qualifier, expect to be used in conjunction with a nearby count.'} FpML::model::DeliveryNearbyTypeEnum
{
  CalculationPeriod,
  NearbyMonth,
  NearbyWeek
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify what led to the contract or execution closure.'} model::external::cdm::ClosedStateEnum
{
  {meta::pure::profiles::doc.doc = 'The execution or contract has been allocated.'} Allocated,
  {meta::pure::profiles::doc.doc = 'The execution or contract has been cancelled.'} Cancelled,
  {meta::pure::profiles::doc.doc = 'The (option) contract has been exercised.'} Exercised,
  {meta::pure::profiles::doc.doc = 'The (option) contract has expired without being exercised.'} Expired,
  {meta::pure::profiles::doc.doc = 'The contract has reached its contractual termination date.'} Matured,
  {meta::pure::profiles::doc.doc = 'The contract has been novated. This state applies to the stepped-out contract component of the novation event.'} Novated,
  {meta::pure::profiles::doc.doc = 'The contract has been subject of an early termination event.'} Terminated
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify the ISDA defined methodology for determining the final price of the reference obligation for purposes of cash settlement.'} model::external::cdm::ValuationMethodEnum
{
  Market,
  Highest,
  AverageMarket,
  AverageHighest,
  BlendedMarket,
  BlendedHighest,
  AverageBlendedMarket,
  AverageBlendedHighest
}

Enum {meta::pure::profiles::doc.doc = 'This enumeration provides guidance on how to process a given floating rate index.  It\'s based on the ISDA Floating Rate Index information, but transforms it into the specific categories needed for calculation'} model::external::cdm::FloatingRateIndexProcessingTypeEnum
{
  {meta::pure::profiles::doc.doc = 'These values are just looked up from the screen and applied.'} Screen,
  {meta::pure::profiles::doc.doc = 'A published index calculated using compounding; the implied rate must be backed out.'} CompoundIndex,
  {meta::pure::profiles::doc.doc = 'These are calculated by the calculation agent based on a standard OIS FRO definition.'} OIS,
  {meta::pure::profiles::doc.doc = 'These are calculated by the calculation agent based on a standard overnight averaging FRO definition.'} OvernightAvg,
  {meta::pure::profiles::doc.doc = 'These are calculated by the calculation agent based on deal-specific parameters (e.g. lookback compound based on an RFR).'} Modular,
  {meta::pure::profiles::doc.doc = 'These must be looked up using a manual process'} RefBanks
}

Enum {meta::pure::profiles::doc.doc = 'Represetns an enumeration list to indentify the type of security.'} model::external::cdm::SecurityTypeEnum
{
  {meta::pure::profiles::doc.doc = 'Identifies a security as a fixed income instrument of debt issued and securitized as a tradable asset.'} Debt,
  {meta::pure::profiles::doc.doc = 'Identifies a security as an Equity value of holding of shares in listed company.'} Equity,
  {meta::pure::profiles::doc.doc = 'Identifies a security as an Instrument representing holding in an investment fund.'} Fund,
  {meta::pure::profiles::doc.doc = 'Identifies a security as a Warrant that give the right, but not the obligation, to buy or sell a security \u2014 most commonly an equity \u2014 at a certain price before expiration, or to receive the cash equivalent.'} Warrant,
  {meta::pure::profiles::doc.doc = 'Identifies a security as one that that offers a derivative-based economic return which is not structured as a bond, an equity or a warrant. Note that this security type is not a Certificate of Deposit (aka CD).'} Certificate,
  {meta::pure::profiles::doc.doc = 'Identifies a security as a letter of credit or documentary credit/ bankers commercial credit.  A payment mechanism used in international trade to provide economic guarantee of payment by a creditworthy issuer for payment of exported goods.'} LetterOfCredit
}

Enum {meta::pure::profiles::doc.doc = 'The specification of the interest shortfall cap, applicable to mortgage derivatives.'} FpML::model::InterestShortfallCapEnum
{
  Fixed,
  Variable
}

Enum {meta::pure::profiles::doc.doc = 'The convention for determining the sequence of calculation period end dates. It is used in conjunction with a specified frequency and the regular period start date of a calculation period, e.g. semi-annual IMM roll dates.'} FpML::model::RollConventionEnum
{
  EOM,
  FRN,
  IMM,
  IMMCAD,
  IMMAUD,
  IMMNZD,
  SFE,
  NONE,
  TBILL,
  _1,
  _2,
  _3,
  _4,
  _5,
  _6,
  _7,
  _8,
  _9,
  _10,
  _11,
  _12,
  _13,
  _14,
  _15,
  _16,
  _17,
  _18,
  _19,
  _20,
  _21,
  _22,
  _23,
  _24,
  _25,
  _26,
  _27,
  _28,
  _29,
  _30,
  MON,
  TUE,
  WED,
  THU,
  FRI,
  SAT,
  SUN
}

Enum {meta::pure::profiles::doc.doc = 'Represents an enumeration list to identify the fund product type.'} model::external::cdm::FundProductTypeEnum
{
  {meta::pure::profiles::doc.doc = 'Denotes a fund that invests only in highly liquid near-term instruments such as cash, cash equivalent securities, and high credit rating debt instruments with a short-term maturity.'} MoneyMarketFund,
  {meta::pure::profiles::doc.doc = 'Denotes an investment fund consisting of stocks, bonds, and/or other assets that is passively managed and traded on a stock exchange.'} ExchangeTradedFund,
  {meta::pure::profiles::doc.doc = 'Denotes an investment fund consisting of stocks, bonds, and/or other assets that is actively managed and can only be purchased or sold through the investment manager.'} MutualFund,
  {meta::pure::profiles::doc.doc = 'Denotes a fund that is not an Exchange Traded Fund, Money Market Fund or Mutual Fund.'} OtherFund
}

Enum {meta::pure::profiles::doc.doc = 'Specifies delivery methods for securities transactions. This coding-scheme defines the possible delivery methods for securities.'} model::external::cdm::DeliveryMethodEnum
{
  {meta::pure::profiles::doc.doc = 'Indicates that a securities delivery must be made against payment in simultaneous transmissions and stipulate each other.'} DeliveryVersusPayment,
  {meta::pure::profiles::doc.doc = 'Indicates that a securities delivery can be made without a simultaneous cash payment in exchange and not depending on if payment obligations are fulfilled or not and vice versa.'} FreeOfPayment,
  {meta::pure::profiles::doc.doc = 'Indicates that a securities delivery must be made in full before the payment for the securities; fulfillment of payment obligations depends on securities delivery obligations fulfillment.'} PreDelivery,
  {meta::pure::profiles::doc.doc = 'Indicates that a payment in full amount must be made before the securities delivery; fulfillment of securities delivery obligations depends on payment obligations fulfillment.'} PrePayment
}

Enum {meta::pure::profiles::doc.doc = 'Provides enumerated values for weather units, generally used in the context of defining quantities for commodities.'} model::external::cdm::WeatherUnitEnum
{
  {meta::pure::profiles::doc.doc = 'Denotes Cooling Degree Days as a standard unit.'} CDD,
  {meta::pure::profiles::doc.doc = 'Denotes Critical Precipitation Day as a standard unit.'} CPD,
  {meta::pure::profiles::doc.doc = 'Heating Degree Day as a standard unit.'} HDD
}

Enum {meta::pure::profiles::doc.doc = 'When a requested option exercise event is desired to be performed.'} FpML::model::ExerciseTimingEnum
{
  Immediate,
  OnExpiration
}

Enum {meta::pure::profiles::doc.doc = 'Specifies enumerations for the type of averaging calculation.'} model::external::cdm::AveragingCalculationMethodEnum
{
  {meta::pure::profiles::doc.doc = 'Refers to the calculation of an average by taking the sum of observations divided by the count of observations.'} Arithmetic,
  {meta::pure::profiles::doc.doc = 'Refers to the calculation of an average by taking the nth root of the product of n observations.'} Geometric,
  {meta::pure::profiles::doc.doc = 'Refers to the calculation of an average by taking the reciprocal of the arithmetic mean of the reciprocals of the observations.'} Harmonic
}

Enum {meta::pure::profiles::doc.doc = 'The consequences of Bullion Settlement Disruption Events.'} FpML::model::CommodityBullionSettlementDisruptionEnum
{
  Negotiation,
  Cancellation_and_Payment
}

Enum {meta::pure::profiles::doc.doc = 'How is the Creadit Support Annex defined for this transaction as defined in the 2021 ISDA Definitions, section 18.2.1'} model::external::cdm::CsaTypeEnum
{
  {meta::pure::profiles::doc.doc = 'There is no CSA applicable'} NoCSA,
  {meta::pure::profiles::doc.doc = 'Thre is an existing Credit Support Annex'} ExistingCSA,
  {meta::pure::profiles::doc.doc = 'There is a bilateral Credit Support Annex specific to the transaction'} ReferenceVMCSA
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to the specify the SIMM normalized exception approaches applicable to the ISDA 2018 Standard CSA. ISDA 2018 Credit Support Annex for Initial Margin, paragraph 13, General Principles.'} model::external::cdm::SimmExceptionApplicableEnum
{
  {meta::pure::profiles::doc.doc = 'The ISDA Standard Initial Margin Model exception is applicable as a Fallback to Mandatory Method. ISDA 2018 Credit Support Annex for Initial Margin, paragraph 13, General Principles.'} FallBackToMandatoryMethod,
  {meta::pure::profiles::doc.doc = 'The ISDA Standard Initial Margin Model exception is applicable as a Mandatory Method. This means that the method applicable is to determine the Margin Amount (IM) by reference to the methodology prescribed pursuant to the applicable regulatory regime which uses a standardized initial margin schedule (such that prescribed percentages are applied to notional amounts before being adjusted, including by a net-to-gross ratio (NGR)). ISDA 2018 Credit Support Annex for Initial Margin, paragraph 13, General Principles.'} MandatoryMethod,
  {meta::pure::profiles::doc.doc = 'An alternative approach is described in the document as follows.'} OtherMethod
}

Enum {meta::pure::profiles::doc.doc = 'Defines treatment of non-cash dividends.'} FpML::model::NonCashDividendTreatmentEnum
{
  PotentialAdjustmentEvent,
  CashEquivalent
}

Enum {meta::pure::profiles::doc.doc = 'Specifies the duration type of the Security Lending transaction. e.g. Open or Term.'} model::external::cdm::DurationTypeEnum
{
  {meta::pure::profiles::doc.doc = 'Specifies a trade with a termination date.'} Term,
  {meta::pure::profiles::doc.doc = 'Specifies a trade with no termination date.'} Open,
  {meta::pure::profiles::doc.doc = 'Specifies a trade where the term date is extended by a pre-determined period until a notice is serviced. Once the notice is served, the trade will not be reset again and goes to term.'} Evergreen
}

Enum {meta::pure::profiles::doc.doc = 'Provides enumerated values for types of prices in the Price data type in order to explain how to interpret the amount and use it in calculations.'} model::external::cdm::PriceTypeEnum
{
  {meta::pure::profiles::doc.doc = 'Denotes a price expressed as a cash amount in a given currency to purchase a unit of an asset (e.g. a security or a commodity).'} AssetPrice,
  {meta::pure::profiles::doc.doc = 'Denotes a price expressed as a cash amount for an upfront fee or other purposes. For example, {amount, unitOfAmount, PerUnitOfAmount} = [12,500, USD, null] = USD 12,500.'} CashPrice,
  {meta::pure::profiles::doc.doc = 'Denotes a rate to convert one currency or other measure of value to another. Foreign Exchange rates are represented in decimals, e.g. {amount, unitOfAmount, PerUnitOfAmount} = [1.23, USD, GBP] = USD 1.23 for every 1 GBP.'} ExchangeRate,
  {meta::pure::profiles::doc.doc = 'Denotes a value to be multiplied by the observed index value to scale it before adding a spread.'} MultiplierOfIndexValue,
  {meta::pure::profiles::doc.doc = 'Denotes a price expressed as a rate to be applied to quantity/notional amount and represented as decimal, e.g. {amount, unitOfAmount, PerUnitOfAmount} = [0.08, EUR, EUR] = 8%  of the EUR notional quantity/amount or 8 cents for every EUR of notional amount.'} InterestRate
}

Enum {meta::pure::profiles::doc.doc = 'The qualification of the type of cash flows associated with OTC derivatives contracts and their lifecycle events.'} model::external::cdm::CashflowTypeEnum
{
  {meta::pure::profiles::doc.doc = 'A cash flow corresponding to the periodic accrued interests.'} Coupon,
  {meta::pure::profiles::doc.doc = 'A cashflow resulting from a credit event.'} CreditEvent,
  {meta::pure::profiles::doc.doc = 'A cash flow corresponding to the synthetic dividend of an equity underlier asset traded through a derivative instrument.'} DividendReturn,
  {meta::pure::profiles::doc.doc = 'A cash flow associated with an exercise lifecycle event.'} Exercise,
  {meta::pure::profiles::doc.doc = 'Interest, without qualification as to whether it a gross or net interest relates cashflow.'} Interest,
  {meta::pure::profiles::doc.doc = 'A cash flow corresponding to the return of the interest rate portion of a derivative instrument that has different types of underlying assets, such as a total return swap.'} InterestReturn,
  {meta::pure::profiles::doc.doc = 'Net interest across payout components. Applicable to products such as interest rate swaps.'} NetInterest,
  {meta::pure::profiles::doc.doc = 'A cash flow corresponding to the return of the price portion of a derivative instrument that has different types of underlying assets, such as a total return swap.'} PriceReturn,
  {meta::pure::profiles::doc.doc = 'A cash flow which amount typically corresponds to the notional of the contract and that is exchanged between the parties on trade inception and reverted back when the contract is terminated.'} PrincipalExchange,
  NetCashflow
}

Enum {meta::pure::profiles::doc.doc = 'The date on which the receiver of the equity return is entitled to the dividend.'} FpML::model::DividendEntitlementEnum
{
  ExDate,
  RecordDate
}

Enum {meta::pure::profiles::doc.doc = 'Represents and enumeration list to identify the characteritics of the rating if there are several agency issue ratings but not equivalent, reference will be made to label characteritics of the rating such as the lowest/highest available.'} model::external::cdm::CreditNotationMismatchResolutionEnum
{
  {meta::pure::profiles::doc.doc = 'Denotes the lowest credit notation if several notations are listed.'} Lowest,
  {meta::pure::profiles::doc.doc = 'Denotes the highest credit notation if several notations are listed.'} Highest,
  {meta::pure::profiles::doc.doc = 'Denotes that a credit notation issued from a defined reference agency is used if several notations are listed.'} ReferenceAgency,
  {meta::pure::profiles::doc.doc = 'Denotes the average credit notation if several notations are listed'} Average,
  {meta::pure::profiles::doc.doc = 'Denotes the second best credit notaiton if several notatons are listed'} SecondBest
}

Enum {meta::pure::profiles::doc.doc = 'The specification of how an FX OTC option strike price is quoted.'} FpML::model::StrikeQuoteBasisEnum
{
  PutCurrencyPerCallCurrency,
  CallCurrencyPerPutCurrency
}

Enum model::external::cdm::WarehouseIdentityEnum
{
  {meta::pure::profiles::doc.doc = 'The DTCC Trade Information Warehouse Gold service'} DTCC_TIW_Gold
}

Enum {meta::pure::profiles::doc.doc = 'Describes how and when title to the commodity transfers.'} FpML::model::MetalTitleEnum
{
  TransfersWithRiskOfLoss,
  DoesNotTransferWithRiskOfLoss
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify an interest rate stream payer or receiver party.'} model::external::cdm::PayerReceiverEnum
{
  {meta::pure::profiles::doc.doc = 'The party identified as the stream payer.'} Payer,
  {meta::pure::profiles::doc.doc = 'The party identified as the stream receiver.'} Receiver
}

Enum {meta::pure::profiles::doc.doc = 'Logical quantification {All, Any}'} FpML::model::QuantifierEnum
{
  All,
  Any
}

Enum model::external::cdm::CleanOrDirtyPriceEnum
{
  {meta::pure::profiles::doc.doc = 'Denotes a bond price without accrued interest.'} Clean,
  {meta::pure::profiles::doc.doc = 'Denotes a bond price with accrued interest.'} Dirty,
  {meta::pure::profiles::doc.doc = 'Denotes interest accrued between payments, represented as a decimal, for example the accrued interest associated with a bond trade.'} AccruedInterest
}

Enum {meta::pure::profiles::doc.doc = 'The enumeration values to specify how the transfer will settle, e.g. DvP.'} model::external::cdm::TransferSettlementEnum
{
  {meta::pure::profiles::doc.doc = 'Simultaneous transfer of two assets, typically securities, as a way to avoid settlement risk.'} DeliveryVersusDelivery,
  {meta::pure::profiles::doc.doc = 'Settlement in which the transfer of the asset and the cash settlement are simultaneous.'} DeliveryVersusPayment,
  {meta::pure::profiles::doc.doc = 'Simultaneous transfer of cashflows.'} PaymentVersusPayment,
  {meta::pure::profiles::doc.doc = 'No central settlement.'} NotCentralSettlement
}

Enum {meta::pure::profiles::doc.doc = 'A type which permits the Dual Currency strike quote basis to be expressed in terms of the deposit and alternate currencies.'} FpML::model::DualCurrencyStrikeQuoteBasisEnum
{
  DepositCurrencyPerAlternateCurrency,
  AlternateCurrencyPerDepositCurrency
}

Enum {meta::pure::profiles::doc.doc = '2002 ISDA Equity Derivatives Definitions: First Period, Second Period |'} model::external::cdm::DividendPeriodEnum
{
  {meta::pure::profiles::doc.doc = '2002 ISDA Equity Derivatives Definitions: First Period means each period from, and including, one Cash Settlement Payment Date or Settlement Date, as the case may be, to, but excluding, the next following Cash Settlement Payment Date or Settlement Date, as the case may be, except that (i) the initial Dividend Period will commence on, and include, the Clearance System Business Day that is one Settlement Cycle following the Trade Date and (ii) the final Dividend Period will end on, but exclude, the final Cash Settlement Payment Date or Settlement Date, as the case may be.'} FirstPeriod,
  {meta::pure::profiles::doc.doc = '2002 ISDA Equity Derivatives Definitions: Second Period means each period from, but excluding, one Valuation Date to, and including, the next Valuation Date, except that (i) the initial Dividend Period will commence on, but exclude, the Trade Date and (ii) the final Dividend Period will end on, and include, the final Valuation Date or, in respect of a Physically-settled Forward Transaction to which Variable Obligation is not applicable, the date that is one Settlement Cycle prior to the Settlement Date.'} SecondPeriod
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify the premium type for forward start options.'} model::external::cdm::PremiumTypeEnum
{
  PrePaid,
  PostPaid,
  Variable,
  Fixed
}

Enum {meta::pure::profiles::doc.doc = 'The type of automatic adjustment that a Letter of Credit can exhibit.'} FpML::model::LcAutoAdjustEnum
{
  AutoDecrease,
  AutoIncrease,
  AutoIncreaseOrDecrease
}

Enum {meta::pure::profiles::doc.doc = 'Party in a security lending arrangement who can demand closure (temrination) of the agreement'} FpML::model::SecLendCallingPartyEnum
{
  Borrower,
  Lender,
  Either,
  AsDefinedInMasterAgreement
}

Enum {meta::pure::profiles::doc.doc = 'Represents the enumerated values to specify a logical quantification, i.e. either All or Any.'} model::external::cdm::QuantifierEnum
{
  {meta::pure::profiles::doc.doc = 'Specifies that the condition in the scope of the quantifier is true of every member of the domain i.e. every one of the elements in scope.'} All,
  {meta::pure::profiles::doc.doc = 'Specifies that the condition in the scope of the quantifier is true of at least one member of the domain i.e. one or more of the elements in scope.'} Any
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify the reference entity types corresponding to a list of types defined in the ISDA First to Default documentation.'} model::external::cdm::EntityTypeEnum
{
  {meta::pure::profiles::doc.doc = 'Entity Type of Asian.'} Asian,
  {meta::pure::profiles::doc.doc = 'Entity Type of Australian and New Zealand.'} AustralianAndNewZealand,
  {meta::pure::profiles::doc.doc = 'Entity Type of European Emerging Markets.'} EuropeanEmergingMarkets,
  {meta::pure::profiles::doc.doc = 'Entity Type of Japanese.'} Japanese,
  {meta::pure::profiles::doc.doc = 'Entity Type of North American High Yield.'} NorthAmericanHighYield,
  {meta::pure::profiles::doc.doc = 'Entity Type of North American Insurance.'} NorthAmericanInsurance,
  {meta::pure::profiles::doc.doc = 'Entity Type of North American Investment Grade.'} NorthAmericanInvestmentGrade,
  {meta::pure::profiles::doc.doc = 'Entity Type of Singaporean.'} Singaporean,
  {meta::pure::profiles::doc.doc = 'Entity Type of Western European.'} WesternEuropean,
  {meta::pure::profiles::doc.doc = 'Entity Type of Western European Insurance.'} WesternEuropeanInsurance
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify how to deal with a non standard calculation period within a swap stream.'} model::external::cdm::StubPeriodTypeEnum
{
  {meta::pure::profiles::doc.doc = 'If there is a non regular period remaining it is left shorter than the streams calculation period frequency and placed at the start of the stream.'} ShortInitial,
  {meta::pure::profiles::doc.doc = 'If there is a non regular period remaining it is left shorter than the streams calculation period frequency and placed at the end of the stream.'} ShortFinal,
  {meta::pure::profiles::doc.doc = 'If there is a non regular period remaining it is placed at the start of the stream and combined with the adjacent calculation period to give a long first calculation period.'} LongInitial,
  {meta::pure::profiles::doc.doc = 'If there is a non regular period remaining it is placed at the end of the stream and combined with the adjacent calculation period to give a long last calculation period.'} LongFinal
}

Enum {meta::pure::profiles::doc.doc = 'Specifies the type of the swaption. A swaption is an option which confers on the buyer the right, but not the obligation, to enter into an interest rate swap (the \'underlying\' transaction) on exercise. The underlyer is typically a \'vanilla\' fixed-floating, single-currency interest rate swap.'} FpML::model::SwaptionTypeEnum
{
  Payer,
  Receiver,
  Straddle,
  NonStandard
}

Enum {meta::pure::profiles::doc.doc = 'Target specific settlement adjustment method.'} FpML::model::FxSettlementAdjustmentMethodEnum
{
  VariedStrike,
  VariedNotional
}

Enum {meta::pure::profiles::doc.doc = 'The enumeration values to specify a time period containing additional values such as Term.'} model::external::cdm::PeriodTimeEnum
{
  {meta::pure::profiles::doc.doc = 'Period measured in hours.'} Hour,
  {meta::pure::profiles::doc.doc = 'Period measured in minutes.'} Minute,
  {meta::pure::profiles::doc.doc = 'Period measured in seconds.'} Second
}

Enum FpML::model::WeatherSettlementLevelEnum
{
  Cumulative,
  Average,
  Mximum,
  Minimum
}

Enum {meta::pure::profiles::doc.doc = 'Symbolic specification of early termination date.'} FpML::model::EarlyTerminationDateEnum
{
  AnyDay,
  ValuationDate,
  ResetDate,
  AfterFirstResetDate,
  AsSpecifiedInMCA
}

Enum {meta::pure::profiles::doc.doc = 'Represents the enumeration values to define the response type to a margin call.'} model::external::cdm::MarginCallResponseTypeEnum
{
  {meta::pure::profiles::doc.doc = 'Specifies a \'Full Agreement\' to Margin Call.'} AgreeinFull,
  {meta::pure::profiles::doc.doc = 'Specifies a \'Partial agreement\' to Margin Call.'} PartiallyAgree,
  {meta::pure::profiles::doc.doc = 'Specifies a \'Full Dispute\' to a Margin call.'} Dispute
}

Enum {meta::pure::profiles::doc.doc = 'The specification of a time period containing additional values such as Term.'} FpML::model::PeriodTimeEnum
{
  D,
  W,
  M,
  Y,
  Hour,
  Minute,
  Second
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify the rounding direction and precision to be used in the rounding of a rate.'} model::external::cdm::RoundingDirectionEnum
{
  {meta::pure::profiles::doc.doc = 'A fractional number will be rounded up to the specified number of decimal places (the precision). For example, 5.21 and 5.25 rounded up to 1 decimal place are 5.3 and 5.3 respectively.'} Up,
  {meta::pure::profiles::doc.doc = 'A fractional number will be rounded down to the specified number of decimal places (the precision). For example, 5.29 and 5.25 rounded down to 1 decimal place are 5.2 and 5.2 respectively.'} Down,
  {meta::pure::profiles::doc.doc = 'A fractional number will be rounded either up or down to the specified number of decimal places (the precision) depending on its value. For example, 5.24 would be rounded down to 5.2 and 5.25 would be rounded up to 5.3 if a precision of 1 decimal place were specified.'} Nearest
}

Enum {meta::pure::profiles::doc.doc = 'Shows how the transaction is to be settled when it is exercised.'} FpML::model::SettlementTypeEnum
{
  Cash,
  Physical,
  Election,
  CashOrPhysical
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify the type of compounding, e.g. flat, straight.'} model::external::cdm::CompoundingMethodEnum
{
  {meta::pure::profiles::doc.doc = 'Flat compounding. Compounding excludes the spread. Note that the first compounding period has it\'s interest calculated including any spread then subsequent periods compound this at a rate excluding the spread.'} Flat,
  {meta::pure::profiles::doc.doc = 'No compounding is to be applied.'} None,
  {meta::pure::profiles::doc.doc = 'Straight compounding. Compounding includes the spread.'} Straight,
  {meta::pure::profiles::doc.doc = 'Spread Exclusive compounding.'} SpreadExclusive
}

Enum {meta::pure::profiles::doc.doc = 'The type of gas product.'} FpML::model::GasProductTypeEnum
{
  Butane,
  CarbonDioxide,
  EPMix,
  Ethane,
  Gasoline,
  Helium,
  HydrogenSulfide,
  Isobutane,
  Methane,
  Naphtha,
  NaturalGas,
  Nitrogen,
  Pentane,
  Propane,
  Propylene,
  Water
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify the Event of Default or Termination event for which Specified Entities terms are being defined.'} model::external::cdm::SpecifiedEntityClauseEnum
{
  DefaultUnderSpecifiedTransaction,
  CrossDefault,
  Bankruptcy,
  CreditEventUponMerger
}

Enum {meta::pure::profiles::doc.doc = 'Identifies a party to the on-demand repo or SBL transaction that has a right to demand for termination of the repo or SBL transaction.'} FpML::model::CallingPartyEnum
{
  InitialBuyer,
  InitialSeller,
  Either,
  AsDefinedInMasterAgreement
}

Enum {meta::pure::profiles::doc.doc = 'The duration of Security Lending transaction can be only Term or Open. There are many business and market rules that are derived from the duration of the transaction.'} FpML::model::SecurityLendingDurationEnum
{
  Open,
  Term
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify a time period containing the additional value of Term.'} model::external::cdm::PeriodExtendedEnum
{
  {meta::pure::profiles::doc.doc = 'Day'} D,
  {meta::pure::profiles::doc.doc = 'Week'} W,
  {meta::pure::profiles::doc.doc = 'Month'} M,
  {meta::pure::profiles::doc.doc = 'Year'} Y,
  {meta::pure::profiles::doc.doc = 'Term. The period commencing on the effective date and ending on the termination date. The T period always appears in association with periodMultiplier = 1, and the notation is intended for use in contexts where the interval thus qualified (e.g. accrual period, payment period, reset period, ...) spans the entire term of the trade.'} T,
  {meta::pure::profiles::doc.doc = 'CalculationPeriod - the period corresponds to the calculation period   For example, used in the Commodity Markets to indicate that a reference contract is the one that corresponds to the period of the calculation period.'} C
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify the law governing the contract or legal document.'} model::external::cdm::GoverningLawEnum
{
  {meta::pure::profiles::doc.doc = 'The Governing Law is determined by reference to the relevant master agreement.'} AsSpecifiedInMasterAgreement,
  {meta::pure::profiles::doc.doc = 'Belgian law'} BE,
  {meta::pure::profiles::doc.doc = 'Alberta law'} CAAB,
  {meta::pure::profiles::doc.doc = 'British Columbia Law'} CABC,
  {meta::pure::profiles::doc.doc = 'Manitoba law'} CAMN,
  {meta::pure::profiles::doc.doc = 'Ontario law'} CAON,
  {meta::pure::profiles::doc.doc = 'Quebec law'} CAQC,
  {meta::pure::profiles::doc.doc = 'German law'} DE,
  {meta::pure::profiles::doc.doc = 'French law'} FR,
  {meta::pure::profiles::doc.doc = 'English law'} GBEN,
  {meta::pure::profiles::doc.doc = 'The law of the island of Guernsey'} GBGY,
  {meta::pure::profiles::doc.doc = 'The law of the Isle of Man'} GBIM,
  {meta::pure::profiles::doc.doc = 'The law of the island of Jersey'} GBJY,
  {meta::pure::profiles::doc.doc = 'Scottish law'} GBSC,
  {meta::pure::profiles::doc.doc = 'Irish law'} IE,
  {meta::pure::profiles::doc.doc = 'Japanese law'} JP,
  {meta::pure::profiles::doc.doc = 'Luxembourg law'} LU,
  {meta::pure::profiles::doc.doc = 'As agreed in the ISDA Master Agreement'} RelatedMasterAgreement,
  {meta::pure::profiles::doc.doc = 'Californian law'} USCA,
  {meta::pure::profiles::doc.doc = 'Delaware law'} USDE,
  {meta::pure::profiles::doc.doc = 'Illinois law'} USIL,
  {meta::pure::profiles::doc.doc = 'New York law'} USNY
}

Enum {meta::pure::profiles::doc.doc = 'Represents the enumerated values to specify an index product type.'} model::external::cdm::IndexTypeEnum
{
  {meta::pure::profiles::doc.doc = 'Denotes Debt.'} Debt,
  {meta::pure::profiles::doc.doc = 'Denotes Equity.'} Equity,
  {meta::pure::profiles::doc.doc = 'Denotes Commodity.'} Commodity
}

Enum {meta::pure::profiles::doc.doc = 'Identifies a party to the on-demand repo transaction that has a right to demand for termination of the Security Finance transaction.'} model::external::cdm::CallingPartyEnum
{
  {meta::pure::profiles::doc.doc = 'Initial buyer to the repo transaction.'} InitialBuyer,
  {meta::pure::profiles::doc.doc = 'Initial seller to the repo transaction.'} InitialSeller,
  {meta::pure::profiles::doc.doc = 'Either, Buyer or Seller to the repo transaction.'} Either,
  {meta::pure::profiles::doc.doc = 'As defined in Master Agreement.'} AsDefinedInMasterAgreement
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify the method of calculation to be used when averaging rates. Per ISDA 2000 Definitions, Section 6.2. Certain Definitions Relating to Floating Amounts.'} model::external::cdm::AveragingMethodEnum
{
  {meta::pure::profiles::doc.doc = 'The arithmetic mean of the relevant rates for each reset date.'} Unweighted,
  {meta::pure::profiles::doc.doc = 'The arithmetic mean of the relevant rates in effect for each day in a calculation period calculated by multiplying each relevant rate by the number of days such relevant rate is in effect, determining the sum of such products and dividing such sum by the number of days in the calculation period.'} Weighted
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify the consequences of extraordinary events relating to the underlying.'} model::external::cdm::ShareExtraordinaryEventEnum
{
  {meta::pure::profiles::doc.doc = 'The trade continues such that the underlying now consists of the New Shares and/or the Other Consideration, if any, and the proceeds of any redemption, if any, that the holder of the underlying Shares would have been entitled to.'} AlternativeObligation,
  {meta::pure::profiles::doc.doc = 'The trade is cancelled and a cancellation fee will be paid by one party to the other.'} CancellationAndPayment,
  {meta::pure::profiles::doc.doc = 'The trade will be adjusted by the Calculation Agent in accordance with the adjustments made by any exchange on which options on the underlying are listed.'} OptionsExchange,
  {meta::pure::profiles::doc.doc = 'The Calculation Agent will determine what adjustment is required to offset any change to the economics of the trade. If the Calculation Agent cannot achieve this, the trade goes to Cancellation and Payment with the Calculation Agent deciding on the value of the cancellation fee. Adjustments may not be made to account solely for changes in volatility, expected dividends, stock loan rate or liquidity.'} CalculationAgent,
  {meta::pure::profiles::doc.doc = 'The Calculation Agent will determine what adjustment is required to offset any change to the economics of the trade. If the Calculation Agent cannot achieve this, the trade goes to Cancellation and Payment with the Calculation Agent deciding on the value of the cancellation fee. Adjustments to account for changes in volatility, expected dividends, stock loan rate or liquidity are allowed.'} ModifiedCalculationAgent,
  {meta::pure::profiles::doc.doc = 'Applies to Basket Transactions. The portion of the Basket made up by the affected Share will be cancelled and a cancellation fee will be paid from one party to the other. The remainder of the trade continues.'} PartialCancellationAndPayment,
  {meta::pure::profiles::doc.doc = 'If this is a Share-for-Combined merger event (Shares are replaced with New Shares and Other Consideration), then different treatment can be applied to each component if the parties have specified this.'} Component
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify the time of day which would be considered for valuing the knock event.'} model::external::cdm::TriggerTimeTypeEnum
{
  {meta::pure::profiles::doc.doc = 'The close of trading on a day would be considered for valuation.'} Closing,
  {meta::pure::profiles::doc.doc = 'At any time during the Knock Determination period (continuous barrier).'} Anytime
}

Enum {meta::pure::profiles::doc.doc = 'Defines a condition when an event applies.'} FpML::model::ConditionEnum
{
  AtOrAbove,
  AtOrBelow,
  Above,
  Below
}

Enum {meta::pure::profiles::doc.doc = 'The enumeration values to specify how the option is to be settled when exercised.'} model::external::cdm::SettlementTypeEnum
{
  {meta::pure::profiles::doc.doc = 'The intrinsic value of the option will be delivered by way of a cash settlement amount determined, (i) by reference to the differential between the strike price and the settlement price; or (ii) in accordance with a bilateral agreement between the parties.'} Cash,
  {meta::pure::profiles::doc.doc = 'The securities underlying the transaction will be delivered by (i) in the case of a call, the seller to the buyer, or (ii) in the case of a put, the buyer to the seller versus a settlement amount equivalent to the strike price per share.'} Physical,
  {meta::pure::profiles::doc.doc = 'Allow Election of either Cash or Physical settlement.'} Election,
  {meta::pure::profiles::doc.doc = 'Allow use of either Cash or Physical settlement without prior Election.'} CashOrPhysical
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify the list of inflation rate indices.'} model::external::cdm::InflationRateIndexEnum
{
  {meta::pure::profiles::doc.doc = 'Australia: AUD - Non-revised Consumer Price Index (CPI)'} AUD_CPI,
  {meta::pure::profiles::doc.doc = 'Austria: AUS - Non-revised Consumer Price Index (CPI)'} AUS_CPI,
  {meta::pure::profiles::doc.doc = 'Austria: AUS - Non-revised Harmonised Indices of Consumer Prices (HICP)'} AUS_HICP,
  {meta::pure::profiles::doc.doc = 'Belgium: BLG - Non-revised Consumer Price Index - General Index (CPI)'} BLG_CPI_GI,
  {meta::pure::profiles::doc.doc = 'Belgium: BLG - Non-revised Consumer Price Index - Health Index (CPI)'} BLG_CPI_HI,
  {meta::pure::profiles::doc.doc = 'Belgium: BLG - Non-revised Harmonised Consumer Price Index (HICP)'} BLG_HICP,
  {meta::pure::profiles::doc.doc = 'Brazil: BRL - Non-revised Price Index (IGP-M)'} BRL_IGPM,
  {meta::pure::profiles::doc.doc = 'Brazil: BRL - Non-revised Consumer Price Index (IPCA)'} BRL_IPCA,
  {meta::pure::profiles::doc.doc = 'Canada: CAD - Non-revised Consumer Price Index (CPI)'} CAD_CPI,
  {meta::pure::profiles::doc.doc = 'Chile: CLP - Non-revised Consumer Price Index (CPI)'} CLP_CPI,
  {meta::pure::profiles::doc.doc = 'China: CNY - Non-revised Consumer Price Index (CPI)'} CNY_CPI,
  {meta::pure::profiles::doc.doc = 'Czech Republic: CZK - Non-revised Consumer Price Index (CPI)'} CZK_CPI,
  {meta::pure::profiles::doc.doc = 'Denmark: DEK - Non-revised Consumer Price Index (CPI)'} DEK_CPI,
  {meta::pure::profiles::doc.doc = 'Denmark: DEK - Non-revised Harmonised Consumer Price Index (HICP)'} DEK_HICP,
  {meta::pure::profiles::doc.doc = 'Germany: DEM - Non-revised Consumer Price Index (CPI)'} DEM_CPI,
  {meta::pure::profiles::doc.doc = 'Germany: DEM - Non-revised Consumer Price Index for North Rhine-Westphalia'} DEM_CPI_NRW,
  {meta::pure::profiles::doc.doc = 'Germany: DEM - Non-revised Harmonised Consumer Price Index (HICP)'} DEM_HICP,
  {meta::pure::profiles::doc.doc = 'Spain: ESP - National-Non-revised Consumer Price Index (CPI)'} ESP_CPI,
  {meta::pure::profiles::doc.doc = 'Spain: ESP - Harmonised-Non-revised Consumer Price Index (HICP)'} ESP_HICP,
  {meta::pure::profiles::doc.doc = 'Spain: ESP - National-Revised Consumer Price Index (CPI).'} ESP_R_CPI,
  {meta::pure::profiles::doc.doc = 'Spain: ESP - Harmonised-Revised Consumer Price Index (HICP)'} ESP_R_HICP,
  {meta::pure::profiles::doc.doc = 'European Union: EUR - All Items-Non-revised Consumer Price Index'} EUR_AI_CPI,
  {meta::pure::profiles::doc.doc = 'European Union: EUR - All Items-Revised Consumer Price Index'} EUR_AI_R_CPI,
  {meta::pure::profiles::doc.doc = 'European Union: EUR - Excluding Tobacco-Non-revised Consumer Price Index'} EUR_EXT_CPI,
  {meta::pure::profiles::doc.doc = 'European Union: EUR - Excluding Tobacco-Revised Consumer Price Index'} EUR_EXT_R_CPI,
  {meta::pure::profiles::doc.doc = 'Finland: FIN - Non-revised Consumer Price Index (CPI)'} FIN_CPI,
  {meta::pure::profiles::doc.doc = 'Finland: FIN - Harmonised-Non-revised Consumer Price Index (HICP)'} FIN_HICP,
  {meta::pure::profiles::doc.doc = 'France: FRC - Excluding Tobacco-Non-Revised Consumer Price Index'} FRC_EXT_CPI,
  {meta::pure::profiles::doc.doc = 'France: FRC - Harmonised-Non-revised Consumer Price Index (HICP)'} FRC_HICP,
  {meta::pure::profiles::doc.doc = 'Greece: GRD - Non-revised Consumer Price Index (CPI)'} GRD_CPI,
  {meta::pure::profiles::doc.doc = 'Greece: GRD - Harmonised-Non-revised Consumer Price Index (HICP)'} GRD_HICP,
  {meta::pure::profiles::doc.doc = 'Hong Kong: HKD - Non-revised Consumer Price Index (CPI)'} HKD_CPI,
  {meta::pure::profiles::doc.doc = 'Hungary: HUF - Non-revised Consumer Price Index (CPI)'} HUF_CPI,
  {meta::pure::profiles::doc.doc = 'Indonesia: IDR - Non-revised Consumer Price Index (CPI)'} IDR_CPI,
  {meta::pure::profiles::doc.doc = 'Israel: ILS - Non-revised Consumer Price Index (CPI)'} ILS_CPI,
  {meta::pure::profiles::doc.doc = 'Ireland: IRL - Non-revised Consumer Price Index (CPI)'} IRL_CPI,
  {meta::pure::profiles::doc.doc = 'Ireland: IRL - Harmonised-Non-revised Consumer Price Index (HICP)'} IRL_HICP,
  {meta::pure::profiles::doc.doc = 'Iceland: ISK - Non-revised Consumer Price Index (CPI)'} ISK_CPI,
  {meta::pure::profiles::doc.doc = 'Iceland: ISK - Harmonised Consumer Price Index (HICP)'} ISK_HICP,
  {meta::pure::profiles::doc.doc = 'Italy: ITL - Inflation for Blue Collar Workers and Employees-Excluding Tobacco Consumer Price Index'} ITL_BC_EXT_CPI,
  {meta::pure::profiles::doc.doc = 'Italy: ITL - Inflation for Blue Collar Workers and Employees-Including Tobacco Consumer Price Index'} ITL_BC_INT_CPI,
  {meta::pure::profiles::doc.doc = 'Italy: ITL - Non-revised Harmonised Consumer Price Index (HICP)'} ITL_HICP,
  {meta::pure::profiles::doc.doc = 'Italy: ITL - Whole Community - Excluding Tobacco Consumer Price Index'} ITL_WC_EXT_CPI,
  {meta::pure::profiles::doc.doc = 'Italy: ITL - Whole Community - Including Tobacco Consumer Price Index'} ITL_WC_INT_CPI,
  {meta::pure::profiles::doc.doc = 'Japan: JPY - Non-revised Consumer Price Index Nationwide General Excluding Fresh Food (CPI)'} JPY_CPI_EXF,
  {meta::pure::profiles::doc.doc = 'South Korea: KRW - Non-revised Consumer Price Index (CPI)'} KRW_CPI,
  {meta::pure::profiles::doc.doc = 'Luxembourg: LUX - Non-revised Consumer Price Index (CPI)'} LUX_CPI,
  {meta::pure::profiles::doc.doc = 'Luxembourg: LUX - Harmonised-Non-revised Consumer Price Index (HICP)'} LUX_HICP,
  {meta::pure::profiles::doc.doc = 'Mexico: MXN - Non-revised Consumer Price Index (CPI)'} MXN_CPI,
  {meta::pure::profiles::doc.doc = 'Mexico: MXN - Unidad de Inversion Index (UDI)'} MXN_UDI,
  {meta::pure::profiles::doc.doc = 'Malaysia: MYR - Non-revised Consumer Price Index (CPI)'} MYR_CPI,
  {meta::pure::profiles::doc.doc = 'Netherlands: NLG - Non-revised Consumer Price Index (CPI)'} NLG_CPI,
  {meta::pure::profiles::doc.doc = 'Netherlands: NLG - Harmonised-Non-revised Consumer Price Index (HICP)'} NLG_HICP,
  {meta::pure::profiles::doc.doc = 'Norway: NOK - Non-revised Consumer Price Index (CPI)'} NOK_CPI,
  {meta::pure::profiles::doc.doc = 'New Zealand: NZD - Non-revised Consumer Price Index (CPI)'} NZD_CPI,
  {meta::pure::profiles::doc.doc = 'Peru: PER - Non-revised Consumer Price Index (CPI)'} PER_CPI,
  {meta::pure::profiles::doc.doc = 'Poland: PLN - Non-Revised Consumer Price Index (CPI)'} PLN_CPI,
  {meta::pure::profiles::doc.doc = 'Portugal: POR - Non-revised Consumer Price Index (CPI)'} POR_CPI,
  {meta::pure::profiles::doc.doc = 'Portugal: POR - Harmonised-Non-revised Consumer Price Index (HICP)'} POR_HICP,
  {meta::pure::profiles::doc.doc = 'Russia: RUB - Non-revised Consumer Price Index (CPI)'} RUB_CPI,
  {meta::pure::profiles::doc.doc = 'Sweden: SEK - Non-revised Consumer Price Index (CPI)'} SEK_CPI,
  {meta::pure::profiles::doc.doc = 'Singapore: SGD - Non-revised Consumer Price Index (CPI)'} SGD_CPI,
  {meta::pure::profiles::doc.doc = 'Switzerland: SWF - Non-revised Consumer Price Index (CPI)'} SWF_CPI,
  {meta::pure::profiles::doc.doc = 'Turkey: TRY - Non-revised Consumer Price Index (CPI)'} TRY_CPI,
  {meta::pure::profiles::doc.doc = 'Taiwan: TWD - Non-revised Consumer Price Index (CPI)'} TWD_CPI,
  {meta::pure::profiles::doc.doc = 'United Kingdom: GBP - Harmonised-Non-revised Consumer Price Index (HICP)'} UK_HICP,
  {meta::pure::profiles::doc.doc = 'United Kingdom: GBP - Non-revised Retail Price Index (UKRPI)'} UK_RPI,
  {meta::pure::profiles::doc.doc = 'United Kingdom: GBP - Non-revised Retail Price Index Excluding Mortgage Interest Payments (UKRPIX)'} UK_RPIX,
  {meta::pure::profiles::doc.doc = 'United States: USA - Non-revised Consumer Price Index - Urban (CPI-U)'} USA_CPI_U,
  {meta::pure::profiles::doc.doc = 'South Africa: ZAR - Non-revised Consumer Price Index (CPI)'} ZAR_CPI,
  {meta::pure::profiles::doc.doc = 'South Africa: ZAR - Non-revised Consumer Price Index Excluding Mortgages (CPIX)'} ZAR_CPIX
}

Enum {meta::pure::profiles::doc.doc = 'The type of mark to market convention.'} FpML::model::MarkToMarketConventionEnum
{
  Gross,
  Netted
}

Enum {meta::pure::profiles::doc.doc = 'The enumeration values to qualify the intent associated with a transaction event.'} model::external::cdm::EventIntentEnum
{
  {meta::pure::profiles::doc.doc = 'The intent is to allocate one or more trades as part of an allocated block trade.'} Allocation,
  {meta::pure::profiles::doc.doc = 'The intent is to clear the contract.'} Clearing,
  {meta::pure::profiles::doc.doc = 'The intent is to compress multiple trades as part of a netting or compression event.'} Compression,
  {meta::pure::profiles::doc.doc = 'The intent is to Exercise the contract.'} Exercise,
  {meta::pure::profiles::doc.doc = 'The intent is to replace an interest rate index by another one during the life of a trade and add a transition spread on top of this index (and on top of the spreads already defined in the trade, if any).'} IndexTransition,
  {meta::pure::profiles::doc.doc = 'The intent is to reallocate one or more trades as part of an allocated block trade.'} Reallocation,
  {meta::pure::profiles::doc.doc = 'The intent is to re-negotiate some of the terms of the contract.'} Renegotiation,
  {meta::pure::profiles::doc.doc = 'The intent is to form a contract from an execution.'} ContractFormation
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify the FpML asset class categorization.'} model::external::cdm::AssetClassEnum
{
  {meta::pure::profiles::doc.doc = 'Commodity.'} Commodity,
  {meta::pure::profiles::doc.doc = 'Credit.'} Credit,
  {meta::pure::profiles::doc.doc = 'Equity.'} Equity,
  {meta::pure::profiles::doc.doc = 'ForeignExchange.'} ForeignExchange,
  {meta::pure::profiles::doc.doc = 'InterestRate.'} InterestRate
}

Enum {meta::pure::profiles::doc.doc = 'The side from which perspective a value is quoted.'} FpML::model::QuotationSideEnum
{
  Bid,
  Ask,
  Mid
}

Enum {meta::pure::profiles::doc.doc = 'Denotes the method by which the pricing days are distributed across the pricing period.'} model::external::cdm::DayDistributionEnum
{
  All,
  First,
  Last,
  Penultimate
}

Enum {meta::pure::profiles::doc.doc = 'The Lower Bound Direction. It only contains the AtOrAbove and Above values.'} FpML::model::FxRegionLowerBoundDirectionEnum
{
  AtOrAbove,
  Above
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify the interest shortfall cap, applicable to mortgage derivatives.'} model::external::cdm::InterestShortfallCapEnum
{
  Fixed,
  Variable
}

Enum {meta::pure::profiles::doc.doc = 'Defines the consequences of nationalization, insolvency and delisting events relating to the underlying.'} model::external::cdm::NationalizationOrInsolvencyOrDelistingEventEnum
{
  {meta::pure::profiles::doc.doc = 'The parties may, but are not obliged, to terminate the transaction on mutually acceptable terms and if the terms are not agreed then the transaction continues.'} NegotiatedCloseout,
  {meta::pure::profiles::doc.doc = 'The trade is terminated.'} CancellationAndPayment
}

Enum {meta::pure::profiles::doc.doc = 'Seniority of debt instruments comprising the index.'} model::external::cdm::CreditSeniorityEnum
{
  {meta::pure::profiles::doc.doc = 'Other as defined under EMIR.'} Other,
  {meta::pure::profiles::doc.doc = 'Senior Loss Absorbing Capacity (RED Tier Code: SNRLAC).'} SeniorLossAbsorbingCapacity,
  {meta::pure::profiles::doc.doc = 'Senior domestic (RED Tier Code: SECDOM).'} SeniorSec,
  {meta::pure::profiles::doc.doc = 'Senior foreign (RED Tier Code: SNRFOR).'} SeniorUnSec,
  {meta::pure::profiles::doc.doc = 'Subordinate, Lower Tier 2 (RED Tier Code: SUBLT2).'} SubLowerTier2,
  {meta::pure::profiles::doc.doc = 'Subordinate Tier 1 (RED Tier Code: PREFT1).'} SubTier1,
  {meta::pure::profiles::doc.doc = 'Subordinate, Tier 3.'} SubTier3,
  {meta::pure::profiles::doc.doc = 'Subordinate, Upper Tier 2 (RED Tier Code: JRSUBUT2).'} SubUpperTier2
}

Enum {meta::pure::profiles::doc.doc = 'The specification of the type of quotation rate to be obtained from each cash settlement reference bank.'} FpML::model::QuotationRateTypeEnum
{
  Bid,
  Ask,
  Mid,
  ExercisingPartyPays
}

Enum {meta::pure::profiles::doc.doc = 'The convention for adjusting any relevant date if it would otherwise fall on a day that is not a valid business day. Note that FRN is included here as a type of business day convention although it does not strictly fall within ISDA\'s definition of a Business Day Convention and does not conform to the simple definition given above.'} FpML::model::BusinessDayConventionEnum
{
  FOLLOWING,
  FRN,
  MODFOLLOWING,
  PRECEDING,
  MODPRECEDING,
  NEAREST,
  NONE,
  NotApplicable
}

Enum {meta::pure::profiles::doc.doc = 'A duration code for a Repo (or Securities Lending) transaction. There are many business and market rules that are derived from the duration of the transaction.'} model::external::cdm::RepoDurationEnum
{
  {meta::pure::profiles::doc.doc = 'Indicates that a contract is classified as overnight, meaning that there is one business day difference between the start and end date of the contract. Business rule: When the repo is overnight, the number of business days between the spot and forward value dates must be one. Forward leg must be specified.'} Overnight,
  {meta::pure::profiles::doc.doc = 'Indicates that a contract is a regular term contract, with a start date and an end date. Business rule: When the repo is \'Term\', both spot and forward legs must be specified.'} Term
}

Enum {meta::pure::profiles::doc.doc = 'Defines the enumerated values to specify the ancillary roles to the transaction. The product is agnostic to the actual parties involved in the transaction, with the party references abstracted away from the product definition and replaced by the AncillaryRoleEnum. The AncillaryRoleEnum can then be positioned in the product and the AncillaryParty type, which is positioned outside of the product definition, allows the AncillaryRoleEnum to be associated with an actual party reference.'} model::external::cdm::AncillaryRoleEnum
{
  {meta::pure::profiles::doc.doc = 'Specifies the party which determines additional disruption events.'} DisruptionEventsDeterminingParty,
  {meta::pure::profiles::doc.doc = 'Specifies the party which determines if dividends are extraordinary in relation to normal levels.'} ExtraordinaryDividendsParty,
  {meta::pure::profiles::doc.doc = 'Specifies the clearing organization (CCP, DCO) which the trade should be cleared.'} PredeterminedClearingOrganizationParty,
  {meta::pure::profiles::doc.doc = 'Specifies the party to which notice of a manual exercise should be given.'} ExerciseNoticeReceiverPartyManual,
  {meta::pure::profiles::doc.doc = 'Specifies the party to which notice of a optional early termination exercise should be given.'} ExerciseNoticeReceiverPartyOptionalEarlyTermination,
  {meta::pure::profiles::doc.doc = 'Specifies the party to which notice of a cancelable provision exercise should be given.'} ExerciseNoticeReceiverPartyCancelableProvision,
  {meta::pure::profiles::doc.doc = 'Specifies the party to which notice of a extendible provision exercise should be given.'} ExerciseNoticeReceiverPartyExtendibleProvision,
  {meta::pure::profiles::doc.doc = 'Specifies the party responsible for performing calculation agent duties as defined in the applicable product definition.'} CalculationAgentIndependent,
  {meta::pure::profiles::doc.doc = 'Specifies the party responsible for performing calculation agent duties associated with an optional early termination.'} CalculationAgentOptionalEarlyTermination,
  {meta::pure::profiles::doc.doc = 'Specifies the party responsible for performing calculation agent duties associated with an mandatory early termination.'} CalculationAgentMandatoryEarlyTermination,
  {meta::pure::profiles::doc.doc = 'Specifies the party responsible for deciding the fallback rate.'} CalculationAgentFallback,
  {meta::pure::profiles::doc.doc = 'Specifies the role of the party which either pays or receives a cashflow payment.'} ArrangingBroker,
  {meta::pure::profiles::doc.doc = 'Specifies the role of the party which either pays or receives a cashflow payment.'} Beneficiary,
  {meta::pure::profiles::doc.doc = 'Specifies the role of the party which either pays or receives a cashflow payment.'} ClearingFirm,
  {meta::pure::profiles::doc.doc = 'Specifies the role of the party which either pays or receives a cashflow payment.'} CounterpartyAfflilate,
  {meta::pure::profiles::doc.doc = 'Specifies the role of the party which either pays or receives a cashflow payment.'} Guarantor,
  {meta::pure::profiles::doc.doc = 'Specifies the role of the party which either pays or receives a cashflow payment.'} OtherParty,
  {meta::pure::profiles::doc.doc = 'Specifies the role of the party which either pays or receives a cashflow payment.'} PrimeBroker,
  {meta::pure::profiles::doc.doc = 'Specifies the role of the party which either pays or receives a cashflow payment.'} SettlementAgent
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify the regulatory regimes. The display name corresponds to the regulatory regime name or acronym specified as part of the Regime table in the ISDA CSA for Initial Margin, paragraph 13, General Principles. 2016 ISDA Credit Support Annex for Initial Margin, paragraph 13, General Principles: Regime. | 2018 ISDA Credit Support Annex for Initial Margin, paragraph 13, General Principles: Regime.'} model::external::cdm::RegulatoryRegimeEnum
{
  {meta::pure::profiles::doc.doc = 'Australian Prudential Standard CPS 226 Margining and risk mitigation for non-centrally cleared derivatives. 2018 ISDA Credit Support Annex for Initial Margin, paragraph 13, General Principles.'} AustraliaMarginRules,
  {meta::pure::profiles::doc.doc = 'Guideline E-22, Margin Requirements for Non-Centrally Cleared Derivatives issued by the Canadian Office of the Superintendent of Financial Institutions in February 2016. 2016 ISDA Credit Support Annex for Initial Margin, paragraph 13, General Principles. | 2018 ISDA Credit Support Annex for Initial Margin, paragraph 13, General Principles.'} CanadaMarginRules,
  {meta::pure::profiles::doc.doc = 'Margin requirements adopted by the U.S. Commodity Futures Trading Commission pursuant to CEA \u00A7 4s(e). 2016 ISDA Credit Support Annex for Initial Margin, paragraph 13, General Principles. | 2018 ISDA Credit Support Annex for Initial Margin, paragraph 13, General Principles.'} CFTC_MarginRules,
  {meta::pure::profiles::doc.doc = 'Regulation (EU) No 648/2012 of the European Parliament and of the Council of 4 July 2012 on OTC derivatives, central counterparties and trade repositories (including the EMIR RTS, which means the published regulatory technical standards on risk-mitigation techniques for OTC-derivative contracts not cleared by a CCP under Article 11(15) of EMIR). 2016 ISDA Credit Support Annex for Initial Margin, paragraph 13, General Principles. | 2018 ISDA Credit Support Annex for Initial Margin, paragraph 13, General Principles.'} EMIR_MarginRules,
  {meta::pure::profiles::doc.doc = 'Chapter CR-G-14 \'Non-centrally Cleared OTC Derivatives Transactions \u2013 Margin and Other Risk Mitigation Standards\' in the Banking Supervisory Policy Manual issued by the Hong Kong Monetary Authority. 2018 ISDA Credit Support Annex for Initial Margin, paragraph 13, General Principles.'} HongKongMarginRules,
  {meta::pure::profiles::doc.doc = 'Margin rules adopted by the Financial Services Agency of Japan pursuant to Article 40, Item 2 of the Financial Instruments and Exchange Act (kin\u2019yuu shouhin torihiki hou) (Act No. 25 of 1948) and by the Ministry of Agriculture, Forestry and Fisheries and the Ministry of Economy, Trade and Industry pursuant to the Commodity Derivatives Act (shouhin sakimono torihiki hou) (Act No. 239 of 1950) (including their subordinated regulations and the related supervisory guidelines). 2016 ISDA Credit Support Annex for Initial Margin, paragraph 13, General Principles. | 2018 ISDA Credit Support Annex for Initial Margin, paragraph 13, General Principles.'} JapanMarginRules,
  {meta::pure::profiles::doc.doc = 'Margin requirements adopted by a \'prudential regulator\' (as defined in CEA \u00A7 1a(39)) pursuant to CEA \u00A7 4s(e) and Exchange Act \u00A7 15F(e). 2016 ISDA Credit Support Annex for Initial Margin, paragraph 13, General Principles. | 2018 ISDA Credit Support Annex for Initial Margin, paragraph 13, General Principles.'} US_PrudentialMarginRules,
  {meta::pure::profiles::doc.doc = 'Margin requirements adopted by the U.S. Securities and Exchange Commission pursuant to Exchange Act \u00A7 15F(e). 2016 ISDA Credit Support Annex for Initial Margin, paragraph 13, General Principles. | 2018 ISDA Credit Support Annex for Initial Margin, paragraph 13, General Principles.'} SEC_MarginRules,
  {meta::pure::profiles::doc.doc = 'Guidelines on Margin Requirements for Non-centrally Cleared OTC Derivatives Contracts issued by the Monetary Authority of Singapore (MAS) pursuant to section 321 of the Securities and Futures Act, Chapter 289 of Singapore. 2018 ISDA Credit Support Annex for Initial Margin, paragraph 13, General Principles.'} SingaporeMarginRules,
  {meta::pure::profiles::doc.doc = 'Margin rules adopted by the Swiss Federal Council pursuant to Article 110-111 of the Financial Market Infrastructure Act as well as Articles 100 to 107 and Annexes 3 to 5 of the Financial Market Infrastructure Ordinance. 2018 ISDA Credit Support Annex for Initial Margin, paragraph 13, General Principles.'} SwitzerlandMarginRules,
  {meta::pure::profiles::doc.doc = 'the Central Bank of Brazil margin requirements adopted pursuant to Resolution no. 4,662, of 25 May 2018, enacted by the National Monetary Council.'} BrazilMarginRules,
  {meta::pure::profiles::doc.doc = 'EMIR (including, for the avoidance of doubt, the EMIR RTS) as it forms part of UK domestic law by virtue of section 3 of the European Union (Withdrawal) Act 2018 (as amended) (the EUWA) (including any amendments made to such legislation when it is brought into UK domestic law pursuant to section 8 of the EUWA or any regulations made thereunder), and which, for the avoidance of doubt, shall be subject to the interpretation provision in Paragraph [11(g)].3'} UnitedKingdomMarginRules,
  {meta::pure::profiles::doc.doc = 'the requirements contained in Joint Standard 2 of 2020 made in terms of the South African Financial Sector Regulation Act, 2017.'} SouthAfricaMarginRules,
  {meta::pure::profiles::doc.doc = 'margin requirements adopted by the Korean Financial Services Commission and Financial Supervisory Service pursuant to the Guidelines on Margin Requirements for Non-Centrally Cleared OTC Derivatives Transactions, which are expected to be incorporated into the Financial Investment Services and Capital Markets Act.'} SouthKoreaMarginRules,
  {meta::pure::profiles::doc.doc = 'Part III of Schedule 10 to Code of Conduct for Persons Licensed by or Registered with the Securities and Futures Commission of Hong Kong.'} HongKongSFCMarginRules
}

Enum {meta::pure::profiles::doc.doc = 'Used for indicating the length unit in the Resource type.'} FpML::model::LengthUnitEnum
{
  Pages,
  TimeUnit
}

Enum {meta::pure::profiles::doc.doc = 'Specifies the fallback provisions in respect to the applicable Futures Price Valuation.'} FpML::model::FpvFinalPriceElectionFallbackEnum
{
  FPVClose,
  FPVHedgeExecution
}

Enum {meta::pure::profiles::doc.doc = 'A list that defines the loan trading association responsible for defining the standardized legal framework that governs the trade.'} FpML::model::LoanTradingAssocEnum
{
  LMA,
  LSTA
}

Enum {meta::pure::profiles::doc.doc = 'The type of calculation.'} FpML::model::InterestCalculationTypeEnum
{
  Simple,
  Compounding
}

Enum {meta::pure::profiles::doc.doc = 'A list of standard market rules for the treatment of split of assignment fees between counterparties.'} FpML::model::LoanTransferFeePaidByEnum
{
  BuyerSplitOneHalf,
  OneFeePaidByBuyer,
  OneFeePaidBySeller,
  PaidByBuyer,
  PaidBySeller,
  SellerSplitOneHalf,
  SplitFull
}

Enum {meta::pure::profiles::doc.doc = 'A day type classification used in counting the number of days between two dates.'} FpML::model::DayTypeEnum
{
  Business,
  Calendar,
  CommodityBusiness,
  CurrencyBusiness,
  ExchangeBusiness,
  ScheduledTradingDay
}

Enum {meta::pure::profiles::doc.doc = 'The unit in which a commission is denominated.'} FpML::model::CommissionDenominationEnum
{
  BPS,
  Percentage,
  CentsPerShare,
  FixedAmount
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify the date on which the receiver of the equity payout is entitled to the dividend.'} model::external::cdm::DividendEntitlementEnum
{
  {meta::pure::profiles::doc.doc = 'Dividend entitlement is on the dividend ex-date.'} ExDate,
  {meta::pure::profiles::doc.doc = 'Dividend entitlement is on the dividend record date.'} RecordDate
}

Enum {meta::pure::profiles::doc.doc = 'The specification of a time period'} FpML::model::PeriodEnum
{
  D,
  W,
  M,
  Y
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify whether a trade is settling using standard settlement instructions as well as whether it is a candidate for settlement netting.'} model::external::cdm::StandardSettlementStyleEnum
{
  {meta::pure::profiles::doc.doc = 'This trade will settle using standard predetermined funds settlement instructions.'} Standard,
  {meta::pure::profiles::doc.doc = 'This trade is a candidate for settlement netting.'} Net,
  {meta::pure::profiles::doc.doc = 'This trade will settle using standard predetermined funds settlement instructions and is a candidate for settlement netting.'} StandardAndNet
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify a day of the seven-day week.'} model::external::cdm::DayOfWeekEnum
{
  {meta::pure::profiles::doc.doc = 'Monday'} MON,
  {meta::pure::profiles::doc.doc = 'Tuesday'} TUE,
  {meta::pure::profiles::doc.doc = 'Wednesday'} WED,
  {meta::pure::profiles::doc.doc = 'Thursday'} THU,
  {meta::pure::profiles::doc.doc = 'Friday'} FRI,
  {meta::pure::profiles::doc.doc = 'Saturday'} SAT,
  {meta::pure::profiles::doc.doc = 'Sunday'} SUN,
  {meta::pure::profiles::doc.doc = '13-week and 26-week U.S. Treasury Bill Auction Dates. Each Monday except for U.S. (New York) holidays when it will occur on a Tuesday'} TBILL
}

Enum {meta::pure::profiles::doc.doc = 'LoadType is a summary of the full description of the settlement periods with respect to the region. Used for describing Electricity delivery schedules.'} FpML::model::LoadTypeEnum
{
  Base,
  Peak,
  OffPeak,
  BlockHours,
  Custom
}

Enum {meta::pure::profiles::doc.doc = 'A list of accruing fee types associated with a facility.'} FpML::model::LoanTradingNonAccruingFeeTypeEnum
{
  Amendment,
  Consent,
  Facility,
  FacilityExension,
  Upfront,
  Waiver
}

Enum {meta::pure::profiles::doc.doc = 'Defines the Settlement Period Duration for an Electricity Transaction.'} FpML::model::SettlementPeriodDurationEnum
{
  _2Hours,
  _1Hour,
  _30Minutes,
  _15Minutes
}

Enum {meta::pure::profiles::doc.doc = 'Forward Volatility Agreement Straddle Type.'} FpML::model::FxStraddleTypeEnum
{
  AtTheMoneyForward,
  DeltaNeutral
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify whether resets occur relative to the first or last day of a calculation period.'} model::external::cdm::ResetRelativeToEnum
{
  {meta::pure::profiles::doc.doc = 'Resets occur relative to the first day of a calculation period.'} CalculationPeriodStartDate,
  {meta::pure::profiles::doc.doc = 'Resets occur relative to the last day of a calculation period.'} CalculationPeriodEndDate
}

Enum {meta::pure::profiles::doc.doc = 'The enumeration values to specify the reference source that determines the final settlement price of the option.'} model::external::cdm::OptionReferenceTypeEnum
{
  {meta::pure::profiles::doc.doc = 'Reference from the price of a future contract.'} Future,
  {meta::pure::profiles::doc.doc = 'Reference from an underlyer spot price.'} Spot
}

Enum {meta::pure::profiles::doc.doc = 'The ISDA defined methodology for determining the final price of the reference obligation for purposes of cash settlement.'} FpML::model::ValuationMethodEnum
{
  Market,
  Highest,
  AverageMarket,
  AverageHighest,
  BlendedMarket,
  BlendedHighest,
  AverageBlendedMarket,
  AverageBlendedHighest
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify a mortgage typology.'} model::external::cdm::MortgageSectorEnum
{
  {meta::pure::profiles::doc.doc = 'Asset Backed Security.'} ABS,
  {meta::pure::profiles::doc.doc = 'Collateralized Debt Obligation.'} CDO,
  {meta::pure::profiles::doc.doc = 'Commercial Mortgage Backed Security.'} CMBS,
  {meta::pure::profiles::doc.doc = 'Residential Mortgage Backed Security.'} RMBS
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify whether the dividend is paid with respect to the Dividend Period.'} model::external::cdm::DividendAmountTypeEnum
{
  {meta::pure::profiles::doc.doc = 'The record date for a dividend occurs during a dividend period.'} RecordAmount,
  {meta::pure::profiles::doc.doc = 'The ex-date for a dividend occurs during a dividend period.'} ExAmount,
  {meta::pure::profiles::doc.doc = 'The payment date for a dividend occurs during a dividend period.'} PaidAmount,
  {meta::pure::profiles::doc.doc = 'The Amount is determined as provided in the relevant Master Confirmation.'} AsSpecifiedInMasterConfirmation
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify the CDX index annex source.'} model::external::cdm::IndexAnnexSourceEnum
{
  {meta::pure::profiles::doc.doc = 'As defined in the relevant form of Master Confirmation applicable to the confirmation of Dow Jones CDX indices.'} MasterConfirmation,
  {meta::pure::profiles::doc.doc = 'As defined in the relevant form of Master Confirmation applicable to the confirmation of Dow Jones CDX indices.'} Publisher
}

Enum {meta::pure::profiles::doc.doc = 'The type of a knockout barrier used in an accrual product (e.g. American or European)'} FpML::model::FxAccrualKnockoutBarrierRetentionEnum
{
  Keep,
  Lose
}

Enum {meta::pure::profiles::doc.doc = 'Defines a publication in which the price can be found. (e.g Gas Daily, Platts Bloomberg.'} model::external::cdm::CommodityInformationPublisherEnum
{
  Argus,
  ArgusMcCloskeys,
  ArgusAmericasCrudeReport,
  ArgusBiofuelReport,
  ArgusCrudeReport,
  ArgusEuropeanProductsReport,
  ArgusFMB,
  ArgusInternationalLPGReport,
  ArgusLPG,
  ArgusNatGas,
  AssocBanksSingapore,
  BandD,
  BalticExchange,
  BankOfCanada,
  BankOfEngland,
  BankOfJapan,
  Bloomberg,
  BLUENEXT,
  CAISO,
  CanadianGasPriceReporter,
  CanadianGasReporter,
  ChemicalMarketsAssociation,
  CMAIAromaticsMarketReport,
  CMAIWeeklyMethanolMarketReport,
  CRUSteelLongProductMonitor,
  CRUSteelSheetProductsMonitor,
  DowJonesEnergyService,
  DowJonesEnergyServiceScreen,
  DowJonesNatGas,
  EEX,
  ERCOT,
  EuroCentralBank,
  EURONEXMATIF,
  FederalReserve,
  FERTECON,
  FertilizerWeek,
  FHLBSF,
  GasDaily,
  GasDailyPriceGuide,
  GlobalCoale,
  GME,
  HerenReport,
  ICE,
  ICE10XDailyNaturalGas,
  ICE10XDailyPower,
  ICE10XMonthly,
  ICEDayAheadIndex,
  ICEECX,
  ICIS,
  InsideFERC,
  IPE,
  ISDA,
  ISONewEngland,
  JAPANMOFTSRR,
  LEBA,
  LondonBullionMarketAssociation,
  LONDONPLATINUMPALLADIUMMARKET,
  MegawattDaily,
  MetalBulletin,
  MISO,
  NaturalGasWeek,
  NGIBidweekSurvey,
  NYISO,
  OBM,
  OMEL,
  OPIS,
  PaperTrader,
  PIX,
  PJM,
  PlattsAsiaPacific,
  PlattsAsiaPacificArabMarketscan,
  PlattsCleanTankerwire,
  PlattsCoalTrader,
  PlattsCrudeOilMarketwire,
  PlattsDirtyTakerwire,
  PlattsENGR,
  PlattsEuropean,
  PlattsEuropeanMarketscan,
  PlattsGasDaily,
  PlattsGasDailyPriceGuide,
  PlattsInsideFERC,
  PlattsLPG,
  PlattsMarketwire,
  PlattsMegawattDaily,
  PlattsMetalsAlert,
  PlattsOilgram,
  PlattsOilgramBunkerwire,
  PlattsPolymerscan,
  PlattsTSIIronOre,
  TSIScrap,
  TSISteel,
  PlattsUS,
  PlattsUSMarketscan,
  PPM,
  PPMEurope,
  PPW,
  ReserveBankAustralia,
  ReserveBankNewZealand,
  Reuters,
  ReutersScreen,
  RIMIntelligenceProducts,
  SeaPac,
  Telerate,
  TelerateScreen,
  UXWEEKLY,
  WorldCrudeReport,
  WorldPulpMonthly
}

Enum {meta::pure::profiles::doc.doc = 'Represents the enumerated values to specify taxonomy sources.'} model::external::cdm::TaxonomySourceEnum
{
  {meta::pure::profiles::doc.doc = 'Represents the ISO 10962 Classification of Financial Instruments code.'} CFI,
  {meta::pure::profiles::doc.doc = 'Represents the ISDA product taxonomy.'} ISDA,
  {meta::pure::profiles::doc.doc = 'Represents the ISDA Collateral Asset Definition Idenifier code.'} ICAD,
  {meta::pure::profiles::doc.doc = 'Identifies European Union Eligible Collateral Assets classification categories based on EMIR Uncleared Margin Rules.'} EU_EMIR_EligibleCollateralAssetClass,
  {meta::pure::profiles::doc.doc = 'Identifies United Kingdom Eligible Collateral Assets classification categories based on UK Onshored EMIR Uncleared Margin Rules Eligible Collateral asset classes for both initial margin (IM) and variation margin (VM) posted and collected between specified entities.Please note: UK EMIR regulation will detail which eligible collateral assets classes apply to each type of entity pairing (counterparty) and which apply to posting of IM and VM.'} UK_EMIR_EligibleCollateralAssetClass,
  {meta::pure::profiles::doc.doc = 'Identifies US Eligible Collateral Assets classification categories based on Uncleared Margin Rules published by the CFTC and the US Prudential Regulator. Note: While the same basic categories exist in the CFTC and US Prudential Regulators margin rules, the precise definitions or application of those rules could differ between the two rules.'} US_CFTC_PR_EligibleCollateralAssetClass
}

Enum {meta::pure::profiles::doc.doc = 'The specification of whether a percentage rate change, used to calculate a change in notional outstanding, is expressed as a percentage of the initial notional amount or the previously outstanding notional amount. The specification of whether a percentage rate change, used to calculate a change in notional outstanding, is expressed as a percentage of the initial notional amount or the previously outstanding notional amount. - For use with pre-trade Credit Limit Check messages.'} FpML::model::StepRelativeToEnum
{
  Initial,
  Previous
}

Enum {meta::pure::profiles::doc.doc = 'Defines the value of the commodity return calculation formula as simple or compound. The simple return formula is: [ [P sub t - P sub (t-1)] / [P sub (t-1)] ] - 1 where: P sub t is the price or index level at time period t and P sub t-1 is the price or index level in time period t-1. The compound return formula is the geometric average return for the period: PI from d=1 to d=n [ [ [ [P sub t - P sub (t-1)] / [P sub (t-1)] ] + 1] sup (1 / n) ] - 1 where: PI is the product operator, p sub t is the price or index level at time period t, p sub t -1 is the price or index level at time period t-1'} FpML::model::CommodityReturnCalculationFormulaEnum
{
  SimpleFormula,
  CompoundFormula
}

Enum {meta::pure::profiles::doc.doc = 'Represents an enumeration list to identify tranched or untranched credit risk.'} model::external::cdm::CreditRiskEnum
{
  {meta::pure::profiles::doc.doc = 'Indicates tranched credit risk, including securitizations.'} TranchedCreditRisk,
  {meta::pure::profiles::doc.doc = 'Indicates tranched credit risk, including repackagings.'} UntranchedCreditRisk
}

Enum {meta::pure::profiles::doc.doc = 'The specification of whether resets occur relative to the first or last day of a calculation period. The specification of whether resets occur relative to the first or last day of a calculation period. - For use with pre-trade Credit Limit Check messages.'} FpML::model::ResetRelativeToEnum
{
  CalculationPeriodStartDate,
  CalculationPeriodEndDate
}

Enum {meta::pure::profiles::doc.doc = 'Represents the enumeration values to specify the margin type in relation to bilateral or regulatory obligation.'} model::external::cdm::RegMarginTypeEnum
{
  {meta::pure::profiles::doc.doc = 'Indicates Variation Margin'} VM,
  {meta::pure::profiles::doc.doc = 'Indicates Regulatory Initial Margin'} RegIM,
  {meta::pure::profiles::doc.doc = 'Indicates Non Regulatory Initial margin or independent amount'} NonRegIM
}

Enum {meta::pure::profiles::doc.doc = 'The enumeration values to qualify the timestamps that can be associated with a lifecycle event. The reason for such approach is that the experience of integrating the DTCC and CME data representations suggests that a wide set of timestamps are currently utilized among service providers, while there is not at present an objective set of criteria that could help suggest a defined set of timestamps as part of the CDM. Implementers are expected to evaluate the current enumeration values to determine whether those meet their requirements. If not, they are expected to engage with the CDM team to evaluate the addition of further value(s) to this enumeration, which will then participate to the development of a compendium for further evaluation at a later point in order to determine whether this modeling is appropriate.'} model::external::cdm::EventTimestampQualificationEnum
{
  {meta::pure::profiles::doc.doc = 'The date and time on the trade was cleared.'} clearingDateTime,
  {meta::pure::profiles::doc.doc = 'The date and time on which trade was confirmed as cleared.'} clearingConfirmationDateTime,
  {meta::pure::profiles::doc.doc = 'The date and time on which the event was submitted for clearing.'} clearingSubmissionDateTime,
  {meta::pure::profiles::doc.doc = 'The date and time on which the event was created.'} eventCreationDateTime,
  {meta::pure::profiles::doc.doc = 'The date and time on which the event will be considered expired.'} eventExpirationDateTime,
  {meta::pure::profiles::doc.doc = 'The date and time on which the event was processed.'} eventProcessingDateTime,
  {meta::pure::profiles::doc.doc = 'The date and time on which the event was sent.'} eventSentDateTime,
  {meta::pure::profiles::doc.doc = 'The date and time on which the event was submitted.'} eventSubmittedDateTime,
  {meta::pure::profiles::doc.doc = 'The date and time on which the trade execution was performed.'} executionDateTime,
  {meta::pure::profiles::doc.doc = 'The date and time on which the transaction has been created. This timestamp is specified as such by the CME ClearPort Matched IRS Trade submission API specification: \'The transaction date time of the trade. Represents the date & time on which the trade was initially generated either by CME Clearing or firm. The transaction date time may be assigned by CME Clearing at the point the trade is reported as cleared. Transaction date time can also be provided by an external submitter of the trade at the point the trade is submitted.\''} transactionCreationDateTime
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify a set of standard contract definitions relevant to the transaction.'} model::external::cdm::ContractualDefinitionsEnum
{
  {meta::pure::profiles::doc.doc = 'ISDA 1991 Definitions'} ISDA1991,
  {meta::pure::profiles::doc.doc = 'ISDA 1993 Commodity Derivatives Definitions'} ISDA1993Commodity,
  {meta::pure::profiles::doc.doc = 'ISDA 1996 Equity Derivatives Definitions'} ISDA1996Equity,
  {meta::pure::profiles::doc.doc = 'ISDA 1997 Bullion Definitions'} ISDA1997Bullion,
  {meta::pure::profiles::doc.doc = 'ISDA 1997 Government Bond Option Definitions'} ISDA1997GovernmentBond,
  {meta::pure::profiles::doc.doc = 'ISDA 1998 FX and Currency Option Definitions'} ISDA1998FX,
  {meta::pure::profiles::doc.doc = 'ISDA 1999 Credit Derivatives Definitions'} ISDA1999Credit,
  {meta::pure::profiles::doc.doc = 'ISDA 2000 Definitions'} ISDA2000,
  {meta::pure::profiles::doc.doc = 'ISDA 2002 Equity Derivatives Definitions'} ISDA2002Equity,
  {meta::pure::profiles::doc.doc = 'ISDA 2003 Credit Derivatives Definitions'} ISDA2003Credit,
  {meta::pure::profiles::doc.doc = 'ISDA 2004 Novation Definitions'} ISDA2004Novation,
  {meta::pure::profiles::doc.doc = 'ISDA 2005 Commodity Derivatives Definitions'} ISDA2005Commodity,
  {meta::pure::profiles::doc.doc = 'ISDA 2006 Definitions'} ISDA2006,
  {meta::pure::profiles::doc.doc = 'ISDA 2006 Inflation Derivatives Definitions'} ISDA2006Inflation,
  {meta::pure::profiles::doc.doc = 'ISDA 2008 Inflation Derivatives Definitions'} ISDA2008Inflation,
  {meta::pure::profiles::doc.doc = 'ISDA 2011 Equity Derivatives Definitions'} ISDA2011Equity,
  {meta::pure::profiles::doc.doc = 'ISDA 2014 Credit Derivatives Definitions'} ISDA2014Credit
}

Enum {meta::pure::profiles::doc.doc = 'Denotes the method of collateral value allocation'} FpML::model::CollateralValueAllocationEnum
{
  Buffer,
  Full,
  ExcessOverMargin,
  Margin
}

Enum {meta::pure::profiles::doc.doc = 'Represents the enumeration values to specify the role of the party in relation to a regulatory initial margin call.'} model::external::cdm::RegIMRoleEnum
{
  {meta::pure::profiles::doc.doc = 'Indicates \'Pledgor\' party of initial margin call.'} Pledgor,
  {meta::pure::profiles::doc.doc = 'Indicates \'Secured\' party of initial margin call.'} Secured
}

Enum {meta::pure::profiles::doc.doc = 'The specification of a weekly roll day. The specification of a weekly roll day. - For use with pre-trade Credit Limit Check messages.'} FpML::model::WeeklyRollConventionEnum
{
  MON,
  TUE,
  WED,
  THU,
  FRI,
  SAT,
  SUN,
  TBILL
}

Enum {meta::pure::profiles::doc.doc = 'A list describing the type of documentation used to settle a secondary market syndicated loan trade.'} FpML::model::LoanTradingDocTypeEnum
{
  Distressed,
  Par
}

Enum {meta::pure::profiles::doc.doc = 'A day of the seven-day week, plus codes for weekends and weekdays.'} FpML::model::DayOfWeekExtEnum
{
  MON,
  TUE,
  WED,
  THU,
  FRI,
  SAT,
  SUN,
  WD,
  WN
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify condition(s) required by a party from the other party to hold its posted collateral. ISDA 2016 Credit Support Annex for Variation Margin, paragraph 13, (h)(i): Eligibility to Hold Posted Collateral (VM); Custodians (VM).'} model::external::cdm::HoldingPostedCollateralEnum
{
  {meta::pure::profiles::doc.doc = 'The provisions specified in Paragraph 6 (c) of the SDA 2016 Credit Support Annex for Variation Margin apply as such.'} NoElection,
  {meta::pure::profiles::doc.doc = 'The custodian is acceptable to the other party to the agreement.'} AcceptableCustodian
}

Enum {meta::pure::profiles::doc.doc = 'The method by which the Flat Rate is calculated for a commodity freight transaction.'} FpML::model::FlatRateEnum
{
  Fixed,
  Floating
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify the application of Interest Amount with respect to the Delivery Amount through standard language. ISDA 2016 Japanese Law Credit Support Annex for Initial Margin, paragraph 13, General Principles, (n)(ii).'} model::external::cdm::DeliveryAmountElectionEnum
{
  {meta::pure::profiles::doc.doc = 'The delivery only includes `Transfer on last Local Business Day`. ISDA 2016 Japanese Law Credit Support Annex for Initial Margin, paragraph 13, General Principles, (n)(ii).'} LastLocalBusinessDay,
  {meta::pure::profiles::doc.doc = 'The delivery includes both `Transfer on last Local Business Day` and `Transfer a Delivery Amount (IM) consisting of cash on any Local Business Day.`'} LastAndAnyLocalBusinessDay
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify a scheme of transaction types specified in the Equity Derivatives Settlement Matrix.'} model::external::cdm::MatrixTermEnum
{
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of ASIA CORPORATE.'} AsiaCorporate,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of ASIA FINANCIAL CORPORATE.'} AsiaFinancialCorporate,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of ASIA SOVEREIGN.'} AsiaSovereign,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of AUSTRALIA CORPORATE.'} AustraliaCorporate,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of AUSTRALIA FINANCIAL CORPORATE.'} AustraliaFinancialCorporate,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of AUSTRALIA SOVEREIGN.'} AustraliaSovereign,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of EMERGING EUROPEAN AND MIDDLE EASTERN SOVEREIGN.'} EmergingEuropeanAndMiddleEasternSovereign,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of EMERGING EUROPEAN CORPORATE.'} EmergingEuropeanCorporate,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of EMERGING EUROPEAN CORPORATE LPN.'} EmergingEuropeanCorporateLPN,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of EMERGING EUROPEAN FINANCIAL CORPORATE.'} EmergingEuropeanFinancialCorporate,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of EMERGING EUROPEAN FINANCIAL CORPORATE LPN.'} EmergingEuropeanFinancialCorporateLPN,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of EUROPEAN COCO FINANCIAL CORPORATE.'} EuropeanCoCoFinancialCorporate,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of EUROPEAN CORPORATE.'} EuropeanCorporate,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of EUROPEAN FINANCIAL CORPORATE.'} EuropeanFinancialCorporate,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of EUROPEAN SENIOR NON PREFERRED FINANCIAL CORPORATE.'} EuropeanSeniorNonPreferredFinancialCorporate,
  {meta::pure::profiles::doc.doc = 'The ISDA-published 2011 Index Volatility Swap Agreement for Open Markets.'} IVS1OpenMarkets,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of JAPAN CORPORATE.'} JapanCorporate,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of JAPAN FINANCIAL CORPORATE.'} JapanFinancialCorporate,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of JAPAN SOVEREIGN.'} JapanSovereign,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of LATIN AMERICA CORPORATE.'} LatinAmericaCorporate,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of LATIN AMERICA CORPORATE B.'} LatinAmericaCorporateBond,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of LATIN AMERICA CORPORATE BL.'} LatinAmericaCorporateBondOrLoan,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of LATIN AMERICA FINANCIAL CORPORATE B.'} LatinAmericaFinancialCorporateBond,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of LATIN AMERICA FINANCIAL CORPORATE BL.'} LatinAmericaFinancialCorporateBondOrLoan,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of LATIN AMERICA SOVEREIGN.'} LatinAmericaSovereign,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of NEW ZEALAND CORPORATE.'} NewZealandCorporate,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of NEW ZEALAND FINANCIAL CORPORATE.'} NewZealandFinancialCorporate,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of NEW ZEALAND SOVEREIGN.'} NewZealandSovereign,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of NORTH AMERICAN CORPORATE.'} NorthAmericanCorporate,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of NORTH AMERICAN FINANCIAL CORPORATE.'} NorthAmericanFinancialCorporate,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of SINGAPORE CORPORATE.'} SingaporeCorporate,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of SINGAPORE FINANCIAL CORPORATE.'} SingaporeFinancialCorporate,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of SINGAPORE SOVEREIGN.'} SingaporeSovereign,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of STANDARD ASIA CORPORATE.'} StandardAsiaCorporate,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of STANDARD ASIA FINANCIAL CORPORATE.'} StandardAsiaFinancialCorporate,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of STANDARD ASIA SOVEREIGN.'} StandardAsiaSovereign,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of STANDARD AUSTRALIA CORPORATE.'} StandardAustraliaCorporate,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of STANDARD AUSTRALIA FINANCIAL CORPORATE.'} StandardAustraliaFinancialCorporate,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of STANDARD AUSTRALIA SOVEREIGN.'} StandardAustraliaSovereign,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of STANDARD EMERGING EUROPEAN AND MIDDLE EASTERN SOVEREIGN.'} StandardEmergingEuropeanAndMiddleEasternSovereign,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of STANDARD EMERGING EUROPEAN CORPORATE.'} StandardEmergingEuropeanCorporate,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of STANDARD EMERGING EUROPEAN CORPORATE LPN.'} StandardEmergingEuropeanCorporateLPN,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of STANDARD EMERGING EUROPEAN FINANCIAL CORPORATE.'} StandardEmergingEuropeanFinancialCorporate,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of STANDARD EMERGING EUROPEAN FINANCIAL CORPORATE LPN.'} StandardEmergingEuropeanFinancialCorporateLPN,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of STANDARD EUROPEAN COCO FINANCIAL CORPORATE.'} StandardEuropeanCoCoFinancialCorporate,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of STANDARD EUROPEAN CORPORATE.'} StandardEuropeanCorporate,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of STANDARD EUROPEAN FINANCIAL CORPORATE.'} StandardEuropeanFinancialCorporate,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of STANDARD EUROPEAN SENIOR NON PREFERRED FINANCIAL CORPORATE.'} StandardEuropeanSeniorNonPreferredFinancialCorporate,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of STANDARD JAPAN CORPORATE.'} StandardJapanCorporate,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of STANDARD JAPAN FINANCIAL CORPORATE.'} StandardJapanFinancialCorporate,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of STANDARD JAPAN SOVEREIGN.'} StandardJapanSovereign,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of STANDARD LATIN AMERICA CORPORATE B.'} StandardLatinAmericaCorporateBond,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of STANDARD LATIN AMERICA CORPORATE BL.'} StandardLatinAmericaCorporateBondOrLoan,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of STANDARD LATIN AMERICA FINANCIAL CORPORATE B.'} StandardLatinAmericaFinancialCorporateBond,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of STANDARD LATIN AMERICA FINANCIAL CORPORATE BL.'} StandardLatinAmericaFinancialCorporateBondOrLoan,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of STANDARD LATIN AMERICA SOVEREIGN.'} StandardLatinAmericaSovereign,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of STANDARD NEW ZEALAND CORPORATE.'} StandardNewZealandCorporate,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of STANDARD NEW ZEALAND FINANCIAL CORPORATE.'} StandardNewZealandFinancialCorporate,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of STANDARD NEW ZEALAND SOVEREIGN.'} StandardNewZealandSovereign,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of STANDARD NORTH AMERICAN CORPORATE.'} StandardNorthAmericanCorporate,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of STANDARD NORTH AMERICAN FINANCIAL CORPORATE.'} StandardNorthAmericanFinancialCorporate,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of STANDARD SINGAPORE CORPORATE.'} StandardSingaporeCorporate,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of STANDARD SINGAPORE FINANCIAL CORPORATE.'} StandardSingaporeFinancialCorporate,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of STANDARD SINGAPORE SOVEREIGN.'} StandardSingaporeSovereign,
  {meta::pure::profiles::doc.doc = 'Transaction Type of STANDARD SUBORDINATED EUROPEAN INSURANCE CORPORATE.'} StandardSubordinatedEuropeanInsuranceCorporate,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of STANDARD SUKUK FINANCIAL CORPORATE.'} StandardSukukFinancialCorporate,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of STANDARD U.S. MUNICIPAL FULL FAITH AND CREDIT.'} StandardUSMunicipalFullFaithAndCredit,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of STANDARD U.S. MUNICIPAL GENERAL FUND.'} StandardUSMunicipalGeneralFund,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of STANDARD U.S. MUNICIPAL REVENUE.'} StandardUSMunicipalRevenue,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of STANDARD WESTERN EUROPEAN SOVEREIGN.'} StandardWesternEuropeanSovereign,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of SUBORDINATED EUROPEAN INSURANCE CORPORATE.'} SubordinatedEuropeanInsuranceCorporate,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of SUKUK CORPORATE.'} SukukCorporate,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of SUKUK FINANCIAL CORPORATE.'} SukukFinancialCorporate,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of SUKUK SOVEREIGN.'} SukukSovereign,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of U.S. MUNICIPAL FULL FAITH AND CREDIT.'} USMunicipalFullFaithAndCredit,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of U.S. MUNICIPAL GENERAL FUND.'} USMunicipalGeneralFund,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of U.S. MUNICIPAL REVENUE.'} USMunicipalRevenue,
  {meta::pure::profiles::doc.doc = 'Matrix Transaction Type of WESTERN EUROPEAN SOVEREIGN.'} WesternEuropeanSovereign
}

Enum {meta::pure::profiles::doc.doc = 'The type of electricity product.'} FpML::model::ElectricityProductTypeEnum
{
  Electricity
}

Enum {meta::pure::profiles::doc.doc = 'What calculation type is required, averaging or compounding. This enumeration is used to represent the definitions of modular calculated rates as described in the 2021 ISDA Definitions, section 7.'} model::external::cdm::CalculationMethodEnum
{
  {meta::pure::profiles::doc.doc = 'Averaging, i.e. arithmetic averaging.'} Averaging,
  {meta::pure::profiles::doc.doc = 'Compounding, i.e. geometric averaging following an ISDA defined formula.'} Compounding,
  {meta::pure::profiles::doc.doc = 'A rate based on an index that is computed by a rate administrator.  The user is responsible for backing out the rate by applying a simple formula.'} CompoundedIndex
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify the type of telephone number, e.g. work vs. mobile.'} model::external::cdm::TelephoneTypeEnum
{
  {meta::pure::profiles::doc.doc = 'A number used primarily for work-related calls. Includes home office numbers used primarily for work purposes.'} Work,
  {meta::pure::profiles::doc.doc = 'A number on a mobile telephone that is often or usually used for work-related calls. This type of number can be used for urgent work related business when a work number is not sufficient to contact the person or firm.'} Mobile,
  {meta::pure::profiles::doc.doc = 'A number used primarily for work-related facsimile transmissions.'} Fax,
  {meta::pure::profiles::doc.doc = 'A number used primarily for non work-related calls. (Normally this type of number would be used only as an emergency backup number, not as a regular course of business).'} Personal
}

Enum {meta::pure::profiles::doc.doc = 'Represents the enumeration values to identify the collateral action instruction.'} model::external::cdm::MarginCallActionEnum
{
  {meta::pure::profiles::doc.doc = 'Indicates an instruction of a new collateral asset delivery.'} Delivery,
  {meta::pure::profiles::doc.doc = 'Indicates an instruction for a return of a principals collateral asset delivery.'} Return
}

Enum {meta::pure::profiles::doc.doc = 'Represents the enumeration indicators to specify if an asset or group of assets valuation is based on any valuation treatment haircut.'} model::external::cdm::HaircutIndicatorEnum
{
  {meta::pure::profiles::doc.doc = 'Indicates Pre haircut value'} PreHaircut,
  {meta::pure::profiles::doc.doc = 'Indicates Post haircut value'} PostHaircut
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify the Execution Location of a Security Agreement'} model::external::cdm::ExecutionLocationEnum
{
  {meta::pure::profiles::doc.doc = 'The Agreement was executed outside of Belgium'} ExecutedOutsideBelgium,
  {meta::pure::profiles::doc.doc = 'The Agreement was executed outside of Belgium'} ExecutedInBelgium,
  {meta::pure::profiles::doc.doc = 'An alternative approach is described in the document as follows.'} OtherLocation
}

Enum {meta::pure::profiles::doc.doc = 'Provides the enumerated values to specify the product identifier source.'} model::external::cdm::ProductIdTypeEnum
{
  {meta::pure::profiles::doc.doc = 'Published by Bloomberg, the BBGID is a 12-digit alphanumeric randomly generated ID covering active and non-active securities.'} BBGID,
  {meta::pure::profiles::doc.doc = 'Published by Bloomberg as a short code to identify publicly trades shares of a particular stock on a specific exchange.'} BBGTICKER,
  {meta::pure::profiles::doc.doc = 'Derived from the Committee on Uniform Security Identification Procedures, CUSIPs are 9-character identifiers that capture an issue\u2019s important differentiating characteristics for issuers and their financial instruments in the U.S. and Canada.'} CUSIP,
  {meta::pure::profiles::doc.doc = 'Issued under the guidelines of the Object Management Group, the Financial Instrument Global Identifier (FIGI) is a 12 character, alphanumeric, randomly generated ID covering hundreds of millions of active and inactive instruments. The identifier acts as a Uniform Resource Identifier (URI) to link to a set of metadata that uniquely and clearly describes the instrument.'} FIGI,
  {meta::pure::profiles::doc.doc = 'Issued by the International Swaps Dealers Association as a string representing a Commodity Reference Price used for purposes of determining a relevant price for an underlying commodity in an OTC derivatives contract.'} ISDACRP,
  {meta::pure::profiles::doc.doc = 'Issued by The International Securities Identification Number (ISIN) Organization, the ISIN is a 12-character alpha-numerical code used to uniformly identify a security for trading and settlement purposes. Securities with which ISINs can be used include debt securities, such as notes or bonds as well shares, such as common stock or shares of a fund, options, derivatives, and futures. The ISIN structure is defined in ISO 6166.'} ISIN,
  {meta::pure::profiles::doc.doc = 'Issued by Refinitiv (formerly Reuters), the Reuters Instrument Codes(RIC) uniquely identifies financial instruments, including where they are traded.'} RIC,
  {meta::pure::profiles::doc.doc = 'Used when the source is not otherwise in this enumerated list because it is internal or other reasons.  The source can be identified in the scheme which is part of the identifier attribute.'} Other,
  {meta::pure::profiles::doc.doc = 'Issued by the French Soci\u00E9t\u00E9 Interprofessionnelle pour la Compensation des Valeurs Mobili\u00E8res (SICOVAM) to identify French securities listed on French stock exchanges.'} Sicovam,
  {meta::pure::profiles::doc.doc = 'Assigned by the London Stock Exchange, the Stock Exchange Daily Official List (SEDOL) is a list of security identifiers used in the United Kingdom and Ireland for clearing purposes.  SEDOLs serve as the National Securities Identifying Number for all securities issued in the United Kingdom and are therefore part of the security\'s ISIN as well.'} SEDOL,
  {meta::pure::profiles::doc.doc = 'Assigned by the Derivatives Service Bureau Ltd (DSB), the Unique Product Identifier (UPI) is a unique code to describe an over-the-counter (OTC) derivatives product.  The UPI is used for identifying the product in transaction reporting data.'} UPI,
  {meta::pure::profiles::doc.doc = 'Issued by the Institute for the Issuance and Administration of Securities in Germany (Securities Information), the Wertpapierkennnummer (WKN, WPKN, WPK or simply Wert) consists of six digits or capital letters (excluding I and O), and no check digit. It is used to identify German securities.'} Wertpapier
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify the settlement rate options as specified in the Annex A to the 1998 FX and Currency Options Definitions.'} model::external::cdm::SettlementRateOptionEnum
{
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Argentine Peso/U.S. Dollar Specified Rate, expressed as the amount of Argentine Pesos per one U.S. Dollar, for settlement on the same day (or, if such day is not a Business Day in New York, for settlement on the first succeeding day that is a Business Day in both Buenos Aires and New York) which appears on the Reuters Screen BNAR Page at the close of business in Buenos Aires on that Rate Calculation Date.'} ARS_BNAR_ARS01,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Argentine Peso/U.S. Dollar Specified Rate for U.S. Dollars, expressed as the amount of Argentine Pesos per one U.S. Dollar, for settlement on the same day, as published on EMTA\'s web site (www.emta.org) at approximately 1:00 p.m. (Buenos Aires time), or as soon thereafter as practicable, on such Rate Calculation Date. The Spot Rate shall be calculated by EMTA (or a service provider EMTA may select in its sole discretion) pursuant to the EMTA ARS Indicative Survey Methodology (which means a methodology, dated as of January 2, 2003, as amended from time to time, for a centralized industry-wide survey of financial institutions that are active participants in the Argentine Peso/U.S. Dollar markets for the purpose of determining the EMTA ARS Indicative Survey Rate).'} ARS_EMTA_INDICATIVE_SURVEY_RATE_ARS04,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Argentine Peso/U.S. Dollar Specified Rate for U.S. Dollars, expressed as the amount of Argentine Pesos per one U.S. Dollar, for settlement on the same day, as published on EMTA\'s web site (www.emta.org) at approximately 1:00 p.m. (Buenos Aires time), or as soon thereafter as practicable, on such Rate Calculation Date. The Spot Rate shall be calculated by EMTA (or a service provider EMTA may select in its sole discretion) pursuant to the EMTA ARS Industry Survey Methodology (which means a methodology, dated as of January 2, 2003, as amended from time to time, for a centralized industry-wide survey of financial institutions in Buenos Aires that are active participants in the Argentine Peso/U.S. Dollar spot markets for the purpose of determining the EMTA ARS Industry Survey Rate).'} ARS_EMTA_INDUSTRY_SURVEY_RATE_ARS03,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the volume weighted average Argentine Peso/U.S. Dollar Rate of all trades executed in the electronic market for a Rate Calculation Day expressed as the amount of Argentine Pesos per one U.S. Dollar, for settlement on the same day, reported by the Mercado Abierto Electronico (the \'MAE\') at approximately 3:00 pm, Buenos Aires time, and published on the FOREX-MAE Page as the \'PPN\' rate (\'Promedio Ponderado Noticiado\') on www.mae.com.ar on that Rate Calculation Date.'} ARS_MAE_ARS05,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Argentine Peso/U.S. Dollar offered rate for U.S. Dollars, expressed as the amount of Argentine Pesos per one U.S. Dollar, for settlement on the same day quoted by Banco de la Nacion (in accordance with the Convertibility Law of March 27, 1991 and Regulatory Decree No. 529/91 of April 1, 1991, as may be amended from time to time) for that Rate Calculation Date.'} ARS_OFFICIAL_RATE_ARS02,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Brazilian Real/U.S. Dollar Specified Rate, expressed as the amount of Brazilian Reais per one U.S. Dollar, for settlement in two Business Days (where such days are Business Days in both Sao Paulo and New York) which appears on the Reuters Screen BRBY Page under the caption \'INTBK FLTING (LAST)\' at approximately 11:00 a.m., Sao Paulo time, on that Rate Calculation Date.'} BRL_BRBY_BRL01,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Brazilian Real/U.S. Dollar Specified Rate for U.S. Dollars, expressed as the amount of Brazilian Reais per one U.S. Dollar, for settlement in two Business Days, as published on EMTA\'s web site (www.emta.org) at approximately 12:00 p.m. (Sao Paulo time), or as soon thereafter as practicable, on such Rate Calculation Date. The Spot Rate shall be calculated by EMTA (or a service provider EMTA may select in its sole discretion) pursuant to the EMTA BRL Indicative Survey Methodology (which means a methodology, dated as of March 1, 2004, as amended from time to time, for a centralized industry-wide survey of financial institutions that are active participants in the Brazilian Real/U.S. Dollar markets for the purpose of determining the EMTA BRL Indicative Survey Rate).'} BRL_EMTA_INDICATIVE_SURVEY_RATE_BRL13,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Brazilian Real/U.S. Dollar Specified Rate for U.S. Dollars, expressed as the amount of Brazilian Reais per one U.S. Dollar, for settlement in two Business Days, as published on EMTA\'s web site (www.emta.org) at approximately 3:45 p.m. (Sao Paulo time), or as soon thereafter as practicable, on such Rate Calculation Date. The Spot Rate shall be calculated by EMTA (or a service provider EMTA may select in its sole discretion) pursuant to the EMTA BRL Industry Survey Methodology (which means a methodology, dated as of March 1, 2004, as amended from time to time, for a centralized industry-wide survey of financial institutions in Brazil that are active participants in the Brazilian Real/U.S. Dollar spot markets for the purpose of determining the EMTA BRL Industry Survey Rate).'} BRL_EMTA_INDUSTRY_SURVEY_RATE_BRL12,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Brazilian Real/U.S. Dollar Specified Rate, expressed as the amount of Brazilian Reais per one U.S. Dollar, for settlement in two Business Days (where such days are Business Days in both Sao Paulo and New York) reported by the Banco Central do Brasil in the \'Diario Oficial da Uniao\' on the first Business Day following that Rate Calculation Date.'} BRL_OFFICIAL_RATE_BRL02,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Brazilian Real/U.S. Dollar commercial rate, expressed as the amount of Brazilian Reais per one U.S. Dollar, for settlement in two Business Days (where such days are Business Days in both Sao Paulo and New York) reported by the Banco Central do Brasil on SISBACEN Data System under transaction code PCOT- 390, Option 3, at the Specified Time, if any, on that Rate Calculation Date.'} BRL_PCOT_COMMERCIAL_BRL03,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Brazilian Real/U.S. Dollar floating rate, expressed as the amount of Brazilian Reais per one U.S. Dollar, for settlement in two Business Days (where such days are Business Days in both Sao Paulo and New York) reported by the Banco Central do Brasil on SISBACEN Data System under transaction code PCOT- 390, Option 3, at the Specified Time, if any, on that Rate Calculation Date.'} BRL_PCOT_FLOATING_BRL04,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Brazilian Real/U.S. Dollar offered rate for U.S. Dollars, expressed as the amount of Brazilian Reais per one U.S. Dollar, for settlement in two Business Days reported by the Banco Central do Brasil on SISBACEN Data System under transaction code PTAX-800 (\'Consulta de Cambio\' or Exchange Rate Inquiry), Option 5 (\'Cotacoes para Contabilidade\' or \'Rates for Accounting Purposes\') by approximately 6:00 p.m., Sao Paulo time, on that Rate Calculation Date.'} BRL_PTAX_BRL09,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Brazilian Real/U.S. Dollar commercial rate, expressed as the amount of Brazilian Reais per one U.S. Dollar, for settlement in two Business Days (where such days are Business Days in both Sao Paulo and New York) reported by the Banco Central do Brasil which appears on the Reuters Screen BRFR Page at PTAX-800 as of 11:00 a.m., Sao Paulo time, on the first Business Day following that Rate Calculation Date. 23'} BRL_PTAX_COMMERCIAL_BRFR_BRL06,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Brazilian Real/U.S. Dollar commercial rate, expressed as the amount of Brazilian Reais per one U.S. Dollar, for settlement in two Business Days (where such days are Business Days in both Sao Paulo and New York) reported by the Banco Central do Brasil on SISBACEN Data System under transaction code PTAX- 800 (\'Consultas de Cambio\' or Exchange Rate Inquiry), Option 5 (\'Cotacoes para Contabilidad\' or Rates for Accounting Purposes) market type \'L\' (corresponding to U.S. Dollars traded in the foreign exchange market segment officially denominated \'Livre\' and commonly known as \'Comercial\') as of 7:30 p.m., Sao Paulo time, on that Rate Calculation Date.'} BRL_PTAX_COMMERCIAL_BRL05,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Brazilian Real/U.S. Dollar floating rate, expressed as the amount of Brazilian Reais per one U.S. Dollar, for settlement in two Business Days (where such days are Business Days in both Sao Paulo and New York) reported by the Banco Central do Brasil on the SISBACEN Data System which appears on the Reuters Screen BRFR Page at PTAX-800 as of 11:00 a.m., Sao Paulo time, on the first Business Day following that Rate Calculation Date.'} BRL_PTAX_FLOATING_BRFR_BRL08,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Brazilian Real/U.S. Dollar floating rate, expressed as the amount of Brazilian Reais per one U.S. Dollar, for settlement in two Business Days (where such days are Business Days in both Sao Paulo and New York) reported by the Banco Central do Brasil on SISBACEN Data System under transaction code PTAX- 800 (\'Consultas de Cambio\' or Exchange Rate Inquiry), Option 5 (\'Cotacoes para Contabilidad\' or Rates for Accounting Purposes) market type \'F\' (corresponding to U.S. Dollars traded in the foreign exchange market segment officially denominated \'Flutuante\') as of 7:30 p.m., Sao Paulo time, on that Rate Calculation Date.'} BRL_PTAX_FLOATING_BRL07,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Chilean Peso/U.S. Dollar observado rate, expressed as the amount of Chilean Pesos per one U.S. Dollar, for settlement on the same day (or, if such day is not a Business Day in New York, for settlement on the first succeeding day that is a Business Day in both Santiago and New York) reported by the Banco Central de Chile which appears on the Reuters Screen BCCH Page under the caption \'OBSERVADO\' at 10:00 a.m., Santiago time, on the first Business Day following that Rate Calculation Date.'} CLP_BCCH_CLP01,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Chilean Peso/U.S. Dollar informal rate, expressed as the amount of Chilean Pesos per one U.S. Dollar, for settlement on the same day (or, if such day is not a Business Day in New York, for settlement on the first succeeding day that is a Business Day in both Santiago and New York) of the informal exchange market which appears on the Reuters Screen CHILD Page at the Specified Time, if any, on that Rate Calculation Date.'} CLP_CHILD_INFORMAL_CLP02,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Chilean Peso/U.S. Dollar interbank rate, expressed as the amount of Chilean Pesos per one U.S. Dollar, for settlement on the same day (or, if such day is not a Business Day in New York, for settlement on the first succeeding day that is a Business Day in both Santiago and New York) reported by the Banco Central de Chile for the formal exchange market which appears on the Reuters Screen CHILD Page at the Specified Time, if any, on that Rate Calculation Date.'} CLP_CHILD_INTERBANK_CLP03,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Chilean Peso/U.S. Dollar observado rate, expressed as the amount of Chilean Pesos per one U.S. Dollar, for settlement on the same day (or, if such day is not a Business Day in New York, for settlement on the first succeeding day that is a Business Day in both Santiago and New York) reported by the Banco Central de Chile which appears on the Reuters Screen CHILD Page on the first Business Day following that Rate Calculation Date.'} CLP_CHILD_OBSERVADO_CLP04,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Chilean Peso/U.S. Dollar informal rate, expressed as the amount of Chilean Pesos per one U.S. Dollar, for settlement on the same day (or, if such day is not a Business Day in New York, for settlement on the first succeeding day that is a Business Day in both Santiago and New York) of the informal exchange market which appears on the Reuters Screen CHILG Page at the Specified Time, if any, on that Rate Calculation Date.'} CLP_CHILG_INFORMAL_CLP05,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Chilean Peso/U.S. Dollar interbank rate, expressed as the amount of Chilean Pesos per one U.S. Dollar, for settlement on the same day (or, if such day is not a Business Day in New York, for settlement on the first succeeding day that is a Business Day in both Santiago and New York) reported by the Banco Central de Chile for the formal exchange market which appears on the Reuters Screen CHILG Page at the Specified Time, if any, on that Rate Calculation Date.'} CLP_CHILG_INTERBANK_CLP06,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Chilean Peso/U.S. Dollar observado rate, expressed as the amount of Chilean Pesos per one U.S. Dollar, for settlement on the same day (or, if such day is not a Business Day in New York, for settlement on the first succeeding day that is a Business Day in both Santiago and New York) reported by the Banco Central de Chile which appears on the Reuters Screen CHILG Page under \'OBSERVADO\' at the Specified Time, if any, on the first Business Day following that Rate Calculation Date.'} CLP_CHILG_OBSERVADO_CLP07,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Chilean Peso/U.S. Dollar \'observado\' rate, expressed as the amount of Chilean Pesos per one U.S. Dollar, for settlement in one Business Day reported by the Banco Central de Chile (www.bcentral.cl) as the \'Dolar Observado\' (Dollar Observado) rate by not later than 10:30 a.m., Santiago time, on the first Business Day following that Rate Calculation Date.'} CLP_DOLAR_OBS_CLP10,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Chilean Peso/U.S. Dollar Specified Rate for U.S. Dollars, expressed as the amount of Chilean Pesos per one U.S. Dollar, for settlement on the same day, as published on EMTA\'s web site (www.emta.org) at approximately 11:00 a.m., Santiago time, or as soon thereafter as practicable, on such Rate Calculation Date. The Spot Rate shall be calculated by EMTA (or a service provider EMTA may select in its sole discretion) pursuant to the EMTA CLP Indicative Survey Methodology (which means a methodology, dated as of August 1, 2006, as amended from time to time, for a centralized industry-wide survey of financial institutions that are active participants in the Chilean Peso/U.S. Dollar markets for the purpose of determining the EMTA CLP Indicative Survey Rate).'} CLP_EMTA_INDICATIVE_SURVEY_RATE_CLP11,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Chilean Peso/U.S. Dollar Specified Rate, expressed as the amount of Chilean Pesos per one U.S. Dollar (or, if such day is not a Business Day in New York, for settlement on the first succeeding day that is a Business Day in both Santiago and New York), calculated in accordance with Title I, Chapter 1 Number 6 of the Compendium of International Exchange Norms of the Banco Central de Chile and published by the Banco Central de Chile at the Specified Time, if any, on the first Business Day following that Rate Calculation Date.'} CLP_OFFICIAL_RATE_CLP08,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Chilean Peso/U.S. Dollar observado rate, expressed as the amount of Chilean Pesos per one U.S. Dollar, for settlement on the same day (or, if such day is not a Business Day in New York, for settlement on the first succeeding day that is a Business Day in both Santiago and New York) reported by the Banco Central de Chile which appears on the Telerate Page 38942 opposite the caption \'Observado\' at the Specified Time, if any, on the first Business Day following the Rate Calculation Date.'} CLP_TELERATE_38942_CLP09,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Chinese Renminbi/U.S. Dollar official fixing rate, expressed as the amount of Chinese Renminbi per one U.S. Dollar, for settlement in two Business Days reported by the People\'s Bank of China, Beijing, People\'s Republic of China, which appears on the Reuters Screen \'SAEC\' Page opposite the symbol \'USDCNY=\' at approximately 9:15 a.m., Beijing time, on that Rate Calculation Date.'} CNY_SAEC_CNY01,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Chinese Renminbi/U.S. Dollar Specified Rate for U.S. Dollars, expressed as the amount of Chinese Renminbi per one U.S. Dollar, for settlement in two Business Days, as published on SFEMC\'s website (www.sfemc.org) at approximately 3:30 p.m. (Singapore time), or as soon thereafter as practicable, on such Rate Calculation Date. The Spot Rate will be calculated by SFEMC (or a service provider SFEMC may select in its sole discretion) pursuant to the SFEMC CNY Indicative Survey Methodology (which means a methodology, dated as of December 1, 2004, as amended from time to time, for a centralized industry-wide survey of financial institutions that are active participants in the Chinese Renminbi/U.S. Dollar markets for the purpose of determining the SFEMC CNY Indicative Survey Rate).'} CNY_SFEMC_INDICATIVE_SURVEY_RATE_CNY02,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Colombian Peso/U.S. Dollar fixing rate, expressed as the amount of Colombian Pesos per one U.S. Dollar, for settlement on the same day (unless such day is not a Business Day in New York, then for settlement on the first succeeding day that is a Business Day in Bogota and New York) reported by the Colombian Banking Superintendency which appears on the Reuters Screen CO/COL03 Page opposite the caption \'TRCM\' (\'Tasa de Cierre Representative del Mercado\' or closing market price) at 12:00 noon, Bogota time, on the first Business Day following that Rate Calculation Date.'} COP_CO_COL03_COP01,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Colombian Peso/U.S. Dollar Specified Rate for U.S. Dollars, expressed as the amount of Colombian Pesos per one U.S. Dollar, for settlement on the same day, as published on EMTA\'s web site (www.emta.org) at approximately 11:30 a.m., Bogota time, or as soon thereafter as practicable, on such Rate Calculation Date. The Spot Rate shall be calculated by EMTA (or a service provider EMTA may select in its sole discretion) pursuant to the EMTA COP Indicative Survey Methodology (which means a methodology, dated as of August 1, 2006, as amended from time to time, for a centralized industry-wide survey of financial institutions that are active participants in the Colombian Peso/U.S. Dollar markets for the purpose of determining the EMTA COP Indicative Survey Rate).'} COP_EMTA_INDICATIVE_SURVEY_RATE_COP03,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Colombian Peso/U.S. Dollar fixing rate, expressed as the amount of Colombian Pesos per one U.S. Dollar, for settlement on the same day reported by the Colombian Financial Superintendency (www.banrep.gov.co) as the \'Tasa Representativa del Mercado (TRM)\' (also referred to as the \'Tasa de Cambio Representativa del Mercado\' (TCRM)) by not later than 10:30 a.m., Bogota time, on the first Business Day following that Rate Calculation Date.'} COP_TRM_COP02,
  {meta::pure::profiles::doc.doc = 'the Spot Rate for a Rate Calculation Date will be the Reference Currency/U.S. Dollar exchange rate, expressed as the amount of Reference Currency per one U.S. Dollar, determined on the basis of quotations provided by Reference Dealers on that Rate Calculation Date of that day\'s price of a Specified Company\'s American Depositary Receipt or American Depositary Receipts (the \'ADR\' or \'ADRs\', as appropriate) and the price of the local share or shares of such Specified Company of the same type and in the same quantity represented by such ADR or ADRs, as the case may be (the \'Share\' or \'Shares\', as appropriate). The Calculation Agent will request each of the Reference Dealers to provide a firm quotation of (A) in the case where one ADR represents less than one Share, its bid and offer price (in the Reference Currency) for one Share and its bid and offer price (in U.S. Dollars) for the number of ADRs which represent such Share and (B) in all other cases, its bid and\n\t\t\t\t\toffer price (in the Reference Currency) for the Share or Shares, as the case may be, and its bid and offer price (in U.S. Dollars) for one ADR. If one or more quotations are provided, the rate for a Rate Calculation Date will equal the ratio of (1) the arithmetic mean of the midpoint of the bid and offer prices quoted in the Reference Currency by each Reference Dealer for such Share or Shares, as the case may be, and (2) the arithmetic mean of the midpoint of the bid and offer prices quoted in U.S. Dollars by each Reference Dealer for such ADR or ADRs, as the case may be, subject to an adjustment, if any, by the Calculation Agent to reduce the effect of momentary disparities in the prices of the Share or Shares and the ADR or ADRs, as appropriate. The quotations used to determine the Spot Rate for a Rate Calculation Date will be determined in each case at the Specified Time on the Rate Calculation Date or, if no such time is specified, the time chosen by the\n\t\t\t\t\tCalculation Agent.'} CURRENCY_IMPLIED_RATE__ADR__CURA1,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Reference Currency/Settlement Currency exchange rate, expressed as the amount of Reference Currency per one unit of Settlement Currency, determined on the basis of quotations provided by Reference Dealers on that Rate Calculation Date for that day\'s price of Local Assets. The Calculation Agent will request each of the Reference Dealers to provide a firm quotation of its bid and offer price (in both the Reference Currency and the Settlement Currency) for an amount of Local Assets whose face value equals the Specified Amount. If one or more quotations are provided, the rate for a Rate Calculation Date will equal the ratio of (A) the arithmetic mean of the midpoint of the bid and offer prices quoted in the Reference Currency by each Reference Dealer for such Local Assets and (B) the arithmetic mean of the midpoint of the bid and offer prices quoted in the Settlement Currency by each Reference Dealer for such\n\t\t\t\t\tLocal Assets. The quotations used to determine the Spot Rate for a Rate Calculation Date will be determined in each case at the Specified Time on the Rate Calculation Date or, if no such time is specified, the time chosen by the Calculation Agent.'} CURRENCY_IMPLIED_RATE__LOCAL_ASSET__CURA2,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Reference Currency/Settlement Currency Specified Rate, expressed as the amount of the Reference Currency per one unit of Settlement Currency, for settlement on the Settlement Date agreed upon by the parties on or prior to that Rate Calculation Date (or, if different, the day on which rates for that date would, in the ordinary course, be published or announced).'} CURRENCY_MUTUAL_AGREEMENT_CURA3,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be determined on the basis of quotations provided by Reference Dealers on that Rate Calculation Date of that day\'s Specified Rate, expressed as the amount of Reference Currency per one unit of Settlement Currency, for settlement on the Settlement Date. The Calculation Agent will request the Specified Office of each of the Reference Dealers to provide a firm quotation of its Specified Rate for a transaction where the amount of Reference Currency equals the Specified Amount. If four quotations are provided, the rate for a Rate Calculation Date will be the arithmetic mean of the Specified Rates, without regard to the Specified Rates having the highest and lowest value. If exactly three quotations are provided, the rate for a Rate Calculation Date will be the Specified Rate provided by the Reference Dealer that remains after disregarding the Specified Rates having the highest and lowest values. For this purpose, if\n\t\t\t\t\tmore than one quotation has the same highest value or lowest value, then the Specified Rate of one of such quotations shall be disregarded. If exactly two quotations are provided, the rate for a Rate Calculation Date will be the arithmetic mean of the Specified Rates. If only one quotation is provided, the rate for a Rate Calculation Date will be the Specified Rate quoted by that Reference Dealer. The quotations used to determine the Spot Rate for a Rate Calculation Date will be determined in each case at the Specified Time on that Rate Calculation Date or, if no such time is specified, the time chosen by the Calculation Agent.'} CURRENCY_REFERENCE_DEALERS_CURA4,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be determined by the Calculation Agent on the basis of that day\'s Specified Rate, expressed as the amount of Reference Currency per one unit of Settlement Currency, in a legal and customary wholesale market in which there is no, or minimal, Governmental Authority controls or interference, except as a participant in such market.'} CURRENCY_WHOLESALE_MARKET_CURA5,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Ecuadorian Sucre/U.S. Dollar Specified Rate, expressed as the amount of Ecuadorian Sucres per one U.S. Dollar, for settlement in one Business Day (where such day is a Business Day in Guayaquil and New York) which appears on Reuters Screen DNRP Page at 12:00 noon, Guayaquil time, on that Rate Calculation Date.'} ECS_DNRP_ECS01,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Indonesian Rupiah/U.S. Dollar spot rate at 11:00 a.m., Singapore time, expressed as the amount of Indonesian Rupiah per one U.S. Dollar, for settlement in two Business Days, reported by the Association of Banks in Singapore which appears on the Telerate Page 50157 to the right of the caption \'Spot\' under the column \'IDR\' at approximately 11:30 a.m., Singapore time, on that Rate Calculation Date.'} IDR_ABS_IDR01,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Indonesian Rupiah/U.S. Dollar weighted average spot rate in the interbank market based on traded IDR/USD spot foreign exchange transactions during a specified time period which are captured on a real time basis, expressed as the amount of Indonesian Rupiah per one U.S. Dollar, for settlement in two Business Days, published by Bank Indonesia at approximately 10:00 a.m., Jakarta time, on that Rate Calculation Date as the Jakarta Interbank Spot Dollar Rate USD - IDR on Bank Indonesia\'s website or otherwise made available by Bank Indonesia (or its successor as administrator).'} IDR_JISDOR_IDR04,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Indonesian Rupiah/U.S. Dollar Specified Rate for U.S. Dollars, expressed as the amount of Indonesian Rupiah per one U.S. Dollar, for settlement in two Business Days, as published on SFEMC\'s website (www.sfemc.org) at approximately 3:30 p.m., Singapore time, or as soon thereafter as practicable, on such Rate Calculation Date. The Spot Rate will be calculated by SFEMC (or a service provider SFEMC may select in its sole discretion) pursuant to the SFEMC IDR Indicative Survey Methodology (which means a methodology, dated as of December 1, 2004, as amended from time to time, for a centralized industry-wide survey of financial institutions that are active participants in the Indonesian Rupiah/U.S. Dollar markets for the purpose of determining the SFEMC IDR Indicative Survey Rate).'} IDR_SFEMC_INDICATIVE_SURVEY_RATE_IDR02,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Indonesian Rupiah/U.S. Dollar implied spot rate expressed as the amount of Indonesian Rupiah per one U.S. Dollar, for settlement in two Business Days, reported by ABS Benchmarks Administration Co Pte. Ltd. (or its successor as administrator or sponsor of that rate), which appears on Thomson Reuters Screen ABSFIX01 Page at approximately 11:30 a.m., Singapore time, on that Rate Calculation Date.'} IDR_VWAP_IDR03,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Israeli Shekel/U.S. Dollar Specified Rate, expressed as the amount of Israeli Shekels per one U.S. Dollar, for settlement in two Business Days which appears on the Reuters Screen BOIJ Page as of 1:00 p.m., Tel Aviv time, on that Rate Calculation Date.'} ILS_BOIJ_ILS01,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Israeli Shekel/U.S. Dollar Specified Rate, expressed as the amount of Israeli Shekels per one U.S. Dollar, for settlement in two Business Days which appears on the Reuters Screen FXIL Page as of 1:00 p.m., Tel Aviv time, on that Rate Calculation Date.'} ILS_FXIL_ILS02,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Indian Rupee/U.S. Dollar reference rate, expressed as the amount of Indian Rupee per one U.S. Dollar, for settlement in two Business Days, reported by Financial Benchmarks India Pvt. Ltd. (www.fbil.org.in) at approximately 1:30 p.m., Mumbai time, or as soon thereafter as practicable, on that Rate Calculation Date.'} INR_FBIL_INR01,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Indian Rupee/U.S. Dollar reference rate, expressed as the amount of Indian Rupee per one U.S. Dollar, for settlement in two Business Days reported by the Reserve Bank of India which appears on the Reuters Screen RBIB Page at approximately 12:30 p.m., Mumbai time, or as soon thereafter as practicable, on that Rate Calculation Date.'} INR_RBIB_INR01,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Indian Rupee/U.S. Dollar Specified Rate for U.S. Dollars, expressed as the amount of Indian Rupee per one U.S. Dollar, for settlement in two Business Days, as published on SFEMC\'s website (www.sfemc.org) at approximately 3:30 p.m. (Singapore time), or as soon thereafter as practicable, on such Rate Calculation Date. The Spot Rate will be calculated by SFEMC (or a service provider SFEMC may select in its sole discretion) pursuant to the SFEMC INR Indicative Survey Methodology (which means a methodology, dated as of December 1, 2004, as amended from time to time, for a centralized industry-wide survey of financial institutions that are active participants in the Indian Rupee/U.S. Dollar markets for the purpose of determining the SFEMC INR Indicative Survey Rate).'} INR_SFEMC_INDICATIVE_SURVEY_RATE_INR02,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Korean Won/U.S. Dollar Specified Rate, expressed as the amount of Korean Won per one U.S. Dollar, for settlement in two Business Days which appears on the Reuters Screen KEBEY Page at the Specified Time, if any, on that Rate Calculation Date.'} KRW_KEBEY_KRW01,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Korean Won/U.S. Dollar market average rate, expressed as the amount of Korean Won per one U.S. Dollar, for settlement in two Business Days reported by the Korea Financial Telecommunications and Clearing Corporation which appears on the Reuters Screen KFTC18 Page to the right of the caption \'USD Today\' that is available at approximately 3:30 p.m., Seoul time, on the Rate Calculation Date or as soon thereafter as practicable.'} KRW_KFTC18_KRW02,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Korean Won/U.S. Dollar Specified Rate for U.S. Dollars, expressed as the amount of Korean Won per one U.S. Dollar, for settlement in two Business Days, as published on SFEMC\'s website (www.sfemc.org) at approximately 3:30 p.m., Singapore time, or as soon thereafter as practicable, on such Rate Calculation Date. The Spot Rate will be calculated by SFEMC (or a service provider SFEMC may select in its sole discretion) pursuant to the SFEMC KRW Indicative Survey Methodology (which means a methodology, dated as of December 1, 2004, as amended from time to time, for a centralized industry-wide survey of financial institutions that are active participants in the Korean Won/U.S. Dollar markets for the purpose of determining the SFEMC KRW Indicative Survey Rate).'} KRW_SFEMC_INDICATIVE_SURVEY_RATE_KRW04,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Korean Won/U.S. Dollar market average rate, expressed as the amount of Korean Won per one U.S. Dollar, for settlement in two Business Days reported by the Korea Financial Telecommunications and Clearing Corporation which appears on Telerate Page 45644 to the right of the caption \'USD Today\' that is available at approximately 3:30 p.m., Seoul time, on the Rate Calculation Date or as soon thereafter as practicable.'} KRW_TELERATE_45644_KRW03,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Kazakhstan Tenge / U.S. Dollar Specified Rate for U.S. Dollars, expressed as the amount of Kazakhstan Tenge per one U.S. Dollar, for settlement on the same Business Day, as published on EMTA\'s website (www.emta.org) at approximately 1:00 p.m., Almaty time, or as soon thereafter as practicable, on that Rate Calculation Date. The Spot Rate shall be calculated by EMTA (or a service provider EMTA may select in its sole discretion) pursuant to the EMTA KZT Indicative Survey Methodology (which means a methodology, dated as of March 16, 2009, as amended from time to time, for a centralized industry-wide survey of financial institutions that are active participants in the Kazakhstan Tenge/U.S. Dollar markets for the purpose of determining the EMTA KZT Indicative Survey Rate).'} KZT_EMTA_INDICATIVE_SURVEY_RATE_KZT02,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Kazakhstan Tenge / U.S. Dollar weighted average rate, expressed as the amount of Kazakhstan Tenge per one U.S. Dollar, for settlement on the same Business Day reported by the Kazakhstan Stock Exchange (www.kase.kz) at approximately 11:00 am, Almaty time, on that Rate Calculation Date.'} KZT_KASE_KZT01,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Lebanese Pound/U.S. Dollar Specified Rate, expressed as the amount of Lebanese Pounds per one U.S. Dollar, for settlement in two Business Days which appears on the Reuters Screen BDLX Page as of 12:00 noon, Beirut time, on that Rate Calculation Date.'} LBP_BDLX_LBP01,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Moroccan Dirham/U.S. Dollar Specified Rate, expressed as the amount of Moroccan Dirham per one U.S. Dollar, for settlement in two Business Days reported by the Central Bank of Morocco as of 1:00 p.m., Rabat time, on that Rate Calculation Date.'} MAD_OFFICIAL_RATE_MAD01,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Mexican Pesos/U.S. Dollar Specified rate, expressed as the amount of Mexican Pesos per one U.S. Dollar, for settlement in two Business Days reported by Banco de Mexico which appears on the Reuters Screen BNMX Page opposite the caption \'Fix\' at the close of business in Mexico City on that Rate Calculation Date.'} MXP_BNMX_MXP01,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Mexican Peso/U.S. Dollar fixing rate, expressed as the amount of Mexican Pesos per one U.S. Dollar, for settlement in two Business Days which is published by Banco de Mexico in the Official Gazette of the Federation pursuant to the \'Disposiciones aplicables a la determinacion del tipo de Cambio para solventar obligaciones denominadas en moneda extranjera pagaderas en la Republica Mexicana\' (Rules applicable to determine the exchange rate to pay obligations denominated in foreign currency payable in Mexico) on the first Business Day following that Rate Calculation Date.'} MXP_FIXING_RATE_MXP02,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Mexican Peso/U.S. Dollar fixing rate, expressed as the amount of Mexican Pesos per one U.S. Dollar, for settlement in two Business Days reported by Banco de Mexico which appears on Reuters Screen MEX01 Page under the heading \'MXNFIX=RR\', at the close of business in Mexico City on that Rate Calculation Date.'} MXP_MEX01_MXP03,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Mexican Peso/U.S. Dollar fixing rate, expressed as the amount of Mexican Pesos per one U.S. Dollar, for settlement in two Business Days which is published by the Bolsa Mexicana de Valores, S.A. de C.V. (as established in Section 2 of the \'Resolution concerning the exchange rate applicable for calculating the Mexican Peso equivalent of principal and interest of Mexican Treasury Notes denominated in foreign currency and payable in Mexican Pesos\' published in the Diario Oficial de la Federacion on November 11, 1991) in the Movimiento Diario del Mercado de Valores de la Bolsa Mexicana de Valores, S.A. de C.V. under the heading \'Movimiento Diario del Mercado de Valores\' on that Rate Calculation Date.'} MXP_PUBLISHED_MXP04,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Malaysian Ringgit/U.S. Dollar spot rate at 11:00 a.m., Singapore time, expressed as the amount of Malaysian Ringgit per one U.S. Dollar, for settlement in two Business Days, reported by the Association of Banks in Singapore, which appears on the Telerate Page 50157 to the right of the caption \'Spot\' under the column \'MYR\' at approximately 11:30 a.m., Singapore time, on that Rate Calculation Date.'} MYR_ABS_MYR01,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Malaysian Ringgit/U.S. Dollar reference rate, expressed as the amount of Malaysian Ringgit per one U.S. Dollar, for settlement in two Business Days, calculated and reported by Bank Negara Malaysia as its Kuala Lumpur USD/MYR Reference Rate, which appears on Thomson Reuters Screen MYRFIX2 Page at approximately 3:30 p.m., Kuala Lumpur time, on that Rate Calculation Date.'} MYR_KL_REF_MYR04,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Malaysian Ringgit/U.S. Dollar spot rate expressed as the amount of Malaysian Ringgit per one U.S. Dollar, for settlement in two Business Days, reported by Persatuan Pasaran Kewangan Malaysia (ACI - Malaysia), which appears on Thomson Reuters Screen MYRFIX2 Page at approximately 11:10 a.m., Kuala Lumpur time, on that Rate Calculation Date.'} MYR_PPKM_MYR03,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Malaysian Ringgit/U.S. Dollar Specified Rate for U.S. Dollars, expressed as the amount of Malaysian Ringgit per one U.S. Dollar, for settlement in two Business Days, as published on SFEMC\'s website (www.sfemc.org) at approximately 3:30 p.m., Singapore time, or as soon thereafter as practicable, on such Rate Calculation Date. The Spot Rate will be calculated by SFEMC (or a service provider SFEMC may select in its sole discretion) pursuant to the SFEMC MYR Indicative Survey Methodology (which means a methodology, dated as of July 15, 2005, as amended from time to time, for a centralized industry-wide survey of financial institutions that are active participants in the Malaysian Ringgit/U.S. Dollar markets for the purpose of determining the SFEMC MYR Indicative Survey Rate).'} MYR_SFEMC_INDICATIVE_SURVEY_RATE_MYR02,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Peruvian Sol/U.S. Dollar Specified Rate for U.S. Dollars, expressed as the amount of Peruvian Soles per one U.S. Dollar, for settlement on the same day, as published on EMTA\'s web site (www.emta.org) at approximately 11:00 a.m., Lima time, or as soon thereafter as practicable, on such Rate Calculation Date. The Spot Rate shall be calculated by EMTA (or a service provider EMTA may select in its sole discretion) pursuant to the EMTA PEN Indicative Survey Methodology (which means a methodology, dated as of August 1, 2006, as amended from time to time, for a centralized industry-wide survey of financial institutions that are active participants in the Peruvian Sol/U.S. Dollar markets for the purpose of determining the EMTA PEN Indicative Survey Rate).'} PEN_EMTA_INDICATIVE_SURVEY_RATE_PEN04,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Peruvian Sol/U.S. Dollar average exchange rate in the interbank market expressed as the amount of Peruvian New Soles per one U.S. Dollar for settlement on the same day reported by the Banco Central de Reserva del Peru (www.bcrp.gob.pe) as the \'Tipo de Cambio Interbancario Promedio\' at approximately 2:00 p.m., Lima time, on that Rate Calculation Date.'} PEN_INTERBANK_AVE_PEN05,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Peruvian Sol/U.S. Dollar fixing rate (mid market last), expressed as the amount of Peruvian Sols per one U.S. Dollar, for settlement on that same day which appears on the Reuters Screen PDSB Page opposite the caption \'PEN=\' as of 12:00 noon, Lima time, on that Rate Calculation Date.'} PEN_PDSB_PEN01,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the midpoint of the Peruvian Sol/U.S. Dollar closing weighted average bid and offer (\'compra y venta\') exchange rates expressed as the amount of Peruvian New Soles per one U.S. Dollar for settlement on the same day, reported by the Superintendencia de Banca, Seguros y AFP (www.sbs.gob.pe) of the Republic of Peru at approximately 5:00 p.m., Lima time, on that Rate Calculation Date.'} PEN_WT_AVE_PEN03,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Philippine Peso/U.S. Dollar morning weighted average rate for that Rate Calculation Date, expressed as the amount of Philippine Pesos per one U.S. Dollar, for settlement in one Business Day, sponsored by Bankers Association of the Philippines (www.bap.org.ph) as its \'BAP AM Weighted Average Rate\' at approximately 11:30 a.m., Manila time, or as soon thereafter as practicable, on that Rate Calculation Date.\n\t\t\t\t'} PHP_BAPPESO_PHP06,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Philippine Peso/U.S. Dollar morning weighted average rate for that Rate Calculation Date, expressed as the amount of Philippine Pesos per one U.S. Dollar, for settlement in one Business Day reported by the Philippine Dealing System PDEX which appears on the Reuters Screen PDSPESO Page to the right of the caption \'AM WT AVE\' at approximately 11:30 a.m., Manila time, or as soon thereafter as practicable, on that Rate Calculation Date.'} PHP_PDSPESO_PHP06,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Philippine Peso/U.S. Dollar tom rate (mid market), expressed as the amount of Philippine Pesos per one U.S. Dollar, for settlement in one Business Day which appears on the Reuters Screen PHPESO Page at approximately 11:00 a.m., Manila time, on that Rate Calculation Date.'} PHP_PHPESO_PHP01,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Philippine Peso/U.S. Dollar Specified Rate for U.S. Dollars, expressed as the amount of Philippine Pesos per one U.S. Dollar, for settlement in one Business Day, as published on SFEMC\'s website (www.sfemc.org) at approximately 3:30 p.m., Singapore time, or as soon thereafter as practicable, on such Rate Calculation Date. The Spot Rate will be calculated by SFEMC (or a service provider SFEMC may select in its sole discretion) pursuant to the SFEMC PHP Indicative Survey Methodology (which means a methodology, dated as of December 1, 2004, as amended from time to time, for a centralized industry-wide survey of financial institutions that are active participants in the Philippine Peso/U.S. Dollar markets for the purpose of determining the SFEMC PHP Indicative Survey Rate).'} PHP_SFEMC_INDICATIVE_SURVEY_RATE_PHP05,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Philippine Peso/U.S. Dollar tom rate (mid market), expressed as the amount of Philippine Pesos per one U.S. Dollar, for settlement in one Business Day which appears on the Telerate Page 15439 at approximately 11:00 a.m., Manila time, on that Rate Calculation Date.'} PHP_TELERATE_15439_PHP03,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Philippine Peso/U.S. Dollar Specified Rate, expressed as the amount of Philippine Pesos per one U.S. Dollar, for settlement in one Business Day which appears on the Telerate Page 2920 at the Specified Time, if any, on that Rate Calculation Date.'} PHP_TELERATE_2920_PHP02,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Pakistani Rupee/U.S. Dollar reference rate expressed as the amount of Pakistani Rupees per one U.S. Dollar, for settlement in two Business Days reported by the State Bank of Pakistan (www.sbp.org.pk) at approximately 2:30 pm, Karachi time, on that Rate Calculation Date.'} PKR_SBPK_PKR01,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Pakistani Rupee/U.S. Dollar Specified Rate for U.S. Dollars, expressed as the amount of Pakistani Rupees per one U.S. Dollar, for settlement in two Business Days, as published on SFEMC\'s website (www.sfemc.org) at approximately 3:30 p.m. Singapore time, or as soon thereafter as practicable, on that Rate Calculation Date. The Spot Rate shall be calculated by SFEMC (or a service provider SFEMC may select in its sole discretion) pursuant to the SFEMC PKR Indicative Survey Methodology (which means a methodology, dated as of July 14, 2008, as amended from time to time, for a centralized industry-wide survey of financial institutions that are active participants in the Pakistani Rupee/U.S. Dollar markets for the purpose of determining the SFEMC PKR Indicative Survey Rate).'} PKR_SFEMC_INDICATIVE_SURVEY_RATE_PKR02,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Polish Zloty/U.S. Dollar Specified Rate, expressed as the amount of Polish Zloty per one U.S. Dollar, for settlement in two Business Days reported by the National Bank of Poland which appears on the Reuters Screen NBPQ Page at the Specified Time, if any, on that Rate Calculation Date.'} PLZ_NBPQ_PLZ01,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Polish Zloty/U.S. Dollar fixing rate, expressed as the amount of Polish Zloty per one U.S. Dollar, for settlement in two Business Days reported by the National Bank of Poland which appears on the Reuters Screen NBPR Page at the Specified Time, if any, on that Rate Calculation Date.'} PLZ_NBPR_PLZ02,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Russian Ruble/U.S. Dollar Specified Rate, expressed as the amount of Russian Rubles per one U.S. Dollar, for settlement in one Business Day, calculated by the Chicago Mercantile Exchange (\'CME\') and as published on CME\'s website, which appears on the Reuters Screen EMTA Page, at approximately 1:30 p.m., Moscow time, on that Rate Calculation Date. The Spot Rate shall be calculated by the CME pursuant to the Chicago Mercantile Exchange / EMTA, Inc. Daily Russian Ruble Per U.S. Dollar Reference Rate Methodology (which means a methodology, effective as of June 16, 2005, as amended from time to time, for a centralized industry-wide survey of financial institutions in Russia that are active participants in the Russian Ruble/U.S. Dollar spot market for the purpose of determining the RUB CME-EMTA Rate).'} RUB_CME_EMTA_RUB03,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Russian Ruble/U.S. Dollar Specified Rate for U.S. Dollars, expressed as the amount of Russian Rubles per one U.S. Dollar, for settlement in one Business Day, as published on EMTA\'s web site (www.emta.org) at approximately 2:45 p.m., Moscow time, or as soon thereafter as practicable, on such Rate Calculation Date. The Spot Rate shall be calculated by EMTA (or a service provider EMTA may select in its sole discretion) pursuant to the EMTA RUB Indicative Survey Methodology (which means a methodology dated as of June 16, 2005, as amended from time to time, for a centralized industry-wide survey of financial institutions that are active participants in the Russian Ruble/U.S. Dollar spot market for the purpose of determining the EMTA RUB Indicative Survey Rate).'} RUB_EMTA_INDICATIVE_SURVEY_RATE_RUB04,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Russian Ruble/U.S. Dollar Specified Rate, expressed as the amount of Russian Rubies per one U.S. Dollar, for settlement on the same day reported by the Moscow Interbank Currency Exchange which appears on the Reuters Screen MICEXFRX Page as of 10:30 a.m., Moscow time, on that Rate Calculation Date.'} RUB_MICEXFRX_RUB01,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Russian Ruble/U.S. Dollar Specified Rate, expressed as the amount of Russian Rubies per one U.S. Dollar, for settlement on the same day reported by the Moscow Interbank Currency Exchange which appears on the Reuters Screen MMVB Page as of 10:30 a.m., Moscow time, on that Rate Calculation Date.'} RUB_MMVB_RUB02,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Singapore Dollar/U.S. Dollar spot rate expressed as the amount of Singapore Dollar per one U.S. Dollar for settlement in two Business Days, reported by ABS Benchmarks Administration Co Pte. Ltd. (or its successor as administrator or sponsor of the rate), which appears on Thomson Reuters Screen ABSFIX01 Page at approximately 11:30 a.m., Singapore time, on that Rate Calculation Date.'} SGD_VWAP_SGD3,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Slovak Koruna/U.S. Dollar Specified Rate, expressed as the amount of Slovak Koruna per one U.S. Dollar, for settlement in two Business Days reported by the National Bank of Slovakia which appears on the Reuters Screen NBSB Page as of 11:40 a.m., Bratislava time, on that Rate Calculation Date.'} SKK_NBSB_SKK01,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Thai Baht/U.S. Dollar spot rate at 11:00 a.m., Singapore time, expressed as the amount of Thai Bhaht per one U.S. Dollar, for settlement in two Business Days, reported by the Association of Banks in Singapore which appears on the Reuters Screen ABSIRFIX01 Page to the right of the caption \'Spot\' under the column \'THB\' at approximately 11:30 a.m., Singapore time, on that Rate Calculation Date.'} THB_ABS_THB01,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Thai Baht / U.S. Dollar spot rate expressed as the amount of Thai Baht per one U.S. Dollar for settlement in two Business Days, reported by ABS Benchmarks Administration Co Pte. Ltd. (or its successor as administrator or sponsor of the rate), which appears on Thomson Reuters Screen ABSFIX01 Page at approximately 11:30 a.m., Singapore time, on that Rate Calculation Date.'} THB_VWAP_THB01,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Taiwanese Dollar/U.S. Dollar Specified Rate for U.S. Dollars, expressed as the amount of Taiwanese Dollars per one U.S. Dollar, for settlement in two Business Days, as published on SFEMC\'s website (www.sfemc.org) at approximately 3:30 p.m., Singapore time, or as soon thereafter as practicable, on such Rate Calculation Date. The Spot Rate will be calculated by SFEMC (or a service provider SFEMC may select in its sole discretion) pursuant to the SFEMC TWD Indicative Survey Methodology (which means a methodology, dated as of December 1, 2004, as amended from time to time, for a centralized industry-wide survey of financial institutions that are active participants in the Taiwanese Dollar/U.S. Dollar markets for the purpose of determining the SFEMC TWD Indicative Survey Rate).'} TWD_SFEMC_INDICATIVE_SURVEY_RATE_TWD04,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Taiwanese Dollar/U.S. Dollar spot rate, expressed as the amount of Taiwanese Dollars per one U.S. Dollar, for settlement in two Business Days, reported by the Taipei Forex Inc. which appears on the Reuters Screen TAIFX1 Page under the heading \'Spot\' as of 11:00 a.m. Taipei time, on that Rate Calculation Date, or if no rate appears as of 11:00 a.m., Taipei time, the rate that first appears in any of the next succeeding 15 minute intervals after such time, up to and including 12:00 noon, Taipei time on that Rate Calculation Date.'} TWD_TAIFX1_TWD03,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Taiwanese Dollar/U.S. Dollar spot rate, expressed as the amount of Taiwanese Dollars per one U.S. Dollar, for settlement in two Business Days, reported by the Taipei Forex Inc. which appears on the Telerate Page 6161 under the heading \'Spot\' as of 11:00 a.m., Taipei time, on that Rate Calculation Date, or if no rate appears as of 11:00 a.m., Taipei time, the rate that first appears in any of the next succeeding 15 minute intervals after such time, up to and including 12:00 noon, Taipei time, on that Rate Calculation Date.'} TWD_TELERATE_6161_TWD01,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Taiwanese Dollar/U.S. Dollar Specified Rate, expressed as the amount of Taiwanese Dollars per one U.S. Dollar, for settlement in two Business Days which appears on the Reuters Screen TFEMA Page as of 11:00 a.m., Taipei time, on that Rate Calculation Date.'} TWD_TFEMA_TWD02,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Ukrainian Hryvnia/U.S. Dollar Specified Rate for U.S. Dollars, expressed as the amount of Ukrainian Hryvnia per one U.S. Dollar, for settlement on the same Business Day, as published on EMTA\'s website (www.emta.org) at approximately 2:00 p.m., Kiev time, or as soon thereafter as practicable, on that Rate Calculation Date. The Spot Rate shall be calculated by EMTA (or a service provider EMTA may select in its sole discretion) pursuant to the EMTA UAH Indicative Survey Methodology (which means a methodology, dated as of March 16, 2009, as amended from time to time, for a centralized industry-wide survey of financial institutions that are active participants in the Ukrainian Hryvnia / U.S. Dollar markets for the purpose of determining the EMTA UAH Indicative Survey Rate).'} UAH_EMTA_INDICATIVE_SURVEY_RATE_UAH03,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Ukrainian Hryvnia/U.S. Dollar Specified Rate for U.S. Dollars expressed as the amount of Ukrainian Hryvnia per one U.S. Dollar, for settlement on the same Business Day calculated by Thomson Reuters pursuant to the EMTA UAH Industry Survey Methodology, which rate appears on EMTA\'s website (www.emta.org) and on Thomson Reuters Page EMTAUAHFIX at approximately 11:30 am, Kiev time, on that Rate Calculation Date. The \'EMTA UAH Industry Survey Methodology\' as used herein means the methodology dated as of March 16, 2009, for a centralized industry wide survey of financial institutions in the Ukrainian Hryvnia/U.S. Dollar spot market for the purposes of determining the EMTA UAH Industry Survey Rate.'} UAH_EMTA_INDUSTRY_SURVEY_RATE_UAH02,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Ukrainian Hryvnia/U.S. Dollar spot rate, expressed as the amount of Ukrainian Hryvnia per one U.S. Dollar, for settlement on the same Business Day reported by GFI Brokers on Thomson Reuters Page GFIU by 9:30 am, London time, on that Rate Calculation Date.'} UAH_GFI_UAH01,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the midpoint of the Venezuelan Bolivar /U.S. Dollar Tipo de Cambio De Referencia buying and selling rates, expressed as the amount of Venezuelan Bolivar per one U.S. Dollar, for settlement in two Business Days reported by the Banco Central de Venezuela (www.bcv.org.ve) at approximately 5:00 p.m., Caracas time, on that Rate Calculation Date.'} VEF_FIX_VEF01,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Vietnamese Dong/U.S. Dollar spot rate at 11:00 a.m., Singapore time, expressed as the amount of Vietnamese Dong per one U.S. Dollar, for settlement in two Business Days reported by the Association of Banks in Singapore, which appears on the Reuters Screen ABSIRFIX01 Page to the right of the caption \'Spot\' under the column \'VND\' at approximately 11:30 a.m., Singapore time, on that Rate Calculation Date.'} VND_ABS_VND01,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Vietnamese Dong/U.S. Dollar spot rate expressed as the amount of Vietnamese Dong per one U.S. Dollar, for settlement in two Business Days which appears on Reuters Screen VNDFIX=VN Page under the caption \'Spot\' and to the right of the caption \'Average\' at approximately 11:00 am, Hanoi time, on that Rate Calculation Date.'} VND_FX_VND02,
  {meta::pure::profiles::doc.doc = 'The Spot Rate for a Rate Calculation Date will be the Vietnamese Dong/U.S. Dollar Specified Rate for U.S. Dollars, expressed as the amount of Vietnamese Dong per one U.S. Dollar, for settlement in two Business Days, as published on SFEMC\'s website (www.sfemc.org) at approximately 3:30 p.m., Singapore time, or as soon as thereafter as practicable, on that Rate Calculation Date. The Spot Rate shall be calculated by SFEMC (or a service provider SFEMC may select in its sole discretion) pursuant to the SFEMC VND Indicative Survey Methodology (which means a methodology, dated as of July 14, 2008, as amended from time to time, for a centralized industry-wide survey of financial institutions that are active participants in the Vietnamese Dong/U.S. Dollar markets for the purpose of determining the SFEMC VND Indicative Survey Rate).'} VND_SFEMC_INDICATIVE_SURVEY_RATE_VND03
}

Enum {meta::pure::profiles::doc.doc = 'The type of return associated with the equity swap.'} FpML::model::ReturnTypeEnum
{
  Dividend,
  Price,
  Total
}

Enum {meta::pure::profiles::doc.doc = 'Defines the enumerated values to specify the nature of a trade identifier.'} model::external::cdm::TradeIdentifierTypeEnum
{
  UniqueTransactionIdentifier,
  UniqueSwapIdentifier
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify the type of a resource (e.g. document).'} model::external::cdm::ResourceTypeEnum
{
  {meta::pure::profiles::doc.doc = 'Document describing the legal terms of a transaction.'} Confirmation,
  {meta::pure::profiles::doc.doc = 'Document providing supplemental material economic terms to the FpML data representation. The initial intended usage is to fulfill the CFTC Part 45 rule requirement to report \u2018Any other terms(s) of the swap matched or affirmed by the counterparties in verifying the swap\u2019 when the reporting is done via the generic FpML representation.'} SupplementalMaterialEconomicTerms,
  {meta::pure::profiles::doc.doc = 'Document describing the economic characteristics of a transaction.'} TermSheet
}

Enum {meta::pure::profiles::doc.doc = 'Defines the enumerated values to specify the two counterparties to the transaction.'} model::external::cdm::CounterpartyRoleEnum
{
  Party1,
  Party2
}

Enum model::external::cdm::SpreadTypeEnum
{
  {meta::pure::profiles::doc.doc = 'Denotes the base price against which a spread is expressed. For a foreign exchange forward trade, denotes the spot price against which forwrd points are expressed.'} Base,
  {meta::pure::profiles::doc.doc = 'Denotes a difference in interest rates or prices expressed as a decimal. For example, in the case of a spread between two interest rates, the value of 0.05 is the equivalent of 500 basis points or 5.0%. For a foreign exchange forward trade, denotes the forward points to be added to a spot price to represent a forward price, expressed as a decimal.'} Spread
}

Enum {meta::pure::profiles::doc.doc = 'The type of credit approval request.'} FpML::model::CreditApprovalRequestTypeEnum
{
  AllOrNone,
  AllowPartial
}

Enum {meta::pure::profiles::doc.doc = 'The type of method.'} FpML::model::InterestMethodEnum
{
  PhysicalSettlement,
  RollIn
}

Enum {meta::pure::profiles::doc.doc = 'The specification of whether a barrier within an FX OTC option is a knockin or knockout.'} FpML::model::FxBarrierTypeEnum
{
  Knockin,
  Knockout,
  ReverseKnockin,
  ReverseKnockout
}

Enum {meta::pure::profiles::doc.doc = 'This indicator defines which type of assets (cash or securities) is specified to apply as margin to the repo transaction.'} model::external::cdm::MarginTypeEnum
{
  {meta::pure::profiles::doc.doc = 'When the margin type is Cash, the margin factor is applied to the cash value of the transaction.'} Cash,
  {meta::pure::profiles::doc.doc = 'When the margin type is Instrument, the margin factor is applied to the instrument value for the transaction. In the \'instrument\' case, the haircut would be applied to the securities.'} Instrument
}

Enum {meta::pure::profiles::doc.doc = 'This indicator defines which type of assets (cash or securities) is specified to apply as margin to the repo transaction.'} FpML::model::MarginTypeEnum
{
  Cash,
  Instrument
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify the type of annex to be used with master confirmation agreement governing the transaction.'} model::external::cdm::MasterConfirmationAnnexTypeEnum
{
  {meta::pure::profiles::doc.doc = 'The Index Variance Swap 2004 Annex to the ISDA 2004 Americas Interdealer Master Equity Derivatives Confirmation Agreement and to the Revised ISDA 2004 Americas Interdealer Master Equity Derivatives Confirmation Agreement applies.'} ISDA2004IndexVarianceSwapAmericasInterdealer,
  {meta::pure::profiles::doc.doc = 'The Share Variance Swap 2004 Annex to the ISDA 2004 Americas Interdealer Master Equity Derivatives Confirmation Agreement and to the Revised ISDA 2004 Americas Interdealer Master Equity Derivatives Confirmation Agreement applies.'} ISDA2004ShareVarianceSwapAmericasInterdealer,
  {meta::pure::profiles::doc.doc = 'The Dispersion Variance Swap Annex to the Revised 2007 ISDA European Variance Swap Master Confirmation Agreement applies.'} ISDA2007DispersionVarianceSwapEuropean,
  {meta::pure::profiles::doc.doc = 'The EFS (Equity Share Finance Swap) 2007 Annex to the ISDA 2007 European Master Equity Derivatives Confirmation Agreement applies.'} ISDA2007EquityFinanceSwapEuropean,
  {meta::pure::profiles::doc.doc = 'The Index Variance Swap 2007 Annex to the Revised ISDA 2004 Americas Interdealer Master Equity Derivatives Confirmation Agreement applies.'} ISDA2007IndexVarianceSwapAmericasInterdealer,
  {meta::pure::profiles::doc.doc = 'The Share Variance Swap 2007 Annex to the Revised ISDA 2004 Americas Interdealer Master Equity Derivatives Confirmation Agreement applies.'} ISDA2007ShareVarianceSwapAmericasInterdealer,
  {meta::pure::profiles::doc.doc = 'The Variance Option Standard Terms Appendix to the Revised ISDA 2007 European Variance Swap Master Confirmation Agreement applies.'} ISDA2007VarianceOptionEuropean,
  {meta::pure::profiles::doc.doc = 'The Cash-settled Open Market EFS (Equity Finance Share Swap) 2008 Annex to the ISDA 2008 AEJ (Asia Excluding Japan) Master Equity Derivatives Confirmation Agreement applies.'} ISDA2008EquityFinanceSwapAsiaExcludingJapan,
  {meta::pure::profiles::doc.doc = 'The Cash-settled Open Market EFS (Equity Finance Share Swap) Annex to the Revised ISDA 2008 AEJ (Asia Excluding Japan) Master Equity Derivatives Confirmation Agreement applies.'} ISDA2008EquityFinanceSwapAsiaExcludingJapanRev1,
  {meta::pure::profiles::doc.doc = 'The Open Market Equity Option 2008 Annex to the ISDA 2008 AEJ (Asia Excluding Japan) Master Equity Derivatives Confirmation Agreement applies.'} ISDA2008EquityOptionAsiaExcludingJapan,
  {meta::pure::profiles::doc.doc = 'The Open Market Equity Option Annex to the Revised ISDA 2008 AEJ (Asia Excluding Japan) Master Equity Derivatives Confirmation Agreement applies.'} ISDA2008EquityOptionAsiaExcludingJapanRev1,
  {meta::pure::profiles::doc.doc = 'The Equity Option 2008 Annex to the ISDA 2008 Japanese Master Equity Derivatives Confirmation Agreement applies.'} ISDA2008EquityOptionJapan,
  {meta::pure::profiles::doc.doc = 'The Cash-settled Closed Market Index and Share Options 2009 Annex to the Revised ISDA 2008 AEJ (Asia Excluding Japan) Master Equity Derivatives Confirmation Agreement applies.'} ISDA2009ClosedMarketsOptionsAsiaExcludingJapan,
  {meta::pure::profiles::doc.doc = 'The Index Swap 2009 Annex to the ISDA 2007 European Master Equity Derivatives Confirmation Agreement applies.'} ISDA2009EquityEuropeanIS,
  {meta::pure::profiles::doc.doc = 'The Interdealer Share Swap 2009 Annex to the ISDA 2009 European Interdealer Master Equity Derivatives Confirmation Agreement applies.'} ISDA2009EquityEuropeanInterdealerSS,
  {meta::pure::profiles::doc.doc = 'The Index and Share Options 2009 Annex to the ISDA 2009 Americas Master Equity Derivatives Confirmation Agreement applies.'} ISDA2009IndexShareOptionAmericas,
  {meta::pure::profiles::doc.doc = 'The Interdealer Index Swap 2009 Annex to the ISDA 2009 European Interdealer Master Equity Derivatives Confirmation Agreement applies.'} ISDA2009IndexSwapEuropeanInterdealer,
  {meta::pure::profiles::doc.doc = 'The Index Swap 2009 Annex to the ISDA 2009 Pan-Asia Interdealer Master Equity Derivatives Confirmation Agreement applies.'} ISDA2009IndexSwapPanAsiaInterdealer,
  {meta::pure::profiles::doc.doc = 'The Share Swap 2009 Annex to the ISDA 2009 Pan-Asia Interdealer Master Equity Derivatives Confirmation Agreement applies.'} ISDA2009ShareSwapPanAsia,
  {meta::pure::profiles::doc.doc = 'The Fair Value Interdealer Share Swap 2010 Annex to the ISDA 2009 European Interdealer Master Equity Derivatives Confirmation Agreement applies.'} ISDA2010FairValueShareSwapEuropeanInterdealer,
  {meta::pure::profiles::doc.doc = 'The Cash-settled Index Option/Cash/Physically-settled Share Option 2010 Annex to the ISDA 2010 EMEA EM Interdealer Master Equity Derivatives Confirmation Agreement applies.'} ISDA2010IndexShareOptionEMEAInterdealer
}

Enum {meta::pure::profiles::doc.doc = 'Identifies European Union Eligible Collateral Assets classification categories based on EMIR Uncleared Margin Rules. Eligible Collateral asset classes for both initial margin (IM) and variation margin (VM) posted and collected between specified entities. Please note: EMIR regulation will detail which eligible collateral assets classes apply to each type of entity pairing (counterparty) and which apply to posting of IM and VM.'} model::external::cdm::EU_EMIR_EligibleCollateralEnum
{
  {meta::pure::profiles::doc.doc = 'Denotes Cash in the form of money credited to an account in any currency, or similar claims for the repayment of money, such as money market deposits.'} EU_EMIRTypeA,
  {meta::pure::profiles::doc.doc = 'Denotes gold in the form of allocated pure gold bullion of recognised good delivery.'} EU_EMIRTypeB,
  {meta::pure::profiles::doc.doc = 'Denotes debt securities issued by Member States\' central governments or central banks.'} EU_EMIRTypeC,
  {meta::pure::profiles::doc.doc = 'Denotes debt securities issued by Member States\' regional governments or local authorities whose exposures are treated as exposures to the central government of that Member State in accordance with Article 115(2) of Regulation (EU) No 575/2013.'} EU_EMIRTypeD,
  {meta::pure::profiles::doc.doc = 'Denotes debt securities issued by Member States\' public sector entities whose exposures are treated as exposures to the central government, regional government or local authority of that Member State in accordance with Article 116(4) of Regulation (EU) No 575/2013.'} EU_EMIRTypeE,
  {meta::pure::profiles::doc.doc = 'Denotes debt securities issued by Member States\' regional governments or local authorities other than those referred to in (TypeD.)'} EU_EMIRTypeF,
  {meta::pure::profiles::doc.doc = 'Denotes debt securities issued by Member States\' public sector entities other than those referred to in (TypeE).'} EU_EMIRTypeG,
  {meta::pure::profiles::doc.doc = 'Denotes debt securities issued by multilateral development banks listed in Article 117(2) of Regulation (EU) No 575/2013.'} EU_EMIRTypeH,
  {meta::pure::profiles::doc.doc = 'Denotes debt securities issued by the international organisations listed in Article 118 of Regulation (EU) No 575/2013.'} EU_EMIRTypeI,
  {meta::pure::profiles::doc.doc = 'Denotes debt securities issued by third countries\' governments or central banks.'} EU_EMIRTypeJ,
  {meta::pure::profiles::doc.doc = 'Denotes debt securities issued by third countries\' regional governments or local authorities that meet the requirements of (TypeD) and (TypeE).'} EU_EMIRTypeK,
  {meta::pure::profiles::doc.doc = 'Denotes debt securities issued by third countries\' regional governments or local authorities other than those referred to in (TypeD) and (TypeE).'} EU_EMIRTypeL,
  {meta::pure::profiles::doc.doc = 'Denotes debt securities issued by credit institutions or investment firms including bonds referred to in Article 52(4) of Directive 2009/65/EC of the European Parliament and of the Council.'} EU_EMIRTypeM,
  {meta::pure::profiles::doc.doc = 'Denotes corporate bonds.'} EU_EMIRTypeN,
  {meta::pure::profiles::doc.doc = 'Denotes the most senior tranche of a securitisation, as defined in Article 4(61) of Regulation (EU) No 575/2013, that is not a re-securitisation as defined in Article 4(63) of that Regulation.'} EU_EMIRTypeO,
  {meta::pure::profiles::doc.doc = 'Denotes convertible bonds provided that they can be converted only into equities which are included in an index specified pursuant to point (a) of Article 197 (8) of Regulation (EU) No 575/2013.'} EU_EMIRTypeP,
  {meta::pure::profiles::doc.doc = 'Denotes equities included in an index specified pursuant to point (a) of Article 197(8) of Regulation (EU) No 575/2013.'} EU_EMIRTypeQ,
  {meta::pure::profiles::doc.doc = 'Denotes shares or units in undertakings for collective investments in transferable securities (UCITS), provided that the conditions set out in Article 5 of EU Regulation 2016/2251 are met.'} EU_EMIRTypeR
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify the period term as part of a periodic schedule, i.e. the calculation period end date within the regular part of the calculation period. The value could be a rule, e.g. IMM Settlement Dates, which is the 3rd Wednesday of the month, or it could be a specific day of the month, such as the first day of the applicable month.'} model::external::cdm::RollConventionEnum
{
  {meta::pure::profiles::doc.doc = 'Rolls on month end dates irrespective of the length of the month and the previous roll day.'} EOM,
  {meta::pure::profiles::doc.doc = 'Roll days are determined according to the FRN Convention or Euro-dollar Convention as described in ISDA 2000 definitions.'} FRN,
  {meta::pure::profiles::doc.doc = 'IMM Settlement Dates. The third Wednesday of the (delivery) month.'} IMM,
  {meta::pure::profiles::doc.doc = 'The last trading day/expiration day of the Canadian Derivatives Exchange (Bourse de Montreal Inc) Three-month Canadian Bankers\' Acceptance Futures (Ticker Symbol BAX). The second London banking day prior to the third Wednesday of the contract month. If the determined day is a Bourse or bank holiday in Montreal or Toronto, the last trading day shall be the previous bank business day. Per Canadian Derivatives Exchange BAX contract specification.'} IMMCAD,
  {meta::pure::profiles::doc.doc = 'The last trading day of the Sydney Futures Exchange 90 Day Bank Accepted Bills Futures contract (see http://www.sfe.com.au/content/sfe/trading/con_specs.pdf). One Sydney business day preceding the second Friday of the relevant settlement.'} IMMAUD,
  {meta::pure::profiles::doc.doc = 'The last trading day of the Sydney Futures Exchange NZ 90 Day Bank Bill Futures contract (see http://www.sfe.com.au/content/sfe/trading/con_specs.pdf). The first Wednesday after the ninth day of the relevant settlement month.'} IMMNZD,
  {meta::pure::profiles::doc.doc = 'Sydney Futures Exchange 90-Day Bank Accepted Bill Futures Settlement Dates. The second Friday of the (delivery) month'} SFE,
  {meta::pure::profiles::doc.doc = 'The roll convention is not required. For example, in the case of a daily calculation frequency.'} NONE,
  {meta::pure::profiles::doc.doc = '13-week and 26-week U.S. Treasury Bill Auction Dates. Each Monday except for U.S. (New York) holidays when it will occur on a Tuesday.'} TBILL,
  {meta::pure::profiles::doc.doc = 'Rolls on the 1st day of the month.'} _1,
  {meta::pure::profiles::doc.doc = 'Rolls on the 2nd day of the month.'} _2,
  {meta::pure::profiles::doc.doc = 'Rolls on the 3rd day of the month.'} _3,
  {meta::pure::profiles::doc.doc = 'Rolls on the 4th day of the month.'} _4,
  {meta::pure::profiles::doc.doc = 'Rolls on the 5th day of the month.'} _5,
  {meta::pure::profiles::doc.doc = 'Rolls on the 6th day of the month.'} _6,
  {meta::pure::profiles::doc.doc = 'Rolls on the 7th day of the month.'} _7,
  {meta::pure::profiles::doc.doc = 'Rolls on the 8th day of the month.'} _8,
  {meta::pure::profiles::doc.doc = 'Rolls on the 9th day of the month.'} _9,
  {meta::pure::profiles::doc.doc = 'Rolls on the 10th day of the month.'} _10,
  {meta::pure::profiles::doc.doc = 'Rolls on the 11th day of the month.'} _11,
  {meta::pure::profiles::doc.doc = 'Rolls on the 12th day of the month.'} _12,
  {meta::pure::profiles::doc.doc = 'Rolls on the 13th day of the month.'} _13,
  {meta::pure::profiles::doc.doc = 'Rolls on the 14th day of the month.'} _14,
  {meta::pure::profiles::doc.doc = 'Rolls on the 15th day of the month.'} _15,
  {meta::pure::profiles::doc.doc = 'Rolls on the 16th day of the month.'} _16,
  {meta::pure::profiles::doc.doc = 'Rolls on the 17th day of the month.'} _17,
  {meta::pure::profiles::doc.doc = 'Rolls on the 18th day of the month.'} _18,
  {meta::pure::profiles::doc.doc = 'Rolls on the 19th day of the month.'} _19,
  {meta::pure::profiles::doc.doc = 'Rolls on the 20th day of the month.'} _20,
  {meta::pure::profiles::doc.doc = 'Rolls on the 21st day of the month.'} _21,
  {meta::pure::profiles::doc.doc = 'Rolls on the 22nd day of the month.'} _22,
  {meta::pure::profiles::doc.doc = 'Rolls on the 23rd day of the month.'} _23,
  {meta::pure::profiles::doc.doc = 'Rolls on the 24th day of the month.'} _24,
  {meta::pure::profiles::doc.doc = 'Rolls on the 25th day of the month.'} _25,
  {meta::pure::profiles::doc.doc = 'Rolls on the 26th day of the month.'} _26,
  {meta::pure::profiles::doc.doc = 'Rolls on the 27th day of the month.'} _27,
  {meta::pure::profiles::doc.doc = 'Rolls on the 28th day of the month.'} _28,
  {meta::pure::profiles::doc.doc = 'Rolls on the 29th day of the month.'} _29,
  {meta::pure::profiles::doc.doc = 'Rolls on the 30th day of the month.'} _30,
  {meta::pure::profiles::doc.doc = 'Rolling weekly on a Monday.'} MON,
  {meta::pure::profiles::doc.doc = 'Rolling weekly on a Tuesday'} TUE,
  {meta::pure::profiles::doc.doc = 'Rolling weekly on a Wednesday'} WED,
  {meta::pure::profiles::doc.doc = 'Rolling weekly on a Thursday'} THU,
  {meta::pure::profiles::doc.doc = 'Rolling weekly on a Friday'} FRI,
  {meta::pure::profiles::doc.doc = 'Rolling weekly on a Saturday'} SAT,
  {meta::pure::profiles::doc.doc = 'Rolling weekly on a Sunday'} SUN
}

Enum {meta::pure::profiles::doc.doc = 'A list of accruing fee types associated with a letter of credit.'} FpML::model::LoanTradingLetterOfCreditFeeTypeEnum
{
  LetterOfCreditFronting,
  LetterOfCreditIssuance
}

Enum {meta::pure::profiles::doc.doc = 'The compounding calculation method'} FpML::model::CompoundingMethodEnum
{
  Flat,
  None,
  Straight,
  SpreadExclusive
}

Enum {meta::pure::profiles::doc.doc = 'Status of order.'} FpML::model::OrderStatusEnum
{
  Cancelled,
  Rejected,
  Accepted,
  Working,
  Filled,
  Completed
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify the weekly roll day.'} model::external::cdm::WeeklyRollConventionEnum
{
  {meta::pure::profiles::doc.doc = 'Monday'} MON,
  {meta::pure::profiles::doc.doc = 'Tuesday'} TUE,
  {meta::pure::profiles::doc.doc = 'Wednesday'} WED,
  {meta::pure::profiles::doc.doc = 'Thursday'} THU,
  {meta::pure::profiles::doc.doc = 'Friday'} FRI,
  {meta::pure::profiles::doc.doc = 'Saturday'} SAT,
  {meta::pure::profiles::doc.doc = 'Sunday'} SUN,
  {meta::pure::profiles::doc.doc = '13-week and 26-week U.S. Treasury Bill Auction Dates. Each Monday except for U.S. (New York) holidays when it will occur on a Tuesday'} TBILL
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify the consequences of Index Events.'} model::external::cdm::IndexEventConsequenceEnum
{
  {meta::pure::profiles::doc.doc = 'Calculation Agent Adjustment.'} CalculationAgentAdjustment,
  {meta::pure::profiles::doc.doc = 'Negotiated Close Out.'} NegotiatedCloseOut,
  {meta::pure::profiles::doc.doc = 'Cancellation and Payment.'} CancellationAndPayment,
  {meta::pure::profiles::doc.doc = 'Related Exchange.'} RelatedExchange
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify the handling of an averaging date market disruption for an equity derivative transaction.'} model::external::cdm::MarketDisruptionEnum
{
  {meta::pure::profiles::doc.doc = 'As defined in section 6.7 paragraph (c) sub-paragraph (iii) of the ISDA 2002 Equity Derivative definitions.'} ModifiedPostponement,
  {meta::pure::profiles::doc.doc = 'As defined in section 6.7 paragraph (c) sub-paragraph (i) of the ISDA 2002 Equity Derivative definitions.'} Omission,
  {meta::pure::profiles::doc.doc = 'As defined in section 6.7 paragraph (c) sub-paragraph (ii) of the ISDA 2002 Equity Derivative definitions.'} Postponement
}

Enum {meta::pure::profiles::doc.doc = 'The specification of how a protected party will be determined.'} FpML::model::PartyDeterminationEnum
{
  NonExercisingParty,
  Both
}

Enum model::external::cdm::DeliveryNearbyTypeEnum
{
  {meta::pure::profiles::doc.doc = 'Describes the reference contract as the one that pertains to the month-year of the calculation period. If used, the nearby count is expected to be 0.'} CalculationPeriod,
  {meta::pure::profiles::doc.doc = 'Specifies that the reference delivery date of the underlying Commodity shall be the expiration date of the futures contract in the nth nearby month.'} NearbyMonth,
  {meta::pure::profiles::doc.doc = 'Specifies that the reference delivery date of the underlying Commodity shall be the expiration date of the futures contract in the nth nearby week.'} NearbyWeek
}

Enum FpML::model::BuySellEnum
{
  Buyer,
  Seller
}

Enum {meta::pure::profiles::doc.doc = 'The enumeration values to qualify the type of credit limits.'} model::external::cdm::CreditLimitTypeEnum
{
  {meta::pure::profiles::doc.doc = 'The type of credit line expressed in CS01. The sensitivity with respect to changes in the CDS spread.'} CS01,
  {meta::pure::profiles::doc.doc = 'The type of credit line expressed in DV01. The dollar value of a one basis point decrease in interest rates. It shows the change in a bond\'s price compared to a decrease in the bond\'s yield.'} DV01,
  {meta::pure::profiles::doc.doc = 'The type of credit line expressed in Initial Margin value.'} IM,
  {meta::pure::profiles::doc.doc = 'The type of credit line expressed in Notional amount.'} Notional,
  {meta::pure::profiles::doc.doc = 'The type of credit line expressed as a Net Present Value.'} NPV,
  {meta::pure::profiles::doc.doc = 'The type of credit line expressed in PV01. The value of a one dollar or one basis point annuity.'} PV01
}

Enum {meta::pure::profiles::doc.doc = 'A list of accruing fee types associated with a facility.'} FpML::model::LoanTradingAccruingFeeTypeEnum
{
  Commitment,
  Facility,
  LetterOfCreditIssuance,
  Ticking,
  Utilization
}

Enum {meta::pure::profiles::doc.doc = 'The reference to a dividend date.'} FpML::model::DividendDateReferenceEnum
{
  ExDate,
  DividendPaymentDate,
  DividendValuationDate,
  RecordDate,
  TerminationDate,
  EquityPaymentDate,
  FollowingPaymentDate,
  AdHocDate,
  CumulativeEquityPaid,
  CumulativeLiborPaid,
  CumulativeEquityExDiv,
  CumulativeLiborExDiv,
  SharePayment,
  CashSettlementPaymentDate,
  FloatingAmountPaymentDate,
  CashSettlePaymentDateExDiv,
  CashSettlePaymentDateIssuerPayment,
  ExDividendPaymentDate
}

Enum {meta::pure::profiles::doc.doc = 'A list that defines how the interest accrued during the settlement period is calculated and paid.'} FpML::model::LoanTradingAccrualSettlementEnum
{
  Flat,
  SettledWithAccrued,
  SettledWithoutAccrued
}

Enum {meta::pure::profiles::doc.doc = 'The type of accounting standard applied.'} FpML::model::AccountingStandardEnum
{
  GAAP,
  IFRS
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify the type of quotation rate to be obtained from each cash settlement reference bank.'} model::external::cdm::QuotationRateTypeEnum
{
  {meta::pure::profiles::doc.doc = 'A bid rate.'} Bid,
  {meta::pure::profiles::doc.doc = 'An ask rate.'} Ask,
  {meta::pure::profiles::doc.doc = 'A mid-market rate.'} Mid,
  {meta::pure::profiles::doc.doc = 'If optional early termination is applicable to a swap transaction, the rate, which may be a bid or ask rate, which would result, if seller is in-the-money, in the higher absolute value of the cash settlement amount, or, is seller is out-of-the-money, in the lower absolute value of the cash settlement amount.'} ExercisingPartyPays
}

Enum {meta::pure::profiles::doc.doc = 'The specification of a time period containing additional values such as Term.'} FpML::model::PeriodExtendedEnum
{
  D,
  W,
  M,
  Y,
  T
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values for the natural person\'s role.'} model::external::cdm::NaturalPersonRoleEnum
{
  {meta::pure::profiles::doc.doc = 'The person who arranged with a client to execute the trade.'} Broker,
  {meta::pure::profiles::doc.doc = 'Acquirer of the legal title to the financial instrument.'} Buyer,
  {meta::pure::profiles::doc.doc = 'The party or person with legal responsibility for authorization of the execution of the transaction.'} DecisionMaker,
  {meta::pure::profiles::doc.doc = 'Person within the firm who is responsible for execution of the transaction.'} ExecutionWithinFirm,
  {meta::pure::profiles::doc.doc = 'Person who is responsible for making the investment decision.'} InvestmentDecisionMaker,
  {meta::pure::profiles::doc.doc = 'Seller of the legal title to the financial instrument.'} Seller,
  {meta::pure::profiles::doc.doc = 'The person who executed the trade.'} Trader
}

Enum {meta::pure::profiles::doc.doc = 'A day type classification used in counting the number of days between two dates for a commodity transaction.'} FpML::model::CommodityDayTypeEnum
{
  Business,
  Calendar,
  CommodityBusiness,
  CurrencyBusiness,
  ExchangeBusiness,
  ScheduledTradingDay,
  GasFlow,
  NearbyContractDay
}

Enum {meta::pure::profiles::doc.doc = 'Represents the enumerated values to specify the credit rating outlook.'} model::external::cdm::CreditRatingOutlookEnum
{
  {meta::pure::profiles::doc.doc = 'Denotes a rating may be raised.'} Positive,
  {meta::pure::profiles::doc.doc = 'Denotes a rating may be lowered.'} Negative,
  {meta::pure::profiles::doc.doc = 'Denotes a rating is not likely to change.'} Stable,
  {meta::pure::profiles::doc.doc = 'Denotes a rating may be raised, lowered, or affirmed.'} Developing
}

Enum {meta::pure::profiles::doc.doc = '3rd level ISDA FRO category.'} model::external::cdm::FloatingRateIndexCalculationMethodEnum
{
  {meta::pure::profiles::doc.doc = 'A calculation methodology using the ISDA-defined OIS compounding formula.'} OISCompound,
  {meta::pure::profiles::doc.doc = 'A calculation methodology using the arithmetic mean.'} Average
}

Enum {meta::pure::profiles::doc.doc = 'The specification of the consequences of Index Events.'} FpML::model::IndexEventConsequenceEnum
{
  CalculationAgentAdjustment,
  NegotiatedCloseOut,
  CancellationAndPayment,
  RelatedExchange
}

Enum {meta::pure::profiles::doc.doc = 'The enumeration values to specify the transfer status.'} model::external::cdm::TransferStatusEnum
{
  {meta::pure::profiles::doc.doc = 'The transfer is disputed.'} Disputed,
  {meta::pure::profiles::doc.doc = 'The transfer has been instructed.'} Instructed,
  {meta::pure::profiles::doc.doc = 'The transfer is pending instruction.'} Pending,
  {meta::pure::profiles::doc.doc = 'The transfer has been settled.'} Settled
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify the day count fraction.'} model::external::cdm::DayCountFractionEnum
{
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions, Section 4.16. Day Count Fraction, paragraph (e) or Annex to the 2000 ISDA Definitions (June 2000 Version), Section 4.16. Day Count Fraction, paragraph (d).'} ACT_360,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions, Section 4.16. Day Count Fraction, paragraph (i).'} ACT_365L,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions, Section 4.16. Day Count Fraction, paragraph (d) or Annex to the 2000 ISDA Definitions (June 2000 Version), Section 4.16. Day Count Fraction, paragraph (c).'} ACT_365_FIXED,
  {meta::pure::profiles::doc.doc = 'The Fixed/Floating Amount will be calculated in accordance with the \'BASE EXACT/EXACT\' day count fraction, as defined in the \'Definitions Communes plusieurs Additifs Techniques\' published by the Association Francaise des Banques in September 1994.'} ACT_ACT_AFB,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions, Section 4.16. Day Count Fraction, paragraph (c). This day count fraction code is applicable for transactions booked under the 2006 ISDA Definitions. Transactions under the 2000 ISDA Definitions should use the ACT/ACT.ISMA code instead.'} ACT_ACT_ICMA,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions, Section 4.16. Day Count Fraction, paragraph (b) or Annex to the 2000 ISDA Definitions (June 2000 Version), Section 4.16. Day Count Fraction, paragraph (b). Note that going from FpML 2.0 Recommendation to the FpML 3.0 Trial Recommendation the code in FpML 2.0 \'ACT/365.ISDA\' became \'ACT/ACT.ISDA\'.'} ACT_ACT_ISDA,
  {meta::pure::profiles::doc.doc = 'The Fixed/Floating Amount will be calculated in accordance with Rule 251 of the statutes, by-laws, rules and recommendations of the International Securities Market Association, as published in April 1999, as applied to straight and convertible bonds issued after December 31, 1998, as though the Fixed/Floating Amount were the interest coupon on such a bond. This day count fraction code is applicable for transactions booked under the 2000 ISDA Definitions. Transactions under the 2006 ISDA Definitions should use the ACT/ACT.ICMA code instead.'} ACT_ACT_ISMA,
  {meta::pure::profiles::doc.doc = 'The number of Business Days in the Calculation Period or Compounding Period in respect of which payment is being made divided by 252.'} BUS_252,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions, Section 4.16. Day Count Fraction, paragraph (a) or Annex to the 2000 ISDA Definitions (June 2000 Version), Section 4.16. Day Count Fraction, paragraph (a).'} _1_1,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions, Section 4.16. Day Count Fraction, paragraph (g) or Annex to the 2000 ISDA Definitions (June 2000 Version), Section 4.16. Day Count Fraction, paragraph (f). Note that the algorithm defined for this day count fraction has changed between the 2000 ISDA Definitions and 2006 ISDA Definitions. See Introduction to the 2006 ISDA Definitions for further information relating to this change.'} _30E_360,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions, Section 4.16. Day Count Fraction, paragraph (h). Note the algorithm for this day count fraction under the 2006 ISDA Definitions is designed to yield the same results in practice as the version of the 30E/360 day count fraction defined in the 2000 ISDA Definitions. See Introduction to the 2006 ISDA Definitions for further information relating to this change.'} _30E_360_ISDA,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions, Section 4.16. Day Count Fraction, paragraph (f) or Annex to the 2000 ISDA Definitions (June 2000 Version), Section 4.16. Day Count Fraction, paragraph (e).'} _30_360,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions Supplement number 43, Day Count Fraction, if \'RBA Bond Basis (quarter)\' is specified, 0.25. However, Actual/Actual (ISDA) applies to each of the first Calculation Period and the final Calculation Period if such Calculation Period is less than three months'} RBA_BOND_BASIS_QUARTER,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions Supplement number 43, Day Count Fraction, if \'RBA Bond Basis (semi-annual)\' is specified, 0.5. However, Actual/Actual (ISDA) applies to each of the first Calculation Period and the final Calculation Period if such Calculation Period is less than six months'} RBA_BOND_BASIS_SEMI_ANNUAL,
  {meta::pure::profiles::doc.doc = 'Per 2006 ISDA Definitions Supplement number 43, Day Count Fraction, (k)\tif \'RBA Bond Basis (semi-annual)\' is specified, 0.5. However, Actual/Actual (ISDA) applies to each of the first Calculation Period and the final Calculation Period if such Calculation Period is less than six months'} RBA_BOND_BASIS_ANNUAL
}

Enum {meta::pure::profiles::doc.doc = 'The enumeration of the account level for the billing summary.'} model::external::cdm::RecordAmountTypeEnum
{
  AccountTotal,
  GrandTotal,
  ParentTotal
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify the length unit in the Resource type.'} model::external::cdm::LengthUnitEnum
{
  Pages,
  TimeUnit
}

Enum {meta::pure::profiles::doc.doc = 'Specifies the type of the option.'} FpML::model::OptionTypeEnum
{
  Put,
  Call,
  Payer,
  Receiver,
  Straddle
}

Enum {meta::pure::profiles::doc.doc = 'The specification of whether an option will trigger or expire depending upon whether the spot rate is above or below the barrier rate.'} FpML::model::TriggerTypeEnum
{
  EqualOrLess,
  EqualOrGreater,
  Equal,
  Less,
  Greater
}

Enum {meta::pure::profiles::doc.doc = 'Defines applicable periods for interpolation.'} FpML::model::InterpolationPeriodEnum
{
  Initial,
  InitialAndFinal,
  Final,
  AnyPeriod
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify the relevant settled entity matrix source.'} model::external::cdm::SettledEntityMatrixSourceEnum
{
  {meta::pure::profiles::doc.doc = 'The Relevant Settled Entity Matrix shall be the list agreed for this purpose by the parties. The list is not included as part of the electronic confirmation.'} ConfirmationAnnex,
  {meta::pure::profiles::doc.doc = 'The term is not applicable.'} NotApplicable,
  {meta::pure::profiles::doc.doc = 'The Settled Entity Matrix published by the Index Publisher.'} Publisher
}

Enum {meta::pure::profiles::doc.doc = 'The method of calculating discounted payment amounts. The method of calculating discounted payment amounts. - For use with pre-trade Credit Limit Check messages.'} FpML::model::DiscountingTypeEnum
{
  Standard,
  FRA,
  FRAYield
}

Enum model::external::cdm::WorkflowStatusEnum
{
  Accepted,
  Alleged,
  Amended,
  Cancelled,
  Certain,
  Cleared,
  Pending,
  Rejected,
  Submitted,
  Terminated,
  Uncertain,
  Unconfirmed,
  Affirmed,
  Confirmed
}

Enum {meta::pure::profiles::doc.doc = 'A day of the seven-day week. A day of the seven-day week. - For use with pre-trade Credit Limit Check messages.'} FpML::model::DayOfWeekEnum
{
  MON,
  TUE,
  WED,
  THU,
  FRI,
  SAT,
  SUN
}

Enum {meta::pure::profiles::doc.doc = 'The specification of how an FX OTC option with a trigger payout will be paid if the trigger condition is met. The contract will specify whether the payout will occur immediately or on the original value date of the option.'} FpML::model::PayoutEnum
{
  Deferred,
  Immediate
}

Enum {meta::pure::profiles::doc.doc = 'The ISDA Collateral Assets Definitions as published by ISDA in the 2003 ISDA Collateral Asset Definitions.'} model::external::cdm::CollateralAssetDefinitionsEnum
{
  {meta::pure::profiles::doc.doc = 'Australian Dollar (AUD) Cash.'} AU_CASH,
  {meta::pure::profiles::doc.doc = 'Australian Government Securities Capital-Indexed Bonds.'} AU_CIB,
  {meta::pure::profiles::doc.doc = 'Australian Semi-Government Securities Fixed Interest Bonds.'} AU_FIB,
  {meta::pure::profiles::doc.doc = 'Australian Government Securities Fixed Rate Bonds.'} AU_FRB,
  {meta::pure::profiles::doc.doc = 'Australian Semi-Government Securities Index Linked Bonds.'} AU_ILB,
  {meta::pure::profiles::doc.doc = 'Australian Government Securities Treasury Notes.'} AU_NOTE,
  {meta::pure::profiles::doc.doc = 'Australian Semi-Government Securities Treasury Notes.'} AU_STATENOTE,
  {meta::pure::profiles::doc.doc = 'Australian Government Securities Treasury Adjustable Rate Bonds.'} AU_TAB,
  {meta::pure::profiles::doc.doc = 'BEL20 Equity Securities.'} BE_BEL20,
  {meta::pure::profiles::doc.doc = 'Belgian Treasury Certificates.'} BE_CERT,
  {meta::pure::profiles::doc.doc = 'Belgian Linear Obligations.'} BE_LINEAR,
  {meta::pure::profiles::doc.doc = 'Belgian Treasury notes.'} BE_NOTE,
  {meta::pure::profiles::doc.doc = 'Public sector issues guaranteed by Regional Authorities.'} BE_REGIONGT,
  {meta::pure::profiles::doc.doc = 'Public sector issues guaranteed by the Belgian State.'} BE_STATEGT,
  {meta::pure::profiles::doc.doc = 'Belgian State Loans.'} BE_STATELOAN,
  {meta::pure::profiles::doc.doc = 'Canada Bonds.'} CA_BOND,
  {meta::pure::profiles::doc.doc = 'Canadian Dollar (CAD) Cash.'} CA_CASH,
  {meta::pure::profiles::doc.doc = 'Government of Canada Real Return Bonds.'} CA_RRB,
  {meta::pure::profiles::doc.doc = 'Government of Canada Treasury Bills.'} CA_TBILL,
  {meta::pure::profiles::doc.doc = 'Public Authority Bond.'} CH_CANTON,
  {meta::pure::profiles::doc.doc = 'Swiss Franc (CHF) Cash.'} CH_CASH,
  {meta::pure::profiles::doc.doc = 'Federal Bond.'} CH_FEDBOND,
  {meta::pure::profiles::doc.doc = 'Unverzinsliche Schatzanweisungen (Bills).'} DE_BILL,
  {meta::pure::profiles::doc.doc = 'Bundesanleihen (Bonds).'} DE_BOND,
  {meta::pure::profiles::doc.doc = 'Negotiable Debt Obligations issued by or taken over and since serviced and managed by the Erblasttilgungsfond (Redemption Fund for Inherited Liabilities) backed by Federal Republic of Germany, including but not limited to former issues of the Treuhandanstalt, the Bundesbahn, the Bundespost, the Economic Recovery Program (ERP), the privatised Federal Railway (Bahn AG), the telecommunications element of the Federal Post Office (Telekom) and the German Unity Fund.'} DE_ERBLAST,
  {meta::pure::profiles::doc.doc = 'Kommunalschuldverschreib\tungen (Municipal Bonds).'} DE_MUNI,
  {meta::pure::profiles::doc.doc = 'Bundesschatzanweisungen (Notes).'} DE_NOTE2,
  {meta::pure::profiles::doc.doc = 'Bundesobligationen (Notes).'} DE_NOTE5_5,
  {meta::pure::profiles::doc.doc = 'Hypothekenpfandbriefe (Mortgage Bonds).'} DE_PFAND,
  {meta::pure::profiles::doc.doc = 'Skatkammerbeviser (Treasury Bills).'} DK_BILL,
  {meta::pure::profiles::doc.doc = 'BoligX obligationer.'} DK_BOLIGX,
  {meta::pure::profiles::doc.doc = 'Statsobligationer (Government Bonds).'} DK_BOND,
  {meta::pure::profiles::doc.doc = 'Callable Mortgage Bonds.'} DK_CALLMORT,
  {meta::pure::profiles::doc.doc = 'Danish Krone (DKK) Cash.'} DK_CASH,
  {meta::pure::profiles::doc.doc = 'KFX Equity Securities.'} DK_KFX,
  {meta::pure::profiles::doc.doc = 'Non-callable Mortgage Bonds.'} DK_MORT,
  {meta::pure::profiles::doc.doc = 'Statsgaeldsbeviser (Treasury Notes).'} DK_NOTE,
  {meta::pure::profiles::doc.doc = 'Treasury Bills - Letras del Tesoro.'} ES_BILL,
  {meta::pure::profiles::doc.doc = 'Public Government Debt.'} ES_BOND,
  {meta::pure::profiles::doc.doc = 'Cedulas.'} ES_CEDULAS,
  {meta::pure::profiles::doc.doc = 'Corporate Bonds.'} ES_CORP,
  {meta::pure::profiles::doc.doc = 'Equity securities issued by a Spanish company, and listed as an IBEX 35 constituent company as reported by the Sociedad de Bolsas, each share representing the minimum unit of participation of a shareholder in the stock capital of the company.'} ES_EQUITY,
  {meta::pure::profiles::doc.doc = 'Euro (EUR) Cash.'} EU_CASH,
  {meta::pure::profiles::doc.doc = 'FTSE Euro 100 Index Equity Securities.'} EU_EURO100,
  {meta::pure::profiles::doc.doc = 'FTSE Eurotop 300 Index Equity Securities.'} EU_EUROTOP300,
  {meta::pure::profiles::doc.doc = 'EuroSTOXX 50 Index Equity Securities.'} EU_STOXX50,
  {meta::pure::profiles::doc.doc = 'STOXX 600 Index Equity Securities.'} EU_STOXX600,
  {meta::pure::profiles::doc.doc = 'Treasury bills.'} FI_BILL,
  {meta::pure::profiles::doc.doc = 'Serial bonds (Finnish Government Bond).'} FI_BOND,
  {meta::pure::profiles::doc.doc = 'HEX Equity Securities.'} FI_HEX,
  {meta::pure::profiles::doc.doc = 'Commercial Paper: (Billet de Tr\u00E9sorerie).'} FR_BDT,
  {meta::pure::profiles::doc.doc = 'Treasury Notes: Bons du Tr\u00E9sor \u00E0 Taux Annuel (BTAN).'} FR_BTAN,
  {meta::pure::profiles::doc.doc = 'Treasury Bills: Bons du Tr\u00E9sor \u00E0 Taux Fixe (BTF).'} FR_BTF,
  {meta::pure::profiles::doc.doc = 'Government bonds: Obligations Assimilables du Tr\u00E9sor (OAT).'} FR_OAT,
  {meta::pure::profiles::doc.doc = 'STRIPS.'} FR_STRIP,
  {meta::pure::profiles::doc.doc = 'Generally Accepted Australian Government Obligations.'} GA_AU_GOV,
  {meta::pure::profiles::doc.doc = 'Generally Accepted Belgian Government Obligations.'} GA_BE_GOV,
  {meta::pure::profiles::doc.doc = 'Generally Accepted Canadian Government Obligations.'} GA_CA_GOV,
  {meta::pure::profiles::doc.doc = 'Generally Accepted Swiss Government Obligations.'} GA_CH_GOV,
  {meta::pure::profiles::doc.doc = 'Generally Accepted German Government Obligations.'} GA_DE_GOV,
  {meta::pure::profiles::doc.doc = 'Generally Accepted Danish Government Obligations.'} GA_DK_GOV,
  {meta::pure::profiles::doc.doc = 'Generally Accepted Spanish Government Obligations.'} GA_ES_GOV,
  {meta::pure::profiles::doc.doc = 'Generally Accepted Euro Zone Government Securities.'} GA_EUROZONE_GOV,
  {meta::pure::profiles::doc.doc = 'Generally Accepted EU Member State Government Securities.'} GA_EU_GOV,
  {meta::pure::profiles::doc.doc = 'Generally Accepted Finnish Government Obligations.'} GA_FI_GOV,
  {meta::pure::profiles::doc.doc = 'Generally Accepted French Government Obligations.'} GA_FR_GOV,
  {meta::pure::profiles::doc.doc = 'Generally Accepted G5 Government Obligations.'} GA_G5_GOV,
  {meta::pure::profiles::doc.doc = 'Generally Accepted British Government Obligations.'} GA_GB_GOV,
  {meta::pure::profiles::doc.doc = 'Generally Accepted Hong Kong Government Obligations.'} GA_HK_GOV,
  {meta::pure::profiles::doc.doc = 'Generally Accepted Italian Government Obligations.'} GA_IT_GOV,
  {meta::pure::profiles::doc.doc = 'Generally Accepted Japanese Government Obligations.'} GA_JP_GOV,
  {meta::pure::profiles::doc.doc = 'Generally Accepted Korean Government Obligations.'} GA_KR_GOV,
  {meta::pure::profiles::doc.doc = 'Generally Accepted Netherlands Government Obligations.'} GA_NL_GOV,
  {meta::pure::profiles::doc.doc = 'Generally Accepted Norwegian Government Obligations.'} GA_NO_GOV,
  {meta::pure::profiles::doc.doc = 'Generally Accepted New Zealand Government Obligations.'} GA_NZ_GOV,
  {meta::pure::profiles::doc.doc = 'Generally Accepted Swedish Government Obligations.'} GA_SE_GOV,
  {meta::pure::profiles::doc.doc = 'Generally Accepted Singaporean Government Obligations.'} GA_SG_GOV,
  {meta::pure::profiles::doc.doc = 'Generally Accepted US Agency Obligations.'} GA_US_AGENCY,
  {meta::pure::profiles::doc.doc = 'Generally Accepted US Government Obligations.'} GA_US_GOV,
  {meta::pure::profiles::doc.doc = 'Generally Accepted US Mortgage-Backed Obligations.'} GA_US_MORTGAGES,
  {meta::pure::profiles::doc.doc = 'British Pound Sterling (GBP) Cash.'} GB_CASH,
  {meta::pure::profiles::doc.doc = 'Double-dated Gilts.'} GB_DDGILT,
  {meta::pure::profiles::doc.doc = 'FTSE 100 Equity Securities.'} GB_FT100,
  {meta::pure::profiles::doc.doc = 'FTSE 250 Equity Securities.'} GB_FT250,
  {meta::pure::profiles::doc.doc = 'FTSE 350 Equity Securities.'} GB_FT350,
  {meta::pure::profiles::doc.doc = 'Conventional Gilts.'} GB_GILT,
  {meta::pure::profiles::doc.doc = 'Index-Linked Gilts.'} GB_INDEXGILT,
  {meta::pure::profiles::doc.doc = 'Undated or Perpetual Gilts.'} GB_PERPGILT,
  {meta::pure::profiles::doc.doc = 'Rump Stock.'} GB_RUMPGILT,
  {meta::pure::profiles::doc.doc = 'Bank of England Euro Bills.'} GB_SUPR1,
  {meta::pure::profiles::doc.doc = 'Bank of England Euro Notes.'} GB_SUPR2,
  {meta::pure::profiles::doc.doc = 'UK Treasury Bills.'} GB_TBILL,
  {meta::pure::profiles::doc.doc = 'Gilt Strips or Zero Coupon Gilts.'} GB_ZEROGILT,
  {meta::pure::profiles::doc.doc = 'Hong Kong Government Exchange Fund Bills.'} HK_BILL,
  {meta::pure::profiles::doc.doc = 'Hong Kong Dollar (HKD) Cash.'} HK_CASH,
  {meta::pure::profiles::doc.doc = 'Hong Kong Government Exchange Fund Notes.'} HK_NOTE,
  {meta::pure::profiles::doc.doc = 'Botbuoni Ordinari del Tesoro (BOT) zero coupon debt securities issued by the Italian Treasury with maturities up to 365 days.'} IT_BOT,
  {meta::pure::profiles::doc.doc = 'Buoni del Tesoro Poliennali fixed interest semi-annual debt securities issued by the Italian Treasury with original maturities between 3 and 30 years.'} IT_BTP,
  {meta::pure::profiles::doc.doc = 'Certificati di Credito del Tesoro a Cedola Variable (CCT) or floating rate interest bearing debt securities issued by the Italian Treasury.'} IT_CCT,
  {meta::pure::profiles::doc.doc = 'Corporate bonds.'} IT_CORP,
  {meta::pure::profiles::doc.doc = 'Certificati del Tesoro zero coupon debt securities issued by the Italian Treasury with maturities between 18 and 24 months.'} IT_CTZ,
  {meta::pure::profiles::doc.doc = 'MIB30 Equity Securities.'} IT_MIB30,
  {meta::pure::profiles::doc.doc = 'Debt securities issued and marketed by the Republic of Italy outside the Italian market, traded as Eurobonds.'} IT_REP,
  {meta::pure::profiles::doc.doc = 'Japanese Yen (JPY) Cash.'} JP_CASH,
  {meta::pure::profiles::doc.doc = 'Corporate bonds including straight bonds.'} JP_CORPORATE,
  {meta::pure::profiles::doc.doc = 'Commercial Paper.'} JP_CP,
  {meta::pure::profiles::doc.doc = 'Equity securities issued by a Japanese company, each share representing the minimum unit of participation of a partner in the stock capital of the company.'} JP_EQUITY,
  {meta::pure::profiles::doc.doc = 'Yen-denominated foreign bonds.'} JP_EUROBOND,
  {meta::pure::profiles::doc.doc = 'Japanese Government Bonds.'} JP_JGB,
  {meta::pure::profiles::doc.doc = 'Korean Treasury Bonds.'} KR_BOND,
  {meta::pure::profiles::doc.doc = 'Korean Won (KRW) Cash.'} KR_CASH,
  {meta::pure::profiles::doc.doc = 'Non Korean Won denominated Export-Import Bank of Korea bonds.'} KR_EXIM,
  {meta::pure::profiles::doc.doc = 'Korean Development Insurance Corporation Bonds (Korean Won denominated).'} KR_KDICKRW,
  {meta::pure::profiles::doc.doc = 'Non-Korean Won denominated Korea Development Bank bonds (KDBs).'} KR_KDR,
  {meta::pure::profiles::doc.doc = 'KEPCO bonds.'} KR_KEPCO,
  {meta::pure::profiles::doc.doc = 'Monetary Stabilisation Bonds.'} KR_MSB,
  {meta::pure::profiles::doc.doc = 'Non Korean Won denominated Korea National Housing Corporation bonds (KNHCs).'} KR_NHC,
  {meta::pure::profiles::doc.doc = 'Non-Korean Won denominated Republic of Korea bonds (ROKs).'} KR_ROK,
  {meta::pure::profiles::doc.doc = 'AEX Equity Securities.'} NL_AEX,
  {meta::pure::profiles::doc.doc = 'Dutch Treasury Certificates.'} NL_BILL,
  {meta::pure::profiles::doc.doc = 'Dutch State Loans.'} NL_BOND,
  {meta::pure::profiles::doc.doc = 'Norwegian Government Bonds.'} NO_BOND,
  {meta::pure::profiles::doc.doc = 'Norwegian Krone (NOK) Cash.'} NO_CASH,
  {meta::pure::profiles::doc.doc = 'OBX Equity Securities.'} NO_OBX,
  {meta::pure::profiles::doc.doc = 'Norwegian T-Bills.'} NO_TBILL,
  {meta::pure::profiles::doc.doc = 'New Zealand Government Bonds.'} NZ_BOND,
  {meta::pure::profiles::doc.doc = 'New Zealand Dollar (NZD) Cash.'} NZ_CASH,
  {meta::pure::profiles::doc.doc = 'New Zealand Government Treasury Bills.'} NZ_TBILL,
  {meta::pure::profiles::doc.doc = 'Swedish Krona (SEK) Cash.'} SE_CASH,
  {meta::pure::profiles::doc.doc = 'Swedish Government Bonds (SGB).'} SE_GOVT,
  {meta::pure::profiles::doc.doc = 'Swedish Index Linked Government bonds.'} SE_ILGOVT,
  {meta::pure::profiles::doc.doc = 'Swedish Mortgage Bonds.'} SE_MORT,
  {meta::pure::profiles::doc.doc = 'OMX Equity Securities.'} SE_OMX,
  {meta::pure::profiles::doc.doc = 'Swedish Treasury Bills (STB).'} SE_TBILL,
  {meta::pure::profiles::doc.doc = 'Singapore Government (SGS) Bonds.'} SG_BOND,
  {meta::pure::profiles::doc.doc = 'Singapore Dollar (SGD) Cash.'} SG_CASH,
  {meta::pure::profiles::doc.doc = 'Singapore Government T-Bills (T-Bills).'} SG_TBILL,
  {meta::pure::profiles::doc.doc = 'Inter-American Development Bank Bonds.'} SU_IADB,
  {meta::pure::profiles::doc.doc = 'International Bank for Reconstruction and Development (World Bank) Discount Notes.'} SU_IBRDDN,
  {meta::pure::profiles::doc.doc = 'International Bank for Reconstruction and Development (World Bank or IBRD) Global Benchmark Bonds.'} SU_IBRDGB,
  {meta::pure::profiles::doc.doc = 'Adjustable Rate Mortgage (ARM) Bonds.'} US_ARM,
  {meta::pure::profiles::doc.doc = 'United States of America Dollar (USD) Cash.'} US_CASH,
  {meta::pure::profiles::doc.doc = 'REMICs, CMOs and other derivative structures.'} US_DERIV,
  {meta::pure::profiles::doc.doc = 'Dow Jones Industrial Average Equity Securities.'} US_DOW,
  {meta::pure::profiles::doc.doc = 'Dow Jones Composite Average Equity Securities.'} US_DOW_COMP,
  {meta::pure::profiles::doc.doc = 'Dow Jones Transportation\tAverage Equity Securities.'} US_DOW_TRAN,
  {meta::pure::profiles::doc.doc = 'Dow Jones Utilities Average Equity Securities.'} US_DOW_UTIL,
  {meta::pure::profiles::doc.doc = 'Federal Agricultural Mortgage Corp (Farmer Mac) Bonds.'} US_FAMC,
  {meta::pure::profiles::doc.doc = 'Farm Credit System (FCS) Bonds.'} US_FCS,
  {meta::pure::profiles::doc.doc = 'Farm Credit System Financial Assistance Corporation (FCSFAC) Bonds.'} US_FCSFAC,
  {meta::pure::profiles::doc.doc = 'Callable Agency Debt \u2013 Federal Home Loan Bank (FHLB).'} US_FHLB,
  {meta::pure::profiles::doc.doc = 'Non-Callable Federal Home Loan Bank Debt.'} US_FHLBNC,
  {meta::pure::profiles::doc.doc = 'Non-Callable Federal Home Loan Bank Discount Notes.'} US_FHLBNCDN,
  {meta::pure::profiles::doc.doc = 'Callable Agency Debt \u2013 the Federal Home Loan Mortgage Corporation (FHLMC or Freddie Mac).'} US_FHLMC,
  {meta::pure::profiles::doc.doc = 'Federal Home Loan Mortgage Corporation Certificates \u2013 Mortgage Backed Securities.'} US_FHLMCMBS,
  {meta::pure::profiles::doc.doc = 'Financing Corp (FICO) Bonds.'} US_FICO,
  {meta::pure::profiles::doc.doc = 'Callable Agency Debt \u2013 Federal National Mortgage Association (FNMA or Fannie Mae).'} US_FNMA,
  {meta::pure::profiles::doc.doc = 'Federal National Mortgage Association Certificates \u2013 Mortgage Backed Securities.'} US_FNMAMBS,
  {meta::pure::profiles::doc.doc = 'Callable Agency Debt \u2013 Government National Mortgage Association (GNMA).'} US_GNMA,
  {meta::pure::profiles::doc.doc = 'Government National Mortgage Association Certificates \u2013 Mortgage Backed Securities (GNMA or Ginnie Mae)'} US_GNMAMBS,
  {meta::pure::profiles::doc.doc = 'Lehman Brothers Credit Bond Index Debt Securities.'} US_LEHM_BOND,
  {meta::pure::profiles::doc.doc = 'NASDAQ-100 Index Equity Securities.'} US_NAS_100,
  {meta::pure::profiles::doc.doc = 'NASDAQ Composite Index Equity Securities.'} US_NAS_COMP,
  {meta::pure::profiles::doc.doc = 'Non-Callable Agency Debt \u2013 Various Issuers.'} US_NCAD,
  {meta::pure::profiles::doc.doc = 'Non-Callable Agency Discount Notes \u2013 Various Issuers.'} US_NCADN,
  {meta::pure::profiles::doc.doc = 'NYSE Composite Index Equity Securities.'} US_NYSE_COMP,
  {meta::pure::profiles::doc.doc = 'Resolution Funding Corp (REFCorp) Bonds.'} US_REFCORP,
  {meta::pure::profiles::doc.doc = 'Student Loan Marketing Association (Sallie Mae) Bonds.'} US_SLMA,
  {meta::pure::profiles::doc.doc = 'US Treasury Strips.'} US_STRIP,
  {meta::pure::profiles::doc.doc = 'Standard & Poor\u2019s 100 Index Equity Securities.'} US_S_P100,
  {meta::pure::profiles::doc.doc = 'Standard & Poor\u2019s Midcap 400 Equity Securities. corporations that are included within the Standard And Poor\'s Midcap 400 Index published by Standard And Poor\'s, a division of The McGraw-Hill Companies, Inc.'} US_S_P400,
  {meta::pure::profiles::doc.doc = 'Standard & Poor\u2019s 500 Index Equity Securities.'} US_S_P500,
  {meta::pure::profiles::doc.doc = 'Standard & Poor\u2019s Smallcap 600 Index Equity Securities.'} US_S_P600,
  {meta::pure::profiles::doc.doc = 'US Treasury Bills.'} US_TBILL,
  {meta::pure::profiles::doc.doc = 'US Treasury Bonds.'} US_TBOND,
  {meta::pure::profiles::doc.doc = 'US Treasury Inflation Protected Issues (TIPS).'} US_TIPS,
  {meta::pure::profiles::doc.doc = 'US Treasury Notes.'} US_TNOTE,
  {meta::pure::profiles::doc.doc = 'Tennessee Valley Authority (TVA) Bonds.'} US_TVA
}

Enum {meta::pure::profiles::doc.doc = 'Specifies an additional Forward type.'} FpML::model::EquityOptionTypeEnum
{
  Put,
  Call,
  Forward
}

Enum model::external::cdm::RoundingModeEnum
{
  Down,
  Up
}

Enum {meta::pure::profiles::doc.doc = 'Enumerated values to specify whether the price is expressed in absolute or relative terms.'} model::external::cdm::PriceExpressionEnum
{
  {meta::pure::profiles::doc.doc = 'The price is expressed as an absolute amount.'} AbsoluteTerms,
  {meta::pure::profiles::doc.doc = 'The price is expressed in percentage of the notional amount.'} PercentageOfNotional,
  {meta::pure::profiles::doc.doc = 'Denotes a price expressed in percentage of face value with fractions which is used for quoting bonds, e.g. 101 3/8 indicates that the buyer will pay 101.375 of the face value.'} ParValueFraction
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify whether an option will trigger or expire depending upon whether the spot rate is above or below the barrier rate.'} model::external::cdm::TriggerTypeEnum
{
  {meta::pure::profiles::doc.doc = 'The underlier price must be equal to or less than the Trigger level.'} EqualOrLess,
  {meta::pure::profiles::doc.doc = 'The underlier price must be equal to or greater than the Trigger level.'} EqualOrGreater,
  {meta::pure::profiles::doc.doc = 'The underlier price must be equal to the Trigger level.'} Equal,
  {meta::pure::profiles::doc.doc = 'The underlier price must be less than the Trigger level.'} Less,
  {meta::pure::profiles::doc.doc = 'The underlier price must be greater than the Trigger level.'} Greater
}

Enum model::external::cdm::TerminationCurrencyConditionEnum
{
  {meta::pure::profiles::doc.doc = 'A currency in which payments would be due under one or more Transactions.'} PaymentsDue,
  {meta::pure::profiles::doc.doc = 'A currency that is freely available.'} FreelyAvailable,
  {meta::pure::profiles::doc.doc = 'A currency in which payments would be due under one or more Transactions and that is freely available.'} PaymentsDueAndFreelyAvailable,
  {meta::pure::profiles::doc.doc = 'Termination Currency Conditions are specified.'} Specified
}

Enum {meta::pure::profiles::doc.doc = 'Environmental Product (e.g. allowance, certificate or unit).'} FpML::model::EnvironmentalProductTypeEnum
{
  EUAllowance,
  EUCredit,
  AlternativeAllowance,
  NOXEmissionsProduct,
  RegionalEmissionsProduct,
  RGGIEmissionsProduct,
  SO2EmissionsProduct,
  StateEmissionProduct,
  VoluntaryEmissionProduct,
  RenewableEnergyCertificate,
  AUSCarbonCreditUnit,
  AUSCarbonUnit,
  AUSEnergySavingCertificate,
  AUSLargeScaleGenerationCertificate,
  AUSSmallScaleTechnologyCertificate,
  AUSVictorianEnergyEfficiencyCertificate,
  MXCCFECRTINTLODS,
  NZEmissionsUnits,
  UKRenewableObligationCertificate
}

Enum {meta::pure::profiles::doc.doc = 'The enumeration values to specify the type of payment.'} model::external::cdm::PaymentTypeEnum
{
  {meta::pure::profiles::doc.doc = 'A cash flow corresponding to the periodic accrued interests.'} Coupon,
  {meta::pure::profiles::doc.doc = 'A cashflow resulting from a credit event.'} CreditEvent,
  {meta::pure::profiles::doc.doc = 'A cash flow corresponding to the synthetic dividend of an equity underlier asset traded through a derivative instrument.'} DividendReturn,
  {meta::pure::profiles::doc.doc = 'A cash flow associated with an exercise lifecycle event.'} Exercise,
  {meta::pure::profiles::doc.doc = 'Interest, without qualification as to whether it a gross or net interest relates cashflow.'} Interest,
  {meta::pure::profiles::doc.doc = 'A cash flow corresponding to the return of the interest rate portion of a derivative instrument that has different types of underlying assets, such as a total return swap.'} InterestReturn,
  {meta::pure::profiles::doc.doc = 'Net interest across payout components. Applicable to products such as interest rate swaps.'} NetInterest,
  {meta::pure::profiles::doc.doc = 'A cash flow corresponding to the return of the price portion of a derivative instrument that has different types of underlying assets, such as a total return swap.'} PriceReturn,
  {meta::pure::profiles::doc.doc = 'A cash flow which amount typically corresponds to the notional of the contract and that is exchanged between the parties on trade inception and reverted back when the contract is terminated.'} PrincipalExchange,
  NetCashflow
}

Enum {meta::pure::profiles::doc.doc = 'Upon the occurrence of an Abandonment of Scheme, as defined in clause (h)(iv) of the Emissions Annex, one of the following elections, the specific terms of which are set forth in clause (b)(iii) of the Emissions Annex, will govern the parties\u2019 rights and obligations with respect to this Emissions Transaction. If none of the above options is selected, Option A(1) will apply.'} FpML::model::EnvironmentalAbandonmentOfSchemeEnum
{
  OptionA_1_,
  OptionA_2_,
  OptionB,
  OptionC
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values for the party role. The enumerated values go beyond the FpML partyRoleScheme as they also include elements that are part of the FpML Trade, such as the Barrier Determination Agent and the Hedging Party.'} model::external::cdm::PartyRoleEnum
{
  {meta::pure::profiles::doc.doc = 'Organization responsible for preparing the accounting for the trade.'} Accountant,
  {meta::pure::profiles::doc.doc = 'An agent who lends securities of its principals under stock lending arrangements.'} AgentLender,
  {meta::pure::profiles::doc.doc = 'The organization responsible for supplying the allocations for a trade to be allocated to multiple accounts/organizations.'} AllocationAgent,
  {meta::pure::profiles::doc.doc = 'The organization that arranged the trade, i.e. brought together the counterparties.  Synonyms/Alternatives: Inter-dealer broker, agent.'} ArrangingBroker,
  {meta::pure::profiles::doc.doc = 'The party specified in the related confirmation as Barrier Determination Agent.'} BarrierDeterminationAgent,
  {meta::pure::profiles::doc.doc = 'Organization that suffers the economic benefit of the trade.  The beneficiary may be distinct from the principal/counterparty - an example occurs when a hedge fund trades via a prime broker; in this case the principal is the prime broker, but the beneficiary is the hedge fund.  This can be represented as a payer/receiver account in the name of the hedge fund, but it is also possible to add the party role of \'Beneficiary\' at the partyTradeInformation level.'} Beneficiary,
  {meta::pure::profiles::doc.doc = 'The entity for which the organization supporting the trade\'s processing has booked/recorded the trade. This is used in non-reporting workflows situations in which the trade doesn\'t need to be reported but a firm still wants to specify their own side.'} BookingParty,
  {meta::pure::profiles::doc.doc = 'Acquirer of the legal title to the financial instrument. In the case of an option, the buyer is the holder of the option. In the case of a swap or forward, the buyer will be determined by industry best practice.  This does not refer to an investor or investment manager or other organization on what is typically called  the \'Buy side\'; for that, see the \'Client\' role. Corresponds to \'Buyer\' as defined in certain regulations such as ESMA MiFID II/MIFIR RTS 22 field 9.'} Buyer,
  {meta::pure::profiles::doc.doc = 'The party or person who, having legal authority to act on behalf of the trade counterparty acting as Buyer as defined in this coding scheme, made the decision to acquire the financial instrument. Corresponds to \'buyer decision maker\' as defined in ESMA\'s MIFIR RTS 23 report. This does not refer to the decision maker for what is traditionally called the \'Buy side\'; for that, see the \'Client Decision Maker\' role.'} BuyerDecisionMaker,
  {meta::pure::profiles::doc.doc = 'The party that provides credit support under English Law.'} Chargor,
  {meta::pure::profiles::doc.doc = 'An organization that clears trades through a clearing house, via a clearing broker (member of the clearing house) who acts as an agent on its behalf. The term \'client\' refers to the organization\'s role in the clearing process in relation to its clearing broker, and not whether it is a price maker or taker in the execution process.'} ClearingClient,
  {meta::pure::profiles::doc.doc = 'A party to the trade that claims a clearing exception, such as an end-user exception under Dodd-Frank Act provisions.'} ClearingExceptionParty,
  {meta::pure::profiles::doc.doc = 'Organization that submits the trade to a clearing house on behalf of the principal. Synonyms/alternates: Futures Commission Merchant (FCM), Clearing Broker, Clearing Member Firm. Some implementations use \'Clearing Broker\' as synonym.'} ClearingFirm,
  {meta::pure::profiles::doc.doc = 'The organization that acts as a central counterparty to clear a derivatives contract.  This is used to represent the role of Central Counterparties (CCPs) or Derivative Clearing Organizations (DCOs).  Sometimes called \'ClearingService\'. Some implementations also use the term \'Clearer\'.'} ClearingOrganization,
  {meta::pure::profiles::doc.doc = 'Client as defined under ESMA MIFIR. This is generally the investor or other client of an investment firm, and is synonymous with the Beneficiary in many circumstances.'} Client,
  {meta::pure::profiles::doc.doc = 'The party or person who, having legal authority to act on behalf of a trade counterparty, made the decision to acquire or sell the financial instrument.'} ClientDecisionMaker,
  {meta::pure::profiles::doc.doc = 'Organization serving as a financial intermediary for the purposes of electronic confirmation or providing services for post-processing of transactional data.'} ConfirmationPlatform,
  {meta::pure::profiles::doc.doc = 'A party to a contractual document.  If the intended usage relates to the context of the trade lifecycle, more specific annotations have been defined which might be more appropriate.'} ContractualParty,
  {meta::pure::profiles::doc.doc = 'Organization officially attached to the counterparty. e.g. partner, branch, subsidiary.'} CounterPartyAffiliate,
  {meta::pure::profiles::doc.doc = 'The topmost entity or organization, within the corporate hierarchy, responsible for the reporting party.'} CounterPartyUltimateParent,
  {meta::pure::profiles::doc.doc = 'An economic counterparty to the trade. Synonym: principal.'} Counterparty,
  {meta::pure::profiles::doc.doc = 'Organization that enhances the credit of another organization (similar to guarantor, but may not fully guarantee the obligation).'} CreditSupportProvider,
  {meta::pure::profiles::doc.doc = 'Organization that maintains custody of the asset represented by the trade on behalf of the owner/principal.'} Custodian,
  {meta::pure::profiles::doc.doc = 'Entity submitting the transaction report to the competent authority.'} DataSubmitter,
  {meta::pure::profiles::doc.doc = 'The party referenced is specified in the contract confirmation as Determination Party.'} DeterminingParty,
  {meta::pure::profiles::doc.doc = 'Organization that is disputing the trade or transaction.'} DisputingParty,
  {meta::pure::profiles::doc.doc = 'A marketplace organization which purpose is to maintain document records.  If the intended usage relates to the context of the trade lifecycle, more specific annotations have been defined which might be more appropriate.'} DocumentRepository,
  {meta::pure::profiles::doc.doc = 'The (generally sell-side) organization that executed the trade; the price-making party.'} ExecutingBroker,
  {meta::pure::profiles::doc.doc = 'Entity executing the transaction.  If the transaction is executed directly by the reporting party, it will be the reporting party.  If it is executed by an execution agent or an affiliated party on behalf of the reporting party, it will be that affiliate or agent.'} ExecutingEntity,
  {meta::pure::profiles::doc.doc = 'The (generally buy-side) organization that acts to execute trades on behalf of an investor. Typically this is an investment manager or asset manager, and also makes the investment decisions for the investor. If required, a separate InvestmentDecision role can be specified to distinguish that the party making the investment decision is different.'} ExecutionAgent,
  {meta::pure::profiles::doc.doc = 'The facility, exchange, or market where the trade was executed. Synonym: Swap Execution Facility, Designated Contract Market, Execution Venue.'} ExecutionFacility,
  {meta::pure::profiles::doc.doc = 'Organization that backs (guarantees) the credit risk of the trade.'} Guarantor,
  {meta::pure::profiles::doc.doc = 'The ISDA Hedging Party that is specified in the related confirmation as Hedging, or if no Hedging Party is specified, either party to the contract.'} HedgingParty,
  {meta::pure::profiles::doc.doc = 'The entity transmitting the order to the reporting firm. Synonym: Transmitting Firm.'} OrderTransmitter,
  {meta::pure::profiles::doc.doc = 'The party that provides credit support under New York Law.'} Pledgor,
  {meta::pure::profiles::doc.doc = 'The organization that takes on or took on the credit risk for this trade by stepping in between the two economic parties (without a central counterparty clearing mechanism).'} PrimeBroker,
  {meta::pure::profiles::doc.doc = 'The trade repository at which the trade was reported previous to the current trade repository.'} PriorTradeRepository,
  {meta::pure::profiles::doc.doc = 'The reporting service (whether trade repository, market data service, or exchange/facility/venue data distribution service) that published the report of this trade.'} PublicationVenue,
  {meta::pure::profiles::doc.doc = 'The party with the regulatory responsibility to report this trade.'} ReportingParty,
  {meta::pure::profiles::doc.doc = 'Organization officially attached to the reporting party  e.g. partner, branch, subsidiary.'} ReportingPartyAffiliate,
  {meta::pure::profiles::doc.doc = 'The topmost entity or organization, within the corporate hierarchy, responsible for the reporting party.'} ReportingPartyUltimateParent,
  {meta::pure::profiles::doc.doc = 'A counterparty in a trade, which performs in one of the following capacities: 1) it transfers or agrees to transfer in the future an instrument or title to that instrument in exchange for payment, 2) it writes a derivatives instrument such as an option or a swap in which it provides risk protection to the buyer. This does not refer to the broker/dealer or other organization on what is typically called  the \'Sell side\'; for that, see the \'Executing Broker\' role. Corresponds to \'Seller\' as defined in certain regulations such as ESMA MiFID II/MIFIR RTS 22 field 16.'} Seller,
  {meta::pure::profiles::doc.doc = 'The party or person who, having legal authority to act on behalf of the trade counterparty acting as Seller as defined in this coding scheme, made the decision to sell the financial instrument. Corresponds to \'seller decision maker\' as defined in ESMA\'s MIFIR RTS 23 report. This does not refer to the decision maker for what is traditionally called the \'Sell side\'; for that, see the \'Trader\' person role.'} SellerDecisionMaker,
  {meta::pure::profiles::doc.doc = 'The party that receives credit support under New York or English Law.'} SecuredParty,
  {meta::pure::profiles::doc.doc = 'The organization that makes or receives payments on behalf of the given principal party.'} SettlementAgent,
  {meta::pure::profiles::doc.doc = 'An organization that maintains records of the trade for regulatory reporting purposes.'} TradeRepository,
  {meta::pure::profiles::doc.doc = 'The organization that originally supplied the record of the trade. In the context of regulatory reporting, it is the submitter of the trade record to a regulator or TR.'} TradeSource,
  {meta::pure::profiles::doc.doc = 'The entity responsible for managing the assets/investments of this party.  Synonym:  Asset Manager, Investment Manager, Trading Advisory.'} TradingManager,
  {meta::pure::profiles::doc.doc = 'An entity with which this party trades from time to time, ie. with which it acts as a counterparty on some transactions.   This role is used for static reference data, not individual transactions.'} TradingPartner
}

Enum {meta::pure::profiles::doc.doc = 'When breakage cost is applicable, this defines who is calculating it.'} FpML::model::BreakageCalculatedByEnum
{
  AgentBank,
  Lender
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify the type of organisation involved in the transaction.'} model::external::cdm::CategoryEnum
{
  {meta::pure::profiles::doc.doc = 'The trade or trade report represents the information from the perspective of the sender of the report, typically a clearing member firm or dealer (acting as an agent).'} Agent,
  {meta::pure::profiles::doc.doc = 'The trade or trade report represents the information from the perspective of the counterparty of the sender of the report, which is typically a clearing member firm or dealer.'} Counterparty,
  {meta::pure::profiles::doc.doc = 'The trade or trade report represents the information from the perspective of a client opposite the sender of the report, which is typically a clearing member firm or dealer.'} Customer,
  {meta::pure::profiles::doc.doc = 'The trade or trade report represents the information from the perspective of the sender of the report, typically a clearing member firm or dealer (acting as a principal).'} Principal
}

Enum {meta::pure::profiles::doc.doc = 'The enumeration values associated with party identifier sources.'} model::external::cdm::PartyIdSourceEnum
{
  {meta::pure::profiles::doc.doc = 'The Bank Identifier Code.'} BIC,
  {meta::pure::profiles::doc.doc = 'The ISO 17442:2012 Legal Entity Identifier.'} LEI,
  {meta::pure::profiles::doc.doc = 'Alien Registration Number, number assigned by a social security agency to identify a non-resident person.'} ARNU,
  {meta::pure::profiles::doc.doc = 'Passport Number, number assigned by an authority to identify the passport number of a person.'} CCPT,
  {meta::pure::profiles::doc.doc = 'Customer Identification Number, number assigned by an issuer to identify a customer.'} CUST,
  {meta::pure::profiles::doc.doc = 'Drivers License Number, number assigned by an authority to identify a driver\'s license.'} DRLC,
  {meta::pure::profiles::doc.doc = 'Employee Identification Number, number assigned by a registration authority to an employee.'} EMPL,
  {meta::pure::profiles::doc.doc = 'National Identity Number, number assigned by an authority to identify the national identity number of a person..'} NIDN,
  {meta::pure::profiles::doc.doc = 'Social Security Number, number assigned by an authority to identify the social security number of a person.'} SOSE,
  {meta::pure::profiles::doc.doc = 'Tax Identification Number, number assigned by a tax authority to identify a person.'} TXID
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify whether payments occur relative to the calculation period start date or end date, each reset date, valuation date or the last pricing date.'} model::external::cdm::PayRelativeToEnum
{
  {meta::pure::profiles::doc.doc = 'Payments will occur relative to the first day of each calculation period.'} CalculationPeriodStartDate,
  {meta::pure::profiles::doc.doc = 'Payments will occur relative to the last day of each calculation period.'} CalculationPeriodEndDate,
  {meta::pure::profiles::doc.doc = 'Payments will occur relative to the last Pricing Date of each Calculation Period.'} LastPricingDate,
  {meta::pure::profiles::doc.doc = 'Payments will occur relative to the reset date.'} ResetDate,
  {meta::pure::profiles::doc.doc = 'Payments will occur relative to the valuation date.'} ValuationDate
}

Enum {meta::pure::profiles::doc.doc = 'Represents the enumerated values to specify the rating agencies.'} model::external::cdm::CreditRatingAgencyEnum
{
  {meta::pure::profiles::doc.doc = 'Denotes rating agency A. M. Best'} AMBest,
  {meta::pure::profiles::doc.doc = 'Denotes rating agency Canadian Bond Rating Service'} CBRS,
  {meta::pure::profiles::doc.doc = 'Denotes a composite rating determined by the average risk profile of Agency ratings.'} Composite,
  {meta::pure::profiles::doc.doc = 'Denotes rating agency Dominion Bond Rating Service'} DBRS,
  {meta::pure::profiles::doc.doc = 'Denotes rating agency Fitch'} Fitch,
  {meta::pure::profiles::doc.doc = 'Denotes rating agency Japan Credit Rating Agency, Ltd.'} JapanAgency,
  {meta::pure::profiles::doc.doc = 'Denotes rating agency Moody\'s'} Moodys,
  {meta::pure::profiles::doc.doc = 'Rating And Investment Information, Inc.'} RatingAndInvestmentInformation,
  {meta::pure::profiles::doc.doc = 'Denotes rating agency Standard And Poor\'s'} StandardAndPoors
}

Enum {meta::pure::profiles::doc.doc = 'The purpose of this element is to disambiguate whether the buyer of the product effectively buys protection or whether he buys risk (and, hence, sells protection) in the case, such as high yields instruments, where no firm standard appears to exist at the execution level.'} FpML::model::BuyerConventionEnum
{
  Protection,
  Risk
}

Enum {meta::pure::profiles::doc.doc = 'The ISDA defined value indicating the severity of a difference.'} FpML::model::DifferenceSeverityEnum
{
  Warning,
  Error
}

Enum model::external::cdm::CapFloorEnum
{
  {meta::pure::profiles::doc.doc = 'Denotes the maximum allowable level of a floating rate for the calculation period, which is used for a cap rate contractual product or in the context of a floating leg.  The CapRate is assumed to be exclusive of any spread, and is defined as a per annum rate expressed as a decimal, for example, the value of 0.05 is the equivalent of 5.0%.'} Cap,
  {meta::pure::profiles::doc.doc = 'Denotes the minimum allowable level of a floating rate for the calculation period. Can be used for a floor rate contractual product or in the context of a floating leg. The cap rate is assumed to be exclusive of any spread and is a per annum rate, expressed as a decimal.  For example, a floorRate value of 0.05 is the equivalent of 5.0%.'} Floor
}

Enum {meta::pure::profiles::doc.doc = 'The code specification of whether a trade is settling using standard settlement instructions as well as whether it is a candidate for settlement netting.'} FpML::model::StandardSettlementStyleEnum
{
  Standard,
  Net,
  StandardAndNet
}

Enum {meta::pure::profiles::doc.doc = 'the specific calculation method, e.g. lookback. This enumeration is used to represent the definitions of modular calculated rates as described in the 2021 ISDA Definitions, section 7.'} model::external::cdm::CalculationShiftMethodEnum
{
  {meta::pure::profiles::doc.doc = 'Calculations and weighting are done with respect to the calculation period, but observations are shifted back by several days.'} Lookback,
  {meta::pure::profiles::doc.doc = 'the observation period is shifted by several days prior to rate setting, and weightings are done with respect to the obseration period.'} ObservationPeriodShift,
  {meta::pure::profiles::doc.doc = 'Calculations cut the rate off several business days prior to rate setting (Lockout).'} RateCutOff,
  {meta::pure::profiles::doc.doc = 'calculations occur without any shifting, e.g. OIS Compounding/Basic Averaging style.'} NoShift
}

Enum {meta::pure::profiles::doc.doc = 'The type of adjustment applied to any amount.'} FpML::model::AmountAdjustmentEnum
{
  Decrease,
  Increase
}

Enum {meta::pure::profiles::doc.doc = 'The method of calculation to be used when averaging rates. Per ISDA 2000 Definitions, Section 6.2. Certain Definitions Relating to Floating Amounts. The method of calculation to be used when averaging rates. Per ISDA 2000 Definitions, Section 6.2. Certain Definitions Relating to Floating Amounts. - For use with pre-trade Credit Limit Check messages.'} FpML::model::AveragingMethodEnum
{
  Unweighted,
  Weighted
}

Enum {meta::pure::profiles::doc.doc = 'Premium Type for Forward Start Equity Option'} FpML::model::PremiumTypeEnum
{
  PrePaid,
  PostPaid,
  Variable,
  Fixed
}

Enum {meta::pure::profiles::doc.doc = 'The specification of which of the pay-side or the receive-side should be exercised when a straddle is exercised.'} FpML::model::ExerciseSideEnum
{
  Put,
  Call,
  Payer,
  Receiver
}

Enum {meta::pure::profiles::doc.doc = 'The conditions that govern the adjustment to the number of units of the equity swap.'} FpML::model::NotionalAdjustmentEnum
{
  Execution,
  PortfolioRebalancing,
  Standard
}

Enum {meta::pure::profiles::doc.doc = 'Represents an enumeration list to identify the asset type.'} model::external::cdm::AssetTypeEnum
{
  {meta::pure::profiles::doc.doc = 'Indentifies negotiable financial instrument of monetary value with an issue ownership position.'} Security,
  {meta::pure::profiles::doc.doc = 'Indentifies cash in a currency form.'} Cash,
  {meta::pure::profiles::doc.doc = 'Indentifies basic good used in commerce that is interchangeable with other goods of the same type.'} Commodity,
  {meta::pure::profiles::doc.doc = 'Indentifies other asset types.'} Other
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify the type of master confirmation agreement governing the transaction. While FpML positions the date a prefix, the CDM positions it as the suffix to handle grammar type constraints.'} model::external::cdm::MasterConfirmationTypeEnum
{
  {meta::pure::profiles::doc.doc = 'Used for CDS Index trades executed under the Dow Jones CDX Emerging Markets Master Confirmation.'} DJ_CDX_EM,
  {meta::pure::profiles::doc.doc = 'Used for CDS Index trades executed under the Dow Jones CDX Emerging Markets Diversified Master Confirmation.'} DJ_CDX_EM_DIV,
  {meta::pure::profiles::doc.doc = 'Used for CDS Index trades executed under the Dow Jones CDX Master Confirmation that covers CDX.NA.IG, CDX.NA.HY, and CDX.NA.XO.'} DJ_CDX_NA,
  {meta::pure::profiles::doc.doc = 'Used for CDS Index trades executed under the Dow Jones iTraxx Europe Master Confirmation Agreement.'} DJ_iTraxx_Europe,
  {meta::pure::profiles::doc.doc = 'A general reference to the types of Americas Master Confirmation Agreements. Use the more specific values to reference a specific type of Americas Master Confirmation Agreement.'} EquityAmericas,
  {meta::pure::profiles::doc.doc = 'A general reference to the types of Asia Master Confirmation Agreements. Use the more specific values to reference a specific type of Asia Master Confirmation Agreement.'} EquityAsia,
  {meta::pure::profiles::doc.doc = 'A general reference to the types of European Master Confirmation Agreements. Use the more specific values to reference a specific type of European Master Confirmation Agreement.'} EquityEuropean,
  {meta::pure::profiles::doc.doc = 'ISDA 1999 Master Credit Derivatives Confirmation Agreement.'} ISDA1999Credit,
  {meta::pure::profiles::doc.doc = 'ISDA 2003 Master Credit Derivatives Confirmation Agreement interpreted as if Asia had been specified as the relevant Transaction Type in the Transaction Supplement.'} ISDA2003CreditAsia,
  {meta::pure::profiles::doc.doc = 'ISDA 2003 Master Credit Derivatives Confirmation Agreement interpreted as if Australia and New Zealand had been specified as the relevant Transaction Type in the Transaction Supplement.'} ISDA2003CreditAustraliaNewZealand,
  {meta::pure::profiles::doc.doc = 'ISDA 2003 Master Credit Derivatives Confirmation Agreement interpreted as if European had been specified as the relevant Transaction Type in the Transaction Supplement.'} ISDA2003CreditEuropean,
  {meta::pure::profiles::doc.doc = 'ISDA 2003 Master Credit Derivatives Confirmation Agreement interpreted as if Japan had been specified as the relevant Transaction Type in the Transaction Supplement.'} ISDA2003CreditJapan,
  {meta::pure::profiles::doc.doc = 'ISDA 2003 Master Credit Derivatives Confirmation Agreement interpreted as if North American had been specified as the relevant Transaction Type in the Transaction Supplement.'} ISDA2003CreditNorthAmerican,
  {meta::pure::profiles::doc.doc = 'ISDA 2003 Master Credit Derivatives Confirmation Agreement interpreted as if Singapore had been specified as the relevant Transaction Type in the Transaction Supplement.'} ISDA2003CreditSingapore,
  {meta::pure::profiles::doc.doc = 'ISDA Sovereign 2003 Master Credit Derivatives Confirmation Agreement interpreted as if Asia had been specified as the relevant Transaction Type in the Transaction Supplement. The 2003 Sovereign Master Confirmation has been superceded by the 2004.'} ISDA2003CreditSovereignAsia,
  {meta::pure::profiles::doc.doc = 'ISDA Sovereign 2003 Master Credit Derivatives Confirmation Agreement interpreted as if Central and Eastern Europe had been specified as the relevant Transaction Type in the Transaction Supplement. The 2003 Sovereign Master Confirmation has been superceded by the 2004.'} ISDA2003CreditSovereignCentralAndEasternEurope,
  {meta::pure::profiles::doc.doc = 'ISDA Sovereign 2003 Master Credit Derivatives Confirmation Agreement interpreted as if Japan had been specified as the relevant Transaction Type in the Transaction Supplement. The 2003 Sovereign Master Confirmation has been superceded by the 2004.'} ISDA2003CreditSovereignJapan,
  {meta::pure::profiles::doc.doc = 'ISDA Sovereign 2003 Master Credit Derivatives Confirmation Agreement interpreted as if Latin America had been specified as the relevant Transaction Type in the Transaction Supplement. The 2003 Sovereign Master Confirmation has been superceded by the 2004.'} ISDA2003CreditSovereignLatinAmerica,
  {meta::pure::profiles::doc.doc = 'ISDA Sovereign 2003 Master Credit Derivatives Confirmation Agreement interpreted as if Middle East had been specified as the relevant Transaction Type in the Transaction Supplement. The 2003 Sovereign Master Confirmation has been superceded by the 2004.'} ISDA2003CreditSovereignMiddleEast,
  {meta::pure::profiles::doc.doc = 'ISDA Sovereign 2003 Master Credit Derivatives Confirmation Agreement interpreted as if Western Europe had been specified as the relevant Transaction Type in the Transaction Supplement. The 2003 Sovereign Master Confirmation has been superceded by the 2004.'} ISDA2003CreditSovereignWesternEurope,
  {meta::pure::profiles::doc.doc = 'Dummy MCA value mirroring the matrix term values StandardAsiaCorporate.'} ISDA2003StandardCreditAsia,
  {meta::pure::profiles::doc.doc = 'Dummy MCA value mirroring the matrix term values StandardAustraliaCorporate/Sovereign and StandardNewZealandCorporate/Sovereign.'} ISDA2003StandardCreditAustraliaNewZealand,
  {meta::pure::profiles::doc.doc = 'Dummy MCA value mirroring the matrix term value StandardEuropeanCorporate.'} ISDA2003StandardCreditEuropean,
  {meta::pure::profiles::doc.doc = 'Dummy MCA value mirroring the matrix term values StandardJapanCorporate.'} ISDA2003StandardCreditJapan,
  {meta::pure::profiles::doc.doc = 'Dummy MCA value mirroring the matrix term value StandardNorthAmericanCorporate.'} ISDA2003StandardCreditNorthAmerican,
  {meta::pure::profiles::doc.doc = 'Dummy MCA value mirroring the matrix term values StandardSingaporeCorporate/Sovereign.'} ISDA2003StandardCreditSingapore,
  {meta::pure::profiles::doc.doc = 'ISDA Sovereign 2004 Master Credit Derivatives Confirmation Agreement interpreted as if Asia had been specified as the relevant Transaction Type in the Transaction Supplement.'} ISDA2004CreditSovereignAsia,
  {meta::pure::profiles::doc.doc = 'ISDA Sovereign 2004 Master Credit Derivatives Confirmation Agreement interpreted as if Emerging European and Middle Eastern had been specified as the relevant Transaction Type in the Transaction Supplement.'} ISDA2004CreditSovereignEmergingEuropeanAndMiddleEastern,
  {meta::pure::profiles::doc.doc = 'ISDA Sovereign 2004 Master Credit Derivatives Confirmation Agreement interpreted as if Japan had been specified as the relevant Transaction Type in the Transaction Supplement.'} ISDA2004CreditSovereignJapan,
  {meta::pure::profiles::doc.doc = 'ISDA Sovereign 2004 Master Credit Derivatives Confirmation Agreement interpreted as if Latin American had been specified as the relevant Transaction Type in the Transaction Supplement.'} ISDA2004CreditSovereignLatinAmerican,
  {meta::pure::profiles::doc.doc = 'ISDA Sovereign 2004 Master Credit Derivatives Confirmation Agreement interpreted as if Western European had been specified as the relevant Transaction Type in the Transaction Supplement.'} ISDA2004CreditSovereignWesternEuropean,
  {meta::pure::profiles::doc.doc = 'The ISDA 2004 Americas Interdealer Master Equity Derivatives Confirmation Agreement applies.'} ISDA2004EquityAmericasInterdealer,
  {meta::pure::profiles::doc.doc = 'The Revised ISDA 2004 Americas Interdealer Master Equity Derivatives Confirmation Agreement applies.'} ISDA2004EquityAmericasInterdealerRev1,
  {meta::pure::profiles::doc.doc = 'Dummy MCA value mirroring the matrix term values StandardAsiaSovereign.'} ISDA2004StandardCreditSovereignAsia,
  {meta::pure::profiles::doc.doc = 'Dummy MCA value mirroring the matrix term value StandardEmergingEuropeanAndMiddleEasternSovereign.'} ISDA2004StandardCreditSovereignEmergingEuropeanAndMiddleEastern,
  {meta::pure::profiles::doc.doc = 'Dummy MCA value mirroring the matrix term values StandardJapanSovereign.'} ISDA2004StandardCreditSovereignJapan,
  {meta::pure::profiles::doc.doc = 'Dummy MCA value mirroring the matrix term value StandardLatinAmericaSovereign.'} ISDA2004StandardCreditSovereignLatinAmerican,
  {meta::pure::profiles::doc.doc = 'Dummy MCA value mirroring the matrix term value StandardWesternEuropeanSovereign.'} ISDA2004StandardCreditSovereignWesternEuropean,
  {meta::pure::profiles::doc.doc = 'ISDA 2005 AEJ (Asia Excluding Japan) Interdealer Master Equity Derivatives Confirmation Agreement applies.'} ISDA2005EquityAsiaExcludingJapanInterdealer,
  {meta::pure::profiles::doc.doc = 'Second Revised ISDA 2005 AEJ (Asia Excluding Japan) Interdealer Master Equity Derivatives Confirmation Agreement applies.'} ISDA2005EquityAsiaExcludingJapanInterdealerRev2,
  {meta::pure::profiles::doc.doc = 'The ISDA 2005 Japanese Interdealer Master Equity Derivatives Confirmation Agreement applies.'} ISDA2005EquityJapaneseInterdealer,
  {meta::pure::profiles::doc.doc = 'ISDA 2006 Variance Swap Japanese Confirmation Agreement applies.'} ISDA2006VarianceSwapJapanese,
  {meta::pure::profiles::doc.doc = 'ISDA 2006 Variance Swap Japanese Interdealer Confirmation Agreement applies.'} ISDA2006VarianceSwapJapaneseInterdealer,
  {meta::pure::profiles::doc.doc = 'The ISDA 2007 European Master Equity Derivatives Confirmation Agreement applies.'} ISDA2007EquityEuropean,
  {meta::pure::profiles::doc.doc = 'The ISDA 2007 Americas Master Variance Swap Confirmation Agreement applies.'} ISDA2007VarianceSwapAmericas,
  {meta::pure::profiles::doc.doc = 'The ISDA 2007 AEJ Master Variance Swap Confirmation Agreement applies.'} ISDA2007VarianceSwapAsiaExcludingJapan,
  {meta::pure::profiles::doc.doc = 'The Revised ISDA 2007 AEJ Master Variance Swap Confirmation Agreement applies.'} ISDA2007VarianceSwapAsiaExcludingJapanRev1,
  {meta::pure::profiles::doc.doc = 'The Second Revised ISDA 2007 AEJ Master Variance Swap Confirmation Agreement applies.'} ISDA2007VarianceSwapAsiaExcludingJapanRev2,
  {meta::pure::profiles::doc.doc = 'The ISDA 2007 European Variance Swap Master Confirmation Agreement applies.'} ISDA2007VarianceSwapEuropean,
  {meta::pure::profiles::doc.doc = 'The Revised ISDA 2007 European Variance Swap Master Confirmation Agreement applies.'} ISDA2007VarianceSwapEuropeanRev1,
  {meta::pure::profiles::doc.doc = 'The ISDA 2008 Japanese Dividend Swap Master Confirmation Agreement applies.'} ISDA2008DividendSwapJapan,
  {meta::pure::profiles::doc.doc = 'The Revised ISDA 2008 Japanese Dividend Swap Master Confirmation Agreement applies.'} ISDA2008DividendSwapJapaneseRev1,
  {meta::pure::profiles::doc.doc = 'The ISDA 2008 Americas Master Designated/Exchange-Traded Contract Option Confirmation Agreement applies.'} ISDA2008EquityAmericas,
  {meta::pure::profiles::doc.doc = 'The ISDA 2008 AEJ (Asia Excluding Japan) Master Equity Derivatives Confirmation Agreement applies.'} ISDA2008EquityAsiaExcludingJapan,
  {meta::pure::profiles::doc.doc = 'The Revised ISDA 2008 AEJ (Asia Excluding Japan) Master Equity Derivatives Confirmation Agreement applies.'} ISDA2008EquityAsiaExcludingJapanRev1,
  {meta::pure::profiles::doc.doc = 'The ISDA 2008 Japanese Master Equity Derivatives Confirmation Agreement applies.'} ISDA2008EquityJapan,
  {meta::pure::profiles::doc.doc = 'The ISDA 2009 Americas Master Equity Derivatives Confirmation Agreement applies.'} ISDA2009EquityAmericas,
  {meta::pure::profiles::doc.doc = 'The ISDA 2009 European Interdealer Master Equity Derivatives Confirmation Agreement applies.'} ISDA2009EquityEuropeanInterdealer,
  {meta::pure::profiles::doc.doc = '2009 Pan-Asia Interdealer Master Equity Derivatives Confirmation Agreement applies.'} ISDA2009EquityPanAsia,
  {meta::pure::profiles::doc.doc = 'The ISDA 2010 EMEA EM Interdealer Master Equity Derivatives Confirmation Agreement applies.'} ISDA2010EquityEMEAInterdealer,
  {meta::pure::profiles::doc.doc = 'The ISDA 2013 Americas Master Volatility Swap Confirmation Agreement applies.'} ISDA2013VolatilitySwapAmericas,
  {meta::pure::profiles::doc.doc = 'The ISDA 2013 AEJ Master Volatility Swap Confirmation Agreement applies.'} ISDA2013VolatilitySwapAsiaExcludingJapan,
  {meta::pure::profiles::doc.doc = 'The ISDA 2013 European Volatility Swap Master Confirmation Agreement applies.'} ISDA2013VolatilitySwapEuropean,
  {meta::pure::profiles::doc.doc = 'The ISDA 2013 Volatility Swap Japanese Confirmation Agreement applies.'} ISDA2013VolatilitySwapJapanese,
  {meta::pure::profiles::doc.doc = 'Used for CDS Index trades. Relevant Master Confirmation determined by the contents of the creditDefaultSwap element. Best practice is to use the most specific code that applies.'} _2003CreditIndex,
  {meta::pure::profiles::doc.doc = 'A privately negotiated European Interdealer Master Confirmation Agreement applies.'} _2004EquityEuropeanInterdealer,
  {meta::pure::profiles::doc.doc = 'A privately negotiated European Interdealer Master Confirmation Agreement applies.'} _2005VarianceSwapEuropeanInterdealer,
  {meta::pure::profiles::doc.doc = 'A European Interdealer Master Confirmation Agreement not defined by ISDA, and modified by the parties to the transaction applies.'} _2006DividendSwapEuropean,
  {meta::pure::profiles::doc.doc = 'A European Interdealer Master Confirmation Agreement not defined by ISDA applies.'} _2006DividendSwapEuropeanInterdealer,
  {meta::pure::profiles::doc.doc = 'Dummy MCA value mirroring the matrix term value AsiaCorporate.'} _2014CreditAsia,
  {meta::pure::profiles::doc.doc = 'Dummy MCA value mirroring the matrix term value AsiaFinancialCorporate.'} _2014CreditAsiaFinancial,
  {meta::pure::profiles::doc.doc = 'Dummy MCA value mirroring the matrix term value AustraliaCorporate/NewZealandCorporate.'} _2014CreditAustraliaNewZealand,
  {meta::pure::profiles::doc.doc = 'Dummy MCA value mirroring the matrix term value AustraliaFinancialCorporate/NewZealandFinancialCorporate.'} _2014CreditAustraliaNewZealandFinancial,
  {meta::pure::profiles::doc.doc = 'Dummy MCA value mirroring the matrix term value EuropeanCorporate.'} _2014CreditEuropean,
  {meta::pure::profiles::doc.doc = 'Dummy MCA value mirroring the matrix term value EuropeanCoCoFinancialCorporate.'} _2014CreditEuropeanCoCoFinancial,
  {meta::pure::profiles::doc.doc = 'Dummy MCA value mirroring the matrix term value EuropeanFinancialCorporate.'} _2014CreditEuropeanFinancial,
  {meta::pure::profiles::doc.doc = 'Dummy MCA value mirroring the matrix term value JapanCorporate.'} _2014CreditJapan,
  {meta::pure::profiles::doc.doc = 'Dummy MCA value mirroring the matrix term value JapanFinancialCorporate.'} _2014CreditJapanFinancial,
  {meta::pure::profiles::doc.doc = 'Dummy MCA value mirroring the matrix term value NorthAmericanCorporate.'} _2014CreditNorthAmerican,
  {meta::pure::profiles::doc.doc = 'Dummy MCA value mirroring the matrix term value NorthAmericanFinancialCorporate.'} _2014CreditNorthAmericanFinancial,
  {meta::pure::profiles::doc.doc = 'Dummy MCA value mirroring the matrix term values SingaporeCorporate.'} _2014CreditSingapore,
  {meta::pure::profiles::doc.doc = 'Dummy MCA value mirroring the matrix term values SingaporeFinancialCorporate.'} _2014CreditSingaporeFinancial,
  {meta::pure::profiles::doc.doc = 'Dummy MCA value mirroring the matrix term value AsiaSovereign.'} _2014CreditSovereignAsia,
  {meta::pure::profiles::doc.doc = 'Dummy MCA value mirroring the matrix term value EmergingEuropeanAndMiddleEasternSovereign.'} _2014CreditSovereignEmergingEuropeanAndMiddleEastern,
  {meta::pure::profiles::doc.doc = 'Dummy MCA value mirroring the matrix term value JapanSovereign.'} _2014CreditSovereignJapan,
  {meta::pure::profiles::doc.doc = 'Dummy MCA value mirroring the matrix term value LatinAmericaSovereign.'} _2014CreditSovereignLatinAmerican,
  {meta::pure::profiles::doc.doc = 'Dummy MCA value mirroring the matrix term value WesternEuropeanSovereign.'} _2014CreditSovereignWesternEuropean,
  {meta::pure::profiles::doc.doc = 'Dummy MCA value mirroring the matrix term values StandardAsiaCorporate.'} _2014StandardCreditAsia,
  {meta::pure::profiles::doc.doc = 'Dummy MCA value mirroring the matrix term values StandardAsiaFinancialCorporate.'} _2014StandardCreditAsiaFinancial,
  {meta::pure::profiles::doc.doc = 'Dummy MCA value mirroring the matrix term values StandardAustraliaCorporate and StandardNewZealandCorporate.'} _2014StandardCreditAustraliaNewZealand,
  {meta::pure::profiles::doc.doc = 'Dummy MCA value mirroring the matrix term values StandardAustraliaFinancialCorporate and StandardNewZealandFinancialCorporate.'} _2014StandardCreditAustraliaNewZealandFinancial,
  {meta::pure::profiles::doc.doc = 'Dummy MCA value mirroring the matrix term value StandardEuropeanCorporate.'} _2014StandardCreditEuropean,
  {meta::pure::profiles::doc.doc = 'Dummy MCA value mirroring the matrix term value StandardEuropeanCoCoFinancialCorporate.'} _2014StandardCreditEuropeanCoCoFinancial,
  {meta::pure::profiles::doc.doc = 'Dummy MCA value mirroring the matrix term value StandardEuropeanFinancialCorporate.'} _2014StandardCreditEuropeanFinancial,
  {meta::pure::profiles::doc.doc = 'Dummy MCA value mirroring the matrix term values StandardJapanCorporate.'} _2014StandardCreditJapan,
  {meta::pure::profiles::doc.doc = 'Dummy MCA value mirroring the matrix term value StandardJapanFinancialCorporate.'} _2014StandardCreditJapanFinancial,
  {meta::pure::profiles::doc.doc = 'Dummy MCA value mirroring the matrix term value StandardNorthAmericanCorporate.'} _2014StandardCreditNorthAmerican,
  {meta::pure::profiles::doc.doc = 'Dummy MCA value mirroring the matrix term value standardNorthAmericanFinancialCorporate.'} _2014StandardCreditNorthAmericanFinancial,
  {meta::pure::profiles::doc.doc = 'Dummy MCA value mirroring the matrix term values StandardSingaporeCorporate.'} _2014StandardCreditSingapore,
  {meta::pure::profiles::doc.doc = 'Dummy MCA value mirroring the matrix term value StandardSingaporeFinancialCorporate.'} _2014StandardCreditSingaporeFinancial,
  {meta::pure::profiles::doc.doc = 'Dummy MCA value mirroring the matrix term value StandardAsiaSovereign.'} _2014StandardCreditSovereignAsia,
  {meta::pure::profiles::doc.doc = 'Dummy MCA value mirroring the matrix term value StandardEmergingEuropeanAndMiddleEasternSovereign.'} _2014StandardCreditSovereignEmergingEuropeanAndMiddleEastern,
  {meta::pure::profiles::doc.doc = 'Dummy MCA value mirroring the matrix term values StandardJapanSovereign.'} _2014StandardCreditSovereignJapan,
  {meta::pure::profiles::doc.doc = 'Dummy MCA value mirroring the matrix term value StandardLatinAmericaSovereign.'} _2014StandardCreditSovereignLatinAmerican,
  {meta::pure::profiles::doc.doc = 'Dummy MCA value mirroring the matrix term value StandardWesternEuropeanSovereign.'} _2014StandardCreditSovereignWesternEuropean
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify the type of Broker Confirm that the FpML trade represents.'} model::external::cdm::BrokerConfirmationTypeEnum
{
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type representing ABX index trades.'} ABX,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type of Asia Corporate.'} AsiaCorporate,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type of Asia Sovereign.'} AsiaSovereign,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type of Australia Corporate.'} AustraliaCorporate,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type of Australia Sovereign.'} AustraliaSovereign,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type for use with Credit Derivative Transactions on Leveraged Loans.'} CDSonLeveragedLoans,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type for use with Credit Derivative Transactions on Mortgage-backed Security with Pay-As-You-Go or Physical Settlement.'} CDSonMBS,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type for CDX Emerging Markets Untranched Transactions.'} CDXEmergingMarkets,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type for CDX Emerging Markets Diversified Untranched Transactions.'} CDXEmergingMarketsDiversified,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type for CDX Swaption Transactions.'} CDXSwaption,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type for Dow Jones CDX Tranche Transactions.'} CDXTranche,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type representing CMBX index trades.'} CMBX,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type for CDS Index trades relating to Dow Jones CDX.EM index series.'} DJ_CDX_EM_,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type for CDS Index trades relating to Dow Jones CDX.NA.IG and Dow Jones CDX.NA.HY index series.'} DJ_CDX_NA,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type of Emerging European and Middle Eastern Sovereign.'} EmergingEuropeanAndMiddleEasternSovereign,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type for EMERGING EUROPEAN CORPORATE.'} EmergingEuropeanCorporate,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type for EMERGING EUROPEAN CORPORATE LPN.'} EmergingEuropeanCorporateLPN,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type for Single Name European CMBS Transactions.'} EuropeanCMBS,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type of European Corporate.'} EuropeanCorporate,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type for Single Name European RMBS Transactions.'} EuropeanRMBS,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type of Japan Corporate.'} JapanCorporate,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type of Japan Sovereign.'} JapanSovereign,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type of Latin America Corporate.'} LatinAmericaCorporate,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type for LATIN AMERICA CORPORATE B.'} LatinAmericaCorporateBond,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type for LATIN AMERICA CORPORATE BL.'} LatinAmericaCorporateBondOrLoan,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type of Latin America Sovereign.'} LatinAmericaSovereign,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type for MBX Transactions.'} MBX,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type for Municipal CDX Untranched Transactions.'} MCDX,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type of New Zealand Corporate.'} NewZealandCorporate,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type of New Zealand Sovereign.'} NewZealandSovereign,
  {meta::pure::profiles::doc.doc = 'Broker ConfirmationType of North American Corporate.'} NorthAmericanCorporate,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type for PO Index Transactions.'} PO,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type of Singapore Corporate.'} SingaporeCorporate,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type of Singapore Sovereign.'} SingaporeSovereign,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type of STANDARD ASIA CORPORATE.'} StandardAsiaCorporate,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type of STANDARD ASIA SOVEREIGN.'} StandardAsiaSovereign,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type of STANDARD AUSTRALIA CORPORATE.'} StandardAustraliaCorporate,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type of STANDARD AUSTRALIA SOVEREIGN.'} StandardAustraliaSovereign,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type for Standard CDX Tranche Transactions.'} StandardCDXTranche,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type of STANDARD EMERGING EUROPEAN AND MIDDLE EASTERN SOVEREIGN.'} StandardEmergingEuropeanAndMiddleEasternSovereign,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type of STANDARD EMERGING EUROPEAN CORPORATE.'} StandardEmergingEuropeanCorporate,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type of STANDARD EMERGING EUROPEAN CORPORATE LPN.'} StandardEmergingEuropeanCorporateLPN,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type for STANDARD EUROPEAN CORPORATE.'} StandardEuropeanCorporate,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type of STANDARD JAPAN CORPORATE.'} StandardJapanCorporate,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type of STANDARD JAPAN SOVEREIGN.'} StandardJapanSovereign,
  {meta::pure::profiles::doc.doc = 'Standard Syndicated Secured Loan Credit Default Swap Broker Confirmation Type.'} StandardLCDS,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type for Standard Syndicated Secured Loan Credit Default Swap Bullet Transactions.'} StandardLCDSBullet,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type for Standard Syndicated Secured Loan Credit Default Swap Index Bullet Transactions.'} StandardLCDXBullet,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type for Standard Syndicated Secured Loan Credit Default Swap Index Bullet Tranche Transactions.'} StandardLCDXBulletTranche,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type of STANDARD LATIN AMERICA CORPORATE B.'} StandardLatinAmericaCorporateBond,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type of STANDARD LATIN AMERICA CORPORATE BL.'} StandardLatinAmericaCorporateBondOrLoan,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type of STANDARD LATIN AMERICA SOVEREIGN.'} StandardLatinAmericaSovereign,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type of STANDARD NEW ZEALAND CORPORATE.'} StandardNewZealandCorporate,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type of STANDARD NEW ZEALAND SOVEREIGN.'} StandardNewZealandSovereign,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type for STANDARD NORTH AMERICAN CORPORATE.'} StandardNorthAmericanCorporate,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type of STANDARD SINGAPORE CORPORATE.'} StandardSingaporeCorporate,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type of STANDARD SINGAPORE SOVEREIGN.'} StandardSingaporeSovereign,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type for STANDARD SUBORDINATED EUROPEAN INSURANCE CORPORATE.'} StandardSubordinatedEuropeanInsuranceCorporate,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type for STANDARD WESTERN EUROPEAN SOVEREIGN.'} StandardWesternEuropeanSovereign,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type for Standard iTraxx Europe Tranched Transactions.'} StandardiTraxxEuropeTranche,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type of Subordinated European Insurance Corporate.'} SubordinatedEuropeanInsuranceCorporate,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type of SUKUK CORPORATE.'} SukukCorporate,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type of SUKUK SOVEREIGN.'} SukukSovereign,
  {meta::pure::profiles::doc.doc = 'Syndicated Secured Loan Credit Default Swap Broker Confirmation Type.'} SyndicatedSecuredLoanCDS,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type for TRX Transactions.'} TRX,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type for TRX.II Transactions.'} TRX_II,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type for U.S. MUNICIPAL FULL FAITH AND CREDIT.'} USMunicipalFullFaithAndCredit,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type for U.S. MUNICIPAL GENERAL FUND.'} USMunicipalGeneralFund,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type for U.S. MUNICIPAL REVENUE.'} USMunicipalRevenue,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type of Western European Sovereign.'} WesternEuropeanSovereign,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type for iTraxx Asia Excluding Japan.'} iTraxxAsiaExJapan,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type for iTraxx Asia Ex-Japan Swaption Transactions.'} iTraxxAsiaExJapanSwaption,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type for iTraxx Asia Excluding Japan Tranched Transactions.'} iTraxxAsiaExJapanTranche,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type for iTraxx Australia.'} iTraxxAustralia,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type for iTraxx Australia Swaption Transactions.'} iTraxxAustraliaSwaption,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type for iTraxx Australia Tranched Transactions.'} iTraxxAustraliaTranche,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type for iTraxx CJ.'} iTraxxCJ,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type for iTraxx CJ Tranched Transactions.'} iTraxxCJTranche,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type for iTraxx Europe Transactions'} iTraxxEurope,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type for iTraxx Europe Swaption Transactions.'} iTraxxEuropeSwaption,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type for iTraxx Europe Tranched Transactions.'} iTraxxEuropeTranche,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type for iTraxx Japan.'} iTraxxJapan,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type for iTraxx Japan Swaption Transactions.'} iTraxxJapanSwaption,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type for iTraxx Japan Tranched Transactions.'} iTraxxJapanTranche,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type for iTraxx LevX.'} iTraxxLevX,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type for iTraxx SDI 75 Transactions.'} iTraxxSDI75,
  {meta::pure::profiles::doc.doc = 'Broker Confirmation Type for iTraxx SovX.'} iTraxxSovX
}

Enum {meta::pure::profiles::doc.doc = 'Standard FX Spot and Forward offset conventions.'} FpML::model::FxOffsetConventionEnum
{
  FxSpot,
  FxForward
}

Enum {meta::pure::profiles::doc.doc = 'The specification of whether the direction of a barrier within an FX OTC option is Down or Up.'} FpML::model::FxBarrierDirectionEnum
{
  Down,
  Up
}

Enum {meta::pure::profiles::doc.doc = 'Enumeration for the different types of confirmation status.'} model::external::cdm::ConfirmationStatusEnum
{
  Confirmed,
  Unconfirmed
}

Enum {meta::pure::profiles::doc.doc = 'The Commodity specification of whether payments occur relative e.g. to the Trade Date, or the end of the month, etc.'} FpML::model::CommodityPayRelativeToEnum
{
  CalculationPeriodStartDate,
  CalculationPeriodEndDate,
  LastPricingDate,
  ResetDate,
  ValuationDate,
  CalculationDate,
  CalculationPeriodMonthEnd,
  CalculationPeriodMonthStart,
  EffectiveDate,
  PricingPeriodMonthEnd,
  TerminationOrExpirationDate,
  TradeDate,
  PricingPeriodEndOfWeek,
  FirstPricingDate
}

Enum {meta::pure::profiles::doc.doc = 'A list that specifies whether a trade was executed during the syndication period or in the post-syndication market.'} FpML::model::LoanTradingTypeEnum
{
  Primary,
  Secondary
}

Enum {meta::pure::profiles::doc.doc = 'The type of threshold.'} FpML::model::ThresholdTypeEnum
{
  Secured,
  Unsecured
}

Enum {meta::pure::profiles::doc.doc = 'The type of vote decision.'} FpML::model::VoteDecisionEnum
{
  Abstain,
  Against,
  For,
  Pending
}

Enum {meta::pure::profiles::doc.doc = 'Defines the method for calculating the gain in the period where the Target Knock-Out event occurs (Exact, Exclusive, Inclusive).'} FpML::model::FxTargetStyleEnum
{
  Exact,
  Exclusive,
  Inclusive
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify the methods for converting rates from one basis to another.'} model::external::cdm::RateTreatmentEnum
{
  {meta::pure::profiles::doc.doc = 'Bond Equivalent Yield. Per Annex to the 2000 ISDA Definitions (June 2000 Version), Section 7.3. Certain General Definitions Relating to Floating Rate Options, paragraph (g).'} BondEquivalentYield,
  {meta::pure::profiles::doc.doc = 'Money Market Yield. Per Annex to the 2000 ISDA Definitions (June 2000 Version), Section 7.3. Certain General Definitions Relating to Floating Rate Options, paragraph (h).'} MoneyMarketYield
}

Enum {meta::pure::profiles::doc.doc = 'A list describing forms of purchase.'} FpML::model::LoanTradingFormOfPurchaseEnum
{
  Assignment,
  AssignmentOnly,
  Other,
  LMAFundedParticipation,
  LMAFundedRiskParticipation,
  LMARiskParticipation,
  LMARiskToFundedParticipation,
  LMATransferAgreement,
  LMATransferCertificate,
  Participation
}

Enum {meta::pure::profiles::doc.doc = 'Defines the consequences of extraordinary events relating to the underlying.'} FpML::model::ShareExtraordinaryEventEnum
{
  AlternativeObligation,
  CancellationAndPayment,
  OptionsExchange,
  CalculationAgent,
  ModifiedCalculationAgent,
  PartialCancellationAndPayment,
  Component
}

Enum {meta::pure::profiles::doc.doc = 'Specifies whether a quantity change is an increase, a decrease or a replacement, whereby the quantity is always specified as a positive number.'} model::external::cdm::QuantityChangeDirectionEnum
{
  {meta::pure::profiles::doc.doc = 'When the quantity should go up by the specified amount.'} Increase,
  {meta::pure::profiles::doc.doc = 'When the quantity should go down by the specified amount.'} Decrease,
  {meta::pure::profiles::doc.doc = 'When the quantity should be replaced by the specified amount.'} Replace
}

Enum {meta::pure::profiles::doc.doc = 'Represents an enumeration list to identify the type of supranational entity issuing the asset.'} model::external::cdm::SupraNationalIssuerTypeEnum
{
  {meta::pure::profiles::doc.doc = 'Specifies International Financial Institution.'} InternationalOrganisation,
  {meta::pure::profiles::doc.doc = 'Specifies Multilateral Bank or Multilateral Development Bank.'} MultilateralBank
}

Enum {meta::pure::profiles::doc.doc = 'The method of rounding a fractional number. The method of rounding a fractional number. - For use with pre-trade Credit Limit Check messages.'} FpML::model::RoundingDirectionEnum
{
  Up,
  Down,
  Nearest
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify the interest adjustment periodicity election through standard language. ISDA 2016 Japanese Law Credit Support Annex for Initial Margin, paragraph 13, General Principles, (n)(ii).'} model::external::cdm::InterestAdjustmentPeriodicityEnum
{
  {meta::pure::profiles::doc.doc = 'The interest adjustment takes place on the last local business day of each calendar month'} LastLocalBusinessDayOfMonth,
  {meta::pure::profiles::doc.doc = 'The interest adjustment takes place each day.'} EachDay
}

Enum {meta::pure::profiles::doc.doc = 'Defines the barrier observation style i.e. continuous (American) or discrete (Euriopean).'} FpML::model::FxBarrierStyleEnum
{
  American,
  European
}

Enum {meta::pure::profiles::doc.doc = 'Indicator as to the type of transaction in accordance with Articles 20(3)(a) and 21(5)(a) of Regulation (EU) 600/2014.'} FpML::model::NotionalChangeEnum
{
  Increase,
  Decrease
}

Enum {meta::pure::profiles::doc.doc = 'Defines the consequences of nationalisation, insolvency and delisting events relating to the underlying.'} FpML::model::NationalisationOrInsolvencyOrDelistingEventEnum
{
  NegotiatedCloseout,
  CancellationAndPayment
}

Enum {meta::pure::profiles::doc.doc = 'Defines the principal party to the trade that has the right to exercise.'} model::external::cdm::ExerciseNoticeGiverEnum
{
  {meta::pure::profiles::doc.doc = 'Specifies that only the option buyer has the right to exercise.'} Buyer,
  {meta::pure::profiles::doc.doc = 'Specifies that only the option seller has the right to exercise.'} Seller,
  {meta::pure::profiles::doc.doc = 'Specifies that both the option buyer and option seller has the right to exercise.'} Both,
  {meta::pure::profiles::doc.doc = 'Specifies that the Master Agreement defines the principal party to the trade that has the right to exercise.'} AsSpecifiedInMasterAgreement
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify the conditions that govern the adjustment to the number of units of the return swap.'} model::external::cdm::NotionalAdjustmentEnum
{
  {meta::pure::profiles::doc.doc = 'The adjustments to the number of units are governed by an execution clause.'} Execution,
  {meta::pure::profiles::doc.doc = 'The adjustments to the number of units are governed by a portfolio rebalancing clause.'} PortfolioRebalancing,
  {meta::pure::profiles::doc.doc = 'The adjustments to the number of units are not governed by any specific clause.'} Standard
}

Enum {meta::pure::profiles::doc.doc = 'The ISDA defined value indicating the nature of a difference.'} FpML::model::DifferenceTypeEnum
{
  Value,
  Reference,
  Structure,
  Scheme
}

Enum {meta::pure::profiles::doc.doc = 'Code values for different ways of using inflation indexes in formulas'} FpML::model::InflationCalculationMethodEnum
{
  Ratio,
  Return,
  Spread
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify the side from which perspective a value is quoted.'} model::external::cdm::QuotationSideEnum
{
  {meta::pure::profiles::doc.doc = 'Denotes a value as the Afternoon fixing reported in or by the relevant Price Source as specified in the relevant Confirmation.'} Afternoon,
  {meta::pure::profiles::doc.doc = 'Denotes a value \'asked\' by a seller for an asset, i.e. the value at which a seller is willing to sell.'} Ask,
  {meta::pure::profiles::doc.doc = 'Denotes a value \'bid\' by a buyer for an asset, i.e. the value a buyer is willing to pay.'} Bid,
  {meta::pure::profiles::doc.doc = 'Denotes a value as the Closing price reported in or by the relevant Price Source as specified in the relevant Confirmation.'} Closing,
  {meta::pure::profiles::doc.doc = 'Denotes a value as the High price reported in or by the relevant Price Source as specified in the relevant Confirmation.'} High,
  {meta::pure::profiles::doc.doc = 'Denotes a value as the Index price reported in or by the relevant Price Source as specified in the relevant Confirmation.'} Index,
  {meta::pure::profiles::doc.doc = 'Denotes a value as the Average of the Bid and Ask prices reported in or by the relevant Price Source as specified in the relevant Confirmation.'} MeanOfBidAndAsk,
  {meta::pure::profiles::doc.doc = 'Denotes a value as the Locational Marginal price reported in or by the relevant Price Source as specified in the relevant Confirmation.'} LocationalMarginal,
  {meta::pure::profiles::doc.doc = 'Denotes a value as the Low price reported in or by the relevant Price Source as specified in the relevant Confirmation.'} Low,
  {meta::pure::profiles::doc.doc = 'Denotes a value as the Marginal Hourly price reported in or by the relevant Price Source as specified in the relevant Confirmation.'} MarginalHourly,
  {meta::pure::profiles::doc.doc = 'Denotes a value as the Market Clearing price reported in or by the relevant Price Source as specified in the relevant Confirmation.'} MarketClearing,
  {meta::pure::profiles::doc.doc = 'Denotes a value as the Average of the High and Low prices reported in or by the relevant Price Source as specified in the relevant Confirmation.'} MeanOfHighAndLow,
  {meta::pure::profiles::doc.doc = 'Denotes a value as the Morning fixing reported in or by the relevant Price Source as specified in the relevant Confirmation.'} Morning,
  {meta::pure::profiles::doc.doc = 'Denotes a value as the Official price reported in or by the relevant Price Source as specified in the relevant Confirmation.'} Official,
  {meta::pure::profiles::doc.doc = 'Denotes a value as the Opening price reported in or by the relevant Price Source as specified in the relevant Confirmation.'} Opening,
  {meta::pure::profiles::doc.doc = 'Denotes a value as the Official Settlement Price reported in or by the relevant Price Source as specified in the relevant Confirmation.'} OSP,
  {meta::pure::profiles::doc.doc = 'Denotes a value as the Settlement price reported in or by the relevant Price Source as specified in the relevant Confirmation.'} Settlement,
  {meta::pure::profiles::doc.doc = 'Denotes a value as the Spot price reported in or by the relevant Price Source as specified in the relevant Confirmation.'} Spot,
  {meta::pure::profiles::doc.doc = 'Denotes a value as the Average of the Midpoint of prices reported in or by the relevant Price Source as specified in the relevant Confirmation.'} Mid,
  {meta::pure::profiles::doc.doc = 'Denotes a value as the National Single price reported in or by the relevant Price Source as specified in the relevant Confirmation.'} NationalSingle,
  {meta::pure::profiles::doc.doc = 'Denotes a value as the Volume Weighted Average of prices effective on the Pricing Date.'} WeightedAverage,
  {meta::pure::profiles::doc.doc = 'Denotes a value as the Non-volume Weighted Average of prices effective on the Pricing Date.'} UnWeightedAverage
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify a long or short spread value.'} model::external::cdm::SpreadScheduleTypeEnum
{
  {meta::pure::profiles::doc.doc = 'Represents a Long Spread Schedule. Spread schedules defined as \'Long\' will be applied to Long Positions.'} Long,
  {meta::pure::profiles::doc.doc = 'Represents a Short Spread Schedule. Spread schedules defined as \'Short\' will be applied to Short Positions.'} Short
}

Enum {meta::pure::profiles::doc.doc = 'Enumeration to describe the different (risk) states of a Position, whether executed, settled, matured...etc'} model::external::cdm::PositionStatusEnum
{
  {meta::pure::profiles::doc.doc = 'The position has been executed, which is the point at which risk has been transferred.'} Executed,
  {meta::pure::profiles::doc.doc = 'Contract has been formed, in case position is on a contractual product.'} Formed,
  {meta::pure::profiles::doc.doc = 'The position has settled, in case product is subject to settlement after execution, such as securities.'} Settled,
  {meta::pure::profiles::doc.doc = 'The position has been cancelled, in case of a cancellation event following an execution.'} Cancelled,
  {meta::pure::profiles::doc.doc = 'The position has been closed, in case of a termination event.'} Closed
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify standard currency codes according to the International Standards Organization (ISO).  The set of codes in this enumerated list is sourced from ISO Standard 4217 (https://www.currency-iso.org/en/home/tables/table-a1.html), as of 29-Aug-18.'} model::external::cdm::ISOCurrencyCodeEnum
{
  {meta::pure::profiles::doc.doc = 'United Arab Emirates Dirham'} AED,
  {meta::pure::profiles::doc.doc = 'Afghanistan Afghani'} AFN,
  {meta::pure::profiles::doc.doc = 'Albanian Lek'} ALL,
  {meta::pure::profiles::doc.doc = 'Armenia Dram'} AMD,
  {meta::pure::profiles::doc.doc = 'Netherlands Antillean Guilder'} ANG,
  {meta::pure::profiles::doc.doc = 'Angolan Kwanza'} AOA,
  {meta::pure::profiles::doc.doc = 'Argentine Peso'} ARS,
  {meta::pure::profiles::doc.doc = 'Australian Dollar'} AUD,
  {meta::pure::profiles::doc.doc = 'Aruban Florin'} AWG,
  {meta::pure::profiles::doc.doc = 'Azerbaijan Manat'} AZN,
  {meta::pure::profiles::doc.doc = 'Bosnia And Herzegovina Mark'} BAM,
  {meta::pure::profiles::doc.doc = 'Barbados Dollar'} BBD,
  {meta::pure::profiles::doc.doc = 'Bangladeshi Taka'} BDT,
  {meta::pure::profiles::doc.doc = 'Bulgarian Lev'} BGN,
  {meta::pure::profiles::doc.doc = 'Bahraini Dinar'} BHD,
  {meta::pure::profiles::doc.doc = 'Burundi Franc'} BIF,
  {meta::pure::profiles::doc.doc = 'Bermudian Dollar'} BMD,
  {meta::pure::profiles::doc.doc = 'Brunei Dollar'} BND,
  {meta::pure::profiles::doc.doc = 'Bolivian Boliviano'} BOB,
  {meta::pure::profiles::doc.doc = 'Bolivian Mvdol'} BOV,
  {meta::pure::profiles::doc.doc = 'Brazilian Real'} BRL,
  {meta::pure::profiles::doc.doc = 'Bahamian Dollar'} BSD,
  {meta::pure::profiles::doc.doc = 'Bhutanese Ngultrum'} BTN,
  {meta::pure::profiles::doc.doc = 'Botwsana Pula'} BWP,
  {meta::pure::profiles::doc.doc = 'Belarusian Ruble'} BYN,
  {meta::pure::profiles::doc.doc = 'Belize Dollar'} BZD,
  {meta::pure::profiles::doc.doc = 'Canadian Dollar'} CAD,
  {meta::pure::profiles::doc.doc = 'Congolese Franc'} CDF,
  {meta::pure::profiles::doc.doc = 'Wirtschaftsring Euro'} CHE,
  {meta::pure::profiles::doc.doc = 'Swiss Franc'} CHF,
  {meta::pure::profiles::doc.doc = 'Wirtschaftsring Franc'} CHW,
  {meta::pure::profiles::doc.doc = 'Chilean Unidad de Fomento'} CLF,
  {meta::pure::profiles::doc.doc = 'Chilean Peso'} CLP,
  {meta::pure::profiles::doc.doc = 'Chinese Yuan Renminbi'} CNY,
  {meta::pure::profiles::doc.doc = 'Colombian Peso'} COP,
  {meta::pure::profiles::doc.doc = 'Colombian Unidad de Valor Real'} COU,
  {meta::pure::profiles::doc.doc = 'Costa Rican Colon'} CRC,
  {meta::pure::profiles::doc.doc = 'Cuban Peso Convertible'} CUC,
  {meta::pure::profiles::doc.doc = 'Cuban Peso'} CUP,
  {meta::pure::profiles::doc.doc = 'Cabo Verde Escudo'} CVE,
  {meta::pure::profiles::doc.doc = 'Czech Koruna'} CZK,
  {meta::pure::profiles::doc.doc = 'Djibouti Franc'} DJF,
  {meta::pure::profiles::doc.doc = 'Danish Krone'} DKK,
  {meta::pure::profiles::doc.doc = 'Dominican Peso'} DOP,
  {meta::pure::profiles::doc.doc = 'Algerian Dinar'} DZD,
  {meta::pure::profiles::doc.doc = 'Egyptian Pound'} EGP,
  {meta::pure::profiles::doc.doc = 'Eritrean Nakfa'} ERN,
  {meta::pure::profiles::doc.doc = 'Ethiopian Birr'} ETB,
  {meta::pure::profiles::doc.doc = 'Euro'} EUR,
  {meta::pure::profiles::doc.doc = 'Fijian Dollar'} FJD,
  {meta::pure::profiles::doc.doc = 'Falkland Islands Pound'} FKP,
  {meta::pure::profiles::doc.doc = 'British Pound Sterling'} GBP,
  {meta::pure::profiles::doc.doc = 'Georgian Lari'} GEL,
  {meta::pure::profiles::doc.doc = 'Ghana Cedi'} GHS,
  {meta::pure::profiles::doc.doc = 'Gibraltar Pound'} GIP,
  {meta::pure::profiles::doc.doc = 'Gambian Dalasi'} GMD,
  {meta::pure::profiles::doc.doc = 'Guinean Franc'} GNF,
  {meta::pure::profiles::doc.doc = 'Guatemalan Quetzal'} GTQ,
  {meta::pure::profiles::doc.doc = 'Guyanese Dollar'} GYD,
  {meta::pure::profiles::doc.doc = 'Hong Kong Dollar'} HKD,
  {meta::pure::profiles::doc.doc = 'Honduran Lempira'} HNL,
  {meta::pure::profiles::doc.doc = 'Croatian Kuna'} HRK,
  {meta::pure::profiles::doc.doc = 'Haitian Gourde'} HTG,
  {meta::pure::profiles::doc.doc = 'Hungarian Forint'} HUF,
  {meta::pure::profiles::doc.doc = 'Indonesian Rupiah'} IDR,
  {meta::pure::profiles::doc.doc = 'New Israeli Sheqel'} ILS,
  {meta::pure::profiles::doc.doc = 'Indian Rupee'} INR,
  {meta::pure::profiles::doc.doc = 'Iraqi Dinar'} IQD,
  {meta::pure::profiles::doc.doc = 'Iranian Rial'} IRR,
  {meta::pure::profiles::doc.doc = 'Icelandic Krona'} ISK,
  {meta::pure::profiles::doc.doc = 'Jamaican Dollar'} JMD,
  {meta::pure::profiles::doc.doc = 'Jordanian Dinar'} JOD,
  {meta::pure::profiles::doc.doc = 'Japanese Yen'} JPY,
  {meta::pure::profiles::doc.doc = 'Kenyan Shilling'} KES,
  {meta::pure::profiles::doc.doc = 'Kyrgyzstani Som'} KGS,
  {meta::pure::profiles::doc.doc = 'Cambodian Riel'} KHR,
  {meta::pure::profiles::doc.doc = 'Comorian Franc'} KMF,
  {meta::pure::profiles::doc.doc = 'North Korean Won'} KPW,
  {meta::pure::profiles::doc.doc = 'South Korean Won'} KRW,
  {meta::pure::profiles::doc.doc = 'Kuwaiti Dinar'} KWD,
  {meta::pure::profiles::doc.doc = 'Cayman Islands Dollar'} KYD,
  {meta::pure::profiles::doc.doc = 'Kazakhstani Tenge'} KZT,
  {meta::pure::profiles::doc.doc = 'Laotian Kip'} LAK,
  {meta::pure::profiles::doc.doc = 'Lebanese Pound'} LBP,
  {meta::pure::profiles::doc.doc = 'Sri Lankan Rupee'} LKR,
  {meta::pure::profiles::doc.doc = 'Liberian Dollar'} LRD,
  {meta::pure::profiles::doc.doc = 'Lesotho Loti'} LSL,
  {meta::pure::profiles::doc.doc = 'Libyan Dinar'} LYD,
  {meta::pure::profiles::doc.doc = 'Moroccan Dirham'} MAD,
  {meta::pure::profiles::doc.doc = 'Moldovan Leu'} MDL,
  {meta::pure::profiles::doc.doc = 'Malagasy Ariary'} MGA,
  {meta::pure::profiles::doc.doc = 'Macedonian Denar'} MKD,
  {meta::pure::profiles::doc.doc = 'Myanmar Kyat'} MMK,
  {meta::pure::profiles::doc.doc = 'Mongolian Tugrik'} MNT,
  {meta::pure::profiles::doc.doc = 'Macanese Pataca'} MOP,
  {meta::pure::profiles::doc.doc = 'Mauritanian Ouguiya'} MRU,
  {meta::pure::profiles::doc.doc = 'Mauritian Rupee'} MUR,
  {meta::pure::profiles::doc.doc = 'Maldivian Rufiyaa'} MVR,
  {meta::pure::profiles::doc.doc = 'Malawian Kwacha'} MWK,
  {meta::pure::profiles::doc.doc = 'Mexican Peso'} MXN,
  {meta::pure::profiles::doc.doc = 'Mexican Unidad de Inversion (UDI)'} MXV,
  {meta::pure::profiles::doc.doc = 'Malaysian Ringgit'} MYR,
  {meta::pure::profiles::doc.doc = 'Mozambique Metical'} MZN,
  {meta::pure::profiles::doc.doc = 'Namibia Dollar'} NAD,
  {meta::pure::profiles::doc.doc = 'Nigerian Naira'} NGN,
  {meta::pure::profiles::doc.doc = 'Nicaraguan Cordoba Oro'} NIO,
  {meta::pure::profiles::doc.doc = 'Norwegian Krone'} NOK,
  {meta::pure::profiles::doc.doc = 'Nepalese Rupee'} NPR,
  {meta::pure::profiles::doc.doc = 'New Zealand Dollar'} NZD,
  {meta::pure::profiles::doc.doc = 'Omani Rial'} OMR,
  {meta::pure::profiles::doc.doc = 'Panamanian Balboa'} PAB,
  {meta::pure::profiles::doc.doc = 'Peruvian Sol'} PEN,
  {meta::pure::profiles::doc.doc = 'Papua New Guinean Kina'} PGK,
  {meta::pure::profiles::doc.doc = 'Philippine Peso'} PHP,
  {meta::pure::profiles::doc.doc = 'Pakistani Rupee'} PKR,
  {meta::pure::profiles::doc.doc = 'Polish Zloty'} PLN,
  {meta::pure::profiles::doc.doc = 'Paraguayan Guarani'} PYG,
  {meta::pure::profiles::doc.doc = 'Qatari Rial'} QAR,
  {meta::pure::profiles::doc.doc = 'Romanian Leu'} RON,
  {meta::pure::profiles::doc.doc = 'Serbian Dinar'} RSD,
  {meta::pure::profiles::doc.doc = 'Russian Ruble'} RUB,
  {meta::pure::profiles::doc.doc = 'Rwandan Franc'} RWF,
  {meta::pure::profiles::doc.doc = 'Saudi Riyal'} SAR,
  {meta::pure::profiles::doc.doc = 'Solomon Islands Dollar'} SBD,
  {meta::pure::profiles::doc.doc = 'Seychellois Rupee'} SCR,
  {meta::pure::profiles::doc.doc = 'Sudanese Pound'} SDG,
  {meta::pure::profiles::doc.doc = 'Swedish Krona'} SEK,
  {meta::pure::profiles::doc.doc = 'Singapore Dollar'} SGD,
  {meta::pure::profiles::doc.doc = 'Saint Helena Pound'} SHP,
  {meta::pure::profiles::doc.doc = 'Sierra Leonean Leone'} SLL,
  {meta::pure::profiles::doc.doc = 'Somali Shilling'} SOS,
  {meta::pure::profiles::doc.doc = 'Surinam Dollar'} SRD,
  {meta::pure::profiles::doc.doc = 'South Sudanese Pound'} SSP,
  {meta::pure::profiles::doc.doc = 'Sao Tomean Dobra'} STN,
  {meta::pure::profiles::doc.doc = 'El Salvadoran Colon'} SVC,
  {meta::pure::profiles::doc.doc = 'Syrian Pound'} SYP,
  {meta::pure::profiles::doc.doc = 'Swazi Lilangeni'} SZL,
  {meta::pure::profiles::doc.doc = 'Thai Baht'} THB,
  {meta::pure::profiles::doc.doc = 'Tajikistani Somoni'} TJS,
  {meta::pure::profiles::doc.doc = 'Turkmenistan New Manat'} TMT,
  {meta::pure::profiles::doc.doc = 'Tunisian Dinar'} TND,
  {meta::pure::profiles::doc.doc = 'Tongan Pa\u2019anga'} TOP,
  {meta::pure::profiles::doc.doc = 'Turkish Lira'} TRY,
  {meta::pure::profiles::doc.doc = 'Trinidad and Tobago Dollar'} TTD,
  {meta::pure::profiles::doc.doc = 'New Taiwan Dollar'} TWD,
  {meta::pure::profiles::doc.doc = 'Tanzanian Shilling'} TZS,
  {meta::pure::profiles::doc.doc = 'Ukrainian Hryvnia'} UAH,
  {meta::pure::profiles::doc.doc = 'Ugandan Shilling'} UGX,
  {meta::pure::profiles::doc.doc = 'United States Dollar'} USD,
  {meta::pure::profiles::doc.doc = 'US Dollar (Next day)'} USN,
  {meta::pure::profiles::doc.doc = 'Uruguayan Peso en Unidades Indexadas (UI)'} UYI,
  {meta::pure::profiles::doc.doc = 'Uruguayan Peso'} UYU,
  {meta::pure::profiles::doc.doc = 'Uruguayan Unidad Previsional'} UYW,
  {meta::pure::profiles::doc.doc = 'Uzbekistani Som'} UZS,
  {meta::pure::profiles::doc.doc = 'Venezuelan Bol\u00EDvar Soberano'} VES,
  {meta::pure::profiles::doc.doc = 'Vietnamese Dong'} VND,
  {meta::pure::profiles::doc.doc = 'Vanuatu Vatu'} VUV,
  {meta::pure::profiles::doc.doc = 'Samoan Tala'} WST,
  {meta::pure::profiles::doc.doc = 'Central African CFA Franc'} XAF,
  {meta::pure::profiles::doc.doc = 'Silver'} XAG,
  {meta::pure::profiles::doc.doc = 'Gold'} XAU,
  {meta::pure::profiles::doc.doc = 'Bond Markets Unit European Composite Unit (EURCO)'} XBA,
  {meta::pure::profiles::doc.doc = 'Bond Markets Unit European Monetary Unit (E.M.U.-6)'} XBB,
  {meta::pure::profiles::doc.doc = 'Bond Markets Unit European Unit of Account 9 (E.U.A.-9)'} XBC,
  {meta::pure::profiles::doc.doc = 'Bond Markets Unit European Unit of Account 17 (E.U.A.-17)'} XBD,
  {meta::pure::profiles::doc.doc = 'East Caribbean Dollar'} XCD,
  {meta::pure::profiles::doc.doc = 'SDR (Special Drawing Right)'} XDR,
  {meta::pure::profiles::doc.doc = 'West African CFA Franc'} XOF,
  {meta::pure::profiles::doc.doc = 'Palladium'} XPD,
  {meta::pure::profiles::doc.doc = 'CFP (French Polynesian) Franc'} XPF,
  {meta::pure::profiles::doc.doc = 'Platinum'} XPT,
  {meta::pure::profiles::doc.doc = 'Bolivarian Alliance for the Americas Sucre'} XSU,
  {meta::pure::profiles::doc.doc = 'African Development Bank Unit of Account'} XUA,
  {meta::pure::profiles::doc.doc = 'The codes assigned for transactions where no currency is involved'} XXX,
  {meta::pure::profiles::doc.doc = 'Yemeni Rial'} YER,
  {meta::pure::profiles::doc.doc = 'South African Rand'} ZAR,
  {meta::pure::profiles::doc.doc = 'Zambian Kwacha'} ZMW,
  {meta::pure::profiles::doc.doc = 'Zimbabwean Dollar'} ZWL,
  {meta::pure::profiles::doc.doc = 'Offshore Chinese Yuan traded in Hong Kong.'} CNH,
  {meta::pure::profiles::doc.doc = 'Offshore Chinese Yuan traded in Taiwan.'} CNT,
  {meta::pure::profiles::doc.doc = 'Guernsey Pound.'} GGP,
  {meta::pure::profiles::doc.doc = 'Isle of Man Pound.'} IMP,
  {meta::pure::profiles::doc.doc = 'Jersey Pound.'} JEP,
  {meta::pure::profiles::doc.doc = 'Tuvaluan Dollar.'} KID,
  {meta::pure::profiles::doc.doc = 'Monegasque Franc.'} MCF,
  {meta::pure::profiles::doc.doc = 'Sammarinese Lira.'} SML,
  {meta::pure::profiles::doc.doc = 'Vatican Lira.'} VAL
}

Enum {meta::pure::profiles::doc.doc = 'Defines how the composition of dividends is to be determined.'} FpML::model::DividendCompositionEnum
{
  EquityAmountReceiverElection,
  CalculationAgentElection
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify the Credit Support Provider Terms'} model::external::cdm::CreditSupportProviderTermsEnum
{
  {meta::pure::profiles::doc.doc = 'A specified Credit Support Provider is provided'} Specified,
  {meta::pure::profiles::doc.doc = 'Any party or parties who now or in the future may provide a Credit Support Document or other form of credit support.'} Any,
  {meta::pure::profiles::doc.doc = 'No Credit Support Provider is specified.'} None
}

Enum {meta::pure::profiles::doc.doc = 'The enumerated values to specify the type of return associated the equity payout.'} model::external::cdm::ReturnTypeEnum
{
  {meta::pure::profiles::doc.doc = 'Dividend return, i.e. excluding price variations.'} Dividend,
  {meta::pure::profiles::doc.doc = 'Price return, i.e. excluding dividends.'} Price,
  {meta::pure::profiles::doc.doc = 'Total return, i.e. including dividend and price components.'} Total,
  {meta::pure::profiles::doc.doc = 'Variance return.'} Variance,
  {meta::pure::profiles::doc.doc = 'Volatility return.'} Volatility
}

Class {meta::pure::profiles::doc.doc = 'A type to define the main publication source.'} FpML::model::MainPublication
[
  c1_length: $this.mainPublicationScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  mainPublicationScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'A type to define a fee or schedule of fees to be payable on the exercise of an option. This fee may be defined as an amount or a percentage of the notional exercised.'} FpML::model::ExerciseFeeSchedule
[
  c1_choice: ($this.feeAmountSchedule->isNotEmpty() && $this.feeRateSchedule->isEmpty()) || ($this.feeAmountSchedule->isEmpty() && $this.feeRateSchedule->isNotEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'A reference to the party responsible for making the payments defined by this structure.'} payerPartyReference: FpML::model::PartyReference[0..1];
  {meta::pure::profiles::doc.doc = 'A reference to the account responsible for making the payments defined by this structure.'} payerAccountReference: FpML::model::AccountReference[0..1];
  {meta::pure::profiles::doc.doc = 'A reference to the party that receives the payments corresponding to this structure.'} receiverPartyReference: FpML::model::PartyReference[0..1];
  {meta::pure::profiles::doc.doc = 'A reference to the account that receives the payments corresponding to this structure.'} receiverAccountReference: FpML::model::AccountReference[0..1];
  {meta::pure::profiles::doc.doc = 'A pointer style reference to the associated notional schedule defined elsewhere in the document.'} notionalReference: FpML::model::ScheduleReference[0..1];
  {meta::pure::profiles::doc.doc = 'The exercise fee amount schedule. The fees are expressed as currency amounts. The currency of the fee is assumed to be that of the notional schedule referenced.'} feeAmountSchedule: FpML::model::AmountSchedule[0..1];
  {meta::pure::profiles::doc.doc = 'The exercise free rate schedule. The fees are expressed as percentage rates of the notional being exercised. The currency of the fee is assumed to be that of the notional schedule referenced.'} feeRateSchedule: FpML::model::Schedule[0..1];
  {meta::pure::profiles::doc.doc = 'The date on which exercise fee(s) will be paid. It is specified as a relative date.'} feePaymentDate: FpML::model::RelativeDateOffset[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Class to specify the clean price of a bond in a bond valuation model, with accruals presented separately, and modelled onto the cleanPrice model in BonPriceAndYield.model in FpML.'} model::external::cdm::CleanPrice
{
  {meta::pure::profiles::doc.doc = 'The clean price as a number.'} cleanPrice: Float[1];
  {meta::pure::profiles::doc.doc = 'The accruals as a number.'} accruals: Float[0..1];
  {meta::pure::profiles::doc.doc = 'Placeholder for a calculation of dirtyPrice based on cleanPrice and accruals.'} dirtyPrice: Float[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Specifies a transaction which automatically extends for a specified timeframe until the exercise of an embedded option.'} model::external::cdm::EvergreenProvision extends model::external::cdm::BuyerSeller
{
  {meta::pure::profiles::doc.doc = 'Defines the exercise period for an American style option together with any rules governing the notional amount of the underlying which can be exercised on any given exercise date and any associated exercise fees.'} americanExercise: model::external::cdm::AmericanExercise[0..1];
  {meta::pure::profiles::doc.doc = 'Defines the Bermuda option exercise dates and the expiration date together with any rules governing the notional amount of the underlying which can be exercised on any given exercise date and any associated exercise fee.'} bermudaExercise: model::external::cdm::BermudaExercise[0..1];
  {meta::pure::profiles::doc.doc = 'Defines the exercise period for a European style option together with any rules governing the notional amount of the underlying which can be exercised on any given exercise date and any associated exercise fees.'} europeanExercise: model::external::cdm::EuropeanExercise[0..1];
  {meta::pure::profiles::doc.doc = 'A flag to indicate whether follow-up confirmation of exercise (written or electronic) is required following telephonic notice by the buyer to the seller or seller\'s agent.'} followUpConfirmation: Boolean[1];
  {meta::pure::profiles::doc.doc = 'The length of each Evergreen extension period relative to the Effective date of the preceding contract.'} evergreenExtensionPeriod: model::external::cdm::RelativeDateOffset[1];
  {meta::pure::profiles::doc.doc = 'The frequency with which the Evergreen contract will be extended if notice is not given.'} evergreenRollFrequency: model::external::cdm::CalculationPeriodFrequency[1];
  {meta::pure::profiles::doc.doc = 'Identifies a party to that has a right to demand for termination of the Security Finance transaction.'} callingParty: model::external::cdm::CallingPartyEnum[0..1];
}

Class <<meta::pure::profiles::typemodifiers.abstract>> {meta::pure::profiles::doc.doc = 'Base type for payments.'} FpML::model::PaymentBaseExtended extends FpML::model::PaymentBase
{
  {meta::pure::profiles::doc.doc = 'A reference to the party responsible for making the payments defined by this structure.'} payerPartyReference: FpML::model::PartyReference[0..1];
  {meta::pure::profiles::doc.doc = 'A reference to the account responsible for making the payments defined by this structure.'} payerAccountReference: FpML::model::AccountReference[0..1];
  {meta::pure::profiles::doc.doc = 'A reference to the party that receives the payments corresponding to this structure.'} receiverPartyReference: FpML::model::PartyReference[0..1];
  {meta::pure::profiles::doc.doc = 'A reference to the account that receives the payments corresponding to this structure.'} receiverAccountReference: FpML::model::AccountReference[0..1];
  {meta::pure::profiles::doc.doc = 'The payment date, which can be expressed as either an adjustable or relative date.'} paymentDate: FpML::model::AdjustableOrRelativeDate[0..1];
}

Class FpML::model::IndependentAmount
{
  {meta::pure::profiles::doc.doc = 'A reference to the party responsible for making the payments defined by this structure.'} payerPartyReference: FpML::model::PartyReference[0..1];
  {meta::pure::profiles::doc.doc = 'A reference to the account responsible for making the payments defined by this structure.'} payerAccountReference: FpML::model::AccountReference[0..1];
  {meta::pure::profiles::doc.doc = 'A reference to the party that receives the payments corresponding to this structure.'} receiverPartyReference: FpML::model::PartyReference[0..1];
  {meta::pure::profiles::doc.doc = 'A reference to the account that receives the payments corresponding to this structure.'} receiverAccountReference: FpML::model::AccountReference[0..1];
  {meta::pure::profiles::doc.doc = 'A container element allowing a schedule of payments associated with the Independent Amount.'} paymentDetail: FpML::model::PaymentDetail[*];
}

Class {meta::pure::profiles::doc.doc = 'Credit limit utilisation breakdown by executed trades and pending orders.'} model::external::cdm::CreditLimitUtilisation
{
  {meta::pure::profiles::doc.doc = 'Credit limit utilisation attributable to executed trades.'} executed: model::external::cdm::CreditLimitUtilisationPosition[0..1];
  {meta::pure::profiles::doc.doc = 'Credit limit utilisation attributable to pending unexecuted orders.'} pending: model::external::cdm::CreditLimitUtilisationPosition[0..1];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'A data to:  define an early termination provision for which exercise is mandatory.'} model::external::cdm::MandatoryEarlyTermination
[
  MandatoryEarlyTerminationCalculationAgent: if($this.calculationAgent.calculationAgentParty->isNotEmpty(), |$this.calculationAgent.calculationAgentParty == model::external::cdm::AncillaryRoleEnum.CalculationAgentMandatoryEarlyTermination, |true)
]
{
  {meta::pure::profiles::doc.doc = 'The early termination date associated with a mandatory early termination of a swap.'} mandatoryEarlyTerminationDate: model::external::cdm::AdjustableDate[1];
  {meta::pure::profiles::doc.doc = 'The ISDA Calculation Agent responsible for performing duties associated with an optional early termination.'} calculationAgent: model::external::cdm::CalculationAgent[1];
  {meta::pure::profiles::doc.doc = 'If specified, this means that cash settlement is applicable to the transaction and defines the parameters associated with the cash settlement procedure. If not specified, then physical settlement is applicable.'} cashSettlement: model::external::cdm::SettlementTerms[1];
  {meta::pure::profiles::doc.doc = 'The adjusted dates associated with a mandatory early termination provision. These dates have been adjusted for any applicable business day convention.'} mandatoryEarlyTerminationAdjustedDates: model::external::cdm::MandatoryEarlyTerminationAdjustedDates[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Defines rules for the dates on which the price will be determined.'} model::external::cdm::ParametricDates
{
  {meta::pure::profiles::doc.doc = 'Denotes the enumerated values to specify the day type classification used in counting the number of days between two dates.'} dayType: model::external::cdm::DayTypeEnum[1];
  {meta::pure::profiles::doc.doc = 'Denotes the method by which the pricing days are distributed across the pricing period.'} dayDistribution: model::external::cdm::DayDistributionEnum[0..1];
  {meta::pure::profiles::doc.doc = 'Indicates the days of the week on which the price will be determined.'} dayOfWeek: model::external::cdm::DayOfWeekEnum[0..7];
  {meta::pure::profiles::doc.doc = 'Defines the occurrence of the dayOfWeek within the pricing period on which pricing will take place, e.g. the 3rd Friday within each Calculation Period. If omitted, every dayOfWeek will be a pricing day.'} dayFrequency: Float[0..1];
  {meta::pure::profiles::doc.doc = 'The pricing period per calculation period if the pricing days do not wholly fall within the respective calculation period.'} lag: model::external::cdm::Lag[0..1];
  {meta::pure::profiles::doc.doc = 'The enumerated values to specify the business centers.'} businessCalendar: model::external::cdm::BusinessCenterEnum[1];
}

Class model::external::cdm::LimitApplicable
[
  LimitApplicableChoice: (($this.amountUtilized->isEmpty() && $this.utilization->isEmpty()) || ($this.amountUtilized->isNotEmpty() && $this.utilization->isEmpty())) || ($this.utilization->isNotEmpty() && $this.amountUtilized->isEmpty())
]
{
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'Standard code to indicate which type of credit line is being referred to - i.e. IM, DV01, PV01, CS01, Notional, Clip Size, Notional, maximumOrderQuantity.'} limitType: model::external::cdm::CreditLimitTypeEnum[0..1];
  {meta::pure::profiles::doc.doc = 'This element is required in FpML, optional in CDM for the purpose of accommodating the CME data representation while making reference to the FpML one.'} clipSize: Integer[0..1];
  {meta::pure::profiles::doc.doc = 'The limit utilised by all the cleared trades for the limit level and limit type. While the attribute is of type integer in FpML and the CME schema, it has been specified to be of type number in the CDM to take into consideration java size limits as well as for consistency purposes with the way most monetary amounts are expressed.'} amountUtilized: Float[0..1];
  utilization: model::external::cdm::CreditLimitUtilisation[0..1];
  {meta::pure::profiles::doc.doc = 'The limit remaining for the limit level and limit type. This does not take into account any pending trades. While the attribute is of type integer in FpML and the CME schema, it has been specified to be of type number in the CDM to take into consideration java size limits as well as for consistency purposes with the way most monetary amounts are expressed.'} amountRemaining: Float[0..1];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'The currency in which the applicable limit is denominated. The list of valid currencies is not presently positioned as an enumeration as part of the CDM because that scope is limited to the values specified by ISDA and FpML. As a result, implementers have to make reference to the relevant standard, such as the ISO 4217 standard for currency codes.'} currency: String[0..1];
  velocity: model::external::cdm::Velocity[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Allows the specification of a time that may be on a day prior or subsequent to the day in question. This type is intended for use with a day of the week (i.e. where no actual date is specified) as part of, for example, a period that runs from 23:00-07:00 on a series of days and where holidays on the actual days would affect the entire time period.'} FpML::model::OffsetPrevailingTime
{
  time: FpML::model::PrevailingTime[0..1];
  {meta::pure::profiles::doc.doc = 'Indicates whether time applies to the actual day specified (in which case this element should be omitted) the day prior to that day (in which case periodMultiplier should be -1 and period should be Day) or the day subsequent to that day (in which case periodMultiplier should be 1 and period should be Day).'} offset: FpML::model::Offset[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify execution location and language of execution to determine duty to be paid.'} model::external::cdm::ExecutionTerms
{
  {meta::pure::profiles::doc.doc = 'The bespoke execution language election.'} executionLanguage: model::external::cdm::ExecutionLanguage[1];
  {meta::pure::profiles::doc.doc = 'The bespoke execution location election.'} executionLocation: model::external::cdm::ExecutionLocation[1];
}

Class {meta::pure::profiles::doc.doc = 'Defines the parameters needed to uniquely identify a piece of data among the population of all available market data.'} model::external::cdm::ObservationIdentifier
{
  {meta::pure::profiles::doc.doc = 'Represents the asset or rate to which the observation relates.'} observable: model::external::cdm::Observable[1];
  {meta::pure::profiles::doc.doc = 'Specifies the date value to use when resolving the market data.'} observationDate: Date[1];
  {meta::pure::profiles::doc.doc = 'Represents the time and time-zone.'} observationTime: model::external::cdm::TimeZone[1];
  {meta::pure::profiles::doc.doc = 'Represents where the market data published and should be observed.'} informationSource: model::external::cdm::InformationSource[0..1];
  determinationMethodology: model::external::cdm::DeterminationMethodology[0..1];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'The credit default payout specification provides the details necessary for determining when a credit payout will be triggered as well as the parameters for calculating the payout and the settlement terms. The associated globalKey denotes the ability to associate a hash value to the CreditDefaultPayout instantiations for the purpose of model cross-referencing, in support of functionality such as the event effect and the lineage.'} model::external::cdm::CreditDefaultPayout extends model::external::cdm::PayoutBase
{
  {meta::pure::profiles::doc.doc = 'The specification of the non-monetary terms for the Credit Derivative Transaction, including the buyer and seller and selected items from the ISDA 2014 Credit Definition article II, such as the reference obligation and related terms.'} generalTerms: model::external::cdm::GeneralTerms[1];
  {meta::pure::profiles::doc.doc = 'Specifies the terms for calculating a payout to protect the buyer of the swap in the case of a qualified credit event. These terms include the applicable credit events, the reference obligation, and in the case of a CDS on mortgage-backed securities, the floatingAmountEvents.'} protectionTerms: model::external::cdm::ProtectionTerms[*];
  {meta::pure::profiles::doc.doc = 'The qualification of the price at which the contract has been transacted, in terms of market fixed rate, initial points, market price and/or quotation style. In FpML, those attributes are positioned as part of the fee leg.'} transactedPrice: model::external::cdm::TransactedPrice[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Defines the primitive event to represent changes to terms of the trade.'} model::external::cdm::TermsChangePrimitive
{
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'Represents the TradeState prior to applying the TermsChange primitive.'} before: model::external::cdm::TradeState[1];
  {meta::pure::profiles::doc.doc = 'Represents the TradeState after to applying the TermsChange primitive.'} after: model::external::cdm::TradeState[1];
}

Class {meta::pure::profiles::doc.doc = 'The abstract base class for all types which define way in which options may be exercised.'} FpML::model::Exercise
{
  id: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Defines parameters in which the commodity price is assessed.'} model::external::cdm::CommodityPriceReturnTerms
{
  {meta::pure::profiles::doc.doc = 'Defines rounding rules and precision to be used in the rounding of a number.'} rounding: model::external::cdm::Rounding[0..1];
  {meta::pure::profiles::doc.doc = 'Defines a spread value for one or more defined dates.'} spread: model::external::cdm::SpreadSchedule[0..1];
  {meta::pure::profiles::doc.doc = 'Used in conjunction with an exchange-based pricing source. Identifies a way in which the futures contracts referenced will roll between periods.'} rollFeature: model::external::cdm::RollFeature[0..1];
  {meta::pure::profiles::doc.doc = 'Defines the conversion applied if the quantity unit on contract is different from unit on referenced underlier.'} conversionFactor: Float[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type defining the fee payable on exercise of an option. This fee may be defined as an amount or a percentage of the notional exercised.'} FpML::model::ExerciseFee
[
  c1_choice: ($this.feeAmount->isNotEmpty() && $this.feeRate->isEmpty()) || ($this.feeAmount->isEmpty() && $this.feeRate->isNotEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'A reference to the party responsible for making the payments defined by this structure.'} payerPartyReference: FpML::model::PartyReference[0..1];
  {meta::pure::profiles::doc.doc = 'A reference to the account responsible for making the payments defined by this structure.'} payerAccountReference: FpML::model::AccountReference[0..1];
  {meta::pure::profiles::doc.doc = 'A reference to the party that receives the payments corresponding to this structure.'} receiverPartyReference: FpML::model::PartyReference[0..1];
  {meta::pure::profiles::doc.doc = 'A reference to the account that receives the payments corresponding to this structure.'} receiverAccountReference: FpML::model::AccountReference[0..1];
  {meta::pure::profiles::doc.doc = 'A pointer style reference to the associated notional schedule defined elsewhere in the document.'} notionalReference: FpML::model::NotionalReference[0..1];
  {meta::pure::profiles::doc.doc = 'The amount of fee to be paid on exercise. The fee currency is that of the referenced notional.'} feeAmount: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'A fee represented as a percentage of some referenced notional. A percentage of 5% would be represented as 0.05.'} feeRate: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'The date on which exercise fee(s) will be paid. It is specified as a relative date.'} feePaymentDate: FpML::model::RelativeDateOffset[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type describing the method for accruing interests on dividends. Can be either a fixed rate reference or a floating rate reference.'} FpML::model::InterestAccrualsMethod
[
  c1_choice: ($this.floatingRateCalculation->isNotEmpty() && $this.fixedRate->isEmpty()) || ($this.floatingRateCalculation->isEmpty() && $this.fixedRate->isNotEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'The floating rate calculation definitions'} floatingRateCalculation: FpML::model::FloatingRateCalculation[0..1];
  {meta::pure::profiles::doc.doc = 'The calculation period fixed rate. A per annum rate, expressed as a decimal. A fixed rate of 5% would be represented as 0.05.'} fixedRate: Decimal[0..1];
}

Class model::external::cdm::SwpIn
{
  sngl: model::external::cdm::Sngl[1];
}

Class {meta::pure::profiles::doc.doc = 'Type for reporting the observations dates and the corresponding weights going into a daily calculated rate'} model::external::cdm::CalculatedRateObservationDatesAndWeights
{
  {meta::pure::profiles::doc.doc = 'The observation date upon which the rate is observed.'} observationDates: Date[*];
  {meta::pure::profiles::doc.doc = 'The corresponding weight for each date.'} weights: Float[*];
}

Class model::external::cdm::Velocity
{
  periodMultiplier: Integer[0..1];
  period: model::external::cdm::PeriodTimeEnum[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type describing the commission that will be charged for each of the hedge transactions.'} FpML::model::Commission
{
  {meta::pure::profiles::doc.doc = 'The type of units used to express a commission.'} commissionDenomination: FpML::model::CommissionDenominationEnum[0..1];
  {meta::pure::profiles::doc.doc = 'The commission amount, expressed in the way indicated by the commissionType element.'} commissionAmount: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'The currency in which an amount is denominated.'} currency: FpML::model::Currency[0..1];
  {meta::pure::profiles::doc.doc = 'The total commission per trade.'} commissionPerTrade: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'FX Rates that have been used to convert commissions to a single currency.'} fxRate: FpML::model::FxRate[*];
}

Class {meta::pure::profiles::doc.doc = 'A type defining the frequency at which calculation period end dates occur within the regular part of the calculation period schedule and thier roll date convention. In case the calculation frequency is of value T (term), the period is defined by the swapswapStreamcalculationPerioDateseffectiveDate and the swapswapStreamcalculationPerioDates\terminationDate.'} FpML::model::CalculationPeriodFrequency extends FpML::model::Frequency
{
  {meta::pure::profiles::doc.doc = 'Used in conjunction with a frequency and the regular period start date of a calculation period, determines each calculation period end date within the regular part of a calculation period schedule.'} rollConvention: FpML::model::RollConventionEnum[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Elements describing the components of the formula. The name attribute points to a value used in the math element. The href attribute points to a numeric value defined elsewhere in the document that is used by the formula component.'} FpML::model::FormulaComponent
[
  c1_length: $this.componentDescription->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.name->forAll(x: String[1]|$x->length() >= 0)
]
{
  {meta::pure::profiles::doc.doc = 'Text description of the component'} componentDescription: String[0..1];
  {meta::pure::profiles::doc.doc = 'Additional formulas required to describe this component'} formula: FpML::model::Formula[0..1];
  name: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Specifies the individual components of collateral positions.'} model::external::cdm::CollateralPosition extends model::external::cdm::Position
{
  {meta::pure::profiles::doc.doc = 'Specifies if there is any treatment to be applied to collateral, such as percentage discount which will impact collateral value.'} treatment: model::external::cdm::CollateralTreatment[0..1];
  {meta::pure::profiles::doc.doc = 'Indicates the collateral positions settlement status.'} collateralPositionStatus: model::external::cdm::CollateralStatusEnum[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify Enforcement Events specific to Security Agreements'} model::external::cdm::EnforcementEvent
{
  {meta::pure::profiles::doc.doc = 'The early termination election'} earlyTerminationDate: Boolean[1];
  {meta::pure::profiles::doc.doc = 'The failure to pay election'} failureToPay: Boolean[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type that describes the information to identify an intermediary through which payment will be made by the correspondent bank to the ultimate beneficiary of the funds.'} FpML::model::IntermediaryInformation
[
  c1_choice: ($this.routingIds->isNotEmpty() && ($this.routingExplicitDetails->isEmpty() && $this.routingIdsAndExplicitDetails->isEmpty())) || (($this.routingIds->isEmpty() && ($this.routingExplicitDetails->isNotEmpty() && $this.routingIdsAndExplicitDetails->isEmpty())) || ($this.routingIds->isEmpty() && ($this.routingExplicitDetails->isEmpty() && $this.routingIdsAndExplicitDetails->isNotEmpty())))
]
{
  {meta::pure::profiles::doc.doc = 'A set of unique identifiers for a party, eachone identifying the party within a payment system. The assumption is that each party will not have more than one identifier within the same payment system.'} routingIds: FpML::model::RoutingIds[0..1];
  {meta::pure::profiles::doc.doc = 'A set of details that is used to identify a party involved in the routing of a payment when the party does not have a code that identifies it within one of the recognized payment systems.'} routingExplicitDetails: FpML::model::RoutingExplicitDetails[0..1];
  {meta::pure::profiles::doc.doc = 'A combination of coded payment system identifiers and details for physical addressing for a party involved in the routing of a payment.'} routingIdsAndExplicitDetails: FpML::model::RoutingIdsAndExplicitDetails[0..1];
  {meta::pure::profiles::doc.doc = 'A sequence number that gives the position of the current intermediary in the chain of payment intermediaries. The assumed domain value set is an ascending sequence of integers starting from 1.'} intermediarySequenceNumber: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'Reference to the party acting as intermediary.'} intermediaryPartyReference: FpML::model::PartyReference[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Specifies instructions for transition from execution to a fully formed contract, consisting of an execution and an optional legal agreement.'} model::external::cdm::ContractFormationInstruction
{
  {meta::pure::profiles::doc.doc = 'Specifies the Execution instructions for creation of a TradeState that will then have a contract formed.'} executionInstruction: model::external::cdm::ExecutionInstruction[0..1];
  {meta::pure::profiles::doc.doc = 'Optional legal agreements associated to the contract being formed, for instance a master agreement.'} legalAgreement: model::external::cdm::LegalAgreement[*];
}

Class {meta::pure::profiles::doc.doc = 'A type that provides for identifying a party involved in the routing of a payment by means of one or more standard identification codes. For example, both a SWIFT BIC code and a national bank identifier may be required.'} FpML::model::RoutingIds
{
  {meta::pure::profiles::doc.doc = 'A unique identifier for party that is a participant in a recognized payment system.'} routingId: FpML::model::RoutingId[*];
}

Class {meta::pure::profiles::doc.doc = 'A type defining the exercise period for an American style option together with any rules governing the notional amount of the underlying which can be exercised on any given exercise date and any associated exercise fees.'} FpML::model::AmericanExercise extends FpML::model::Exercise
{
  {meta::pure::profiles::doc.doc = 'The first day of the exercise period for an American style option.'} commencementDate: FpML::model::AdjustableOrRelativeDate[0..1];
  {meta::pure::profiles::doc.doc = 'The last day within an exercise period for an American style option. For a European style option it is the only day within the exercise period.'} expirationDate: FpML::model::AdjustableOrRelativeDate[0..1];
  {meta::pure::profiles::doc.doc = 'The date on the underlying set by the exercise of an option. What this date is depends on the option (e.g. in a swaption it is the swap effective date, in an extendible/cancelable provision it is the swap termination date).'} relevantUnderlyingDate: FpML::model::AdjustableOrRelativeDates[0..1];
  {meta::pure::profiles::doc.doc = 'The earliest time at which notice of exercise can be given by the buyer to the seller (or seller\'s agent) i) on the expriation date, in the case of a European style option, (ii) on each bermuda option exercise date and the expiration date, in the case of a Bermuda style option the commencement date to, and including, the expiration date , in the case of an American option.'} earliestExerciseTime: FpML::model::BusinessCenterTime[0..1];
  {meta::pure::profiles::doc.doc = 'For a Bermuda or American style option, the latest time on an exercise business day (excluding the expiration date) within the exercise period that notice can be given by the buyer to the seller or seller\'s agent. Notice of exercise given after this time will be deemed to have been given on the next exercise business day.'} latestExerciseTime: FpML::model::BusinessCenterTime[0..1];
  {meta::pure::profiles::doc.doc = 'The latest time for exercise on expirationDate.'} expirationTime: FpML::model::BusinessCenterTime[0..1];
  {meta::pure::profiles::doc.doc = 'As defined in the 2000 ISDA Definitions, Section 12.4. Multiple Exercise, the buyer of the option has the right to exercise all or less than all the unexercised notional amount of the underlying swap on one or more days in the exercise period, but on any such day may not exercise less than the minimum notional amount or more that the maximum notional amount, and if an integral multiple amount is specified, the notional amount exercised must be equal to, or be an intergral multiple of, the integral multiple amount.'} multipleExercise: FpML::model::MultipleExercise[0..1];
  {meta::pure::profiles::doc.doc = 'The fees associated with an exercise date. The fees are conditional on the exercise occuring. The fees can be specified as actual currency amounts or as percentages of the notional amount being exercised.'} exerciseFeeSchedule: FpML::model::ExerciseFeeSchedule[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type to define automatic exercise of a swaption. With automatic exercise the option is deemed to have exercised if it is in the money by more than the threshold amount on the exercise date.'} FpML::model::AutomaticExercise
{
  {meta::pure::profiles::doc.doc = 'A threshold rate. The threshold of 0.10% would be represented as 0.001'} thresholdRate: Decimal[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Specifies the parties responsible for making and receiving payments defined by this structure.'} model::external::cdm::PartyReferencePayerReceiver
{
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'The party responsible for making the payments defined by this structure.'} payerPartyReference: model::external::cdm::Party[1];
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'A reference to the account responsible for making the payments defined by this structure.'} payerAccountReference: model::external::cdm::Account[0..1];
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'The party that receives the payments corresponding to this structure.'} receiverPartyReference: model::external::cdm::Party[1];
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'A reference to the account that receives the payments corresponding to this structure.'} receiverAccountReference: model::external::cdm::Account[0..1];
}

Class {meta::pure::profiles::doc.doc = 'The data type used for a generic, user-defined identifier for an organization, where a full party structure is not desired or required.'} FpML::model::OrganizationIdentifier
[
  c1_length: $this.idScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  {meta::pure::profiles::doc.doc = 'The identifier scheme used with this generic identifier.'} idScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'Defines the information needed to create a Index Transition Business Event.'} model::external::cdm::IndexTransitionInstruction
{
  {meta::pure::profiles::doc.doc = 'Specifies both new floating rate index and spread adjustment for each leg to be updated.  The spread adjustment accounts for the difference between the old floating rate index relative to the new one. This spread amount is added to the existing spread to determine the new spread, which is applied from the specified effective date forward. In the case of the IBOR Fallback Rate Adjustments, the adjustment spread (also known as the Fallback Adjustment) accounts for two distinctions: i) the fact that the replacement Risk-Free Rate is an overnight rate while IBORs have term structures (e.g., 1, 3, 6-month LIBOR); and (ii) the historical spread differential between IBORs and their term equivalent Overnight Risk-Free Rate compounded rates.'} priceQuantity: model::external::cdm::PriceQuantity[1..*];
  {meta::pure::profiles::doc.doc = 'Specifies the effective date of the index transition event. This is first date on which the floating rate calculation will use the new floating rate index and adjusted spread in the floating rate calculation.'} effectiveDate: Date[1];
  {meta::pure::profiles::doc.doc = 'Specifies the cash transfer that can optionally be tied to an index transition event.'} cashTransfer: model::external::cdm::Transfer[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify execution language terms of a Security Agreement.'} model::external::cdm::ExecutionLanguage
[
  numberOfOriginals: if(!($this.standardLanguage), |$this.numberOfOriginals->isEmpty(), |true),
  otherLanguage: if(!($this.standardLanguage), |$this.otherLanguage->isNotEmpty(), |true)
]
{
  {meta::pure::profiles::doc.doc = 'A boolean attribute to determine if standard language is applicable or not'} standardLanguage: Boolean[1];
  {meta::pure::profiles::doc.doc = 'The number of original documents'} numberOfOriginals: String[0..1];
  {meta::pure::profiles::doc.doc = 'Bespoke execution language to be included when specified.'} otherLanguage: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A limited version of the CDS type used as an underlyer to CDS options in Transparency view, to avoid requiring product type etc.'} FpML::model::LimitedCreditDefaultSwap
{
  {meta::pure::profiles::doc.doc = 'This element contains all the data that appears in the section entitled \'1. General Terms\' in the 2003 ISDA Credit Derivatives Confirmation.'} generalTerms: FpML::model::GeneralTerms[0..1];
  {meta::pure::profiles::doc.doc = 'This element contains all the terms relevant to defining the fixed amounts/payments per the applicable ISDA definitions.'} feeLeg: FpML::model::FeeLeg[0..1];
  {meta::pure::profiles::doc.doc = 'This element contains all the terms relevant to defining the applicable floating rate payer calculation amount, credit events and associated conditions to settlement, and reference obligations.'} protectionTerms: FpML::model::ProtectionTerms[*];
}

Class FpML::model::CreditEvents
{
  {meta::pure::profiles::doc.doc = 'A credit event. The reference entity has been dissolved or has become insolvent. It also covers events that may be a precursor to insolvency such as instigation of bankruptcy or insolvency proceedings. Sovereign trades are not subject to Bankruptcy as \'technically\' a Sovereign cannot become bankrupt. ISDA 2003 Term: Bankruptcy.'} bankruptcy: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'A credit event. This credit event triggers, after the expiration of any applicable grace period, if the reference entity fails to make due payments in an aggregrate amount of not less than the payment requirement on one or more obligations (e.g. a missed coupon payment). ISDA 2003 Term: Failure to Pay.'} failureToPay: FpML::model::FailureToPay[0..1];
  {meta::pure::profiles::doc.doc = 'A credit event. Corresponds to the failure by the Reference Entity to pay an expected principal amount or the payment of an actual principal amount that is less than the expected principal amount. ISDA 2003 Term: Failure to Pay Principal.'} failureToPayPrincipal: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'A credit event. Corresponds to the failure by the Reference Entity to pay an expected interest amount or the payment of an actual interest amount that is less than the expected interest amount. ISDA 2003 Term: Failure to Pay Interest.'} failureToPayInterest: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'A credit event. One or more of the obligations have become capable of being declared due and payable before they would otherwise have been due and payable as a result of, or on the basis of, the occurrence of a default, event of default or other similar condition or event other than failure to pay. ISDA 2003 Term: Obligation Default.'} obligationDefault: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'A credit event. One or more of the obligations have been declared due and payable before they would otherwise have been due and payable as a result of, or on the basis of, the occurrence of a default, event of default or other similar condition or event other than failure to pay (preferred by the market over Obligation Default, because more definitive and encompasses the definition of Obligation Default - this is more favorable to the Seller). Subject to the default requirement amount. ISDA 2003 Term: Obligation Acceleration.'} obligationAcceleration: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'A credit event. The reference entity, or a governmental authority, either refuses to recognise or challenges the validity of one or more obligations of the reference entity, or imposes a moratorium thereby postponing payments on one or more of the obligations of the reference entity. Subject to the default requirement amount. ISDA 2003 Term: Repudiation/Moratorium.'} repudiationMoratorium: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'A credit event. A restructuring is an event that materially impacts the reference entity\'s obligations, such as an interest rate reduction, principal reduction, deferral of interest or principal, change in priority ranking, or change in currency or composition of payment. ISDA 2003 Term: Restructuring.'} restructuring: FpML::model::Restructuring[0..1];
  {meta::pure::profiles::doc.doc = 'A credit event. A governmental intervention is an event resulting from an action by a governmental authority that materially impacts the reference entity\'s obligations, such as an interest rate reduction, principal reduction, deferral of interest or principal, change in priority ranking, or change in currency or composition of payment. ISDA 2014 Term: Governmental Intervention.'} governmentalIntervention: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'A credit event. Results from the fact that the rating of the reference obligation is downgraded to a distressed rating level. From a usage standpoint, this credit event is typically not applicable in case of RMBS trades.'} distressedRatingsDowngrade: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'A credit event. Results from the fact that the underlier fails to make principal payments as expected.'} maturityExtension: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'A credit event. Results from the fact that the underlier writes down its outstanding principal amount.'} writedown: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'A credit event. Results from the fact that losses occur to the underlying instruments that do not result in reductions of the outstanding principal of the reference obligation.'} impliedWritedown: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'In relation to certain credit events, serves as a threshold for Obligation Acceleration, Obligation Default, Repudiation/Moratorium and Restructuring. Market standard is USD 10,000,000 (JPY 1,000,000,000 for all Japanese Yen trades). This is applied on an aggregate or total basis across all Obligations of the Reference Entity. Used to prevent technical/operational errors from triggering credit events. ISDA 2003 Term: Default Requirement.'} defaultRequirement: FpML::model::Money[0..1];
  {meta::pure::profiles::doc.doc = 'A specified condition to settlement. An irrevocable written or verbal notice that describes a credit event that has occurred. The notice is sent from the notifying party (either the buyer or the seller) to the counterparty. It provides information relevant to determining that a credit event has occurred. This is typically accompanied by Publicly Available Information. ISDA 2003 Term: Credit Event Notice.'} creditEventNotice: FpML::model::CreditEventNotice[0..1];
  id: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type defining a floating rate.'} FpML::model::StubFloatingRate extends FpML::model::Rate
{
  floatingRateIndex: FpML::model::FloatingRateIndex[0..1];
  {meta::pure::profiles::doc.doc = 'The ISDA Designated Maturity, i.e. the tenor of the floating rate.'} indexTenor: FpML::model::Period[0..1];
  {meta::pure::profiles::doc.doc = 'A fallback rate calculated using an averaging or compounding formula to be used in case of the cessation of the original term rate. This structure is provided to allow an approximate representation to be created for published fallback rates to allow operations such as valuation, accrual calculation, and risk calculation.'} fallbackRate: FpML::model::FallbackRate[0..1];
  {meta::pure::profiles::doc.doc = 'A rate multiplier or multiplier schedule to apply to the floating rate. A multiplier schedule is expressed as explicit multipliers and dates. In the case of a schedule, the step dates may be subject to adjustment in accordance with any adjustments specified in the calculationPeriodDatesAdjustments. The multiplier can be a positive or negative decimal. This element should only be included if the multiplier is not equal to 1 (one) for the term of the stream.'} floatingRateMultiplierSchedule: FpML::model::Schedule[0..1];
  {meta::pure::profiles::doc.doc = 'The ISDA Spread or a Spread schedule expressed as explicit spreads and dates. In the case of a schedule, the step dates may be subject to adjustment in accordance with any adjustments specified in calculationPeriodDatesAdjustments. The spread is a per annum rate, expressed as a decimal. For purposes of determining a calculation period amount, if positive the spread will be added to the floating rate and if negative the spread will be subtracted from the floating rate. A positive 10 basis point (0.1%) spread would be represented as 0.001.'} spreadSchedule: FpML::model::SpreadSchedule[*];
  {meta::pure::profiles::doc.doc = 'The specification of any rate conversion which needs to be applied to the observed rate before being used in any calculations. The two common conversions are for securities quoted on a bank discount basis which will need to be converted to either a Money Market Yield or Bond Equivalent Yield. See the Annex to the 2000 ISDA Definitions, Section 7.3. Certain General Definitions Relating to Floating Rate Options, paragraphs (g) and (h) for definitions of these terms.'} rateTreatment: FpML::model::RateTreatmentEnum[0..1];
  {meta::pure::profiles::doc.doc = 'The cap rate or cap rate schedule, if any, which applies to the floating rate. The cap rate (strike) is only required where the floating rate on a swap stream is capped at a certain level. A cap rate schedule is expressed as explicit cap rates and dates and the step dates may be subject to adjustment in accordance with any adjustments specified in calculationPeriodDatesAdjustments. The cap rate is assumed to be exclusive of any spread and is a per annum rate, expressed as a decimal. A cap rate of 5% would be represented as 0.05.'} capRateSchedule: FpML::model::StrikeSchedule[*];
  {meta::pure::profiles::doc.doc = 'The floor rate or floor rate schedule, if any, which applies to the floating rate. The floor rate (strike) is only required where the floating rate on a swap stream is floored at a certain strike level. A floor rate schedule is expressed as explicit floor rates and dates and the step dates may be subject to adjustment in accordance with any adjustments specified in calculationPeriodDatesAdjustments. The floor rate is assumed to be exclusive of any spread and is a per annum rate, expressed as a decimal. A floor rate of 5% would be represented as 0.05.'} floorRateSchedule: FpML::model::StrikeSchedule[*];
  {meta::pure::profiles::doc.doc = 'This element is applicable in Transparency view (only) if both a capRateSchedule and a floorRateSchedule are set. If this is true, the buyer of both the cap and the floor protection is the same, and the structure is a cap/floor straddle. If this is false, the buyer of the cap is the seller of the floor, and the structure is a collar. This is needed because explicit information about the buyer and seller of the protection is not available in Transparnecy view.'} capFloorStraddle: Boolean[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the SIMM Calculation Currency elections by each party to the agreement.'} model::external::cdm::SimmCalculationCurrency
{
  {meta::pure::profiles::doc.doc = 'The parties\' SIMM Calculation Currency election.'} partyElection: model::external::cdm::CalculationCurrencyElection[2];
}

Class {meta::pure::profiles::doc.doc = 'The data type used for issuer identifiers.'} FpML::model::IssuerId
[
  c1_length: $this.issuerIdScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() >= 1,
  c3_length: $this.value->length() <= 255
]
{
  issuerIdScheme: String[0..1];
  value: String[1];
}

Class model::external::cdm::Swp
{
  swpIn: model::external::cdm::SwpIn[1];
  swpOut: model::external::cdm::SwpOut[1];
}

Class {meta::pure::profiles::doc.doc = 'Parameters to be used to filter events that are relevant to a given portfolio in order to calculate the state of this portfolio. The attributes correspond to all the possible aggregation criteria that can be used and these criteria can be combined. All the attributes are optional.'} model::external::cdm::AggregationParameters
{
  {meta::pure::profiles::doc.doc = 'To aggregate as of a particular date'} dateTime: model::external::cdm::zonedDateTime[1];
  {meta::pure::profiles::doc.doc = 'Specifies whether to calculate total position to given date, or only daily position for the given date.'} totalPosition: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'To aggregate based on position status (EXECUTED, SETTLED etc)'} positionStatus: model::external::cdm::PositionStatusEnum[0..1];
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'To aggregate based on a selection of party(ies) / legal entity(ies).'} party: model::external::cdm::Party[*];
  {meta::pure::profiles::doc.doc = 'To aggregate based on a selection of products.'} product: model::external::cdm::Product[*];
  {meta::pure::profiles::doc.doc = 'To aggregate based on a selection of product type(s).'} productQualifier: String[*];
  <<model::external::cdm::metadata.reference>> tradeReference: model::external::cdm::Trade[*];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'A business event represents a life cycle event of a trade and consists of a series of primitive events. The combination of the state changes results in a qualifiable life cycle event. An example of a Business Event is a PartialTermination which is a defined by a quantity change primitive event.'} model::external::cdm::BusinessEvent
{
  {meta::pure::profiles::doc.doc = 'The elemental component(s) that specify the lifecycle events. Each of the primitive/elemental components listed as part of the PrimitiveEvent class has distinctive features that allow to specify the lifecycle event, either by itself or in combination with some other of such components.'} primitives: model::external::cdm::PrimitiveEvent[*];
  {meta::pure::profiles::doc.doc = 'The intent attribute is meant to be specified when the event qualification cannot be programmatically inferred from the event features. As a result it is only associated with those primitives that can give way to such ambiguity, the quantityChange being one of those. An example of such is a reduction in the trade notional, which could be interpreted as either a trade correction (unless a maximum period of time post-event is specified as part of the qualification), a partial termination or a portfolio rebalancing in the case of an equity swap. On the other hand, an event such as the exercise is not expected to have an associated intent as there should not be ambiguity.'} intent: model::external::cdm::EventIntentEnum[0..1];
  {meta::pure::profiles::doc.doc = 'This is placeholder concept for a function call into a calculation that will return an outcome. This concept needs to be further firmed out.'} functionCall: String[0..1];
  {meta::pure::profiles::doc.doc = 'The CDM event qualifier, which corresponds to the outcome of the isEvent qualification logic which qualifies the lifecycle event as a function of its features (e.g. PartialTermination, ClearingSubmission, Novation, ...).'} eventQualifier: String[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the date on which the event is taking place. This date is equal to the trade date in the case of a simple execution.  However it can be different from the trade date, for example in the case of a partial termination.'} eventDate: Date[1];
  {meta::pure::profiles::doc.doc = 'The date on which the event contractually takes effect, when different from the event date.'} effectiveDate: Date[0..1];
  {meta::pure::profiles::doc.doc = 'The set of effects associated with the lifecycle event, i.e. generated cashflows, contracts (from, say, novation events), listed products (from, say, a bond option exercise event) values and more. Those are represented through a set of globalKey references. This attribute is optional in order to provide implementers with the ability not to make use of this feature.'} eventEffect: model::external::cdm::EventEffect[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the package information in case the business event represents several trades executed as a package (hence this attribute is optional). The package information is only instantiated once at the business event level to preserve referential integrity, whereas individual trades make reference to it to identify that they are part of a package.'} packageInformation: model::external::cdm::IdentifiedList[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the instructions that were used to create the Business Event.'} instruction: model::external::cdm::Instruction[*];
  {meta::pure::profiles::doc.doc = 'Specifies the after trade state(s) created.'} after: model::external::cdm::TradeState[*];
}

Class {meta::pure::profiles::doc.doc = 'Specifies how long to wait to get a quote from a settlement rate option upon a price source disruption.'} model::external::cdm::ValuationPostponement
{
  {meta::pure::profiles::doc.doc = 'The maximum number of days to wait for a quote from the disrupted settlement rate option before proceeding to the next method.'} maximumDaysOfPostponement: Integer[1];
}

Class {meta::pure::profiles::doc.doc = 'A type defining manual exercise, i.e. that the option buyer counterparty must give notice to the option seller of exercise.'} FpML::model::ManualExercise
{
  {meta::pure::profiles::doc.doc = 'Definition of the party to whom notice of exercise should be given.'} exerciseNotice: FpML::model::ExerciseNotice[0..1];
  {meta::pure::profiles::doc.doc = 'If fallback exercise is specified then the notional amount of the underlying swap, not previously exercised under the swaption, will be automatically exercised at the expiration time on the expiration date if at such time the buyer is in-the-money, provided that the difference between the settlement rate and the fixed rate under the relevant underlying swap is not less than one tenth of a percentage point (0.10% or 0.001). The term in-the-money is assumed to have the meaning defined in the 2000 ISDA Definitions, Section 17.4. In-the-money.'} fallbackExercise: Boolean[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the custodian and custody account details for each party to the agreement.'} model::external::cdm::CustodianElection
{
  {meta::pure::profiles::doc.doc = 'The elective party.'} party: model::external::cdm::CounterpartyRoleEnum[1];
  {meta::pure::profiles::doc.doc = 'The custody agent. While ISDA Create only specifies the custodian\'s name, specifying the legal entity as part of the CDM is deemed more appropriate, while this will still provide the ability to accommodate situations where only the entity name is available, as the entityId attribute is optional as part of the LegalEntity class.'} custodian: model::external::cdm::LegalEntity[0..1];
  {meta::pure::profiles::doc.doc = 'The identification of the segregated cash account for the purpose of holding cash collateral.'} segregatedCashAccount: model::external::cdm::Account[0..1];
  {meta::pure::profiles::doc.doc = 'The identification of the segregated security account for the purpose of holding security collateral.'} segregatedSecurityAccount: model::external::cdm::Account[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Specifies Termination Currency where a currency is stated at the time the agreement is entered into.'} model::external::cdm::TerminationCurrencySelection
{
  {meta::pure::profiles::doc.doc = 'Specifies a single Termination Currency for the agreement.'} statedCurrency: String[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies a single fallback Termination Currency should the stated currency not be freely available.'} fallbackCurrency: String[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies different termination currencies to apply depending on which party or parties are the Defaulting Party Affected Party(ies).'} partyElection: model::external::cdm::PartyTerminationCurrencySelection[0..2];
  {meta::pure::profiles::doc.doc = 'Specifies fallback Termination Currency where both parties are Affected Parties.'} bothAffected: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A party\'s industry sector classification.'} FpML::model::IndustryClassification
[
  c1_length: $this.industryClassificationScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  industryClassificationScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the Calculation, Valuation and Timing terms specific to the agreement.'} model::external::cdm::CalculationAndTiming
{
  {meta::pure::profiles::doc.doc = 'The calculation agent terms applicable to the agreement.'} calculationAgentTerms: model::external::cdm::CalculationAgentTerms[0..1];
  {meta::pure::profiles::doc.doc = 'The specification of bespoke Calculation Date terms for the purposes of Initial or Variation Margin by the parties to the agreement.'} bespokeCalculationDate: model::external::cdm::BespokeCalculationDate[0..1];
  {meta::pure::profiles::doc.doc = 'Bespoke terms to describe the time as of which such party (or the Calculation Agent (IM) (if applicale)) computes its end of day valuations of derivatives transactions.'} bespokeCalculationTime: model::external::cdm::BespokeCalculationTime[0..1];
  {meta::pure::profiles::doc.doc = 'The specified location where the credit exposure will be calculated by the respective parties.'} calculationDateLocation: model::external::cdm::CalculationDateLocation[0..1];
  {meta::pure::profiles::doc.doc = 'The time by which a demand for the Transfer of Eligible Credit Support (IM) or Posted Credit Support (IM) needs to be made in order for the transfer to take place in accordance with the Transfer Timing provisions.'} notificationTime: model::external::cdm::NotificationTime[1];
  {meta::pure::profiles::doc.doc = 'The bespoke Collateral Valuation Agent terms applicable to the agreement.'} collateralValuationAgent: model::external::cdm::CollateralValuationAgent[0..1];
  {meta::pure::profiles::doc.doc = 'Cash Settlement Day has the meaning specified in ISDA 2016 Japanese Law Credit Support Annex for Initial Margin, Paragraph 4(b)(i), unless otherwise specified as part of this attribute.'} cashSettlementDay: String[0..1];
  {meta::pure::profiles::doc.doc = 'Securities Settlement Day has the meaning specified in ISDA 2016 Japanese Law Credit Support Annex for Initial Margin, Paragraph 12, unless otherwise specified as part of this attribute.'} securitiesSettlementDay: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Coding scheme that specifies the method according to which an amount or a date is determined.'} FpML::model::DeterminationMethod
[
  c1_length: $this.determinationMethodScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  determinationMethodScheme: String[0..1];
  id: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'A type defining a non negative money amount.'} FpML::model::NonNegativeMoney extends FpML::model::MoneyBase
[
  c1_range: $this.amount->forAll(x: Decimal[1]|$x >= 0)
]
{
  {meta::pure::profiles::doc.doc = 'The non negative monetary quantity in currency units.'} amount: Decimal[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type defining a date (referred to as the derived date) as a relative offset from another date (referred to as the anchor date). If the anchor date is itself an adjustable date then the offset is assumed to be calculated from the adjusted anchor date. A number of different scenarios can be supported, namely; 1) the derived date may simply be a number of calendar periods (days, weeks, months or years) preceding or following the anchor date; 2) the unadjusted derived date may be a number of calendar periods (days, weeks, months or years) preceding or following the anchor date with the resulting unadjusted derived date subject to adjustment in accordance with a specified business day convention, i.e. the derived date must fall on a good business day; 3) the derived date may be a number of business days preceding or following the anchor date. Note that the businessDayConvention specifies any required adjustment to the unadjusted derived date. A negative or positive value in the periodMultiplier indicates whether the unadjusted derived precedes or follows the anchor date. The businessDayConvention should contain a value NONE if the day type element contains a value of Business (since specifying a negative or positive business days offset would already guarantee that the derived date would fall on a good business day in the specified business centers).'} FpML::model::RelativeDateOffset extends FpML::model::Offset
{
  {meta::pure::profiles::doc.doc = 'The convention for adjusting a date if it would otherwise fall on a day that is not a business day.'} businessDayConvention: FpML::model::BusinessDayConventionEnum[0..1];
  {meta::pure::profiles::doc.doc = 'A pointer style reference to a set of financial business centers defined elsewhere in the document. This set of business centers is used to determine whether a particular day is a business day or not.'} businessCentersReference: FpML::model::BusinessCentersReference[0..1];
  businessCenters: FpML::model::BusinessCenters[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the anchor as an href attribute. The href attribute value is a pointer style reference to the element or component elsewhere in the document where the anchor date is defined.'} dateRelativeTo: FpML::model::DateReference[0..1];
  {meta::pure::profiles::doc.doc = 'The date once the adjustment has been performed. (Note that this date may change if the business center holidays change).'} adjustedDate: FpML::model::IdentifiedDate[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Defines stock loan information where this is required per underlyer. You must not duplicate infromation within dividend conditions at transaction level'} FpML::model::UnderlyerLoanRate
{
  {meta::pure::profiles::doc.doc = 'If true, then loss of stock borrow is applicable.'} lossOfStockBorrow: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the maximum stock loan rate for Loss of Stock Borrow.'} maximumStockLoanRate: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'If true, then increased cost of stock borrow is applicable.'} increasedCostOfStockBorrow: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the initial stock loan rate for Increased Cost of Stock Borrow.'} initialStockLoanRate: Decimal[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type that describes the composition of a rate that has been quoted or is to be quoted. This includes the two currencies and the quotation relationship between the two currencies and is used as a building block throughout the FX specification.'} FpML::model::QuotedCurrencyPair
{
  {meta::pure::profiles::doc.doc = 'The first currency specified when a pair of currencies is to be evaluated.'} currency1: FpML::model::Currency[0..1];
  {meta::pure::profiles::doc.doc = 'The second currency specified when a pair of currencies is to be evaluated.'} currency2: FpML::model::Currency[0..1];
  {meta::pure::profiles::doc.doc = 'The method by which the exchange rate is quoted.'} quoteBasis: FpML::model::QuoteBasisEnum[0..1];
}

Class model::external::cdm::CreditLimitUtilisationPosition
{
  {meta::pure::profiles::doc.doc = 'Credit limit utilisation attributable to short positions.'} shortPosition: Float[0..1];
  {meta::pure::profiles::doc.doc = 'Credit limit utilisation attributable to long positions.'} longPosition: Float[0..1];
  {meta::pure::profiles::doc.doc = 'Global credit limit utilisation amount, agnostic of long/short position direction.'} global: Float[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Defines to whom and where notice of execution should be given. The exerciseNoticeGiver refers to one or both of the principal parties of the trade. If present the exerciseNoticeReceiver refers to a party, other than the principal party, to whom notice should be given.'} model::external::cdm::ExerciseNotice
{
  {meta::pure::profiles::doc.doc = 'Specifies the principal party of the trade that has the right to exercise.'} exerciseNoticeGiver: model::external::cdm::ExerciseNoticeGiverEnum[1];
  {meta::pure::profiles::doc.doc = 'Specifies the party to which notice of exercise should be given, e.g. by the buyer of the option. Although in many cases it is the buyer of the option who sends the exercise notice to the seller of the option, this component is reused, e.g. in case of OptionEarlyTermination, either or both parties have the right to exercise.'} exerciseNoticeReceiver: model::external::cdm::AncillaryRoleEnum[0..1];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'Specifies the location where the exercise must be reported, e.g. where the exercise notice receiver is based.'} businessCenter: model::external::cdm::BusinessCenterEnum[1];
}

Class {meta::pure::profiles::doc.doc = 'A class defining partial exercise. As defined in the 2000 ISDA Definitions, Section 12.3 Partial Exercise, the buyer of the option may exercise all or less than all the notional amount of the underlying swap but may not be less than the minimum notional amount (if specified) and must be an integral multiple of the integral multiple amount if specified.'} model::external::cdm::PartialExercise
[
  MinimumChoice: ($this.minimumNotionalAmount->isNotEmpty() && $this.minimumNumberOfOptions->isEmpty()) || ($this.minimumNumberOfOptions->isNotEmpty() && $this.minimumNotionalAmount->isEmpty())
]
{
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'A pointer style reference to the associated notional schedule defined elsewhere in the document. This element has been made optional as part of its integration in the OptionBaseExtended, because not required for the options on securities.'} notionaReference: model::external::cdm::Money[1];
  {meta::pure::profiles::doc.doc = 'A notional amount which restricts the amount of notional that can be exercised when partial exercise or multiple exercise is applicable. The integral multiple amount defines a lower limit of notional that can be exercised and also defines a unit multiple of notional that can be exercised, i.e. only integer multiples of this amount can be exercised.'} integralMultipleAmount: Float[0..1];
  {meta::pure::profiles::doc.doc = 'The minimum notional amount that can be exercised on a given exercise date. See multipleExercise.'} minimumNotionalAmount: Float[0..1];
  {meta::pure::profiles::doc.doc = 'The minimum number of options that can be exercised on a given exercise date.'} minimumNumberOfOptions: Integer[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Identifies a security by referencing a product identifier and by specifying the sector.'} model::external::cdm::Security extends model::external::cdm::ProductBase
{
  {meta::pure::profiles::doc.doc = 'Identifies the type of security using an enumerated list.'} securityType: model::external::cdm::SecurityTypeEnum[1];
  {meta::pure::profiles::doc.doc = 'Identifies the type of debt and selected debt economics.'} debtType: model::external::cdm::DebtType[0..1];
  {meta::pure::profiles::doc.doc = 'Identifies the type of equity.'} equityType: model::external::cdm::EquityTypeEnum[0..1];
  {meta::pure::profiles::doc.doc = 'Identifies the type of fund.'} fundType: model::external::cdm::FundProductTypeEnum[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A party\'s credit rating.'} FpML::model::CreditRating
[
  c1_length: $this.creditRatingScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  creditRatingScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'Specifies instructions for execution of a transaction, consisting of a product, price, quantity, parties, trade identifier, execution details, and settlement terms.'} model::external::cdm::ExecutionInstruction
{
  {meta::pure::profiles::doc.doc = 'Defines the financial product to be executed and contract formed.'} product: model::external::cdm::Product[1];
  {meta::pure::profiles::doc.doc = 'Defines the prices (e.g. spread, equity price, FX rate), quantities (e.g. currency amount, no. shares) and settlement terms (e.g. initial fee, broker fee, up-front cds payment or option premium settlement) associated with the constituents of the transacted product.'} priceQuantity: model::external::cdm::PriceQuantity[1..*];
  {meta::pure::profiles::doc.doc = 'Maps two defined parties to counterparty enums for the transacted product.'} counterparty: model::external::cdm::Counterparty[2];
  {meta::pure::profiles::doc.doc = 'Maps any ancillary parties, e.g. parties involved in the transaction that are not one of the two principal parties.'} ancillaryParty: model::external::cdm::AncillaryParty[*];
  {meta::pure::profiles::doc.doc = 'Defines all parties to that execution, including agents and brokers.'} parties: model::external::cdm::Party[2..*];
  {meta::pure::profiles::doc.doc = 'Defines the role(s) that party(ies) may have in relation to the execution.'} partyRoles: model::external::cdm::PartyRole[*];
  {meta::pure::profiles::doc.doc = 'Specifies the type and venue of execution, e.g. via voice, or electronically.'} executionDetails: model::external::cdm::ExecutionDetails[1];
  {meta::pure::profiles::doc.doc = 'Denotes the trade/execution date.'} tradeDate: Date[1];
  {meta::pure::profiles::doc.doc = 'Denotes one or more identifiers associated with the transaction.'} tradeIdentifier: model::external::cdm::Identifier[1..*];
}

Class model::external::cdm::OrdrTrnsmssn
{
  trnsmssnInd: String[1];
}

Class {meta::pure::profiles::doc.doc = 'A special type meant to be used for elements with no content and no attributes.'} FpML::model::Empty
{
}

Class {meta::pure::profiles::doc.doc = 'A class to describe an institution (party) identified by means of a coding scheme and an optional name.'} model::external::cdm::ReferenceBank
{
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'An institution (party) identifier, e.g. a bank identifier code (BIC). FpML specifies a referenceBankIdScheme.'} referenceBankId: String[1];
  {meta::pure::profiles::doc.doc = 'The name of the institution (party). A free format string. FpML does not define usage rules for the element.'} referenceBankName: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type that represents a physical postal address.'} FpML::model::Address
[
  c1_length: $this.city->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.state->forAll(x: String[1]|$x->length() >= 1),
  c3_length: $this.postalCode->forAll(x: String[1]|$x->length() >= 1)
]
{
  {meta::pure::profiles::doc.doc = 'The set of street and building number information that identifies a postal address within a city.'} streetAddress: FpML::model::StreetAddress[0..1];
  {meta::pure::profiles::doc.doc = 'The city component of a postal address.'} city: String[0..1];
  {meta::pure::profiles::doc.doc = 'A country subdivision used in postal addresses in some countries. For example, US states, Canadian provinces, Swiss cantons.'} state: String[0..1];
  {meta::pure::profiles::doc.doc = 'The ISO 3166 standard code for the country within which the postal address is located.'} country: FpML::model::CountryCode[0..1];
  {meta::pure::profiles::doc.doc = 'The code, required for computerised mail sorting systems, that is allocated to a physical address by a national postal authority.'} postalCode: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class defining a schedule of rates or amounts in terms of an initial value and then a series of step date and value pairs. On each step date the rate or amount changes to the new step value. The series of step date and value pairs are optional. If not specified, this implies that the initial value remains unchanged over time.'} model::external::cdm::Schedule
{
  {meta::pure::profiles::doc.doc = 'The initial rate or amount, as the case may be. An initial rate of 5% would be represented as 0.05.'} initialValue: Float[1];
  {meta::pure::profiles::doc.doc = 'The schedule of step date and value pairs. On each step date the associated step value becomes effective A list of steps may be ordered in the document by ascending step date. An FpML document containing an unordered list of steps is still regarded as a conformant document.'} step: model::external::cdm::Step[*];
}

Class {meta::pure::profiles::doc.doc = 'The number range defined as either a lower and upper number bound, or both.'} model::external::cdm::NumberRange
{
  {meta::pure::profiles::doc.doc = 'The lower bound of a number range, e.g. greater than or equal to 5.'} lowerBound: model::external::cdm::NumberBound[0..1];
  {meta::pure::profiles::doc.doc = 'The upper bound of a number range, e.g. less than 10.'} upperBound: model::external::cdm::NumberBound[0..1];
}

Class FpML::model::ReferenceInformation
[
  c1_choice: ($this.referenceObligation->isNotEmpty() && ($this.noReferenceObligation->isEmpty() && $this.unknownReferenceObligation->isEmpty())) || (($this.referenceObligation->isEmpty() && ($this.noReferenceObligation->isNotEmpty() && $this.unknownReferenceObligation->isEmpty())) || ($this.referenceObligation->isEmpty() && ($this.noReferenceObligation->isEmpty() && $this.unknownReferenceObligation->isNotEmpty())))
]
{
  {meta::pure::profiles::doc.doc = 'The corporate or sovereign entity on which you are buying or selling protection and any successor that assumes all or substantially all of its contractual and other obligations. It is vital to use the correct legal name of the entity and to be careful not to choose a subsidiary if you really want to trade protection on a parent company. Please note, Reference Entities cannot be senior or subordinated. It is the obligations of the Reference Entities that can be senior or subordinated. ISDA 2003 Term: Reference Entity'} referenceEntity: FpML::model::LegalEntity[0..1];
  {meta::pure::profiles::doc.doc = 'The Reference Obligation is a financial instrument that is either issued or guaranteed by the reference entity. It serves to clarify the precise reference entity protection is being offered upon, and its legal position with regard to other related firms (parents/subsidiaries). Furthermore the Reference Obligation is ALWAYS deliverable and establishes the Pari Passu ranking (as the deliverable bonds must rank equal to the reference obligation). ISDA 2003 Term: Reference Obligation'} referenceObligation: FpML::model::ReferenceObligation[*];
  {meta::pure::profiles::doc.doc = 'Used to indicate that there is no Reference Obligation associated with this Credit Default Swap and that there will never be one.'} noReferenceObligation: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'Used to indicate that the Reference obligation associated with the Credit Default Swap is currently not known. This is not valid for Legal Confirmation purposes, but is valid for earlier stages in the trade life cycle (e.g. Broker Confirmation).'} unknownReferenceObligation: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'Indicates whether an obligation of the Reference Entity, guaranteed by the Reference Entity on behalf of a non-Affiliate, is to be considered an Obligation for the purpose of the transaction. It will be considered an obligation if allGuarantees is applicable (true) and not if allGuarantees is inapplicable (false). ISDA 2003 Term: All Guarantees'} allGuarantees: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'Used to determine (a) for physically settled trades, the Physical Settlement Amount, which equals the Floating Rate Payer Calculation Amount times the Reference Price and (b) for cash settled trades, the Cash Settlement Amount, which equals the greater of (i) the difference between the Reference Price and the Final Price and (ii) zero. ISDA 2003 Term: Reference Price'} referencePrice: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'Applicable to the transactions on mortgage-backed security, which can make use of a reference policy. Presence of the element with value set to \'true\' indicates that the reference policy is applicable; absence implies that it is not.'} referencePolicy: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'With respect to any day, the list of Syndicated Secured Obligations of the Designated Priority of the Reference Entity published by Markit Group Limited or any successor thereto appointed by the Specified Dealers (the \'Secured List Publisher\') on or most recently before such day, which list is currently available at [http://www.markit.com]. ISDA 2003 Term: Relevant Secured List.'} securedList: Boolean[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Bond price relative to a benchmark, as in a convertible bond.'} model::external::cdm::RelativePrice
{
  {meta::pure::profiles::doc.doc = 'The spread to a benchmark.'} spread: Float[1];
  {meta::pure::profiles::doc.doc = 'Bond equity model for convertible bonds.'} bondEquityModel: model::external::cdm::BondEquityModel[1..*];
}

Class {meta::pure::profiles::doc.doc = 'Description'} model::external::cdm::SpecifiedEntity
{
  {meta::pure::profiles::doc.doc = 'The elective party'} party: model::external::cdm::Party[1];
  {meta::pure::profiles::doc.doc = 'The specified entity terms for the Event of Default or Termination Event specified.'} specifiedEntityTerms: model::external::cdm::SpecifiedEntityTermsEnum[1];
  {meta::pure::profiles::doc.doc = 'The specified entities for the Event of Default or Termination Event specified.'} specifiedEntity: model::external::cdm::LegalEntity[*];
  {meta::pure::profiles::doc.doc = 'The meaning of Material Subsidiary for the Event of Default or Termination Event specified.'} materialSubsidiaryTerms: String[0..1];
  {meta::pure::profiles::doc.doc = 'The non standard terms for the Event of Default or Termination Event specified.'} otherSpecifiedEntityTerms: String[0..1];
}

Class FpML::model::DeliverableObligations
[
  c1_length: $this.excluded->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.othReferenceEntityObligations->forAll(x: String[1]|$x->length() >= 1),
  c3_choice: ($this.fullFaithAndCreditObLiability->isNotEmpty() && ($this.generalFundObligationLiability->isEmpty() && $this.revenueObligationLiability->isEmpty())) || (($this.fullFaithAndCreditObLiability->isEmpty() && ($this.generalFundObligationLiability->isNotEmpty() && $this.revenueObligationLiability->isEmpty())) || ($this.fullFaithAndCreditObLiability->isEmpty() && ($this.generalFundObligationLiability->isEmpty() && $this.revenueObligationLiability->isNotEmpty())))
]
{
  {meta::pure::profiles::doc.doc = 'Indicates whether accrued interest is included (true) or not (false). For cash settlement this specifies whether quotations should be obtained inclusive or not of accrued interest. For physical settlement this specifies whether the buyer should deliver the obligation with an outstanding principal balance that includes or excludes accrued interest. ISDA 2003 Term: Include/Exclude Accrued Interest'} accruedInterest: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'Used in both obligations and deliverable obligations to represent a class or type of securities which apply. ISDA 2003 Term: Obligation Category/Deliverable Obligation Category'} category: FpML::model::ObligationCategoryEnum[0..1];
  {meta::pure::profiles::doc.doc = 'An obligation and deliverable obligation characteristic. An obligation that ranks at least equal with the most senior Reference Obligation in priority of payment or, if no Reference Obligation is specified in the related Confirmation, the obligations of the Reference Entity that are senior. ISDA 2003 Term: Not Subordinated'} notSubordinated: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'An obligation and deliverable obligation characteristic. The currency or currencies in which an obligation or deliverable obligation must be payable. ISDA 2003 Term: Specified Currency'} specifiedCurrency: FpML::model::SpecifiedCurrency[0..1];
  {meta::pure::profiles::doc.doc = 'An obligation and deliverable obligation characteristic. Any obligation that is not primarily (majority) owed to a Sovereign or Supranational Organization. ISDA 2003 Term: Not Sovereign Lender'} notSovereignLender: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'An obligation and deliverable obligation characteristic. Any obligation that is payable in any currency other than the domestic currency. Domestic currency is either the currency so specified or, if no currency is specified, the currency of (a) the reference entity, if the reference entity is a sovereign, or (b) the jurisdiction in which the relevant reference entity is organised, if the reference entity is not a sovereign. ISDA 2003 Term: Not Domestic Currency'} notDomesticCurrency: FpML::model::NotDomesticCurrency[0..1];
  {meta::pure::profiles::doc.doc = 'An obligation and deliverable obligation characteristic. If the reference entity is a Sovereign, this means any obligation that is not subject to the laws of the reference entity. If the reference entity is not a sovereign, this means any obligation that is not subject to the laws of the jurisdiction of the reference entity. ISDA 2003 Term: Not Domestic Law'} notDomesticLaw: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'An obligation and deliverable obligation characteristic. Indicates whether or not the obligation is quoted, listed or ordinarily purchased and sold on an exchange. ISDA 2003 Term: Listed'} listed: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'A deliverable obligation characteristic. In essence Not Contingent means the repayment of principal cannot be dependant on a formula/index, i.e. to prevent the risk of being delivered an instrument that may never pay any element of principal, and to ensure that the obligation is interest bearing (on a regular schedule). ISDA 2003 Term: Not Contingent'} notContingent: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'An obligation and deliverable obligation characteristic. Any obligation other than an obligation that was intended to be offered for sale primarily in the domestic market of the relevant Reference Entity. This specifies that the obligation must be an internationally recognized bond. ISDA 2003 Term: Not Domestic Issuance'} notDomesticIssuance: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'A deliverable obligation characteristic. A loan that is freely assignable to a bank or financial institution without the consent of the Reference Entity or the guarantor, if any, of the loan (or the consent of the applicable borrower if a Reference Entity is guaranteeing the loan) or any agent. ISDA 2003 Term: Assignable Loan'} assignableLoan: FpML::model::PcDeliverableObligationCharac[0..1];
  {meta::pure::profiles::doc.doc = 'A deliverable obligation characteristic. A loan that is capable of being assigned with the consent of the Reference Entity or the guarantor, if any, of the loan or any agent. ISDA 2003 Term: Consent Required Loan'} consentRequiredLoan: FpML::model::PcDeliverableObligationCharac[0..1];
  {meta::pure::profiles::doc.doc = 'A deliverable obligation characteristic. A loan with a participation agreement whereby the buyer is capable of creating, or procuring the creation of, a contractual right in favour of the seller that provides the seller with recourse to the participation seller for a specified share in any payments due under the relevant loan which are received by the participation seller. ISDA 2003 Term: Direct Loan Participation'} directLoanParticipation: FpML::model::LoanParticipation[0..1];
  {meta::pure::profiles::doc.doc = 'A deliverable obligation characteristic. An obligation that is transferable to institutional investors without any contractual, statutory or regulatory restrictions. ISDA 2003 Term: Transferable'} transferable: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'A deliverable obligation characteristic. An obligation that has a remaining maturity from the Physical Settlement Date of not greater than the period specified. ISDA 2003 Term: Maximum Maturity'} maximumMaturity: FpML::model::Period[0..1];
  {meta::pure::profiles::doc.doc = 'A deliverable obligation characteristic. An obligation at time of default is due to mature and due to be repaid, or as a result of downgrade/bankruptcy is due to be repaid as a result of an acceleration clause. ISDA 2003 Term: Accelerated or Matured'} acceleratedOrMatured: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'A deliverable obligation characteristic. Any obligation that is not a bearer instrument. This applies to Bonds only and is meant to avoid tax, fraud and security/delivery provisions that can potentially be associated with Bearer Bonds. ISDA 2003 Term: Not Bearer'} notBearer: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'An obligation and deliverable obligation characteristic. Defined in the ISDA published additional provisions for U.S. Municipal as Reference Entity. ISDA 2003 Term: Full Faith and Credit Obligation Liability'} fullFaithAndCreditObLiability: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'An obligation and deliverable obligation characteristic. Defined in the ISDA published additional provisions for U.S. Municipal as Reference Entity. ISDA 2003 Term: General Fund Obligation Liability'} generalFundObligationLiability: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'An obligation and deliverable obligation characteristic. Defined in the ISDA published additional provisions for U.S. Municipal as Reference Entity. ISDA 2003 Term: Revenue Obligation Liability'} revenueObligationLiability: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'ISDA 1999 Term: Indirect Loan Participation. NOTE: Only applicable as a deliverable obligation under ISDA Credit 1999.'} indirectLoanParticipation: FpML::model::LoanParticipation[0..1];
  {meta::pure::profiles::doc.doc = 'A free format string to specify any excluded obligations or deliverable obligations, as the case may be, of the reference entity or excluded types of obligations or deliverable obligations. ISDA 2003 Term: Excluded Obligations/Excluded Deliverable Obligations'} excluded: String[0..1];
  {meta::pure::profiles::doc.doc = 'This element is used to specify any other obligations of a reference entity in both obligations and deliverable obligations. The obligations can be specified free-form. ISDA 2003 Term: Other Obligations of a Reference Entity'} othReferenceEntityObligations: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the ISDA terms relating to the floating rate payment events and the implied additional fixed payments, applicable to the credit derivatives transactions on mortgage-backed securities with pay-as-you-go or physical settlement.'} model::external::cdm::FloatingAmountEvents
{
  {meta::pure::profiles::doc.doc = 'A floating rate payment event. Corresponds to the failure by the Reference Entity to pay an expected principal amount or the payment of an actual principal amount that is less than the expected principal amount. ISDA 2003 Term: Failure to Pay Principal.'} failureToPayPrincipal: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'A floating rate payment event. With respect to any Reference Obligation Payment Date, either (a) the non-payment of an Expected Interest Amount or (b) the payment of an Actual Interest Amount that is less than the Expected Interest Amount. ISDA 2003 Term: Interest Shortfall.'} interestShortfall: model::external::cdm::InterestShortFall[0..1];
  {meta::pure::profiles::doc.doc = 'A floating rate payment event. Results from the fact that the underlier writes down its outstanding principal amount. ISDA 2003 Term: Writedown.'} writedown: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'A floating rate payment event. Results from the fact that losses occur to the underlying instruments that do not result in reductions of the outstanding principal of the reference obligation.'} impliedWritedown: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the floating amount provisions associated with the floatingAmountEvents.'} floatingAmountProvisions: model::external::cdm::FloatingAmountProvisions[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the events that will give rise to the payment additional fixed payments.'} additionalFixedPayments: model::external::cdm::AdditionalFixedPayments[0..1];
}

Class model::external::cdm::AddtlAttrbts
{
  rskRdcgTx: String[1];
  sctiesFincgTxInd: String[1];
}

Class model::external::cdm::AcctOwnr
{
  id: model::external::cdm::Id[1];
}

Class FpML::model::MasterConfirmationAnnexType
[
  c1_length: $this.masterConfirmationAnnexTypeScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  masterConfirmationAnnexTypeScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'The agreement executed between the parties and intended to govern collateral arrangement for all OTC derivatives transactions between those parties.'} model::external::cdm::CreditSupportAgreement
{
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'The type of ISDA Credit Support Agreement.'} creditSupportAgreementType: model::external::cdm::CreditSupportAgreementTypeEnum[1];
  {meta::pure::profiles::doc.doc = 'The date of the agreement executed between the parties and intended to govern collateral arrangements for all OTC derivatives transactions between those parties.'} date: Date[1];
  {meta::pure::profiles::doc.doc = 'An identifier used to uniquely identify the CSA. FpML specifies the type as creditSupportAgreementIdScheme, but without proposing any value.  As far as e understand, no scheme has yet been developed at this point.'} identifierValue: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'The data type used for a benchmark rate (e.g. agreed discount rate or collateral interest rate).'} FpML::model::BenchmarkRate
[
  c1_length: $this.benchmarkRateScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  {meta::pure::profiles::doc.doc = 'The identifier scheme used for this benchmark. This will be defaulted to an ISDA benchmark scheme.'} benchmarkRateScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the SIMM exception to the regulatory regime clause of the ISDA 2016 and 2018 CSA for Initial Margin as either a normalized value specified as part of an enumeration or a customized value specified of type string. ISDA 2016 Credit Support Annex for Initial Margin paragraph 13, Regime: SIMM Exception.'} model::external::cdm::SimmException
{
  {meta::pure::profiles::doc.doc = 'The Standard Initial Margin Model exception when specified by the party according to one of the enumerated values.'} standardisedException: model::external::cdm::ExceptionEnum[0..1];
  {meta::pure::profiles::doc.doc = 'The Standard Initial Margin model exception approach applicable when specified by the party according to one of the enumerated values.'} simmExceptionApplicable: model::external::cdm::SimmExceptionApplicableEnum[0..1];
  {meta::pure::profiles::doc.doc = 'The Standard Initial Margin Model exception when specified as a customized approach by the party.'} asSpecified: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Specification for the General Terms and Relationship Supplement Elections as provided in the 2018 ISDA CDM Equity Confirmation for Security Equity Swap.'} model::external::cdm::EquitySwapMasterConfirmation2018 extends model::external::cdm::EquityMasterConfirmation
{
  {meta::pure::profiles::doc.doc = 'Part 1 Section 4, \'Dividend Obligations\', of the 2018 ISDA CDM Equity Confirmation, Para 4.2 \'Dividend Returns\': The Type Of Swap Election shall be \'Total Return\', unless otherwise specified (as alternative \'Price Return\') in the Transaction Supplement.'} typeOfSwapElection: model::external::cdm::ReturnTypeEnum[1];
  {meta::pure::profiles::doc.doc = 'Part 1 Section 5, \'Pricing\', of the 2018 ISDA CDM Equity Confirmation, Para 5.1, \'Determining Prices\': Each price in relation to a Pricing Date shall be determined pursuant to the specified Pricing Method. The relevant price specified under the column header \'Price\' for a corresponding Pricing Date specified under the column header \'Pricing Date\' shall be determined using the corresponding method specified under the column header \'Pricing Method\'. Pricing Method for the final Equity Valuation Date shall be specified by the Final EVD Pricing Election and Pricing Method for any other Equity Valaution Date shall be \'Securities Close Pricing (Official)\''} pricingMethodElection: model::external::cdm::PriceReturnTerms[1];
  {meta::pure::profiles::doc.doc = 'Part 1 Section 3, \'Floating Obligations\', of the 2018 ISDA CDM Equity Confirmation. Para 3.3, \'Linear Interpolation\': If the initial Calculation Period is not equal to the Designated Maturity, then the Linear Interpolation Election shall be as specified in the Relationship Supplement, unless otherwise specified in the Transaction Supplement.'} linearInterpolationElection: model::external::cdm::InterpolationMethodEnum[1];
  {meta::pure::profiles::doc.doc = 'Part 1 Section 8, \'Settlement\', of the 2018 ISDA CDM Equity Confirmation for Security Equity Swap. All Settlements are in Cash.'} settlementTerms: model::external::cdm::SettlementTerms[1];
  {meta::pure::profiles::doc.doc = 'The parameters used to generate the \'Equity Valuation Dates\' schedule, including the Effective Date and Termination Date for the Swap.'} equityCalculationPeriod: model::external::cdm::CalculationPeriodDates[1];
  {meta::pure::profiles::doc.doc = 'The parameters used to generate the payment date schedule, relative to the equityCalculationPeriod. Part 1 Section 12, \'Definitions\', of the 2018 ISDA CDM Equity Confirmation. Para 73: \'Equity Cash Settlement Date\' means each date falling one Settlement Cycle after an Equity Valuation Date; provided that if any such date is not a Settlement Currency Business Day, then such date shall be adjusted per Following Day Adjustment.'} equityCashSettlementDates: model::external::cdm::PaymentDates[1];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'A class to specify the terms for calculating a payout to protect the buyer of the swap in the case of a qualified credit event. These terms include the applicable credit events, the reference obligation, and in the case of a CDS on mortgage-backed securities, the floatingAmountEvents.'} model::external::cdm::ProtectionTerms
{
  {meta::pure::profiles::doc.doc = 'Specifies the applicable Credit Events that would trigger a settlement, as specified in the related Confirmation and defined in the ISDA 2014 Credit Definition article IV section 4.1.'} creditEvents: model::external::cdm::CreditEvents[0..1];
  {meta::pure::profiles::doc.doc = 'The underlying obligations of the reference entity on which you are buying or selling protection. The credit events Failure to Pay, Obligation Acceleration, Obligation Default, Restructuring, Repudiation/Moratorium are defined with respect to these obligations.'} obligations: model::external::cdm::Obligations[0..1];
  {meta::pure::profiles::doc.doc = 'This element contains the ISDA terms relating to the floating rate payment events and the implied additional fixed payments, applicable to the credit derivatives transactions on mortgage-backed securities with pay-as-you-go or physical settlement.'} floatingAmountEvents: model::external::cdm::FloatingAmountEvents[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type for defining business day calendar used in determining whether a day is a business day or not. A list of business day calendar locations may be ordered in the document alphabetically based on business day calendar location code. An FpML document containing an unordered business day calendar location list is still regarded as a conformant document.'} FpML::model::BusinessCenters
{
  businessCenter: FpML::model::BusinessCenter[*];
  id: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Specifies the type of debt instrument.'} model::external::cdm::DebtType
{
  {meta::pure::profiles::doc.doc = 'Specifies the characteristics of a debt instrument.'} debtClass: model::external::cdm::DebtClassEnum[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies selected financial terms of a debt instrument.'} debtEconomics: model::external::cdm::DebtEconomics[*];
}

Class {meta::pure::profiles::doc.doc = 'Represents the credit rating notation higher level construct, which provides the ability to specify multiple rating notations.'} model::external::cdm::CreditNotations
[
  one_of_constraint: ($this.creditNotation->isNotEmpty() && $this.creditNotations->isEmpty()) || ($this.creditNotations->isNotEmpty() && $this.creditNotation->isEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'Specifies only one credit notation is determined.'} creditNotation: model::external::cdm::CreditNotation[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies if several credit notations exist, alongside an \'any\' or \'all\' or all condition.'} creditNotations: model::external::cdm::MultipleCreditNotations[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A data to:  provide the ability to point to multiple payment nodes in the document through the unbounded paymentDatesReference.'} model::external::cdm::DateRelativeToPaymentDates
{
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'A set of href pointers to payment dates defined somewhere else in the document.'} paymentDatesReference: model::external::cdm::PaymentDates[1..*];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the methodology according to which sensitivities to (i) equity indices, funds and ETFs, and (ii) commodity indices are computed. This specification is done either through a normalized election as part of the specifiedMethodology, or through a custom election via the customMethodology attribute. ISDA 2016 Credit Support Annex for Initial Margin, paragraph 13, General Principles, (gg)(2).'} model::external::cdm::SensitivityMethodology
[
  one_of_constraint: ($this.specifiedMethodology->isNotEmpty() && $this.customMethodology->isEmpty()) || ($this.customMethodology->isNotEmpty() && $this.specifiedMethodology->isEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'The methodology according to which sensitivities will be computed, when specified through a normalized election.'} specifiedMethodology: model::external::cdm::SensitivitiesEnum[0..1];
  {meta::pure::profiles::doc.doc = 'The methodology according to which sensitivities will be computed, when specified through a custom election.'} customMethodology: String[0..1];
}

Class FpML::model::ConvertibleBond extends FpML::model::Bond
{
  {meta::pure::profiles::doc.doc = 'Specifies the equity in which the convertible bond can be converted.'} underlyingEquity: FpML::model::EquityAsset[0..1];
  {meta::pure::profiles::doc.doc = 'Earlier date between the convertible bond put dates and its maturity date.'} redemptionDate: StrictDate[0..1];
}

Class {meta::pure::profiles::doc.doc = 'In its initial iteration, this class is meant to support the DTCC TIW workflow information.'} model::external::cdm::CustomisedWorkflow
{
  {meta::pure::profiles::doc.doc = 'In this initial iteration, this corresponds to the DTCC TIW element name.'} itemName: String[1];
  {meta::pure::profiles::doc.doc = 'In this initial iteration, this corresponds to the DTCC value.'} itemValue: String[1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the role(s) that party(ies) may have in relation to the execution, contract or other legal agreement.'} model::external::cdm::PartyRole
{
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'A reference to the party to which the role refers to.'} partyReference: model::external::cdm::Party[1];
  {meta::pure::profiles::doc.doc = 'The party role.'} role: model::external::cdm::PartyRoleEnum[1];
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'A reference to the party that has ownership of this party role information. FpML specifies that For shared trade information, this attribute will reference the originator of the data (for example, an execution facility or clearing house).'} ownershipPartyReference: model::external::cdm::Party[0..1];
}

Class FpML::model::ReferenceBankId
[
  c1_length: $this.referenceBankIdScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() >= 1,
  c3_length: $this.value->length() <= 255
]
{
  referenceBankIdScheme: String[0..1];
  value: String[1];
}

Class model::external::cdm::New
{
  txId: String[1];
  exctgPty: String[1];
  invstmtPtyInd: String[1];
  submitgPty: String[1];
  buyr: model::external::cdm::Buyr[1];
  sellr: model::external::cdm::Sellr[1];
  ordrTrnsmssn: model::external::cdm::OrdrTrnsmssn[1];
  tx: model::external::cdm::Tx[1];
  finInstrm: model::external::cdm::FinInstrm[1];
  invstmtDcsnPrsn: model::external::cdm::InvstmtDcsnPrsn[1];
  exctgPrsn: model::external::cdm::ExctgPrsn[1];
  addtlAttrbts: model::external::cdm::AddtlAttrbts[1];
}

Class {meta::pure::profiles::doc.doc = 'The type of interpolation used.'} FpML::model::InterpolationMethod
[
  c1_length: $this.interpolationMethodScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  interpolationMethodScheme: String[0..1];
  value: String[1];
}

Class FpML::model::QuantityUnit
[
  c1_length: $this.quantityUnitScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  quantityUnitScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'Concrete type to support public/private identifiers and classification (ISIN, CFI, ...) for an instrument of unspecified type. Derived as no-operation extension on IdentifedAsset (abstract base type).'} FpML::model::GenericAsset extends FpML::model::IdentifiedAsset
{
}

Class {meta::pure::profiles::doc.doc = 'A type to define recurring periods or time offsets.'} FpML::model::Period
{
  {meta::pure::profiles::doc.doc = 'A time period multiplier, e.g. 1, 2 or 3 etc. A negative value can be used when specifying an offset relative to another date, e.g. -2 days.'} periodMultiplier: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'A time period, e.g. a day, week, month or year of the stream. If the periodMultiplier value is 0 (zero) then period must contain the value D (day).'} period: FpML::model::PeriodEnum[0..1];
  id: String[0..1];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'The calculation period adjusted start and end dates, which are the baseline arguments needed to compute an interest accrual calculation.'} model::external::cdm::CalculationPeriodBase
{
  {meta::pure::profiles::doc.doc = 'The calculation period start date, adjusted according to any relevant business day convention.'} adjustedStartDate: Date[0..1];
  {meta::pure::profiles::doc.doc = 'The calculation period end date, adjusted according to any relevant business day convention.'} adjustedEndDate: Date[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify Recalculation of Value terms that will be applicable'} model::external::cdm::RecalculationOfValueElection
{
  {meta::pure::profiles::doc.doc = 'The elective party.'} party: model::external::cdm::CounterpartyRoleEnum[1];
  {meta::pure::profiles::doc.doc = 'The procedure for Recalculation of Value.'} recalculationOfValueElection: model::external::cdm::RecalculationOfValueElectionEnum[1];
  {meta::pure::profiles::doc.doc = 'Additional Recalculation of Value terms when specified'} recalculationOfValueTerms: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class for defining an agreement executed between parties.'} model::external::cdm::OtherAgreement
{
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'An identifier that has been created to identify the agreement.'} identifier: String[0..1];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'The agreement executed between the parties and intended to govern product-specific derivatives transactions between those parties.'} otherAgreementType: String[1];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'The version of the agreement.'} version: String[0..1];
  {meta::pure::profiles::doc.doc = 'The date on which the agreement was signed.'} date: Date[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type for defining a series of dates, either as a list of adjustable dates, or a as a repeating sequence from a base date'} FpML::model::AdjustableDatesOrRelativeDateOffset
[
  c1_choice: ($this.adjustableDates->isNotEmpty() && $this.relativeDate->isEmpty()) || ($this.adjustableDates->isEmpty() && $this.relativeDate->isNotEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'A series of adjustable dates'} adjustableDates: FpML::model::AdjustableDates[0..1];
  {meta::pure::profiles::doc.doc = 'A series of dates specified as a repeating sequence from a base date.'} relativeDate: FpML::model::RelativeDateOffset[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type defining a currency amount or a currency amount schedule.'} FpML::model::AmountSchedule extends FpML::model::Schedule
{
  {meta::pure::profiles::doc.doc = 'The currency in which an amount is denominated.'} currency: FpML::model::Currency[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the Pledgor/Obligor/Chargor Additional Rights Event election. ISDA 2016 English Law Credit Support Deed for Initial Margin, paragraph 13, General Principles, (k): Chargor Additional Rights Event. | ISDA 2016 Japanese Law Credit Support Annex for Initial Margin, paragraph 13, General Principles, (k): Obligor Additional Rights Event. | ISDA 2016 New York Law Credit Support Annex for Initial Margin, paragraph 13, General Principles, (k): Pledgor Additional Rights Event.'} model::external::cdm::AdditionalRightsEvent
[
  Qualification: if($this.qualification->isNotEmpty(), |$this.isApplicable == true, |true)
]
{
  {meta::pure::profiles::doc.doc = 'The Pledgor Additional Rights Event election is applicable when True, and not applicable when False.'} isApplicable: Boolean[1];
  {meta::pure::profiles::doc.doc = 'The qualification of the Pledgor Additional Rights Event election, when specified.'} qualification: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type that is used for describing cash settlement of a variance or volatility swap option. It includes the settlement currency together with the spot currency exchange required to calculate the settlement currency amount.'} FpML::model::FxCashSettlementSimple
[
  c1_choice: ($this.fixing->isNotEmpty() && $this.rateSourceFixing->isEmpty()) || ($this.fixing->isEmpty() && $this.rateSourceFixing->isNotEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'The currency in which cash settlement occurs.'} settlementCurrency: FpML::model::Currency[0..1];
  {meta::pure::profiles::doc.doc = 'Reference Currency.'} referenceCurrency: FpML::model::Currency[0..1];
  {meta::pure::profiles::doc.doc = 'Quoted currency pair.'} fixing: FpML::model::FxFixing[*];
  {meta::pure::profiles::doc.doc = 'Settlement Rate Source and Fixing Date.'} rateSourceFixing: FpML::model::FxRateSourceFixing[*];
}

Class {meta::pure::profiles::doc.doc = 'All information required to perform the clear life cycle event; the clearing party (CCP), the two parties facing each other on the alpha contract, and optionally the parties acting as clearing members.'} model::external::cdm::ClearingInstruction
{
  {meta::pure::profiles::doc.doc = 'The contract that will be submitted to the clearing house for clearing. The contract should indicate that it should be cleared by assigning a clearing organisation as a party role.'} alphaContract: model::external::cdm::TradeState[1];
  {meta::pure::profiles::doc.doc = 'The Central Counter party (CCP) that the contract will be submitted to for clearing.'} clearingParty: model::external::cdm::Party[1];
  {meta::pure::profiles::doc.doc = 'First party facing the CCP if it is clearing for its own account.'} party1: model::external::cdm::Party[1];
  {meta::pure::profiles::doc.doc = 'Second party facing the CCP if it is clearing for its own account.'} party2: model::external::cdm::Party[1];
  {meta::pure::profiles::doc.doc = 'Optional party facing the CCP, acting as clearing member for party1.'} clearerParty1: model::external::cdm::Party[0..1];
  {meta::pure::profiles::doc.doc = 'Optional party facing the CCP, acting as clearing member for party2.'} clearerParty2: model::external::cdm::Party[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Defines the initial margin calculation applicable to a single piece of collateral.'} model::external::cdm::InitialMarginCalculation
[
  InitialMarginCalculationChoice: ($this.marginRatio->isEmpty() && $this.haircut->isNotEmpty()) || ($this.marginRatio->isNotEmpty() && $this.haircut->isEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'An element defining an initial margin expressed as a ratio of the Market Value of the collateral to the Purchase Price. A default value of initial margin ratio of 1.00 means there is no margin and thus no risk related with the collateral. See GMRA 2000 paragraph 2(z) and GMRA 2011 paragraph 2(bb).'} marginRatio: Float[0..1];
  {meta::pure::profiles::doc.doc = 'An element defining a margin ratio threshold which is the value above (when it\'s lower than initial margin ratio) or below (when it\'s higher than initial margin ratio) which parties agree they will not call a margin from each other.'} marginRatioThreshold: Float[0..2];
  {meta::pure::profiles::doc.doc = 'An element defining a haircut expressed as the percentage difference between the Market Value of the collateral and the Purchase Price of the repo and calculated as 100 multiplied by a ratio of the difference between the Market Value of the collateral and the Purchase Price of the repo to the Market Value of the collateral. Haircut is alternative way to adjust the value of collateral sold in a repurchase agreement to initial margin ratio. Because an initial margin is a percentage of the Purchase Price, while a haircut is a percentage of the Market Value of collateral, the arithmetic of initial margins and haircuts is slightly different. For example, an initial margin of 102% is not equivalent to a haircut of 2%, but to 1.961% (ie 100/102%). See GMRA 2011 paragraph 2(aa).'} haircut: Float[0..1];
  {meta::pure::profiles::doc.doc = 'An element defining a haircut percentage threshold which is the value above (when it\'s lower than initial haircut) or below (when it\'s higher than initial haircut) which parties agree they will not call a margin from each other.'} haircutThreshold: Float[0..2];
}

Class {meta::pure::profiles::doc.doc = 'A type describing each of the constituents of a basket.'} FpML::model::BasketConstituent
{
  {meta::pure::profiles::doc.doc = 'A reference to the party responsible for making the payments defined by this structure.'} payerPartyReference: FpML::model::PartyReference[0..1];
  {meta::pure::profiles::doc.doc = 'A reference to the account responsible for making the payments defined by this structure.'} payerAccountReference: FpML::model::AccountReference[0..1];
  {meta::pure::profiles::doc.doc = 'A reference to the party that receives the payments corresponding to this structure.'} receiverPartyReference: FpML::model::PartyReference[0..1];
  {meta::pure::profiles::doc.doc = 'A reference to the account that receives the payments corresponding to this structure.'} receiverAccountReference: FpML::model::AccountReference[0..1];
  {meta::pure::profiles::doc.doc = 'Define the underlying asset, either a listed security or other instrument.'} underlyingAsset: FpML::model::Asset[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the weight of each of the underlyer constituent within the basket, either in absolute or relative terms. This is an optional component, as certain swaps do not specify a specific weight for each of their basket constituents.'} constituentWeight: FpML::model::ConstituentWeight[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the dividend payout ratio associated with an equity underlyer. A basket swap can have different payout ratios across the various underlying constituents. In certain cases the actual ratio is not known on trade inception, and only general conditions are then specified. Users should note that FpML makes a distinction between the derivative contract and the underlyer of the contract. It would be better if the agreed dividend payout on a derivative contract was modelled at the level of the derivative contract, an approach which may be adopted in the next major version of FpML.'} dividendPayout: FpML::model::DividendPayout[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the price that is associated with each of the basket constituents. This component is optional, as it is not absolutely required to accurately describe the economics of the trade, considering the price that characterizes the equity swap is associated to the leg of the trade.'} underlyerPrice: FpML::model::Price[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the notional (i.e. price * quantity) that is associated with each of the basket constituents. This component is optional, as it is not absolutely required to accurately describe the economics of the trade, considering the notional that characterizes the equity swap is associated to the leg of the trade.'} underlyerNotional: FpML::model::Money[0..1];
  {meta::pure::profiles::doc.doc = 'Provides a link to the spread schedule used for this underlyer.'} underlyerSpread: FpML::model::SpreadScheduleReference[0..1];
  {meta::pure::profiles::doc.doc = 'The next upcoming coupon payment.'} couponPayment: FpML::model::PendingPayment[0..1];
  {meta::pure::profiles::doc.doc = 'Financing terms associated with this underlyer'} underlyerFinancing: FpML::model::UnderlyerInterestLeg[0..1];
  {meta::pure::profiles::doc.doc = 'Loan rate terms associated with this underlyer. Commonly used for stock loan. You must not duplicate data elements already contained within dividend conditions at transaction level'} underlyerLoanRate: FpML::model::UnderlyerLoanRate[0..1];
  {meta::pure::profiles::doc.doc = 'Collateral associated with this underlyer. Note that this is not typical usage, collateral is more often at transaction level'} underlyerCollateral: FpML::model::Collateral[0..1];
  id: String[0..1];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'A class giving the choice between defining a series of dates as an explicit list of dates together with applicable adjustments or as relative to some other series of (anchor) dates, or as a calculation period schedule.'} model::external::cdm::AdjustableRelativeOrPeriodicDates
{
  {meta::pure::profiles::doc.doc = 'A series of dates that shall be subject to adjustment if they would otherwise fall on a day that is not a business day in the specified business centers, together with the convention for adjusting the date.'} adjustableDates: model::external::cdm::AdjustableDates[0..1];
  {meta::pure::profiles::doc.doc = 'A series of dates specified as some offset to another series of dates (the anchor dates).'} relativeDates: model::external::cdm::RelativeDates[0..1];
  {meta::pure::profiles::doc.doc = 'A calculation period schedule.'} periodicDates: model::external::cdm::PeriodicDates[0..1];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'Class to specify a cashflow, i.e. the outcome of either of computation (e.g. interest accrual) or an assessment of some sort (e.g. a fee). The cashflow can then be turned into a cash transfer, artefact to be used as the input to a payment system or the outcome of it. The associated globalKey denotes the ability to associate a hash value to the Cashflow instantiations for the purpose of model cross-referencing, in support of functionality such as the event effect and the lineage.'} model::external::cdm::Cashflow extends model::external::cdm::PayoutBase
{
  {meta::pure::profiles::doc.doc = 'The qualification of the type of cashflow, e.g. brokerage fee, premium, upfront fee etc. Particularly relevant when it cannot be inferred directly through lineage.'} cashflowType: model::external::cdm::CashflowType[1];
  {meta::pure::profiles::doc.doc = 'FpML specifies the FpML PaymentDiscounting.model group for representing the discounting elements that can be associated with a payment.'} paymentDiscounting: model::external::cdm::PaymentDiscounting[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Class to representing a method for generating a series of dates.'} model::external::cdm::AveragingSchedule
{
  {meta::pure::profiles::doc.doc = 'Date on which this period begins.'} startDate: Date[1];
  {meta::pure::profiles::doc.doc = 'Date on which this period ends.'} endDate: Date[1];
  {meta::pure::profiles::doc.doc = 'The frequency at which averaging period occurs with the regular part of the valuation schedule and their roll date convention.'} averagingPeriodFrequency: model::external::cdm::CalculationPeriodFrequency[1];
}

Class {meta::pure::profiles::doc.doc = 'Coding scheme that specifies the settlement price default election.'} FpML::model::SettlementPriceDefaultElection
[
  c1_length: $this.settlementPriceDefaultElectionScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  settlementPriceDefaultElectionScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'A data defining:  the adjusted dates associated with a provision to extend a swap.'} model::external::cdm::ExtendibleProvisionAdjustedDates
{
  {meta::pure::profiles::doc.doc = 'The adjusted dates associated with a single extendible exercise date.'} extensionEvent: model::external::cdm::ExtensionEvent[1..*];
}

Class {meta::pure::profiles::doc.doc = 'An identifier of an organization that supervises or regulates trading activity, e.g. CFTC, SEC, FSA, ODRF, etc.'} FpML::model::SupervisoryBody
[
  c1_length: $this.supervisoryBodyScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  supervisoryBodyScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify Collateral Access Breach language'} model::external::cdm::CollateralAccessBreach
{
  {meta::pure::profiles::doc.doc = 'Collateral Access Breach terms are applicable when True and not applicable when False'} isApplicable: Boolean[1];
  {meta::pure::profiles::doc.doc = 'Determination of whether the Collateral Access Breach end date is a number of days (True) or specified (False)'} cabEndDateElection: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'The business days following the related Collateral Access Breach when the additional terms end'} cabEndDate: Float[0..1];
  {meta::pure::profiles::doc.doc = 'Specific terms for when Collateral Access Breach terms end'} cabEndDateTerms: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class defining the list of reference institutions polled for relevant rates or prices when determining the cash settlement amount for a product where cash settlement is applicable.'} model::external::cdm::ReferenceBanks
{
  {meta::pure::profiles::doc.doc = 'An institution (party) identified by means of a coding scheme and an optional name.'} referenceBank: model::external::cdm::ReferenceBank[1..*];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'A class describing a single cap or floor rate.'} model::external::cdm::Strike
{
  {meta::pure::profiles::doc.doc = 'The rate for a cap or floor.'} strikeRate: Float[1];
  {meta::pure::profiles::doc.doc = 'The buyer of the option.'} buyer: model::external::cdm::PayerReceiverEnum[0..1];
  {meta::pure::profiles::doc.doc = 'The party that has sold.'} seller: model::external::cdm::PayerReceiverEnum[0..1];
}

Class model::external::cdm::FinInstrmGnlAttrbts
{
  fullNm: String[1];
  clssfctnTp: String[1];
  ntnlCcy: String[1];
}

Class {meta::pure::profiles::doc.doc = 'Reference to a bond underlier to represent an asset swap or Condition Precedent Bond.'} model::external::cdm::BondReference
{
  {meta::pure::profiles::doc.doc = 'Reference to a bond underlier.'} bond: model::external::cdm::ProductIdentifier[1];
  {meta::pure::profiles::doc.doc = 'To indicate whether the Condition Precedent Bond is applicable. The swap contract is only valid if the bond is issued and if there is any dispute over the terms of fixed stream then the bond terms would be used.'} conditionPrecedentBond: Boolean[1];
  {meta::pure::profiles::doc.doc = 'To indicate whether the Discrepancy Clause is applicable.'} discrepancyClause: Boolean[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the Calculation Date Location election for the respective parties to the legal agreement. ISDA 2016 English Law Credit Support Deed for Initial Margin, paragraph 13, General Principles, (d)(i): Calculation Date Location. | ISDA 2016 Japanese Law Credit Support Annex for Initial Margin, paragraph 13, General Principles, (e)(i): Calculation Date Location. | ISDA 2016 New York Law Credit Support Annex for Initial Margin, paragraph 13, General Principles, (d)(i): Calculation Date Location.'} model::external::cdm::CalculationDateLocation
{
  {meta::pure::profiles::doc.doc = 'The parties\' calculation date location election.'} partyElection: model::external::cdm::CalculationDateLocationElection[2];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify execution location terms of a Security Agreement'} model::external::cdm::ExecutionLocation
[
  dutyPayerLanguage: if($this.dutyPayer->toOne() == 'Specity', |$this.dutyPayerLanguage->isNotEmpty(), |true),
  dutyPaymentLanguage: if($this.dutyPaymentDate->isNotEmpty(), |$this.dutyPayerLanguage->isEmpty(), |true),
  otherLanguage: if($this.executionLocation == model::external::cdm::ExecutionLocationEnum.OtherLocation->isNotEmpty(), |$this.otherLanguage->isNotEmpty(), |true)
]
{
  {meta::pure::profiles::doc.doc = 'The execution location of the agreement'} executionLocation: model::external::cdm::ExecutionLocationEnum[1];
  {meta::pure::profiles::doc.doc = 'Bespoke execution location language to be included when specified.'} otherLanguage: String[0..1];
  {meta::pure::profiles::doc.doc = 'The payer of documentary duty'} dutyPayer: String[0..1];
  {meta::pure::profiles::doc.doc = 'Bespoke terms specific to the payment of documentary duty'} dutyPayerLanguage: String[0..1];
  {meta::pure::profiles::doc.doc = 'The date that documentary duty will be paid'} dutyPaymentDate: Date[0..1];
  {meta::pure::profiles::doc.doc = 'Bespoke terms specific to the date that documentary duty will be paid'} dutyPaymentLanguage: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A complex type used to specify the option and convertible bond option strike when expressed in reference to a swap curve.'} model::external::cdm::ReferenceSwapCurve
{
  swapUnwindValue: model::external::cdm::SwapCurveValuation[1];
  {meta::pure::profiles::doc.doc = 'Amount to be paid by the buyer of the option if the option is exercised prior to the Early Call Date. (The market practice in the convertible bond option space being that the buyer should be penalised if he/she exercises the option early on.)'} makeWholeAmount: model::external::cdm::MakeWholeAmount[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A classified non negative payment.'} FpML::model::ClassifiablePayment extends FpML::model::NonNegativePayment
{
  {meta::pure::profiles::doc.doc = 'Payment classification.'} paymentType: FpML::model::PaymentType[*];
}

Class {meta::pure::profiles::doc.doc = 'The type that indicates the type of media used to store the content. MimeType is used to determine the software product(s) that can read the content. MIME types are described in RFC 2046.'} FpML::model::MimeType
[
  c1_length: $this.mimeTypeScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  mimeTypeScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'Some kind of numerical measure about an asset, eg. its NPV, together with characteristics of that measure.'} FpML::model::BasicQuotation
[
  c1_choice: ($this.businessCenter->isNotEmpty() && $this.exchangeId->isEmpty()) || ($this.businessCenter->isEmpty() && $this.exchangeId->isNotEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'The value of the the quotation.'} value: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'The type of the value that is measured. This could be an NPV, a cash flow, a clean price, etc.'} measureType: FpML::model::AssetMeasureType[0..1];
  {meta::pure::profiles::doc.doc = 'The optional units that the measure is expressed in. If not supplied, this is assumed to be a price/value in currency units.'} quoteUnits: FpML::model::PriceQuoteUnits[0..1];
  {meta::pure::profiles::doc.doc = 'The side (bid/mid/ask) of the measure.'} side: FpML::model::QuotationSideEnum[0..1];
  {meta::pure::profiles::doc.doc = 'The optional currency that the measure is expressed in. If not supplied, this is defaulted from the reportingCurrency in the valuationScenarioDefinition.'} currency: FpML::model::Currency[0..1];
  {meta::pure::profiles::doc.doc = 'The optional currency that the measure is expressed in. If not supplied, this is defaulted from the reportingCurrency in the valuationScenarioDefinition.'} currencyType: FpML::model::ReportingCurrencyType[0..1];
  {meta::pure::profiles::doc.doc = 'When during a day the quote is for. Typically, if this element is supplied, the QuoteLocation needs also to be supplied.'} timing: FpML::model::QuoteTiming[0..1];
  {meta::pure::profiles::doc.doc = 'A city or other business center.'} businessCenter: FpML::model::BusinessCenter[0..1];
  {meta::pure::profiles::doc.doc = 'The exchange (e.g. stock or futures exchange) from which the quote is obtained.'} exchangeId: FpML::model::ExchangeId[0..1];
  {meta::pure::profiles::doc.doc = 'The information source where a published or displayed market rate will be obtained, e.g. Telerate Page 3750.'} informationSource: FpML::model::InformationSource[*];
  {meta::pure::profiles::doc.doc = '.'} pricingModel: FpML::model::PricingModel[0..1];
  {meta::pure::profiles::doc.doc = 'When the quote was observed or when a calculated value was generated.'} time: DateTime[0..1];
  {meta::pure::profiles::doc.doc = 'When the quote was computed.'} valuationDate: StrictDate[0..1];
  {meta::pure::profiles::doc.doc = 'When does the quote cease to be valid.'} expiryTime: DateTime[0..1];
  {meta::pure::profiles::doc.doc = 'For cash flows, the type of the cash flows. Examples include: Coupon payment, Premium Fee, Settlement Fee, Brokerage Fee, etc.'} cashflowType: FpML::model::CashflowType[0..1];
  id: String[0..1];
}

Class FpML::model::OriginatingEvent
[
  c1_length: $this.originatingEventScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  originatingEventScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'Specifies how the Termination Currency for the agreement will be determined.'} model::external::cdm::TerminationCurrency
{
  {meta::pure::profiles::doc.doc = 'Allows for specific Termination Currency(ies) and a fallback Termination Currency to be selected.'} statedTerminationCurrency: model::external::cdm::TerminationCurrencySelection[0..1];
  {meta::pure::profiles::doc.doc = 'Provides that the Termination Currency will be determined by reference to a contractual mechanism when closing out the Agreement.'} partyOptionTerminationCurrency: model::external::cdm::PartyOptionTerminationCurrency[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Reference to a schedule of rates or amounts.'} FpML::model::ScheduleReference extends FpML::model::Reference
{
  href: String[1];
}

Class {meta::pure::profiles::doc.doc = 'Reference to an organizational unit.'} FpML::model::BusinessUnitReference extends FpML::model::Reference
{
  href: String[1];
}

Class FpML::model::AgreementVersion
[
  c1_length: $this.agreementVersionScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  agreementVersionScheme: String[0..1];
  value: String[1];
}

Class FpML::model::PubliclyAvailableInformation
[
  c1_length: $this.publicSource->forAll(x: String[1]|$x->length() >= 1)
]
{
  {meta::pure::profiles::doc.doc = 'If this element is specified and set to \'true\', indicates that ISDA defined Standard Public Sources are applicable.'} standardPublicSources: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'A public information source, e.g. a particular newspaper or electronic news service, that may publish relevant information used in the determination of whether or not a credit event has occurred. ISDA 2003 Term: Public Source.'} publicSource: String[*];
  {meta::pure::profiles::doc.doc = 'The minimum number of the specified public information sources that must publish information that reasonably confirms that a credit event has occurred. The market convention is two. ISDA 2003 Term: Specified Number.'} specifiedNumber: Decimal[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Represetns a class to specify multiple credit notations alongside a conditional \'any\' or \'all\' qualifier.'} model::external::cdm::MultipleCreditNotations
[
  ReferenceAgency: if($this.mismatchResolution == model::external::cdm::CreditNotationMismatchResolutionEnum.ReferenceAgency, |$this.referenceAgency->isNotEmpty(), |true)
]
{
  {meta::pure::profiles::doc.doc = 'An enumerated element, to qualify whether All or Any credit notation applies.'} condition: model::external::cdm::QuantifierEnum[1];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'At least two credit notations much be specified.'} creditNotation: model::external::cdm::CreditNotation[2..*];
  mismatchResolution: model::external::cdm::CreditNotationMismatchResolutionEnum[1];
  referenceAgency: model::external::cdm::CreditRatingAgencyEnum[1];
}

Class {meta::pure::profiles::doc.doc = 'A type extending the PayerReceiverEnum type wih an id attribute.'} FpML::model::IdentifiedPayerReceiver
{
  id: String[0..1];
  value: FpML::model::PayerReceiverEnum[1];
}

Class {meta::pure::profiles::doc.doc = 'Defines the reset value or fixing value produced in cashflow calculations, during the life-cycle of a financial instrument. The reset process defined in Create_Reset function joins product definition details with observations to compute the reset value.'} model::external::cdm::Reset
[
  condition1: if($this.observations->size() > 1, |$this.aggregationMethodology->isNotEmpty(), |true)
]
{
  {meta::pure::profiles::doc.doc = 'Specifies the reset or fixing value. The fixing value could be a cash price, interest rate, or other value.'} resetValue: model::external::cdm::Price[1];
  {meta::pure::profiles::doc.doc = 'Specifies the date on which the reset occurred.'} resetDate: Date[1];
  {meta::pure::profiles::doc.doc = 'Specifies the \'Rate Record Day\' for a Fallback rate.  Fallback rate fixing processes typically set the fixing rate in arrears, i.e., the Fallback Rate corresponding to a Rate Record Date is set at the end of the interest accural period.  When this applies, Reset-'} rateRecordDate: Date[0..1];
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'Represents an audit of the observations used to produce the reset value. If multiple observations were necessary to produce the reset value, the aggregation method should be defined on the payout.'} observations: model::external::cdm::Observation[1..*];
  {meta::pure::profiles::doc.doc = 'Identifies the aggregation method to use in the case where multiple observations are used to compute the reset value and the method is not defined in a payout.'} aggregationMethodology: model::external::cdm::AggregationMethod[0..1];
}

Class FpML::model::CalculationAmount extends FpML::model::Money
{
  {meta::pure::profiles::doc.doc = 'A schedule of step date and value pairs. On each step date the associated step value becomes effective. A list of steps may be ordered in the document by ascending step date. An FpML document containing an unordered list of steps is still regarded as a conformant document.'} step: FpML::model::Step[*];
}

Class FpML::model::PartyRelationship
{
  {meta::pure::profiles::doc.doc = 'Reference to a party.'} partyReference: FpML::model::PartyReference[0..1];
  {meta::pure::profiles::doc.doc = 'Reference to an account.'} accountReference: FpML::model::AccountReference[0..1];
  {meta::pure::profiles::doc.doc = 'The category of the relationship. The related party performs the role specified in this field for the base party. For example, if the role is \'Guarantor\', the related party acts as a guarantor for the base party.'} role: FpML::model::PartyRole[0..1];
  {meta::pure::profiles::doc.doc = 'Additional definition refining the type of relationship. For example, if the \'role\' is Guarantor, this element may be used to specify whether all positions are guaranteed, or only a subset of them.'} type: FpML::model::PartyRoleType[0..1];
  {meta::pure::profiles::doc.doc = 'The date on which the relationship begins or began.'} effectiveDate: StrictDate[0..1];
  {meta::pure::profiles::doc.doc = 'The date on which the relationship ends or ended.'} terminationDate: StrictDate[0..1];
  {meta::pure::profiles::doc.doc = 'Describes the agreements that define the party relationship.'} documentation: FpML::model::PartyRelationshipDocumentation[0..1];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'A class to represent the attributes that are specific to a natural person.'} model::external::cdm::NaturalPerson
[
  NaturalPersonChoice: (($this.middleName->isEmpty() && $this.initial->isEmpty()) || ($this.middleName->isNotEmpty() && $this.initial->isEmpty())) || ($this.initial->isNotEmpty() && $this.middleName->isEmpty())
]
{
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'The identifier associated with a person, e.g. the internal identification code.'} personId: String[*];
  {meta::pure::profiles::doc.doc = 'An honorific title, such as Mr., Ms., Dr. etc.'} honorific: String[0..1];
  {meta::pure::profiles::doc.doc = 'The natural person\'s first name. It is optional in FpML.'} firstName: String[0..1];
  {meta::pure::profiles::doc.doc = 'The natural person\'s middle name(s). If a middle name is provided then an initial should be absent.'} middleName: String[*];
  {meta::pure::profiles::doc.doc = 'The natural person\'s middle initial(s). If a middle initial is provided then a name should be absent.'} initial: String[*];
  {meta::pure::profiles::doc.doc = 'The natural person\'s surname.'} surname: String[0..1];
  {meta::pure::profiles::doc.doc = 'Name suffix, such as Jr., III, etc.'} suffix: String[0..1];
  {meta::pure::profiles::doc.doc = 'The natural person\'s date of birth.'} dateOfBirth: Date[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Code that describes what type of collateral is posted by a party to a transaction. Options include Uncollateralized, Partial, Full, One-Way.'} FpML::model::CollateralizationType
[
  c1_length: $this.collateralTypeScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  collateralTypeScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'The units in which a price is quoted.'} FpML::model::PriceQuoteUnits
[
  c1_length: $this.priceQuoteUnitsScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  priceQuoteUnitsScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'Specifies a reference to a monetary amount.'} FpML::model::AmountReference extends FpML::model::Reference
{
  href: String[1];
}

Class {meta::pure::profiles::doc.doc = 'References a credit entity defined elsewhere in the document.'} FpML::model::LegalEntityReference extends FpML::model::Reference
{
  href: String[1];
}

Class {meta::pure::profiles::doc.doc = 'Specifies the reference amount using a scheme.'} FpML::model::ReferenceAmount
[
  c1_length: $this.referenceAmountScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  referenceAmountScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'Specifies a quantity to be associated to a financial product, for example a trade amount or a cashflow amount resulting from a trade.'} model::external::cdm::Quantity extends model::external::cdm::MeasureBase
[
  Quantity_Multiplier: if($this.multiplier->isNotEmpty(), |$this.multiplier >= 0, |true)
]
{
  {meta::pure::profiles::doc.doc = 'Defines the number to be multiplied by the amount to derive a total quantity.'} multiplier: Float[0..1];
  {meta::pure::profiles::doc.doc = 'Qualifies the multiplier with the applicable unit.  For example in the case of the Coal (API2) CIF ARA (ARGUS-McCloskey) Futures Contract on the CME, where the unitOfAmount would be contracts, the multiplier would 1,000 and the mulitiplier Unit would be 1,000 MT (Metric Tons).'} multiplierUnit: model::external::cdm::UnitType[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Defines the primitive event to represent a change in quantity, which includes notional. For details of how the TradeState is changed between the `before` and `after` TradeStates, see the corresponding Create_QuantityChangePrimitive function.'} model::external::cdm::QuantityChangePrimitive
{
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'Represents the state of the trade before the event.'} before: model::external::cdm::TradeState[1];
  {meta::pure::profiles::doc.doc = 'Represents the state of the trade as a follow-up from the event.'} after: model::external::cdm::TradeState[1];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'Specifies the parameters to generate the payment date schedule, either through a parametric representation or by reference to specified dates.'} model::external::cdm::PaymentDates
[
  FpML_ird_35_cd_31: if($this.firstPaymentDate->isNotEmpty() && $this.lastRegularPaymentDate->isNotEmpty(), |$this.firstPaymentDate < $this.lastRegularPaymentDate, |true),
  NonZeroPeriodMultiplier: if($this.paymentDaysOffset->isNotEmpty(), |!($this.paymentDaysOffset.periodMultiplier == 0), |true)
]
{
  {meta::pure::profiles::doc.doc = 'The frequency at which regular payment dates occur. If the payment frequency is equal to the frequency defined in the calculation period dates component then one calculation period contributes to each payment amount. If the payment frequency is less frequent than the frequency defined in the calculation period dates component then more than one calculation period will contribute to the payment amount. A payment frequency more frequent than the calculation period frequency or one that is not a multiple of the calculation period frequency is invalid. If the payment frequency is of value T (term), the period is defined by the effectiveDate and the terminationDate.'} paymentFrequency: model::external::cdm::Frequency[0..1];
  {meta::pure::profiles::doc.doc = 'The first unadjusted payment date. This day may be subject to adjustment in accordance with any business day convention specified in paymentDatesAdjustments. This element must only be included if there is an initial stub. This date will normally correspond to an unadjusted calculation period start or end date. This is true even if early or delayed payment is specified to be applicable since the actual first payment date will be the specified number of days before or after the applicable adjusted calculation period start or end date with the resulting payment date then being adjusted in accordance with any business day convention specified in paymentDatesAdjustments.'} firstPaymentDate: Date[0..1];
  {meta::pure::profiles::doc.doc = 'The last regular payment date when specified as a date, as in the FpML interest rate construct. FpML specifies that this date may be subject to adjustment in accordance with any business day convention specified in the paymentDatesAdjustments attribute.'} lastRegularPaymentDate: Date[0..1];
  {meta::pure::profiles::doc.doc = 'The payment dates when specified as relative to a set of dates specified somewhere else in the instance document/transaction, e.g. the valuation dates as typically the case for equity swaps, or when specified as a calculation period schedule.'} paymentDateSchedule: model::external::cdm::PaymentDateSchedule[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies whether the payments occur relative to each adjusted calculation period start date or end date, each reset date, valuation date or the last pricing date. Calculation period start date means relative to the start of the first calculation period contributing to a given payment. Similarly, calculation period end date means the end of the last calculation period contributing to a given payment. The valuation date is applicable for Brazilian-CDI and equity swaps.'} payRelativeTo: model::external::cdm::PayRelativeToEnum[0..1];
  {meta::pure::profiles::doc.doc = 'If early payment or delayed payment is required, specifies the number of days offset that the payment occurs relative to what would otherwise be the unadjusted payment date. The offset can be specified in terms of either calendar or business days. Even in the case of a calendar days offset, the resulting payment date, adjusted for the specified calendar days offset, will still be adjusted in accordance with the specified payment dates adjustments. This element should only be included if early or delayed payment is applicable, i.e. if the periodMultiplier element value is not equal to zero. An early payment would be indicated by a negative periodMultiplier element value and a delayed payment (or payment lag) would be indicated by a positive periodMultiplier element value.'} paymentDaysOffset: model::external::cdm::Offset[0..1];
  {meta::pure::profiles::doc.doc = 'The definition of the business day convention and financial business centers used for adjusting the payment date if it would otherwise fall on a day that is not a business day in the specified business center.'} paymentDatesAdjustments: model::external::cdm::BusinessDayAdjustments[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Identifies the market sector in which the trade has been arranged.'} model::external::cdm::BrokerConfirmation
{
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'The type of broker confirmation executed between the parties.'} brokerConfirmationType: model::external::cdm::BrokerConfirmationTypeEnum[1];
}

Class {meta::pure::profiles::doc.doc = 'Represents the current mark to market value or IM calculation value of the trade portfolio as recorded by the principle (in base currency).'} model::external::cdm::Exposure
{
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'Represents a Portfolio that describes all the positions held at a given time, in various states which can be either traded, settled, etc., with lineage information to the previous state.'} tradePortfolio: model::external::cdm::PortfolioState[1];
  {meta::pure::profiles::doc.doc = 'Represents the aggregate value of the portfolio in base currency.'} aggregateValue: model::external::cdm::Money[1];
  {meta::pure::profiles::doc.doc = 'Indicates the date when the exposure is calculated if different from valuation date.'} calculationDateTime: model::external::cdm::zonedDateTime[0..1];
  {meta::pure::profiles::doc.doc = 'Indicates the valuation date of the exposure underlying the calculation.'} valuationDateTime: model::external::cdm::zonedDateTime[1];
}

Class {meta::pure::profiles::doc.doc = 'A reference to the notional amount.'} FpML::model::NotionalReference extends FpML::model::Reference
{
  href: String[1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify an offset either as a normalized [multiplier, period, dayType] or as a custom provision of type string.'} model::external::cdm::CustomisableOffset
{
  offset: model::external::cdm::Offset[0..1];
  customProvision: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A Position describes how much of a given Product is being held and constitutes the atomic element of a Portfolio.'} model::external::cdm::Position
{
  {meta::pure::profiles::doc.doc = 'Position with many price quantities.'} positionComponent: model::external::cdm::PriceQuantity[1..*];
  {meta::pure::profiles::doc.doc = 'The aggregate cost of proceeds'} cashBalance: model::external::cdm::Money[0..1];
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'Reference to the Contract, in case product is contractual and the contract has been formed'} tradeReference: model::external::cdm::TradeState[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Holds an identifier for an ancillary entity, either identified directly via its ancillary role or directly as a legal entity.'} model::external::cdm::AncillaryEntity
[
  one_of_constraint: ($this.ancillaryParty->isNotEmpty() && $this.legalEntity->isEmpty()) || ($this.legalEntity->isNotEmpty() && $this.ancillaryParty->isEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'Identifies a party via its ancillary role on a transaction (e.g. CCP or DCO through which the trade should be cleared.)'} ancillaryParty: model::external::cdm::AncillaryRoleEnum[0..1];
  legalEntity: model::external::cdm::LegalEntity[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Defines the unit to be used for price, quantity, or other purposes'} model::external::cdm::UnitType
[
  one_of_constraint: ((((((($this.capacityUnit->isNotEmpty() && $this.weatherUnit->isEmpty()) && $this.financialUnit->isEmpty()) && $this.currency->isEmpty()) && $this.frequency->isEmpty()) || (((($this.weatherUnit->isNotEmpty() && $this.capacityUnit->isEmpty()) && $this.financialUnit->isEmpty()) && $this.currency->isEmpty()) && $this.frequency->isEmpty())) || (((($this.financialUnit->isNotEmpty() && $this.capacityUnit->isEmpty()) && $this.weatherUnit->isEmpty()) && $this.currency->isEmpty()) && $this.frequency->isEmpty())) || (((($this.currency->isNotEmpty() && $this.capacityUnit->isEmpty()) && $this.weatherUnit->isEmpty()) && $this.financialUnit->isEmpty()) && $this.frequency->isEmpty())) || (((($this.frequency->isNotEmpty() && $this.capacityUnit->isEmpty()) && $this.weatherUnit->isEmpty()) && $this.financialUnit->isEmpty()) && $this.currency->isEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'Provides an enumerated value for a capacity unit, generally used in the context of defining quantities for commodities.'} capacityUnit: model::external::cdm::CapacityUnitEnum[0..1];
  {meta::pure::profiles::doc.doc = 'Provides an enumerated values for a weather unit, generally used in the context of defining quantities for commodities.'} weatherUnit: model::external::cdm::WeatherUnitEnum[0..1];
  {meta::pure::profiles::doc.doc = 'Provides an enumerated value for financial units, generally used in the context of defining quantities for securities.'} financialUnit: model::external::cdm::FinancialUnitEnum[0..1];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'Defines the currency to be used as a unit for a price, quantity, or other purpose.'} currency: String[0..1];
  {meta::pure::profiles::doc.doc = 'Defines the frequency to be used as a unit for a price, quantity, or other purpose.'} frequency: model::external::cdm::Frequency[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class defining the source for a piece of information (e.g. a rate fix or an FX fixing). The attribute names have been adjusted from FpML to address the fact that the information is not limited to rates.'} model::external::cdm::InformationSource
{
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'An information source for obtaining a market data point. For example Bloomberg, Reuters, Telerate, etc.'} sourceProvider: model::external::cdm::InformationProviderEnum[1];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'A specific page for the source for obtaining a market data point. In FpML, this is specified as a scheme, rateSourcePageScheme, for which no coding Scheme or URI is specified.'} sourcePage: String[0..1];
  {meta::pure::profiles::doc.doc = 'The heading for the source on a given source page.'} sourcePageHeading: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Unit contract model for security valuation, e.g. for equity, modelled onto UnitContract.model in FpML.'} model::external::cdm::UnitContractValuationModel
{
  {meta::pure::profiles::doc.doc = 'The number of units (index or securities).'} numberOfUnits: model::external::cdm::Quantity[1];
  {meta::pure::profiles::doc.doc = 'The price of each unit.'} unitPrice: model::external::cdm::Money[1];
}

Class {meta::pure::profiles::doc.doc = 'Specifies the collateral taxonomy value, either as a specified enumeration or as a string.'} model::external::cdm::CollateralTaxonomyValue
[
  one_of_constraint: ((((($this.eu_EMIR_EligibleCollateral->isNotEmpty() && $this.uk_EMIR_EligibleCollateral->isEmpty()) && $this.us_CFTC_PR_EligibleCollateral->isEmpty()) && $this.nonEnumeratedTaxonomyValue->isEmpty()) || ((($this.uk_EMIR_EligibleCollateral->isNotEmpty() && $this.eu_EMIR_EligibleCollateral->isEmpty()) && $this.us_CFTC_PR_EligibleCollateral->isEmpty()) && $this.nonEnumeratedTaxonomyValue->isEmpty())) || ((($this.us_CFTC_PR_EligibleCollateral->isNotEmpty() && $this.eu_EMIR_EligibleCollateral->isEmpty()) && $this.uk_EMIR_EligibleCollateral->isEmpty()) && $this.nonEnumeratedTaxonomyValue->isEmpty())) || ((($this.nonEnumeratedTaxonomyValue->isNotEmpty() && $this.eu_EMIR_EligibleCollateral->isEmpty()) && $this.uk_EMIR_EligibleCollateral->isEmpty()) && $this.us_CFTC_PR_EligibleCollateral->isEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'Identifies European Union Eligible Collateral Assets classification categories based on EMIR Uncleared Margin Rules. Eligible Collateral asset classes for both initial margin (IM) and variation margin (VM) posted and collected between specified entities. Please note: EMIR regulation will detail which eligible collateral assets classes apply to each type of entity pairing (counterparty) and which apply to posting of IM and VM'} eu_EMIR_EligibleCollateral: model::external::cdm::EU_EMIR_EligibleCollateralEnum[*];
  {meta::pure::profiles::doc.doc = 'Identifies United Kingdom Eligible Collateral Assets classification categories based on UK Onshored EMIR Uncleared Margin Rules Eligible Collateral asset classes for both initial margin (IM) and variation margin (VM) posted and collected between specified entities. Please note: UK EMIR regulation will detail which eligible collateral assets classes apply to each type of entity pairing (counterparty) and which apply to posting of IM and VM.'} uk_EMIR_EligibleCollateral: model::external::cdm::UK_EMIR_EligibleCollateralEnum[*];
  {meta::pure::profiles::doc.doc = 'Identifies US Eligible Collateral Assets classification categories based on Uncleared Margin Rules published by the CFTC and the US Prudential Regulator. Note: While the same basic categories exist in the CFTC and US Prudential Regulators\u2019 margin rules, the precise definitions or application of those rules could differ between the two rules.'} us_CFTC_PR_EligibleCollateral: model::external::cdm::US_CFTC_PR_EligibleCollateralEnum[*];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'Identifies the taxonomy value when not specified as an enumeration.'} nonEnumeratedTaxonomyValue: String[*];
}

Class {meta::pure::profiles::doc.doc = 'This type holds parameters defining the fixingt time and offset for a floating rate index.'} model::external::cdm::FloatingRateIndexFixingDetails
{
  {meta::pure::profiles::doc.doc = 'Parameters defining the normal fixing time (can vary by index tenor / designated maturity).'} fixingTime: model::external::cdm::FloatingRateIndexFixingTime[*];
  {meta::pure::profiles::doc.doc = 'Parameters defining the alternative fixing time (e.g. on holiday eves.'} alternativeFixingTime: model::external::cdm::FloatingRateIndexAlternativeFixingTime[*];
  {meta::pure::profiles::doc.doc = 'Parameters defining the normal fixing offset (can vary by index tenor / designated maturity).'} fixingOffset: model::external::cdm::BusinessDayOffset[*];
}

Class {meta::pure::profiles::doc.doc = 'Specifies the information required for the reallocation of a transaction.'} model::external::cdm::ReallocationInstruction
{
  {meta::pure::profiles::doc.doc = 'Specifies the trades to be decreased as part of the reallocation event.'} decrease: model::external::cdm::DecreasedTrade[1..*];
  {meta::pure::profiles::doc.doc = 'Specifies the trades to be increased as part of the reallocation event.  Note this attribute cannot be used until the Increase model has been developed in the ISDA CDM.'} increase: model::external::cdm::IncreasedTrade[*];
  {meta::pure::profiles::doc.doc = 'Specifies the breakdowns of any new trades created as part of the reallocation event.'} breakdowns: model::external::cdm::AllocationBreakdown[*];
  {meta::pure::profiles::doc.doc = 'Specifies the effective date of the reallocation.'} effectiveDate: Date[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Respresents a class to describe a set of criteria to describe specific assets that the concentration limits apply to.'} model::external::cdm::ConcentrationLimitCriteria extends model::external::cdm::CollateralCriteriaBase
{
  {meta::pure::profiles::doc.doc = 'Specifies the type of concentration limit to be applied.'} concentrationLimitType: model::external::cdm::ConcentrationLimitTypeEnum[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Represents a class to specify multiple credit notations alongside a conditional \'any\' or \'all\' qualifier.'} model::external::cdm::AgencyRatingCriteria
{
  {meta::pure::profiles::doc.doc = 'Indicates whether all or any agency ratings apply.'} qualifier: model::external::cdm::QuantifierEnum[1];
  {meta::pure::profiles::doc.doc = 'Indicates the agency rating criteria specified for the asset or issuer.'} creditNotation: model::external::cdm::CreditNotation[1..*];
  {meta::pure::profiles::doc.doc = 'Indicator for options to be used if several agency ratings ('} mismatchResolution: model::external::cdm::CreditNotationMismatchResolutionEnum[0..1];
  {meta::pure::profiles::doc.doc = 'identifies the dominant reference agency if there is a missmatch and several reference agencies exsist.'} referenceAgency: model::external::cdm::CreditRatingAgencyEnum[0..1];
  {meta::pure::profiles::doc.doc = 'Indicates the boundary of a credit agency rating i.e minimum or maximum.'} boundary: model::external::cdm::CreditNotationBoundaryEnum[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Base class that all payout types should extend. Use case is that some validation rules may need to apply across all payout types, for which the data rule can be written at the base class level'} model::external::cdm::PayoutBase
{
  {meta::pure::profiles::doc.doc = 'Canonical representation of the payer and receiver parties applicable to each payout leg.'} payerReceiver: model::external::cdm::PayerReceiver[1];
  {meta::pure::profiles::doc.doc = 'Each payout leg must implement the quantity concept as a \'resolvable\' type, which allows for different payout legs to be linked to each other (e.g. in the case of cross-curreny products).'} payoutQuantity: model::external::cdm::ResolvablePayoutQuantity[1];
  {meta::pure::profiles::doc.doc = 'Each payout leg must specifies its settlement terms, including the delivery type (i.e. cash vs physical, and their respective terms), the transfer type (DvP etc.) and settlement date, if any.'} settlementTerms: model::external::cdm::SettlementTerms[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify each party\'s election with respect to the Termination Events that will be deemed an Access Condition (Initial Margin CSA) or a Specified Condition (Variation Margin CSA). ISDA 2016 English Law Credit Support Deed for Initial Margin, paragraph 13, General Principles, (e)(ii). | ISDA 2016 Japanese Law Credit Support Annex for Initial Margin, paragraph 13, General Principles, (f)(ii). | ISDA 2016 New York Law Credit Support Annex for Initial Margin, paragraph 13, General Principles, (e)(ii). | ISDA 2016 Credit Support Annex for Variation Margin, paragraph 13, (e): Conditions Precedent and Secured Party\u2019s Rights and Remedies.'} model::external::cdm::AccessConditions
{
  {meta::pure::profiles::doc.doc = 'The parties\' Access Condition (Initial Margin CSA) or a Specified Condition (Variation Margin CSA) election.'} partyElection: model::external::cdm::AccessConditionsElections[2];
  {meta::pure::profiles::doc.doc = 'Additional Termination Events applicable to the agreement.'} additionalTerminationEvent: model::external::cdm::AdditionalTerminationEvent[*];
}

Class {meta::pure::profiles::doc.doc = 'A map for a single FRO to or from an equivalent or similar codes in a different standard such as ISO.'} model::external::cdm::FloatingRateIndexExternalMap
{
  {meta::pure::profiles::doc.doc = 'The FRO name that is being mapped to/from.'} externalId: String[1];
  {meta::pure::profiles::doc.doc = 'The standard/version to which the map applies.'} externalStandard: String[1];
}

Class {meta::pure::profiles::doc.doc = 'A type defining which principal exchanges occur for the stream.'} FpML::model::PrincipalExchanges
{
  {meta::pure::profiles::doc.doc = 'A true/false flag to indicate whether there is an initial exchange of principal on the effective date.'} initialExchange: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'A true/false flag to indicate whether there is a final exchange of principal on the termination date.'} finalExchange: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'A true/false flag to indicate whether there are intermediate or interim exchanges of principal during the term of the swap.'} intermediateExchange: Boolean[0..1];
  id: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type describing a single cap or floor rate.'} FpML::model::Strike
{
  {meta::pure::profiles::doc.doc = 'The rate for a cap or floor.'} strikeRate: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'The buyer of the option'} buyer: FpML::model::IdentifiedPayerReceiver[0..1];
  {meta::pure::profiles::doc.doc = 'The party that has sold.'} seller: FpML::model::IdentifiedPayerReceiver[0..1];
  id: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'The notional/principal value/quantity/volume used to compute the cashflow.'} FpML::model::CashflowNotional
[
  c1_length: $this.units->forAll(x: String[1]|$x->length() >= 0),
  c2_choice: ($this.currency->isNotEmpty() && $this.units->isEmpty()) || ($this.currency->isEmpty() && $this.units->isNotEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'The currency in which an amount is denominated.'} currency: FpML::model::Currency[0..1];
  {meta::pure::profiles::doc.doc = 'The units in which an amount (not monetary) is denominated.'} units: String[0..1];
  {meta::pure::profiles::doc.doc = 'The quantity of notional (in currency or other units).'} amount: Decimal[0..1];
  id: String[0..1];
}

Class model::external::cdm::FinInstrm
{
  othr: model::external::cdm::Othr[1];
}

Class {meta::pure::profiles::doc.doc = 'A type for defining a calendar spread feature.'} FpML::model::CalendarSpread
{
  expirationDateTwo: FpML::model::AdjustableOrRelativeDate[0..1];
}

Class {meta::pure::profiles::doc.doc = 'The data type used for account identifiers.'} FpML::model::AccountId
[
  c1_length: $this.accountIdScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() >= 1,
  c3_length: $this.value->length() <= 255
]
{
  {meta::pure::profiles::doc.doc = 'The identifier scheme used with this accountId. A unique URI to determine the authoritative issuer of these identifiers.'} accountIdScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'This class corresponds to the FpML CalculationAgent.model.'} model::external::cdm::CalculationAgentModel
{
  {meta::pure::profiles::doc.doc = 'The ISDA calculation agent responsible for performing duties as defined in the applicable product definitions.'} calculationAgent: model::external::cdm::CalculationAgent[0..1];
  {meta::pure::profiles::doc.doc = 'The city in which the office through which ISDA Calculation Agent is acting for purposes of the transaction is located. The short-form confirm for a trade that is executed under a Sovereign or Asia-Pacific Master Confirmation Agreement (MCA), does not need to specify the Calculation Agent. However, the confirm does need to specify the Calculation Agent city. This is due to the fact that the MCA sets the value for Calculation Agent but does not set the value for Calculation Agent city.'} calculationAgentBusinessCenter: model::external::cdm::BusinessCenterEnum[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A rate which can be referenced elsewhere.'} FpML::model::IdentifiedRate
{
  id: String[0..1];
  value: Decimal[1];
}

Class FpML::model::CollateralValueAllocation
{
  {meta::pure::profiles::doc.doc = 'The type of allocation e.g. Full or ExcessOverMargin'} type: FpML::model::CollateralValueAllocationEnum[0..1];
  value: FpML::model::Money[*];
}

Class {meta::pure::profiles::doc.doc = 'A type defining multiple exercises. As defining in the 2000 ISDA Definitions, Section 12.4. Multiple Exercise, the buyer of the option has the right to exercise all or less than all the unexercised notional amount of the underlying swap on one or more days in the exercise period, but on any such day may not exercise less than the minimum notional amount or more than the maximum notional amount, and if an integral multiple amount is specified, the notional exercised must be equal to or, be an integral multiple of, the integral multiple amount.'} FpML::model::MultipleExercise
[
  c1_range: $this.minimumNumberOfOptions->forAll(x: Decimal[1]|$x >= 0),
  c2_range: $this.maximumNumberOfOptions->forAll(x: Decimal[1]|$x >= 0),
  c3_choice: ($this.minimumNotionalAmount->isNotEmpty() && $this.minimumNumberOfOptions->isEmpty()) || ($this.minimumNotionalAmount->isEmpty() && $this.minimumNumberOfOptions->isNotEmpty()),
  c4_choice: ($this.maximumNotionalAmount->isNotEmpty() && $this.maximumNumberOfOptions->isEmpty()) || ($this.maximumNotionalAmount->isEmpty() && $this.maximumNumberOfOptions->isNotEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'A pointer style reference to the associated notional schedule defined elsewhere in the document. This element has been made optional as part of its integration in the OptionBaseExtended, because not required for the options on securities.'} notionalReference: FpML::model::NotionalReference[*];
  {meta::pure::profiles::doc.doc = 'A notional amount which restricts the amount of notional that can be exercised when partial exercise or multiple exercise is applicable. The integral multiple amount defines a lower limit of notional that can be exercised and also defines a unit multiple of notional that can be exercised, i.e. only integer multiples of this amount can be exercised.'} integralMultipleAmount: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'The minimum notional amount that can be exercised on a given exercise date. See multipleExercise.'} minimumNotionalAmount: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'The minimum number of options that can be exercised on a given exercise date.'} minimumNumberOfOptions: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'The maximum notional amount that can be exercised on a given exercise date.'} maximumNotionalAmount: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'The maximum number of options that can be exercised on a given exercise date. If the number is not specified, it means that the maximum number of options corresponds to the remaining unexercised options.'} maximumNumberOfOptions: Decimal[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Reference to a payment.'} FpML::model::PaymentReference extends FpML::model::Reference
{
  href: String[1];
}

Class {meta::pure::profiles::doc.doc = 'A type representing a set of characteristics that describe a quotation.'} FpML::model::QuotationCharacteristics
[
  c1_choice: ($this.businessCenter->isNotEmpty() && $this.exchangeId->isEmpty()) || ($this.businessCenter->isEmpty() && $this.exchangeId->isNotEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'The type of the value that is measured. This could be an NPV, a cash flow, a clean price, etc.'} measureType: FpML::model::AssetMeasureType[0..1];
  {meta::pure::profiles::doc.doc = 'The optional units that the measure is expressed in. If not supplied, this is assumed to be a price/value in currency units.'} quoteUnits: FpML::model::PriceQuoteUnits[0..1];
  {meta::pure::profiles::doc.doc = 'The side (bid/mid/ask) of the measure.'} side: FpML::model::QuotationSideEnum[0..1];
  {meta::pure::profiles::doc.doc = 'The optional currency that the measure is expressed in. If not supplied, this is defaulted from the reportingCurrency in the valuationScenarioDefinition.'} currency: FpML::model::Currency[0..1];
  {meta::pure::profiles::doc.doc = 'The optional currency that the measure is expressed in. If not supplied, this is defaulted from the reportingCurrency in the valuationScenarioDefinition.'} currencyType: FpML::model::ReportingCurrencyType[0..1];
  {meta::pure::profiles::doc.doc = 'When during a day the quote is for. Typically, if this element is supplied, the QuoteLocation needs also to be supplied.'} timing: FpML::model::QuoteTiming[0..1];
  {meta::pure::profiles::doc.doc = 'A city or other business center.'} businessCenter: FpML::model::BusinessCenter[0..1];
  {meta::pure::profiles::doc.doc = 'The exchange (e.g. stock or futures exchange) from which the quote is obtained.'} exchangeId: FpML::model::ExchangeId[0..1];
  {meta::pure::profiles::doc.doc = 'The information source where a published or displayed market rate will be obtained, e.g. Telerate Page 3750.'} informationSource: FpML::model::InformationSource[*];
  {meta::pure::profiles::doc.doc = '.'} pricingModel: FpML::model::PricingModel[0..1];
  {meta::pure::profiles::doc.doc = 'When the quote was observed or when a calculated value was generated.'} time: DateTime[0..1];
  {meta::pure::profiles::doc.doc = 'When the quote was computed.'} valuationDate: StrictDate[0..1];
  {meta::pure::profiles::doc.doc = 'When does the quote cease to be valid.'} expiryTime: DateTime[0..1];
  {meta::pure::profiles::doc.doc = 'For cash flows, the type of the cash flows. Examples include: Coupon payment, Premium Fee, Settlement Fee, Brokerage Fee, etc.'} cashflowType: FpML::model::CashflowType[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Provides a classification of the type of product that is external to the product qualifications used in the CDM. Product types mapped from external models are mapped to this data type.'} model::external::cdm::ExternalProductType
{
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'Stores the product type value.'} value: String[1];
  {meta::pure::profiles::doc.doc = 'Denotes the enumerated value to identify the source for the specified product type.'} externalProductTypeSource: model::external::cdm::ExternalProductTypeSourceEnum[1];
}

Class model::external::cdm::FloatingAmountProvisions
{
  {meta::pure::profiles::doc.doc = 'As specified by the ISDA Supplement for use with trades on mortgage-backed securities, \'WAC Cap\' means a weighted average coupon or weighted average rate cap provision (however defined in the Underlying Instruments) of the Underlying Instruments that limits, increases or decreases the interest rate or interest entitlement, as set out in the Underlying Instruments on the Effective Date without regard to any subsequent amendment The presence of the element with value set to \'true\' signifies that the provision is applicable. From a usage standpoint, this provision is typically applicable in the case of CMBS and not applicable in case of RMBS trades.'} wacCapInterestProvision: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'As specified by the ISDA Standard Terms Supplement for use with trades on mortgage-backed securities. The presence of the element with value set to \'true\' signifies that the provision is applicable. If applicable, the applicable step-up terms are specified as part of that ISDA Standard Terms Supplement. From a usage standpoint, this provision is typically applicable in the case of RMBS and not applicable in case of CMBS trades.'} stepUpProvision: Boolean[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the number of business days after satisfaction of all conditions to settlement.'} model::external::cdm::SingleValuationDate
{
  {meta::pure::profiles::doc.doc = 'A number of business days. Its precise meaning is dependant on the context in which this element is used. ISDA 2003 Term: Business Day.'} businessDays: Integer[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Specifies the commodity underlier in the event that no ISDA Commodity Reference Price exists.'} model::external::cdm::CommodityProductDefinition
{
  {meta::pure::profiles::doc.doc = 'Specifies the type of commodity.'} referenceFramework: model::external::cdm::CommodityReferenceFramework[1];
  {meta::pure::profiles::doc.doc = 'Specifies a publication that provides the commodity price, including, where applicable the details of where in the publication the price is published.  Applicable when the commodity reference price is not a futures contract'} priceSource: model::external::cdm::PriceSource[0..1];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'Identifies the exchange from which the reference price should be sourced, using the scheme at the following url: http://www.fpml.org/coding-scheme/external/exchange-id-MIC-1-0'} exchangeId: String[1];
}

Class {meta::pure::profiles::doc.doc = 'Specifies a single date on which market observations take place and specifies optional associated weighting.'} model::external::cdm::ObservationSchedule
{
  {meta::pure::profiles::doc.doc = 'Specifies an adjusted or unadjusted date for a market observation.'} date: model::external::cdm::AdjustableOrAdjustedDate[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the degree of importance of the observation.'} weight: Float[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies an identification key for the market observation. This attribute can be used as a reference to assign weights to a series of dates defined in a parametricSchedule.'} observationReference: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'The method, prioritised by the order it is listed in this element, to get a replacement rate for the disrupted settlement rate option.'} model::external::cdm::FallbackReferencePrice
[
  MaximumDaysOfPostponement: if($this.valuationPostponement->isNotEmpty(), |$this.valuationPostponement.maximumDaysOfPostponement > 0, |true),
  FallbackCalculationAgent: if($this.calculationAgentDetermination.calculationAgentParty->isNotEmpty(), |$this.calculationAgentDetermination.calculationAgentParty == model::external::cdm::AncillaryRoleEnum.CalculationAgentFallback, |true)
]
{
  {meta::pure::profiles::doc.doc = 'Specifies how long to wait to get a quote from a settlement rate option upon a price source disruption.'} valuationPostponement: model::external::cdm::ValuationPostponement[0..1];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'This settlement rate option will be used in its place.'} fallBackSettlementRateOption: model::external::cdm::SettlementRateOptionEnum[*];
  {meta::pure::profiles::doc.doc = 'Request rate quotes from the market. This element is set as type Empty in FpML. When present, the FpML synonym is mapped to a value True in the CDM.'} fallbackSurveyValuationPostponement: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'The calculation agent will decide the rate.'} calculationAgentDetermination: model::external::cdm::CalculationAgent[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Represents common attributes to define a collateral balance recorded by the principal as held or posted.'} model::external::cdm::CollateralBalance
{
  {meta::pure::profiles::doc.doc = 'Defines the collateral balance breakdown of settlement status.'} collateralBalanceStatus: model::external::cdm::CollateralStatusEnum[0..1];
  {meta::pure::profiles::doc.doc = 'Indicates if the collateral balance amount is based on pre or post haircut, if a haircut is associated with the collateral asset'} haircutIndicator: model::external::cdm::HaircutIndicatorEnum[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the collateral balance amount in base currency determined within a collateral legal agreement, or defined for reporting purposes.'} amountBaseCurrency: model::external::cdm::Money[1];
}

Class {meta::pure::profiles::doc.doc = 'A generic account that represents any party\'s account at another party. Parties may be identified by the account at another party.'} FpML::model::Account
[
  c1_choice: $this.accountBeneficiary->isNotEmpty() || ($this.accountBeneficiary->isEmpty() && $this.servicingParty->isNotEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'An account identifier. For example an Account number.'} accountId: FpML::model::AccountId[*];
  {meta::pure::profiles::doc.doc = 'The name by which the account is known.'} accountName: FpML::model::AccountName[0..1];
  {meta::pure::profiles::doc.doc = 'The type of account. e.g., Client, House'} accountType: FpML::model::AccountType[0..1];
  {meta::pure::profiles::doc.doc = 'A reference to the party beneficiary of the account.'} accountBeneficiary: FpML::model::PartyReference[0..1];
  {meta::pure::profiles::doc.doc = 'A reference to the party that services/supports the account.'} servicingParty: FpML::model::PartyReference[0..1];
  {meta::pure::profiles::doc.doc = 'The unique identifier for the account within the document.'} id: String[1];
}

Class {meta::pure::profiles::doc.doc = 'A complex type to specified payments in a simpler fashion than the Payment type. This construct should be used from the version 4.3 onwards.'} FpML::model::SimplePayment extends FpML::model::PaymentBase
{
  {meta::pure::profiles::doc.doc = 'A reference to the party responsible for making the payments defined by this structure.'} payerPartyReference: FpML::model::PartyReference[0..1];
  {meta::pure::profiles::doc.doc = 'A reference to the account responsible for making the payments defined by this structure.'} payerAccountReference: FpML::model::AccountReference[0..1];
  {meta::pure::profiles::doc.doc = 'A reference to the party that receives the payments corresponding to this structure.'} receiverPartyReference: FpML::model::PartyReference[0..1];
  {meta::pure::profiles::doc.doc = 'A reference to the account that receives the payments corresponding to this structure.'} receiverAccountReference: FpML::model::AccountReference[0..1];
  paymentAmount: FpML::model::NonNegativeMoney[0..1];
  {meta::pure::profiles::doc.doc = 'The payment date. This date is subject to adjustment in accordance with any applicable business day convention.'} paymentDate: FpML::model::AdjustableOrRelativeDate[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify party specific Secured Party Rights Event language'} model::external::cdm::SecuredPartyRightsEventElection
{
  {meta::pure::profiles::doc.doc = 'The elective party.'} party: model::external::cdm::CounterpartyRoleEnum[1];
  {meta::pure::profiles::doc.doc = 'A boolean attribute to specify whether a Secured Party Rights Event will only occur upon the occurrence of one or more of the event specified in a Control Agreement'} rightsEvent: Boolean[1];
}

Class {meta::pure::profiles::doc.doc = 'A type defining how a stub calculation period amount is calculated. A single floating rate tenor different to that used for the regular part of the calculation periods schedule may be specified, or two floating rate tenors many be specified. If two floating rate tenors are specified then Linear Interpolation (in accordance with the 2000 ISDA Definitions, Section 8.3 Interpolation) is assumed to apply. Alternatively, an actual known stub rate or stub amount may be specified.'} model::external::cdm::StubValue
[
  one_of_constraint: ((($this.floatingRate->isNotEmpty() && $this.stubRate->isEmpty()) && $this.stubAmount->isEmpty()) || (($this.stubRate->isNotEmpty() && $this.floatingRate->isEmpty()) && $this.stubAmount->isEmpty())) || (($this.stubAmount->isNotEmpty() && $this.floatingRate->isEmpty()) && $this.stubRate->isEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'The rates to be applied to the initial or final stub may be the linear interpolation of two different rates. While the majority of the time, the rate indices will be the same as that specified in the stream and only the tenor itself will be different, it is possible to specift two different rates. For example, a 2 month stub period may use the linear interpolation of a 1 month and 3 month rate. The different rates would be specified in this component. Note that a maximum of two rates can be specified. If a stub period uses the same floating rate index, including tenor, as the regular calculation periods then this should not be specified again within this component, i.e. the stub calculation period amount component may not need to be specified even if there is an initial or final stub period. If a stub period uses a different floating rate index compared to the regular calculation periods then this should be specified within this component. If specified here, they are likely to have id attributes, allowing them to be referenced from within the cashflows component.'} floatingRate: model::external::cdm::StubFloatingRate[0..2];
  {meta::pure::profiles::doc.doc = 'An actual rate to apply for the initial or final stub period may have been agreed between the principal parties (in a similar way to how an initial rate may have been agreed for the first regular period). If an actual stub rate has been agreed then it would be included in this component. It will be a per annum rate, expressed as a decimal. A stub rate of 5% would be represented as 0.05.'} stubRate: Float[0..1];
  {meta::pure::profiles::doc.doc = 'An actual amount to apply for the initial or final stub period may have been agreed between the two parties. If an actual stub amount has been agreed then it would be included in this component.'} stubAmount: model::external::cdm::Money[0..1];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'A workflow step represents the state of a business event. The workflow step contains a reference to a previous WorkflowStep in order to preserve lineage. A workflow step is accepted if it contains a business event, proposed if proposedInstruction is present and is rejected if the rejected flag is set.'} model::external::cdm::WorkflowStep
[
  WorkflowStepStatus: ((($this.businessEvent->isNotEmpty() && $this.proposedInstruction->isEmpty()) && $this.rejected->isEmpty()) || (($this.businessEvent->isEmpty() && $this.proposedInstruction->isNotEmpty()) && $this.rejected->isEmpty())) || (($this.businessEvent->isEmpty() && $this.proposedInstruction->isEmpty()) && $this.rejected->isNotEmpty()),
  Intent: if((($this.businessEvent.primitives.split->isNotEmpty() || $this.businessEvent.primitives.execution->isNotEmpty()) || $this.businessEvent.primitives.contractFormation->isNotEmpty()) || $this.businessEvent.primitives.reset->isNotEmpty(), |$this.businessEvent.intent->isEmpty(), |true)
]
{
  {meta::pure::profiles::doc.doc = 'Life cycle event for the step. The businessEvent is optional when a proposedInstruction or rejection are present.'} businessEvent: model::external::cdm::BusinessEvent[0..1];
  {meta::pure::profiles::doc.doc = 'The proposed instruction for the next workflow step. The proposedInstruction is optional when the businessEvent or rejection are present'} proposedInstruction: model::external::cdm::Instruction[0..1];
  {meta::pure::profiles::doc.doc = 'Flags this step as rejected.'} rejected: Boolean[0..1];
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'Optional previous workflow step that provides lineage to workflow steps that precedes it.'} previousWorkflowStep: model::external::cdm::WorkflowStep[0..1];
  {meta::pure::profiles::doc.doc = 'Optional next workflow step that defines the intended business event and optional instructions.'} nextWorkflowStep: model::external::cdm::NextWorkflowStep[0..1];
  {meta::pure::profiles::doc.doc = 'Contains all information pertaining the FpML messaging header'} messageInformation: model::external::cdm::MessageInformation[0..1];
  {meta::pure::profiles::doc.doc = 'The set of timestamp(s) associated with the event as a collection of [dateTime, qualifier].'} timestamp: model::external::cdm::EventTimestamp[1..*];
  {meta::pure::profiles::doc.doc = 'The identifier(s) that uniquely identify a lifecycle event. The unbounded cardinality is meant to provide the ability to associate identifiers that are issued by distinct parties. As an example, each of the parties to the event may choose to associate their own identifiers to the event.'} eventIdentifier: model::external::cdm::Identifier[1..*];
  {meta::pure::profiles::doc.doc = 'Specifies whether the event is a new, a correction or a cancellation.'} action: model::external::cdm::ActionEnum[0..1];
  {meta::pure::profiles::doc.doc = 'The specification of the event parties. This attribute is optional, as not applicable to certain events (e.g. most of the observations).'} party: model::external::cdm::Party[*];
  {meta::pure::profiles::doc.doc = 'Optional account information that could be associated to the event.'} account: model::external::cdm::Account[*];
  {meta::pure::profiles::doc.doc = 'The lineage attribute provides a linkage among lifecycle events through the globalKey hash value. One example is when a given lifecycle event is being corrected or cancelled. In such case, each subsequent event will have lineage into the prior version of that event. The second broad use case is when an event has a dependency upon either another event (e.g. the regular payment associated with a fix/float swap will have a lineage into the reset event, which will in turn have a lineage into the observation event for the floating rate and the contract) or a contract (e.g. the exercise of an option has a lineage into that option).'} lineage: model::external::cdm::Lineage[0..1];
  creditLimitInformation: model::external::cdm::CreditLimitInformation[0..1];
  {meta::pure::profiles::doc.doc = 'The event workflow information, i.e. the workflow status, the associated comment and the partyCustomisedWorkflow which purpose is to provide the ability to associate custom workflow information to the CDM.'} workflowState: model::external::cdm::WorkflowState[0..1];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'A class for defining a series of dates that shall be subject to adjustment if they would otherwise fall on a day that is not a business day in the specified business centers, together with the convention for adjusting the dates.'} model::external::cdm::AdjustableDates
{
  {meta::pure::profiles::doc.doc = 'A date subject to adjustment.'} unadjustedDate: Date[1..*];
  {meta::pure::profiles::doc.doc = 'The business day convention and financial business centers used for adjusting the date if it would otherwise fall on a day that is not a business date in the specified business centers.'} dateAdjustments: model::external::cdm::BusinessDayAdjustments[1];
  <<model::external::cdm::metadata.id>> {meta::pure::profiles::doc.doc = 'The date(s) once the adjustment has been performed. (Note that this date may change if the business center holidays change).'} adjustedDate: Date[*];
}

Class model::external::cdm::InvstmtDcsnPrsn
{
  prsn: model::external::cdm::Prsn[1];
}

Class {meta::pure::profiles::doc.doc = 'This type defines mappings between FROs in different definitional versions.'} model::external::cdm::FloatingRateIndexMappings
{
  {meta::pure::profiles::doc.doc = 'The successor FRO that this index maps to.'} mapsTo: model::external::cdm::FloatingRateIndexMap[0..1];
  {meta::pure::profiles::doc.doc = 'The predecessor FRO(s) that this index maps to.'} mapsFrom: model::external::cdm::FloatingRateIndexMap[*];
}

Class {meta::pure::profiles::doc.doc = 'A class for specifying the legal agreements that govern the contract, either as a reference to such agreements when specified as part of the CDM, or through identification of some of the key terms of those documents, such as the type of document, the document identifier, the publisher, the document vintage and the agreement date.'} model::external::cdm::RelatedAgreement
{
  {meta::pure::profiles::doc.doc = 'The legal agreement(s) that govern the contract, when such agreement is specified as a reference part of the CDM.'} legalAgreement: model::external::cdm::LegalAgreement[0..1];
  {meta::pure::profiles::doc.doc = 'The identification of the legal document(s) that govern the contract through some of the key terms of such document(s): type of document, the document identifier, the publisher, the document vintage and the agreement date.'} documentationIdentification: model::external::cdm::DocumentationIdentification[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the two set of elections that may overwrite the default Condition Precedent provision as specified in Paragraph 4, (a) of the ISDA 2016 Credit Support Annex for Initial Margin and the ISDA 2016 Credit Support Annex for Variation Margin. | ISDA 2016 English Law Credit Support Deed for Initial Margin, paragraph 13, General Principles, (e): Conditions Precedent. | ISDA 2018 English Law Credit Support Deed for Initial Margin, paragraph 13, General Principles, (e): Conditions Precedent. | ISDA 2016 Japanese Law Credit Support Annex for Initial Margin, paragraph 13, General Principles, (f): Conditions Precedent. | ISDA 2016 New York Law Credit Support Annex for Initial Margin, paragraph 13, General Principles, (e): Conditions Precedent. | ISDA 2016 Credit Support Annex for Variation Margin, paragraph 13, (e): Conditions Precedent and Secured Party\u2019s Rights and Remedies.'} model::external::cdm::ConditionsPrecedent
{
  {meta::pure::profiles::doc.doc = 'The election to specify whether the standard Conditions Precedent apply'} conditionsPrecedentElection: model::external::cdm::ExceptionEnum[0..1];
  {meta::pure::profiles::doc.doc = 'The custom provisions that might be specified by the parties to the agreement for the purpose of overwriting the default Condition Precedent provision as specified in ISDA 2016 Credit Support Annex for Initial Margin and the ISDA 2016 Credit Support Annex for Variation Margin, Paragraph 4, (a). ISDA 2016 English Law Credit Support Deed for Initial Margin, paragraph 13, General Principles, (e)(i). | ISDA 2016 Japanese Law Credit Support Annex for Initial Margin, paragraph 13, General Principles, (f)(i). | ISDA 2016 New York Law Credit Support Annex for Initial Margin, paragraph 13, General Principles, (e)(i). | ISDA 2016 Credit Support Annex for Variation Margin, paragraph 13, : Conditions Precedent and Secured Party\u2019s Rights and Remedies.'} customProvision: String[0..1];
  {meta::pure::profiles::doc.doc = 'The parties\' election with respect to the Termination Events that will be deemed an Access Condition (Initial Margin CSA) or a Specified Condition (Variation Margin CSA). ISDA 2016 English Law Credit Support Deed for Initial Margin, paragraph 13, General Principles, (e)(ii). | ISDA 2016 Japanese Law Credit Support Annex for Initial Margin, paragraph 13, General Principles, (f)(ii). | ISDA 2016 New York Law Credit Support Annex for Initial Margin, paragraph 13, General Principles, (e)(ii). | ISDA 2016 Credit Support Annex for Variation Margin, paragraph 13, (e): Conditions Precedent and Secured Party\u2019s Rights and Remedies.'} accessConditions: model::external::cdm::AccessConditions[1];
}

Class {meta::pure::profiles::doc.doc = 'Bond price and yield valuation model for the security leg in a securities financing transaction, closely modelled onto the BondPriceAndYield.model in FpML.'} model::external::cdm::BondPriceAndYieldModel
{
  {meta::pure::profiles::doc.doc = 'Either the clean or dirty price of the bond.'} cleanOrDirtyPrice: model::external::cdm::CleanOrDirtyPrice[0..1];
  {meta::pure::profiles::doc.doc = 'Bond price relative to a Benchmark.'} relativePrice: model::external::cdm::RelativePrice[0..1];
  {meta::pure::profiles::doc.doc = 'Price specified as a yield to maturity.'} yieldToMaturity: Float[0..1];
  {meta::pure::profiles::doc.doc = 'The inflation factor is specified for inflation-linked products which require some additional elements to calculate prices correctly.'} inflationFactor: Float[0..1];
  {meta::pure::profiles::doc.doc = 'Bond all-in-price which is a price that includes all relevant price adjustments (i.e. accrued interest, haircut or margin ratio, inflation factor,etc.). It expresses a price in terms of percentage of nominal amount.'} allInPrice: Float[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the Control Agreement election sby each party to the agreement.'} model::external::cdm::ControlAgreementElections
{
  {meta::pure::profiles::doc.doc = 'The elective party.'} party: model::external::cdm::CounterpartyRoleEnum[1];
  {meta::pure::profiles::doc.doc = 'The identification of whether the Control Agreement is a Credit Support Document with respect to each party'} controlAgreementAsCsd: Boolean[1];
  {meta::pure::profiles::doc.doc = 'Unless specified as inapplicable in the event of any inconsistency between this Deed and the Control Agreement, this Deed will prevail over the Control Agreement'} consistencyWithControlAgreement: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'Unless specified as inapplicable the parties recognise that the Control Agreement is a means by which the parties can perform their obligations.'} relationshipWithControlAgreement: Boolean[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Identifies the market sector in which the trade has been arranged.'} FpML::model::BrokerConfirmation
{
  {meta::pure::profiles::doc.doc = 'The type of broker confirmation executed between the parties.'} brokerConfirmationType: FpML::model::BrokerConfirmationType[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A legal entity identifier (e.g. RED entity code).'} FpML::model::EntityId
[
  c1_length: $this.entityIdScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() >= 1,
  c3_length: $this.value->length() <= 255
]
{
  entityIdScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'Defines the primitive event for an execution, with \'after\' attribute being a TradeState and the \'before\' attribute being Null. It is expected that the \'before\' attribute will be adjusted or deprecated once the CDM scope is extended to include pre-trade.'} model::external::cdm::ExecutionPrimitive
[
  condition1: $this.after.trade.executionDetails->isNotEmpty()
]
{
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'Represents the connection point between pre and post trade life-cycle events. The TradeState associated to the \'before\' attribute represents the final step of any pre-trade workflow. CDM scope does not include pre-trade and so cardinality of this attribute is specified as exactly 0, which enforces the absence of the \'before\' attribute.'} before: model::external::cdm::TradeState[0];
  {meta::pure::profiles::doc.doc = 'Represents an execution between parties. In the case of an execution on a contractual product, some additional characteristics may need to be specified to get a fully-formed contract, for instance when the executing party acts as an agent, as is the case in an allocation scenario. This is the purpose of the \'ContractFormation\' primitive event.'} after: model::external::cdm::TradeState[1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify each party\'s election with respect to the Substituted Regimes that will be applicable...'} model::external::cdm::SubstitutedRegime
{
  {meta::pure::profiles::doc.doc = 'The applicable regulatory regime, as specified through an enumeration.'} regime: model::external::cdm::RegulatoryRegimeEnum[0..1];
  {meta::pure::profiles::doc.doc = 'The additional regulatory regime as specified by the parties.'} additionalRegime: String[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the applicability of the Substituted Regime as denoted in the Substituted Regime Table as part of certain legal agreements, such as such as the ISDA 2016 and 2018 CSA for Initial Margin.'} regimeTerms: model::external::cdm::SubstitutedRegimeTerms[2];
}

Class {meta::pure::profiles::doc.doc = 'A type describing a role played by a person in one or more transactions. Examples include roles such as Trader, Broker, MiddleOffice, Legal, etc. This can be extended to provide custom roles.'} FpML::model::PersonRole
[
  c1_length: $this.personRoleScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  personRoleScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'This type is a generic structure that can represent the parameters of several mid-market valuation and replacement value methods described in the 2021 ISDA Definitions.'} model::external::cdm::CashCollateralValuationMethod
{
  {meta::pure::profiles::doc.doc = 'This may be used to specify what type of CSA (credit support annex/agreement) is to be used for cash settlement purposes.'} applicableCsa: model::external::cdm::CsaTypeEnum[0..1];
  {meta::pure::profiles::doc.doc = 'This may be used to indicate the currency of cash collateral for cash settlement purposes.'} cashCollateralCurrency: String[0..1];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'This may be used to indicate the interest rate to be used for cash collateral for cash settlement purposes.'} cashCollateralInterestRate: String[0..1];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'This may be used to indicate the discount rate to be used for cash collateral for cash settlement purposes.'} agreedDiscountRate: String[0..1];
  {meta::pure::profiles::doc.doc = 'This may be used to specify which party is protected (e.g. under Replacement Value cash settlement methods).'} protectedParty: model::external::cdm::PartyDeterminationEnum[0..2];
  {meta::pure::profiles::doc.doc = 'This may be used to indicate that \'prescribed documentation adjustment\' is applicable.'} prescribedDocumentationAdjustment: Boolean[0..1];
}

Class FpML::model::CreditSupportAgreementIdentifier
[
  c1_length: $this.creditSupportAgreementIdScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() >= 1,
  c3_length: $this.value->length() <= 255
]
{
  creditSupportAgreementIdScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify Secured Party Rights Event language'} model::external::cdm::SecuredPartyRightsEvent
{
  securedPartyRightsEventElection: model::external::cdm::SecuredPartyRightsEventElection[0..2];
  {meta::pure::profiles::doc.doc = 'A boolean attribute to specify whether Failure to Pay Early Termination language is included (True) or excluded (False) from the agreement.'} earlyTerminationDateOptionalLanguage: Boolean[1];
  {meta::pure::profiles::doc.doc = 'A boolean attribute to specify whether Failure to Pay Early Termination language in the agreement is deemed applicable or not.'} failureToPayEarlyTermination: Boolean[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Defines splitting of a single trade into one or more trades, where the quantity of the split trade(s) totals that of the single trade.'} model::external::cdm::SplitPrimitive
[
  condition1: if($this.before.trade.executionDetails->isNotEmpty(), |$this.after.trade.executionDetails->isNotEmpty() && $this.after.trade.contractDetails->isEmpty(), |true),
  condition2: if($this.before.trade.contractDetails->isNotEmpty(), |$this.after.trade.contractDetails->isNotEmpty() && $this.after.trade.executionDetails->isEmpty(), |true),
  condition3: $this.after.trade.tradableProduct.product == $this.before.trade.tradableProduct.product
]
{
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'Represents the single trade to be split.'} before: model::external::cdm::TradeState[1];
  {meta::pure::profiles::doc.doc = 'Represents the outcome of the split. Includes the single trade (referenced in the \'before\' attribute) with its Position State updated to closed, along with a reason.'} after: model::external::cdm::TradeState[2..*];
}

Class <<meta::pure::profiles::typemodifiers.abstract>> {meta::pure::profiles::doc.doc = 'A generic type describing an identified asset.'} FpML::model::IdentifiedAsset extends FpML::model::Asset
[
  c1_length: $this.description->forAll(x: String[1]|$x->length() >= 1)
]
{
  {meta::pure::profiles::doc.doc = 'Identification of the underlying asset, using public and/or private identifiers.'} instrumentId: FpML::model::InstrumentId[*];
  {meta::pure::profiles::doc.doc = 'Classification of the asset, using public and/or private typologies e.g. ISO 10962 CFI code.'} instrumentType: FpML::model::InstrumentType[*];
  {meta::pure::profiles::doc.doc = 'Long name of the underlying asset.'} description: String[0..1];
}

Class FpML::model::InformationProvider
[
  c1_length: $this.informationProviderScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  informationProviderScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'The pricing period per calculation period if the pricing days do not wholly fall within the respective calculation period.'} model::external::cdm::Lag
{
  {meta::pure::profiles::doc.doc = 'Defines the offset of the series of pricing dates relative to the calculation period.'} lagDuration: model::external::cdm::Offset[1];
  {meta::pure::profiles::doc.doc = 'Defines the offset of the series of pricing dates relative to the calculation period.'} firstObservationDateOffset: model::external::cdm::Offset[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Used in conjunction with an exchange-based pricing source. Identifies a way in which the futures contracts referenced will roll between periods.'} model::external::cdm::RollFeature
{
  {meta::pure::profiles::doc.doc = 'Used in conjunction with an exchange-based pricing source. Identifies a date source calendar from which the pricing dates and thus roll to the next contract will be based off (e.g. pricing is based on the NYMEX WTI First Nearby Futures Contract, if Future is chosen, the pricing will roll to the next futures contract on expiration, if ListedOption is chosen, the pricing will roll to the next futures contract on the Option expiration date which is three business days before the expiration of the NYMEX WTI futures contract.) Omitting this element will result in the default behavior expected with the pricing source described within the commodity element.'} rollSourceCalendar: model::external::cdm::RollSourceCalendarEnum[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies, for a Commodity Transaction that references a delivery date for a listed future, the day on which the specified future will roll to the next nearby month prior to the expiration of the referenced future. If the future will not roll at all - i.e. the price will be taken from the expiring contract, 0 should be specified here. If the future will roll to the next nearby on the last trading day - i.e. the price will be taken from the next nearby on the last trading day, then 1 should be specified and so on.'} deliveryDateRollConvention: model::external::cdm::Offset[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type describing a commodity underlying asset.'} FpML::model::Commodity extends FpML::model::IdentifiedAsset
[
  c1_range: $this.multiplier->forAll(x: Decimal[1]|$x > 0)
]
{
  {meta::pure::profiles::doc.doc = 'A coding scheme value to identify the base type of the commodity being traded. Where possible, this should follow the naming convention used in the 2005 ISDA Commodity Definitions. For example, \'Oil\'.'} commodityBase: FpML::model::CommodityBase[0..1];
  {meta::pure::profiles::doc.doc = 'A coding scheme value to identify the commodity being traded more specifically. Where possible, this should follow the naming convention used in the 2005 ISDA Commodity Definitions. For example, \'Brent\'.'} commodityDetails: FpML::model::CommodityDetails[0..1];
  {meta::pure::profiles::doc.doc = 'A coding scheme value to identify the unit of measure (e.g. Therms) in which the undelryer is denominated. Where possible, this should follow the naming convention used in the 2005 ISDA Commodity Definitions.'} unit: FpML::model::QuantityUnit[0..1];
  {meta::pure::profiles::doc.doc = 'The currency in which the Commodity Reference Price is published (e.g. GBP).'} currency: FpML::model::Currency[0..1];
  {meta::pure::profiles::doc.doc = 'For those commodities being traded with reference to the price of a listed instrument, the exchange where that instrument is listed should be specified in the \'exchange\' element.'} exchangeId: FpML::model::ExchangeId[0..1];
  {meta::pure::profiles::doc.doc = 'For those commodities being traded with reference to a price distributed by a publication, that publication should be specified in the \'publication\' element.'} publication: FpML::model::CommodityInformationSource[0..1];
  {meta::pure::profiles::doc.doc = 'The \'specified Price\' describes the nature of the underlying price that is observed. It must be be stated in the underlyer definition as it is not defined in the Commodity Reference Price. Example values of \'specifiedPrice\' are \'Settlement\' (for a futures contract) and \'WeightedAverage\' (for some published prices and indices).'} specifiedPrice: FpML::model::SpecifiedPriceEnum[0..1];
  {meta::pure::profiles::doc.doc = 'Deprecated: The \'deliveryDates\' element is applicable for a Commodity Reference Price that references a listed future contract (e.g. The Delivery Date is a NearbyMonth).'} deliveryDates: FpML::model::DeliveryDatesEnum[0..1];
  {meta::pure::profiles::doc.doc = 'A container for the parametric representation of nearby contracts.'} deliveryNearby: FpML::model::DeliveryNearby[0..1];
  {meta::pure::profiles::doc.doc = 'The Delivery Date is a fixed, single day.'} deliveryDate: FpML::model::AdjustableDate[0..1];
  {meta::pure::profiles::doc.doc = 'The Delivery Date is a fixed, single month.'} deliveryDateYearMonth: StrictDate[0..1];
  {meta::pure::profiles::doc.doc = 'The \'deliveryDateRollConvention\' specifies, for a Commodity Transaction that references a listed future via the \'deliveryDates\' element, the day on which the specified future will roll to the next nearby month prior to the expiration of the referenced future. If the future will not roll at all - i.e. the price will be taken from the expiring contract, 0 should be specified here. If the future will roll to the next nearby on the last trading day - i.e. the price will be taken from the next nearby on the last trading day, then 1 should be specified and so on.'} deliveryDateRollConvention: FpML::model::Offset[0..1];
  {meta::pure::profiles::doc.doc = 'The \'deliveryDateExpirationConvention\' specifies, for a Commodity Transaction that references a listed future via the \'deliveryDates\' element, the day on which the specified future will expire ahead of the actual expiration of the referenced future. For example: Z21 Contract expires on 19Nov21, with an adjust of 2D the \'expire\' will be 16Nov21. DeliveryDateRollConvention takes precedence. Example: Pricing on the Z21 Contract with NearbyContractDay and a deliveryDateRoll of 10D, Sampling of the F22 Contract will occur on 8Nov21 through the last Date of the Z21 Contract. With an ExpConvention of 5D, the last sampling date on the F22 contract will be 12Nov21.'} deliveryDateExpirationConvention: FpML::model::Offset[0..1];
  {meta::pure::profiles::doc.doc = 'The \'multiplier\' specifies the multiplier associated with the Transaction. The \'multiplier\' element has two uses: (1) for Freight Transactions or any Calculation Period specified for a Freight Transaction, if an amount is specified as the Multiplier then it is captured by this element and (2) if the Transaction is a heat rate option, the heat rate multiplier is represented in this element. If multiplier is not provided, multiplier is assumed to be 1. (i.e. rate source states 1 BBL of Oil as 90 Dollars. Multiplier of 10 will change the value to 900 dollars.)'} multiplier: Decimal[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class specifying the Credit Default Swap Reference Information.'} model::external::cdm::ReferenceInformation
[
  ReferenceInformationChoice: ((($this.referenceObligation->isNotEmpty() && $this.noReferenceObligation->isEmpty()) && $this.unknownReferenceObligation->isEmpty()) || (($this.noReferenceObligation->isNotEmpty() && $this.referenceObligation->isEmpty()) && $this.unknownReferenceObligation->isEmpty())) || (($this.unknownReferenceObligation->isNotEmpty() && $this.referenceObligation->isEmpty()) && $this.noReferenceObligation->isEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'The corporate or sovereign entity which is subject to the swap transaction and any successor that assumes all or substantially all of its contractual and other obligations. Reference Entities cannot be senior or subordinated. It is the obligations of the Reference Entities that can be senior or subordinated. ISDA 2014 Credit definitions article II section 2.1: `Reference Entity` means the entity specified as such in the related Confirmation.'} referenceEntity: model::external::cdm::LegalEntity[1];
  {meta::pure::profiles::doc.doc = 'The Reference Obligation is a financial instrument that is either issued or guaranteed by the reference entity. It serves to clarify the precise reference entity protection is being offered upon, and its legal position with regard to other related firms (parents/subsidiaries). Furthermore the Reference Obligation is ALWAYS deliverable and establishes the Pari Passu ranking (as the deliverable bonds must rank equal to the reference obligation). ISDA 2003 Term: Reference Obligation.'} referenceObligation: model::external::cdm::ReferenceObligation[*];
  {meta::pure::profiles::doc.doc = 'Used to indicate that there is no Reference Obligation associated with this Credit Default Swap and that there will never be one.'} noReferenceObligation: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'Used to indicate that the Reference obligation associated with the Credit Default Swap is currently not known. This is not valid for Legal Confirmation purposes, but is valid for earlier stages in the trade life cycle (e.g. Broker Confirmation).'} unknownReferenceObligation: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'Indicates whether an obligation of the Reference Entity, guaranteed by the Reference Entity on behalf of a non-Affiliate, is to be considered an Obligation for the purpose of the transaction. It will be considered an obligation if allGuarantees is applicable (true) and not if allGuarantees is inapplicable (false). ISDA 2003 Term: All Guarantees.'} allGuarantees: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'Used to determine (a) for physically settled trades, the Physical Settlement Amount, which equals the Floating Rate Payer Calculation Amount times the Reference Price and (b) for cash settled trades, the Cash Settlement Amount, which equals the greater of (i) the difference between the Reference Price and the Final Price and (ii) zero. ISDA 2003 Term: Reference Price.'} referencePrice: model::external::cdm::Price[0..1];
  {meta::pure::profiles::doc.doc = 'Applicable to the transactions on mortgage-backed security, which can make use of a reference policy. Presence of the element with value set to \'true\' indicates that the reference policy is applicable; absence implies that it is not.'} referencePolicy: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'With respect to any day, the list of Syndicated Secured Obligations of the Designated Priority of the Reference Entity published by Markit Group Limited or any successor thereto appointed by the Specified Dealers (the \'Secured List Publisher\') on or most recently before such day, which list is currently available at [http://www.markit.com]. ISDA 2003 Term: Relevant Secured List.'} securedList: Boolean[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Unless otherwise specified, the principal clearance system customarily used for settling trades in the relevant underlying.'} FpML::model::ClearanceSystem
[
  c1_length: $this.clearanceSystemScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  clearanceSystemScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'Specifies the conditions to be applied for converting into a reference currency when the actual currency rate is not determined upfront.'} model::external::cdm::Composite
{
  {meta::pure::profiles::doc.doc = 'Specifies the method according to which an amount or a date is determined.'} determinationMethod: model::external::cdm::DeterminationMethodEnum[0..1];
  {meta::pure::profiles::doc.doc = 'A date specified as some offset to another date (the anchor date).'} relativeDate: model::external::cdm::RelativeDateOffset[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the methodology (reference source and, optionally, fixing time) to be used for determining a currency conversion rate.'} fxSpotRateSource: model::external::cdm::FxSpotRateSource[0..1];
  {meta::pure::profiles::doc.doc = 'The time at which the spot currency exchange rate will be observed. It is specified as a time in a business day calendar location, e.g. 11:00am London time.'} fixingTime: model::external::cdm::BusinessCenterTime[0..1];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'A data defining the settlement date(s) for cash or physical settlement as either a set of explicit dates, together with applicable adjustments, or as a date relative to some other (anchor) date, or as any date in a range of contiguous business days. This data type provides a level of abstraction on top of the different legacy methods used to specify a settlement / payment date, which vary across product types, asset classes and delivery types.'} model::external::cdm::SettlementDate
{
  {meta::pure::profiles::doc.doc = 'A single settlement date subject to adjustment or specified as relative to another date (e.g. the trade date). This attribute was formerly part of \'SettlementTerms\', which is now being harmonised to include a common \'SettlementDate\', as inherited from \'SettlementBase\'.'} adjustedDate: model::external::cdm::AdjustableOrAdjustedOrRelativeDate[0..1];
  {meta::pure::profiles::doc.doc = 'The settlement date for a forward settling product. For Foreign Exchange contracts, this represents a common settlement date between both currency legs. To specify different settlement dates for each currency leg, see the ForeignExchange class. This attribute was formerly part of \'SettlementTerms\', which is now being harmonised to include a common \'SettlementDate\', as inherited from \'SettlementBase\'.'} valueDate: Date[0..1];
  {meta::pure::profiles::doc.doc = 'A series of dates that shall be subject to adjustment if they would otherwise fall on a day that is not a business day in the specified business centers, together with the convention for adjusting the date. This attributes was formerly part of \'CashSettlementPaymentDate\' as included into \'OptionCashSettlement\' (which is now merged into a unique \'CashSettlementTerms\' data type.'} adjustableDates: model::external::cdm::AdjustableDates[0..1];
  {meta::pure::profiles::doc.doc = 'A range of contiguous business days. This attribute is meant to be merged with the \'settlementDate\' at some future point once we refactor \'Date\' to use a single complex type across the model. This attributes was formerly part of \'CashSettlementPaymentDate\', as included into \'OptionCashSettlement\' (which is now merged into a unique \'CashSettlementTerms\' data type.'} businessDateRange: model::external::cdm::BusinessDateRange[0..1];
  {meta::pure::profiles::doc.doc = 'The number of business days used in the determination of the cash settlement payment date. If a cash settlement amount is specified, the cash settlement payment date will be this number of business days following the calculation of the final price. If a cash settlement amount is not specified, the cash settlement payment date will be this number of business days after all conditions to settlement are satisfied. ISDA 2003 Term: Cash Settlement Date. This attribute was formerly part of \'CashSettlementTerms\' as used for credit event settlement, which now includes a common \'SettlementDate\' attribute.'} cashSettlementBusinessDays: Integer[0..1];
  {meta::pure::profiles::doc.doc = 'Applicable to CDS on MBS to specify whether payment delays are applicable to the fixed Amount. RMBS typically have a payment delay of 5 days between the coupon date of the reference obligation and the payment date of the synthetic swap. CMBS do not, on the other hand, with both payment dates being on the 25th of each month.'} paymentDelay: Boolean[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Provides a reference to a spread schedule.'} FpML::model::SpreadScheduleReference extends FpML::model::Reference
{
  href: String[1];
}

Class {meta::pure::profiles::doc.doc = 'Data required to perform a stock split business event.'} model::external::cdm::StockSplitInstruction
{
  {meta::pure::profiles::doc.doc = 'Contract to be split.'} tradeState: model::external::cdm::TradeState[1];
  {meta::pure::profiles::doc.doc = 'The number that denotes the cumulative quantity of post-split shares issued to shareholders versus the quantity of pre-split shares previously issued to shareholders.  This number will be multiplied by existing shares in an equity derivative contract or other positions to determine the post-split number of shares.  With regard to any reference to price, the pre-split reference price will be divided by this number to determine the post-split reference price.'} adjustmentRatio: Float[1];
  {meta::pure::profiles::doc.doc = 'The effective date of the stock split, also known as the ex-date. This is the date on which the additional shares are paid to the shareholders, or in the case of a reverse stock split, the number shares held by each shareholder is proportionally reduced.  Equity derivative transactions can be amended in firms\' internal systems on such date.   In most markets, the listed stock price is reduced (or increased for a reverse stock split) to account for the split on the same date, but in some markets the price adjustment occurs on a later date.  In either case, equity derivative transactions should be amended on the date that the stocks are paid to the shareholders (or consolidated).'} date: Date[1];
}

Class <<meta::pure::profiles::typemodifiers.abstract>> {meta::pure::profiles::doc.doc = 'Abstract base class for all money types.'} FpML::model::MoneyBase
{
  {meta::pure::profiles::doc.doc = 'The currency in which an amount is denominated.'} currency: FpML::model::Currency[0..1];
  id: String[0..1];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'Attaches an identifier to a collection of objects, when those objects themselves can each be represented by an identifier. One use case is the representation of package transactions, where each component is a separate trade with its own identifier, and those trades are linked together as a package with its own identifier. The data type has been named generically rather than referring to \'packages\' as it may have a number of other uses.'} model::external::cdm::IdentifiedList
{
  {meta::pure::profiles::doc.doc = 'The identifier for the list. In the case of a package transaction, this would be the package identifier. This attribute is mandatory to allow the list itself to be identifed.'} listId: model::external::cdm::Identifier[1];
  {meta::pure::profiles::doc.doc = 'Identifiers for each component of the list. Since the data type is used to link multiple identified objects together, at least 2 components are required in the list. Creating an identified list with only 1 identifed component has been deemed unnecessary, because it would just create a redundant identifier.'} componentId: model::external::cdm::Identifier[2..*];
}

Class {meta::pure::profiles::doc.doc = 'A CDM class which purpose is to specify the initial fixing date either alongside the FpML interest rate specification as an offset of another date, or alongside the credit derivative specification as an unadjusted date.'} model::external::cdm::InitialFixingDate
[
  one_of_constraint: ($this.relativeDateOffset->isNotEmpty() && $this.initialFixingDate->isEmpty()) || ($this.initialFixingDate->isNotEmpty() && $this.relativeDateOffset->isEmpty())
]
{
  relativeDateOffset: model::external::cdm::RelativeDateOffset[0..1];
  initialFixingDate: Date[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the application of Interest Amount with respect the Return Amount. ISDA 2016 Japanese Law Credit Support Annex for Initial Margin, paragraph 13, General Principles, (n)(ii).'} model::external::cdm::ReturnAmount
[
  CustomElection: if($this.customElection->isNotEmpty(), |!($this.includesDefaultLanguage->toOne()), |true)
]
{
  {meta::pure::profiles::doc.doc = 'Default language is included when True, and excluded when False.'} includesDefaultLanguage: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'Custom election that might be specified by the parties to the agreement.'} customElection: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type that describes the set of street and building number information that identifies a postal address within a city.'} FpML::model::StreetAddress
[
  c1_length: $this.streetLine->forAll(x: String[1]|$x->length() >= 1)
]
{
  {meta::pure::profiles::doc.doc = 'An individual line of street and building number information, forming part of a postal address.'} streetLine: String[*];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify a valuation swap curve, which is used as part of the strike construct for the bond and convertible bond options.'} model::external::cdm::SwapCurveValuation
{
  floatingRateIndex: model::external::cdm::FloatingRateIndexEnum[1];
  {meta::pure::profiles::doc.doc = 'The ISDA Designated Maturity, i.e. the tenor of the floating rate.'} indexTenor: model::external::cdm::Period[0..1];
  {meta::pure::profiles::doc.doc = 'Spread in basis points over the floating rate index.'} spread: Float[1];
  {meta::pure::profiles::doc.doc = 'The side (bid/mid/ask) of the measure.'} side: model::external::cdm::QuotationSideEnum[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type that represents how to contact an individual or organization.'} FpML::model::ContactInformation
[
  c1_length: $this.email->forAll(x: String[1]|$x->length() >= 0)
]
{
  {meta::pure::profiles::doc.doc = 'A telephonic contact.'} telephone: FpML::model::TelephoneNumber[*];
  {meta::pure::profiles::doc.doc = 'An address on an electronic mail or messaging sysem .'} email: String[*];
  {meta::pure::profiles::doc.doc = 'A postal or street address.'} address: FpML::model::Address[0..1];
}

Class {meta::pure::profiles::doc.doc = 'This type holds parameters defining the normal fixing time for a floating rate index.'} model::external::cdm::FloatingRateIndexFixingTime extends model::external::cdm::BusinessCenterTime
{
  {meta::pure::profiles::doc.doc = 'Allows a designed maturity to be specified for the fixing time.'} designatedMaturity: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'From FpML: A type defining either a spot or forward FX transactions.'} model::external::cdm::ForeignExchange
{
  {meta::pure::profiles::doc.doc = 'This is the first of the two currency flows that define a single leg of a standard foreign exchange transaction.'} exchangedCurrency1: model::external::cdm::Cashflow[1];
  {meta::pure::profiles::doc.doc = 'This is the second of the two currency flows that define a single leg of a standard foreign exchange transaction.'} exchangedCurrency2: model::external::cdm::Cashflow[1];
  {meta::pure::profiles::doc.doc = 'A tenor expressed as a period type and multiplier (e.g. 1D, 1Y, etc.)'} tenorPeriod: model::external::cdm::Period[0..1];
  {meta::pure::profiles::doc.doc = 'The rate of exchange between the two currencies.'} exchangeRate: model::external::cdm::ExchangeRate[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A contractual supplement (such as those published by ISDA) and its publication date that will apply to the trade.'} FpML::model::ContractualTermsSupplement
{
  {meta::pure::profiles::doc.doc = 'Identifies the form of applicable contractual supplement.'} type: FpML::model::ContractualSupplement[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the publication date of the applicable version of the contractual supplement.'} publicationDate: StrictDate[0..1];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'The adjusted dates for a specific cancellation date, including the adjusted exercise date and adjusted termination date.'} model::external::cdm::CancellationEvent
{
  {meta::pure::profiles::doc.doc = 'The date on which option exercise takes place. This date should already be adjusted for any applicable business day convention.'} adjustedExerciseDate: Date[1];
  {meta::pure::profiles::doc.doc = 'The early termination date that is applicable if an early termination provision is exercised. This date should already be adjusted for any applicable business day convention.'} adjustedEarlyTerminationDate: Date[1];
}

Class FpML::model::RoutingId
[
  c1_length: $this.routingIdCodeScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  routingIdCodeScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'Posted Credit Support item with corresponding Valuation Percentage, FX Haircut Percentage and any related disputed Posted Credit Support valuation.'} model::external::cdm::PostedCreditSupportItem
{
  {meta::pure::profiles::doc.doc = 'The Base Currency Equivalent of Cash or Security.'} cashOrSecurityValue: model::external::cdm::Money[1];
  {meta::pure::profiles::doc.doc = 'Valuation Percentage means, for any item of Eligible Collateral (IM), the percentage specified in accordance with Paragraph 13.'} haircutPercentage: Float[1];
  {meta::pure::profiles::doc.doc = 'FX Haircut Percentage means, for any item of Eligible Collateral (IM), the percentage specified in accordance with Paragraph 13.'} fxHaircutPercentage: Float[0..1];
  {meta::pure::profiles::doc.doc = 'Percentage value of any additional haircut to be applied to a collateral asset,the percentage value is expressed as the discount haircut to the value of the collateral- as an example a 5% haircut would be expressed as 0.05.'} additionalHaircutPercentage: Float[0..1];
  {meta::pure::profiles::doc.doc = 'Paragraph 5. If a party (a \'Disputing Party\') disputes the Value of any Posted Credit Support (IM).'} disputedCashOrSecurityValue: model::external::cdm::Money[1];
}

Class {meta::pure::profiles::doc.doc = 'Information related to dividends and payments.'} model::external::cdm::DividendTerms
{
  {meta::pure::profiles::doc.doc = 'Specifies the proportion of the value of the dividend on the borrowed shares that the borrower is legally obligated to return to the lender.'} manufacturedIncomeRequirement: model::external::cdm::DividendPayoutRatio[1];
  {meta::pure::profiles::doc.doc = 'Defines the date on which the receiver of the equity return is entitled to the dividend.'} dividendEntitlement: model::external::cdm::DividendEntitlementEnum[0..1];
  {meta::pure::profiles::doc.doc = 'daily fee increments accrue until a threshold is crossed, at which point payment becomes due)'} minimumBillingAmount: model::external::cdm::Money[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type defining parameters associated with a fallback observation, i.e. a rate observation where the original published rate is not available and instead a fallback rate must be used.'} FpML::model::FallbackRateObservation
{
  {meta::pure::profiles::doc.doc = 'The date which is the Fallback Observation Date, as defined in the ISDA 2006/2021 Definitions (typically 2 days prior to the relevant Payment/calculation date.'} observationDate: StrictDate[0..1];
  {meta::pure::profiles::doc.doc = 'The original record date from the fallback publication source that was available at the time that fallback rate was observed. This may be before the original fixing date depending on publication schedules'} availableRecordDate: StrictDate[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A trade reference identifier allocated by a party. FpML does not define the domain values associated with this element. Note that the domain values for this element are not strictly an enumerated list.'} FpML::model::TradeId
[
  c1_length: $this.tradeIdScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() >= 1,
  c3_length: $this.value->length() <= 255
]
{
  tradeIdScheme: String[0..1];
  id: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'A type that provides three alternative ways of identifying a party involved in the routing of a payment. The identification may use payment system identifiers only; actual name, address and other reference information; or a combination of both.'} FpML::model::Routing
[
  c1_choice: ($this.routingIds->isNotEmpty() && ($this.routingExplicitDetails->isEmpty() && $this.routingIdsAndExplicitDetails->isEmpty())) || (($this.routingIds->isEmpty() && ($this.routingExplicitDetails->isNotEmpty() && $this.routingIdsAndExplicitDetails->isEmpty())) || ($this.routingIds->isEmpty() && ($this.routingExplicitDetails->isEmpty() && $this.routingIdsAndExplicitDetails->isNotEmpty())))
]
{
  {meta::pure::profiles::doc.doc = 'A set of unique identifiers for a party, eachone identifying the party within a payment system. The assumption is that each party will not have more than one identifier within the same payment system.'} routingIds: FpML::model::RoutingIds[0..1];
  {meta::pure::profiles::doc.doc = 'A set of details that is used to identify a party involved in the routing of a payment when the party does not have a code that identifies it within one of the recognized payment systems.'} routingExplicitDetails: FpML::model::RoutingExplicitDetails[0..1];
  {meta::pure::profiles::doc.doc = 'A combination of coded payment system identifiers and details for physical addressing for a party involved in the routing of a payment.'} routingIdsAndExplicitDetails: FpML::model::RoutingIdsAndExplicitDetails[0..1];
}

Class FpML::model::Restructuring
{
  {meta::pure::profiles::doc.doc = 'Indicates whether the restructuring provision is applicable.'} applicable: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the type of restructuring that is applicable.'} restructuringType: FpML::model::RestructuringType[0..1];
  {meta::pure::profiles::doc.doc = 'In relation to a restructuring credit event, unless multiple holder obligation is not specified restructurings are limited to multiple holder obligations. A multiple holder obligation means an obligation that is held by more than three holders that are not affiliates of each other and where at least two thirds of the holders must agree to the event that constitutes the restructuring credit event. ISDA 2003 Term: Multiple Holder Obligation.'} multipleHolderObligation: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'Presence of this element and value set to \'true\' indicates that Section 3.9 of the 2003 Credit Derivatives Definitions shall apply. Absence of this element indicates that Section 3.9 shall not apply. NOTE: Not allowed under ISDA Credit 1999.'} multipleCreditEventNotices: Boolean[0..1];
}

Class model::external::cdm::ExctgPrsn
{
  prsn: model::external::cdm::Prsn[1];
}

Class {meta::pure::profiles::doc.doc = 'Specifies the termination currency to be used by a party when it is the Non-Defaulting Party or the Party which is not the Affected Party.'} model::external::cdm::PartyTerminationCurrencySelection
{
  {meta::pure::profiles::doc.doc = 'The elective party.'} party: model::external::cdm::Party[1];
  {meta::pure::profiles::doc.doc = 'Specifies termination Currency'} statedPartyCurrency: String[1];
}

Class {meta::pure::profiles::doc.doc = 'A type defining a schedule of non-negative rates or amounts in terms of an initial value and then a series of step date and value pairs. On each step date the rate or amount changes to the new step value. The series of step date and value pairs are optional. If not specified, this implies that the initial value remains unchanged over time.'} FpML::model::NonNegativeSchedule
[
  c1_range: $this.initialValue->forAll(x: Decimal[1]|$x >= 0)
]
{
  {meta::pure::profiles::doc.doc = 'The non-negative initial rate or amount, as the case may be. An initial rate of 5% would be represented as 0.05.'} initialValue: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'The schedule of step date and non-negative value pairs. On each step date the associated step value becomes effective. A list of steps may be ordered in the document by ascending step date. An FpML document containing an unordered list of steps is still regarded as a conformant document.'} step: FpML::model::NonNegativeStep[*];
  id: String[0..1];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'A class giving the choice between defining a series of dates as an explicit list of dates together with applicable adjustments or as relative to some other series of (anchor) dates.'} model::external::cdm::AdjustableOrRelativeDates
{
  {meta::pure::profiles::doc.doc = 'A series of dates that shall be subject to adjustment if they would otherwise fall on a day that is not a business day in the specified business centers, together with the convention for adjusting the date.'} adjustableDates: model::external::cdm::AdjustableDates[0..1];
  {meta::pure::profiles::doc.doc = 'A series of dates specified as some offset to another series of dates (the anchor dates).'} relativeDates: model::external::cdm::RelativeDates[0..1];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'A class to specify an account as an account number alongside, optionally. an account name, an account type, an account beneficiary and a servicing party.'} model::external::cdm::Account
{
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'A reference to the party to which the account refers to.'} partyReference: model::external::cdm::Party[0..1];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'The account number.'} accountNumber: String[1];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'The name by which the account is known.'} accountName: String[0..1];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'The type of account, e.g. client, house.'} accountType: model::external::cdm::AccountTypeEnum[0..1];
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'A reference to the party beneficiary of the account.'} accountBeneficiary: model::external::cdm::Party[0..1];
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'The reference to the legal entity that services the account, i.e. in the books of which the account is held.'} servicingParty: model::external::cdm::Party[0..1];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'A class defining a Credit Default Swap Index.'} model::external::cdm::IndexReferenceInformation
[
  IndexSeries: if($this.indexSeries->isNotEmpty(), |$this.indexSeries >= 0, |true),
  IndexAnnexVersion: if($this.indexAnnexVersion->isNotEmpty(), |$this.indexAnnexVersion >= 0, |true)
]
{
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'The name of the index expressed as a free format string with an associated scheme.'} indexName: String[0..1];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'A CDS index identifier (e.g. RED pair code).'} indexId: String[*];
  {meta::pure::profiles::doc.doc = 'A CDS index series identifier, e.g. 1, 2, 3 etc.'} indexSeries: Integer[0..1];
  {meta::pure::profiles::doc.doc = 'A CDS index series version identifier, e.g. 1, 2, 3 etc.'} indexAnnexVersion: Integer[0..1];
  {meta::pure::profiles::doc.doc = 'A CDS index series annex date.'} indexAnnexDate: Date[0..1];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'A CDS index series annex source.'} indexAnnexSource: model::external::cdm::IndexAnnexSourceEnum[0..1];
  {meta::pure::profiles::doc.doc = 'Excluded reference entity.'} excludedReferenceEntity: model::external::cdm::LegalEntity[*];
  {meta::pure::profiles::doc.doc = 'This element contains CDS tranche terms.'} tranche: model::external::cdm::Tranche[0..1];
  {meta::pure::profiles::doc.doc = 'Used to specify the Relevant Settled Entity Matrix when there are settled entities at the time of the trade.'} settledEntityMatrix: model::external::cdm::SettledEntityMatrix[0..1];
  {meta::pure::profiles::doc.doc = 'Index Factor is the index version factor or percent, expressed as an absolute decimal value between 0 and 1, that multiplied by the original notional amount yields the notional amount covered by the seller of protection.'} indexFactor: Float[0..1];
  {meta::pure::profiles::doc.doc = 'Seniority of debt instruments comprising the index.'} seniority: model::external::cdm::CreditSeniorityEnum[0..1];
}

Class FpML::model::CreditEventNotice
{
  {meta::pure::profiles::doc.doc = 'Pointer style references to a party identifier defined elsewhere in the document. The notifying party is the party that notifies the other party when a credit event has occurred by means of a credit event notice. If more than one party is referenced as being the notifying party then either party may notify the other of a credit event occurring. ISDA 2003 Term: Notifying Party.'} notifyingParty: FpML::model::NotifyingParty[0..1];
  {meta::pure::profiles::doc.doc = 'Inclusion of this business center element implies that Greenwich Mean Time in Section 3.3 of the 2003 ISDA Credit Derivatives Definitions is replaced by the local time of the city indicated by the businessCenter element value.'} businessCenter: FpML::model::BusinessCenter[0..1];
  {meta::pure::profiles::doc.doc = 'A specified condition to settlement. Publicly available information means information that reasonably confirms any of the facts relevant to determining that a credit event or potential repudiation/moratorium, as applicable, has occurred. The ISDA defined list (2003) is the market standard and is considered comprehensive, and a minimum of two differing public sources must have published the relevant information, to declare a Credit Event. ISDA 2003 Term: Notice of Publicly Available Information Applicable.'} publiclyAvailableInformation: FpML::model::PubliclyAvailableInformation[0..1];
}

Class {meta::pure::profiles::doc.doc = 'The data type used for describing the type or purpose of a resource, e.g. \'Confirmation\'.'} FpML::model::ResourceType
[
  c1_length: $this.resourceTypeScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  resourceTypeScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the time by which a demand for the Transfer of Eligible Credit Support (IM) or Posted Credit Support (IM) needs to be made in order for the transfer to take place in accordance with the Transfer Timing provisions. ISDA 2016 English Law Credit Support Deed for Initial Margin, paragraph 13, General Principles, (d)(iii): Notification Time. | ISDA 2016 Japanese Law Credit Support Annex for Initial Margin, paragraph 13, General Principles, (e)(iii): Notification Time. | ISDA 2016 New York Law Credit Support Annex for Initial Margin, paragraph 13, General Principles, (d)(iii): Notification Time.'} model::external::cdm::NotificationTime
{
  {meta::pure::profiles::doc.doc = 'The parties\' Notification Time election.'} partyElections: model::external::cdm::NotificationTimeElection[2];
  {meta::pure::profiles::doc.doc = 'The determination of whether reference is made to dispute resolution notification timing in the agreement.'} disputeNotificationReference: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'The determination of whether transfer timing language is applicable or not.'} transferTimingProviso: Boolean[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A primitive event is defined by one and only one atomic change in state of a trade. An example of this is a contract formation where the legal terms of the contact are added to the trade. A Primitive event contains a before and after state where the before is a reference to another after state of a primitive event in order to preserve lineage.'} model::external::cdm::PrimitiveEvent
[
  one_of_constraint: ((((((((((($this.execution->isNotEmpty() && $this.contractFormation->isEmpty()) && $this.split->isEmpty()) && $this.quantityChange->isEmpty()) && $this.reset->isEmpty()) && $this.termsChange->isEmpty()) && $this.transfer->isEmpty()) || (((((($this.contractFormation->isNotEmpty() && $this.execution->isEmpty()) && $this.split->isEmpty()) && $this.quantityChange->isEmpty()) && $this.reset->isEmpty()) && $this.termsChange->isEmpty()) && $this.transfer->isEmpty())) || (((((($this.split->isNotEmpty() && $this.execution->isEmpty()) && $this.contractFormation->isEmpty()) && $this.quantityChange->isEmpty()) && $this.reset->isEmpty()) && $this.termsChange->isEmpty()) && $this.transfer->isEmpty())) || (((((($this.quantityChange->isNotEmpty() && $this.execution->isEmpty()) && $this.contractFormation->isEmpty()) && $this.split->isEmpty()) && $this.reset->isEmpty()) && $this.termsChange->isEmpty()) && $this.transfer->isEmpty())) || (((((($this.reset->isNotEmpty() && $this.execution->isEmpty()) && $this.contractFormation->isEmpty()) && $this.split->isEmpty()) && $this.quantityChange->isEmpty()) && $this.termsChange->isEmpty()) && $this.transfer->isEmpty())) || (((((($this.termsChange->isNotEmpty() && $this.execution->isEmpty()) && $this.contractFormation->isEmpty()) && $this.split->isEmpty()) && $this.quantityChange->isEmpty()) && $this.reset->isEmpty()) && $this.transfer->isEmpty())) || (((((($this.transfer->isNotEmpty() && $this.execution->isEmpty()) && $this.contractFormation->isEmpty()) && $this.split->isEmpty()) && $this.quantityChange->isEmpty()) && $this.reset->isEmpty()) && $this.termsChange->isEmpty())
]
{
  execution: model::external::cdm::ExecutionPrimitive[0..1];
  contractFormation: model::external::cdm::ContractFormationPrimitive[0..1];
  split: model::external::cdm::SplitPrimitive[0..1];
  quantityChange: model::external::cdm::QuantityChangePrimitive[0..1];
  reset: model::external::cdm::ResetPrimitive[0..1];
  termsChange: model::external::cdm::TermsChangePrimitive[0..1];
  transfer: model::external::cdm::TransferPrimitive[0..1];
}

Class model::external::cdm::CreditEventNotice
{
  {meta::pure::profiles::doc.doc = 'The notifying party is the party that notifies the other party when a credit event has occurred by means of a credit event notice. If more than one party is referenced as being the notifying party then either party may notify the other of a credit event occurring. ISDA 2003 Term: Notifying Party.'} notifyingParty: model::external::cdm::CounterpartyRoleEnum[1..2];
  {meta::pure::profiles::doc.doc = 'Inclusion of this business center element implies that Greenwich Mean Time in Section 3.3 of the 2003 ISDA Credit Derivatives Definitions is replaced by the local time of the city indicated by the businessCenter element value.'} businessCenter: model::external::cdm::BusinessCenterEnum[0..1];
  {meta::pure::profiles::doc.doc = 'A specified condition to settlement. Publicly available information means information that reasonably confirms any of the facts relevant to determining that a credit event or potential repudiation/moratorium, as applicable, has occurred. The ISDA defined list (2003) is the market standard and is considered comprehensive, and a minimum of two differing public sources must have published the relevant information, to declare a Credit Event. ISDA 2003 Term: Notice of Publicly Available Information Applicable.'} publiclyAvailableInformation: model::external::cdm::PubliclyAvailableInformation[0..1];
}

Class FpML::model::RateSourcePage
[
  c1_length: $this.rateSourcePageScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  rateSourcePageScheme: String[0..1];
  value: String[1];
}

Class model::external::cdm::Term
{
  unit: String[1];
  val: String[1];
}

Class FpML::model::Obligations
[
  c1_length: $this.excluded->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.othReferenceEntityObligations->forAll(x: String[1]|$x->length() >= 1),
  c3_choice: ($this.fullFaithAndCreditObLiability->isNotEmpty() && ($this.generalFundObligationLiability->isEmpty() && $this.revenueObligationLiability->isEmpty())) || (($this.fullFaithAndCreditObLiability->isEmpty() && ($this.generalFundObligationLiability->isNotEmpty() && $this.revenueObligationLiability->isEmpty())) || ($this.fullFaithAndCreditObLiability->isEmpty() && ($this.generalFundObligationLiability->isEmpty() && $this.revenueObligationLiability->isNotEmpty())))
]
{
  {meta::pure::profiles::doc.doc = 'Used in both obligations and deliverable obligations to represent a class or type of securities which apply. ISDA 2003 Term: Obligation Category/Deliverable Obligation Category'} category: FpML::model::ObligationCategoryEnum[0..1];
  {meta::pure::profiles::doc.doc = 'An obligation and deliverable obligation characteristic. An obligation that ranks at least equal with the most senior Reference Obligation in priority of payment or, if no Reference Obligation is specified in the related Confirmation, the obligations of the Reference Entity that are senior. ISDA 2003 Term: Not Subordinated'} notSubordinated: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'An obligation and deliverable obligation characteristic. The currency or currencies in which an obligation or deliverable obligation must be payable. ISDA 2003 Term: Specified Currency'} specifiedCurrency: FpML::model::SpecifiedCurrency[0..1];
  {meta::pure::profiles::doc.doc = 'An obligation and deliverable obligation characteristic. Any obligation that is not primarily (majority) owed to a Sovereign or Supranational Organization. ISDA 2003 Term: Not Sovereign Lender'} notSovereignLender: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'An obligation and deliverable obligation characteristic. Any obligation that is payable in any currency other than the domestic currency. Domestic currency is either the currency so specified or, if no currency is specified, the currency of (a) the reference entity, if the reference entity is a sovereign, or (b) the jurisdiction in which the relevant reference entity is organised, if the reference entity is not a sovereign. ISDA 2003 Term: Not Domestic Currency'} notDomesticCurrency: FpML::model::NotDomesticCurrency[0..1];
  {meta::pure::profiles::doc.doc = 'An obligation and deliverable obligation characteristic. If the reference entity is a Sovereign, this means any obligation that is not subject to the laws of the reference entity. If the reference entity is not a sovereign, this means any obligation that is not subject to the laws of the jurisdiction of the reference entity. ISDA 2003 Term: Not Domestic Law'} notDomesticLaw: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'An obligation and deliverable obligation characteristic. Indicates whether or not the obligation is quoted, listed or ordinarily purchased and sold on an exchange. ISDA 2003 Term: Listed'} listed: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'An obligation and deliverable obligation characteristic. Any obligation other than an obligation that was intended to be offered for sale primarily in the domestic market of the relevant Reference Entity. This specifies that the obligation must be an internationally recognized bond. ISDA 2003 Term: Not Domestic Issuance'} notDomesticIssuance: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'An obligation and deliverable obligation characteristic. Defined in the ISDA published additional provisions for U.S. Municipal as Reference Entity. ISDA 2003 Term: Full Faith and Credit Obligation Liability'} fullFaithAndCreditObLiability: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'An obligation and deliverable obligation characteristic. Defined in the ISDA published additional provisions for U.S. Municipal as Reference Entity. ISDA 2003 Term: General Fund Obligation Liability'} generalFundObligationLiability: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'An obligation and deliverable obligation characteristic. Defined in the ISDA published additional provisions for U.S. Municipal as Reference Entity. ISDA 2003 Term: Revenue Obligation Liability'} revenueObligationLiability: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'NOTE: Only allowed as an obligation charcteristic under ISDA Credit 1999. In essence Not Contingent means the repayment of principal cannot be dependant on a formula/index, i.e. to prevent the risk of being delivered an instrument that may never pay any element of principal, and to ensure that the obligation is interest bearing (on a regular schedule). ISDA 2003 Term: Not Contingent'} notContingent: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'A free format string to specify any excluded obligations or deliverable obligations, as the case may be, of the reference entity or excluded types of obligations or deliverable obligations. ISDA 2003 Term: Excluded Obligations/Excluded Deliverable Obligations'} excluded: String[0..1];
  {meta::pure::profiles::doc.doc = 'This element is used to specify any other obligations of a reference entity in both obligations and deliverable obligations. The obligations can be specified free-form. ISDA 2003 Term: Other Obligations of a Reference Entity'} othReferenceEntityObligations: String[0..1];
  {meta::pure::profiles::doc.doc = 'Applies to Loan CDS, to indicate what lien level is appropriate for a deliverable obligation. Applies to European Loan CDS, to indicate the Ranking of the obligation. Example: a 2nd lien Loan CDS would imply that the deliverable obligations are 1st or 2nd lien loans.'} designatedPriority: FpML::model::Lien[0..1];
  {meta::pure::profiles::doc.doc = 'An obligation and deliverable obligation characteristic. Defined in the ISDA published Standard Terms Supplement for use with CDS Transactions on Leveraged Loans. ISDA 2003 Term: Cash Settlement Only.'} cashSettlementOnly: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'An obligation and deliverable obligation characteristic. Defined in the ISDA published Standard Terms Supplement for use with CDS Transactions on Leveraged Loans. ISDA 2003 Term: Delivery of Commitments.'} deliveryOfCommitments: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'An obligation and deliverable obligation characteristic. Defined in the ISDA published Standard Terms Supplement for use with CDS Transactions on Leveraged Loans. ISDA 2003 Term: Continuity.'} continuity: Boolean[0..1];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'Defines the terms required to compute and settle a cash settlement amount according to a fixing value, including the fixing source, fixing method and fixing date. In FpML, PhysicalSettlementTerms and CashSettlementTerms extend SettlementTerms. In the CDM, this extension paradigm has not been used because SettlementTerms class has been used for purposes related to securities transactions, while it is not used as such in the FpML standard (i.e. only as an abstract construct.'} model::external::cdm::CashSettlementTerms
{
  {meta::pure::profiles::doc.doc = 'Specifies the type of cash settlement method: cash price, yield curve etc.'} cashSettlementMethod: model::external::cdm::CashSettlementMethodEnum[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the parameters required to obtain a valuation, including the source, quotation method (bid, mid etc.) and any applicable quotation amount.'} valuationMethod: model::external::cdm::ValuationMethod[0..1];
  {meta::pure::profiles::doc.doc = 'Defines the different methods to specify a valuation date, as used for cash settlement. The Single / Multiple ValuationDate is used for the determination of recovery in a credit event, the RelativeDateOffset is used for cash-settled option, and FxFixingDate is used for cross-currency settlement.'} valuationDate: model::external::cdm::ValuationDate[0..1];
  {meta::pure::profiles::doc.doc = 'The time of the cash settlement valuation date when the cash settlement amount will be determined according to the cash settlement method, if the parties have not otherwise been able to agree the cash settlement amount. When using quations, this is the time of day in the specified business center when the calculation agent seeks quotations for an amount of the reference obligation for purposes of cash settlement. ISDA 2003 Term: Valuation Time.'} valuationTime: model::external::cdm::BusinessCenterTime[0..1];
  {meta::pure::profiles::doc.doc = 'The amount paid by the seller to the buyer for cash settlement on the cash settlement date. If not otherwise specified, would typically be calculated as 100 (or the Reference Price) minus the price of the Reference Obligation (all expressed as a percentage) times Floating Rate Payer Calculation Amount. ISDA 2003 Term: Cash Settlement Amount.'} cashSettlementAmount: model::external::cdm::Money[0..1];
  {meta::pure::profiles::doc.doc = 'Used for fixed recovery, specifies the recovery level, determined at contract formation, to be applied on a default. Used to calculate the amount paid by the seller to the buyer for cash settlement on the cash settlement date. Amount calculation is (1 minus the Recovery Factor) multiplied by the Floating Rate Payer Calculation Amount. The currency will be derived from the Floating Rate Payer Calculation Amount.'} recoveryFactor: Float[0..1];
  {meta::pure::profiles::doc.doc = 'Used for Recovery Lock, to indicate whether fixed Settlement is Applicable or Not Applicable. If Buyer fails to deliver an effective Notice of Physical Settlement on or before the Buyer NOPS Cut-off Date, and if Seller fails to deliver an effective Seller NOPS on or before the Seller NOPS Cut-off Date, then either: (a) if Fixed Settlement is specified in the related Confirmation as not applicable, then the Seller NOPS Cut-off Date shall be the Termination Date; or (b) if Fixed Settlement is specified in the related Confirmation as applicable, then: (i) if the Fixed Settlement Amount is a positive number, Seller shall, subject to Section 3.1 (except for the requirement of satisfaction of the Notice of Physical Settlement Condition to Settlement), pay the Fixed Settlement Amount to Buyer on the Fixed Settlement Payment Date; and (ii) if the Fixed Settlement Amount is a negative number, Buyer shall, subject to Section 3.1 (except for the requirement of satisfaction of the Notice of Physical Settlement Condition to Settlement), pay the absolute value of the Fixed Settlement Amount to Seller on the Fixed Settlement Payment Date.'} fixedSettlement: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'Indicates whether accrued interest is included (true) or not (false). For cash settlement this specifies whether quotations should be obtained inclusive or not of accrued interest. For physical settlement this specifies whether the buyer should deliver the obligation with an outstanding principal balance that includes or excludes accrued interest. ISDA 2003 Term: Include/Exclude Accrued Interest.'} accruedInterest: Boolean[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Specifies Currency with ID attribute.'} FpML::model::IdentifiedCurrency extends FpML::model::Currency
{
  id: String[0..1];
}

Class model::external::cdm::ContractualMatrix
{
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'Identifies the form of applicable matrix.'} matrixType: model::external::cdm::MatrixTypeEnum[1];
  {meta::pure::profiles::doc.doc = 'Specifies the publication date of the applicable version of the matrix. When this element is omitted, the ISDA supplemental language for incorporation of the relevant matrix will generally define rules for which version of the matrix is applicable.'} publicationDate: Date[0..1];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'Defines any applicable key into the relevant matrix. For example, the Transaction Type would be the single term required for the Credit Derivatives Physical Settlement Matrix. This element should be omitted in the case of the 2000 ISDA Definitions Settlement Matrix for Early Termination and Swaptions.'} matrixTerm: model::external::cdm::MatrixTermEnum[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Defines a Spread Type Scheme to identify a long or short spread value.'} FpML::model::SpreadScheduleType
[
  c1_length: $this.spreadScheduleTypeScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  spreadScheduleTypeScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specificy methodologies to compute sensitivities specific to the agreement.'} model::external::cdm::SensitivityMethodologies
{
  {meta::pure::profiles::doc.doc = 'The methodology to compute sensitivities to equity indices, funds and ETFs for the purpose of Initial Margin agreements.'} sensitivityToEquity: model::external::cdm::SensitivityMethodology[1];
  {meta::pure::profiles::doc.doc = 'The methodology to compute sensitivities to commodity indices for the purpose of Initial Margin agreements.'} sensitivityToCommodity: model::external::cdm::SensitivityMethodology[1];
}

Class {meta::pure::profiles::doc.doc = 'Defines a commodity business day calendar.'} FpML::model::CommodityBusinessCalendar
[
  c1_length: $this.commodityBusinessCalendarScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  commodityBusinessCalendarScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'A type for defining a series of dates that shall be subject to adjustment if they would otherwise fall on a day that is not a business day in the specified business centers, together with the convention for adjusting the dates.'} FpML::model::AdjustableDates
{
  {meta::pure::profiles::doc.doc = 'A date subject to adjustment.'} unadjustedDate: FpML::model::IdentifiedDate[*];
  {meta::pure::profiles::doc.doc = 'The business day convention and financial business centers used for adjusting the date if it would otherwise fall on a day that is not a business dat in the specified business centers.'} dateAdjustments: FpML::model::BusinessDayAdjustments[0..1];
  {meta::pure::profiles::doc.doc = 'The date once the adjustment has been performed. (Note that this date may change if the business center holidays change).'} adjustedDate: FpML::model::IdentifiedDate[*];
  id: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Either a bond or convertible bond.'} model::external::cdm::BondChoiceModel
[
  one_of_constraint: ($this.bond->isNotEmpty() && $this.convertibleBond->isEmpty()) || ($this.convertibleBond->isNotEmpty() && $this.bond->isEmpty())
]
{
  bond: model::external::cdm::Bond[0..1];
  convertibleBond: model::external::cdm::ConvertibleBond[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Represents a class to allow specification of different types of Quasi Government collateral.'} model::external::cdm::QuasiGovernmentIssuerType
{
  {meta::pure::profiles::doc.doc = 'True if sovereign entity (e.g. not separate legal personality from sovereign) or false if non-sovereign entity (e.g. separate legal personality from sovereign).'} sovereignEntity: Boolean[1];
  {meta::pure::profiles::doc.doc = 'Applies to non-sovereign entity (e.g. separate legal personality from sovereign).  True if entity has recourse to sovereign (e.g. debt guaranteed by government).  False if entity does not have recourse to sovereign.'} sovereignRecourse: Boolean[0..1];
}

Class model::external::cdm::Othr
{
  finInstrmGnlAttrbts: model::external::cdm::FinInstrmGnlAttrbts[1];
  derivInstrmAttrbts: model::external::cdm::DerivInstrmAttrbts[1];
  id: String[1];
  schmeNm: model::external::cdm::SchmeNm[1];
}

Class {meta::pure::profiles::doc.doc = 'Information source specific to Foreign Exchange products.'} model::external::cdm::FxInformationSource extends model::external::cdm::InformationSource
{
  {meta::pure::profiles::doc.doc = 'The time that the fixing will be taken along with a business center to define the time zone.'} fixingTime: model::external::cdm::BusinessCenterTime[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type defining a currency amount.'} FpML::model::Money extends FpML::model::MoneyBase
{
  {meta::pure::profiles::doc.doc = 'The monetary quantity in currency units.'} amount: Decimal[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Defines a fallback rate, which is a rate to be used in place of a publish term rate (such as an ibor rate) when that term rate ceases to be usable, whether because it ceases to be published or is deemed non-representative by regulator.'} FpML::model::FallbackRate
[
  c1_choice: ($this.effectiveDate->isNotEmpty() && ($this.floatingRateIndex->isEmpty() && ($this.calculationParameters->isEmpty() && $this.spreadAdjustment->isEmpty()))) || $this.floatingRateIndex->isNotEmpty()
]
{
  {meta::pure::profiles::doc.doc = 'The date upon which the fallback rate becomes effective. This means that any rate observation for that date or for any subsequent date would use the fallback rate rather than the originally defined rate. This date will typically immediately follow the cessation of publication of the original term rate but could occur before that (e.g. if the original rate is deemed non-representative prior to cessation of publication). If the effective date occurs within a calculation period with multiple rate observations (because of averaging), observations prior to the effective date will use the original floating rate index, and observations on or after the effective date will use the fallback rate.'} effectiveDate: StrictDate[0..1];
  {meta::pure::profiles::doc.doc = 'The benchmark rate used for computing the fallback rate. Typically this will be a risk-free overnight rate.'} floatingRateIndex: FpML::model::FloatingRateIndex[0..1];
  {meta::pure::profiles::doc.doc = 'This provides a representation of the approximate value of the fallback rate, i.e. a calculated rate that quite closely mimics the value anticipated to be published by the fallback rate administrator (once the spread adjustment is added).'} calculationParameters: FpML::model::CalculationParameters[0..1];
  {meta::pure::profiles::doc.doc = 'An amount to be added to the calculated value before subsequent use, in order to more closely replicate the original term rate, by adjusting for the economic or credit spread between risk-free rates and risky term rates.'} spreadAdjustment: Decimal[0..1];
  id: String[0..1];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'A class for defining a date that shall be subject to adjustment if it would otherwise fall on a day that is not a business day in the specified business centers, together with the convention for adjusting the date.'} model::external::cdm::AdjustableDate
[
  AdjustableDateChoice: (($this.dateAdjustments->isEmpty() && $this.dateAdjustmentsReference->isEmpty()) || ($this.dateAdjustments->isNotEmpty() && $this.dateAdjustmentsReference->isEmpty())) || ($this.dateAdjustmentsReference->isNotEmpty() && $this.dateAdjustments->isEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'A date subject to adjustment. While in FpML this date is required, this cardinality constraint has been relaxed as part of the CDM in order to support the FRA representation, which effective and termination dates are specified in FpML as adjusted dates.'} unadjustedDate: Date[0..1];
  {meta::pure::profiles::doc.doc = 'The business day convention and financial business centers used for adjusting the date if it would otherwise fall on a day that is not a business date in the specified business centers.'} dateAdjustments: model::external::cdm::BusinessDayAdjustments[0..1];
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'A pointer style reference to date adjustments defined elsewhere in the document.'} dateAdjustmentsReference: model::external::cdm::BusinessDayAdjustments[0..1];
  <<model::external::cdm::metadata.id>> {meta::pure::profiles::doc.doc = 'The date once the adjustment has been performed. (Note that this date may change if the business center holidays change).'} adjustedDate: Date[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Reference to an individual.'} FpML::model::PersonReference extends FpML::model::Reference
{
  href: String[1];
}

Class FpML::model::SettlementMethod
[
  c1_length: $this.settlementMethodScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  settlementMethodScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify Control Agreement language related to delivery of a Notice of Exclusive Control'} model::external::cdm::ControlAgreementNecEvent
{
  controlAgreementNecEventElection: model::external::cdm::ControlAgreementNecEventElection[2];
}

Class {meta::pure::profiles::doc.doc = 'Combines several events for testing purposes, intended to be used in downstream processes.'} model::external::cdm::EventTestBundle
{
  event: model::external::cdm::WorkflowStep[2..*];
  computedAmount: model::external::cdm::ComputedAmount[*];
}

Class {meta::pure::profiles::doc.doc = 'A type defining the ISDA calculation agent responsible for performing duties as defined in the applicable product definitions.'} FpML::model::CalculationAgent
[
  c1_choice: ($this.calculationAgentPartyReference->isNotEmpty() && $this.calculationAgentParty->isEmpty()) || ($this.calculationAgentPartyReference->isEmpty() && $this.calculationAgentParty->isNotEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'A pointer style reference to a party identifier defined elsewhere in the document. The party referenced is the ISDA Calculation Agent for the trade. If more than one party is referenced then the parties are assumed to be co-calculation agents, i.e. they have joint responsibility.'} calculationAgentPartyReference: FpML::model::PartyReference[*];
  {meta::pure::profiles::doc.doc = 'The ISDA calculation agent responsible for performing duties as defined in the applicable product definitions. For example, the Calculation Agent may be defined as being the Non-exercising Party.'} calculationAgentParty: FpML::model::CalculationAgentPartyEnum[0..1];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'A class to specify a legal entity, with a required name and an optional entity identifier (such as the LEI).'} model::external::cdm::LegalEntity
{
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'A legal entity identifier (e.g. RED entity code).'} entityId: String[*];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'The legal entity name.'} name: String[1];
}

Class {meta::pure::profiles::doc.doc = 'A class defining the ISDA calculation agent responsible for performing duties as defined in the applicable product definitions.'} model::external::cdm::CalculationAgent
[
  CalculationAgent_choice: (($this.calculationAgentPartyEnum->isEmpty() && $this.calculationAgentParty->isEmpty()) || ($this.calculationAgentPartyEnum->isNotEmpty() && $this.calculationAgentParty->isEmpty())) || ($this.calculationAgentParty->isNotEmpty() && $this.calculationAgentPartyEnum->isEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'Specifies the party which is the ISDA Calculation Agent for the trade. If more than one party is referenced then the parties are assumed to be co-calculation agents, i.e. they have joint responsibility.'} calculationAgentParty: model::external::cdm::AncillaryRoleEnum[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the ISDA calculation agent responsible for performing duties as defined in the applicable product definitions. For example, the Calculation Agent may be defined as being the Non-exercising Party.'} calculationAgentPartyEnum: model::external::cdm::PartyDeterminationEnum[0..1];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'The city in which the office through which ISDA Calculation Agent is acting for purposes of the transaction is located The short-form confirm for a trade that is executed under a Sovereign or Asia Pacific Master Confirmation Agreement ( MCA ), does not need to specify the Calculation Agent. However, the confirm does need to specify the Calculation Agent City. This is due to the fact that the MCA sets the value for Calculation Agent but does not set the value for Calculation Agent City.'} calculationAgentBusinessCenter: model::external::cdm::BusinessCenterEnum[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type giving the choice between defining a series of dates as an explicit list of dates together with applicable adjustments, or as relative to some other series of (anchor) dates, or as a set of factors to specify periodic occurences.'} FpML::model::AdjustableRelativeOrPeriodicDates2
[
  c1_choice: ($this.adjustableDates->isNotEmpty() && ($this.relativeDates->isEmpty() && $this.periodicDates->isEmpty())) || (($this.adjustableDates->isEmpty() && ($this.relativeDates->isNotEmpty() && $this.periodicDates->isEmpty())) || ($this.adjustableDates->isEmpty() && ($this.relativeDates->isEmpty() && $this.periodicDates->isNotEmpty())))
]
{
  {meta::pure::profiles::doc.doc = 'A series of dates that shall be subject to adjustment if they would otherwise fall on a day that is not a business day in the specified business centers, together with the convention for adjusting the date.'} adjustableDates: FpML::model::AdjustableDates[0..1];
  {meta::pure::profiles::doc.doc = 'A series of dates specified as some offset to another series of dates (the anchor dates).'} relativeDates: FpML::model::RelativeDates[0..1];
  periodicDates: FpML::model::PeriodicDates[0..1];
  id: String[0..1];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'State-full representation of a Portfolio that describes all the positions held at a given time, in various states which can be either traded, settled, etc., with lineage information to the previous state'} model::external::cdm::PortfolioState
[
  Initialisation: if($this.lineage.portfolioStateReference->isEmpty(), |$this.positions->isEmpty() && $this.lineage.eventReference->isEmpty(), |true)
]
{
  {meta::pure::profiles::doc.doc = 'The list of positions, each containing a Quantity and a Product.'} positions: model::external::cdm::Position[*];
  {meta::pure::profiles::doc.doc = 'Pointer to the previous PortfolioState and new Event(s) leading to the current (new) state. Previous PortfolioState in the Lineage can be Null in case this is the start of the chain of Events.'} lineage: model::external::cdm::Lineage[1];
}

Class {meta::pure::profiles::doc.doc = 'Type to hold the processing parameters that should be or were used to calculate a floating amount.  These parameters can vary over a schedule so this type holds the acutal values applicable to this calculation.'} model::external::cdm::FloatingRateProcessingParameters
{
  {meta::pure::profiles::doc.doc = 'The rate to be applied for the initial period.'} initialRate: model::external::cdm::Price[0..1];
  {meta::pure::profiles::doc.doc = 'floating rate multiplier.'} multiplier: Float[0..1];
  {meta::pure::profiles::doc.doc = 'spread to be added to the floating rate.'} spread: Float[0..1];
  {meta::pure::profiles::doc.doc = 'US rate treatment (Bond Equivalent Yield or Money Market Yield, if applicable.'} treatment: model::external::cdm::RateTreatmentEnum[0..1];
  {meta::pure::profiles::doc.doc = 'capt to be applied to the floating rate.'} capRate: Float[0..1];
  {meta::pure::profiles::doc.doc = 'floor to be applied to the floating rate.'} floorRate: Float[0..1];
  {meta::pure::profiles::doc.doc = 'THe final rate rounding to be applied.'} rounding: model::external::cdm::Rounding[0..1];
  {meta::pure::profiles::doc.doc = 'How to handle negative interest rates.'} negativeTreatment: model::external::cdm::NegativeInterestRateTreatmentEnum[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type refining the role a role played by a party in one or more transactions. Examples include \'AllPositions\' and \'SomePositions\' for Guarantor. This can be extended to provide custom types.'} FpML::model::PartyRoleType
[
  c1_length: $this.partyRoleTypeScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  partyRoleTypeScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify each of the party elections with respect to the Calculation Date Location. ISDA 2016 English Law Credit Support Deed for Initial Margin, paragraph 13, General Principles, (d)(i): Calculation Date Location. | ISDA 2016 Japanese Law Credit Support Annex for Initial Margin, paragraph 13, General Principles, (e)(i): Calculation Date Location. | ISDA 2016 New York Law Credit Support Annex for Initial Margin, paragraph 13, General Principles, (d)(i): Calculation Date Location.'} model::external::cdm::CalculationDateLocationElection
[
  CalculationDateLocationElection_choice: ($this.businessCenter->isNotEmpty() && $this.customLocation->isEmpty()) || ($this.customLocation->isNotEmpty() && $this.businessCenter->isEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'The elective party.'} party: model::external::cdm::CounterpartyRoleEnum[1];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'The Calculation Date Location when specified as a business center which corresponds to the FpML list of business centers or can be mapped to it.'} businessCenter: model::external::cdm::BusinessCenterEnum[0..1];
  {meta::pure::profiles::doc.doc = 'The Calculation Date Location when specified a location which doesn\'t correspond to the FpML list of business centers or cannot be mapped to it.'} customLocation: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A taxonomic classification, or typology, for a security (e.g. ISO 10962 CFI code).'} FpML::model::InstrumentType
[
  c1_length: $this.instrumentTypeScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() >= 1,
  c3_length: $this.value->length() <= 255
]
{
  instrumentTypeScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the Additional Representation. ISDA 2016 Credit Support Annex for Initial Margin, paragraph 13, General Principles, (o): Additional Representation(s).'} model::external::cdm::AdditionalRepresentation
{
  {meta::pure::profiles::doc.doc = 'A qualification as to whether the Additional Representation is applicable.'} partyElection: model::external::cdm::AdditionalRepresentationElection[2];
  {meta::pure::profiles::doc.doc = 'A supplemental custom election that might be specified by the parties for the purpose of specifying the Additional Representation.'} customElection: String[0..1];
}

Class FpML::model::ActualPrice
{
  {meta::pure::profiles::doc.doc = 'Specifies the currency associated with the net price. This element is not present if the price is expressed in percentage terms (as specified through the priceExpression element).'} currency: FpML::model::Currency[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the net price amount. In the case of a fixed income security or a convertible bond, this price includes the accrued interests.'} amount: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies whether the price is expressed in absolute or relative terms.'} priceExpression: FpML::model::PriceExpressionEnum[0..1];
  id: String[0..1];
}

Class model::external::cdm::Prsn
{
  ctryOfBrnch: String[1];
  othr: model::external::cdm::Othr[1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the conditions under which a party and its custodian(s) are entitled to hold collateral. ISDA 2016 Credit Support Annex for Variation Margin, paragraph 13, (h)(i): Eligibility to Hold Posted Collateral (VM) Custodians (VM).'} model::external::cdm::EligibilityToHoldCollateral
{
  {meta::pure::profiles::doc.doc = 'The condition(s) required by a party from the other party to hold its posted collateral.'} partyTerms: model::external::cdm::HoldingPostedCollateralEnum[1..*];
  {meta::pure::profiles::doc.doc = 'The restrictions that might be required by a party from the other party\'s custodian agent to hold its posted collateral.'} custodianTerms: model::external::cdm::CustodianTerms[0..1];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'The restrictions that might be required by a party from the other party in terms of country(ies) where collateral can be held.'} eligibleCountry: String[*];
}

Class {meta::pure::profiles::doc.doc = 'Specification of a floating rate option as a floating rate index and tenor.'} model::external::cdm::FloatingRateOption
{
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'The reference index that is used to specify the floating interest rate. The FpML standard maintains the list of such indices, which are positioned as enumeration values as part of the CDM.'} floatingRateIndex: model::external::cdm::FloatingRateIndexEnum[0..1];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'The reference index that is used to specify the inflation interest rate. The FpML standard maintains the list of such indices, which are positioned as enumeration values as part of the CDM.'} inflationRateIndex: model::external::cdm::InflationRateIndexEnum[0..1];
  {meta::pure::profiles::doc.doc = 'The ISDA Designated Maturity, i.e. the floating rate tenor.'} indexTenor: model::external::cdm::Period[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A scheme identifying the type of currency that was used to report the value of an asset. For example, this could contain values like SettlementCurrency, QuoteCurrency, UnitCurrency, etc.'} FpML::model::ReportingCurrencyType
[
  c1_length: $this.reportingCurrencyTypeScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  reportingCurrencyTypeScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'A reference to the return swap notional amount.'} FpML::model::ReturnSwapNotionalAmountReference extends FpML::model::Reference
{
  href: String[1];
}

Class model::external::cdm::PhysicalSettlementPeriod
[
  one_of_constraint: ((($this.businessDaysNotSpecified->isNotEmpty() && $this.businessDays->isEmpty()) && $this.maximumBusinessDays->isEmpty()) || (($this.businessDays->isNotEmpty() && $this.businessDaysNotSpecified->isEmpty()) && $this.maximumBusinessDays->isEmpty())) || (($this.maximumBusinessDays->isNotEmpty() && $this.businessDaysNotSpecified->isEmpty()) && $this.businessDays->isEmpty()),
  BusinessDays: if($this.businessDays->isNotEmpty(), |$this.businessDays >= 0, |true),
  MaximumBusinessDays: if($this.maximumBusinessDays->isNotEmpty(), |$this.maximumBusinessDays >= 0, |true)
]
{
  {meta::pure::profiles::doc.doc = 'An explicit indication that a number of business days are not specified and therefore ISDA fallback provisions should apply.'} businessDaysNotSpecified: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'A number of business days. Its precise meaning is dependant on the context in which this element is used. ISDA 2003 Term: Business Day.'} businessDays: Integer[0..1];
  {meta::pure::profiles::doc.doc = 'A maximum number of business days. Its precise meaning is dependant on the context in which this element is used. Intended to be used to limit a particular ISDA fallback provision.'} maximumBusinessDays: Integer[0..1];
}

Class <<model::external::cdm::metadata.key>> model::external::cdm::PaymentDetail
{
  paymentDate: model::external::cdm::AdjustableOrRelativeDate[0..1];
  {meta::pure::profiles::doc.doc = 'The calculation rule.'} paymentRule: model::external::cdm::PaymentRule[1];
  {meta::pure::profiles::doc.doc = 'A fixed payment amount.'} paymentAmount: model::external::cdm::Money[0..1];
}

Class FpML::model::MasterAgreementType
[
  c1_length: $this.masterAgreementTypeScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  masterAgreementTypeScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'A type defining a time frequency, e.g. one day, three months. Used for specifying payment or calculation frequencies at which the value T (Term) is applicable.'} FpML::model::Frequency
{
  {meta::pure::profiles::doc.doc = 'A time period multiplier, e.g. 1, 2 or 3 etc. If the period value is T (Term) then periodMultiplier must contain the value 1.'} periodMultiplier: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'A time period, e.g. a day, week, month, year or term of the stream.'} period: FpML::model::PeriodExtendedEnum[0..1];
  id: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'An identifier used to identify a single component cashflow.'} FpML::model::CashflowId
[
  c1_length: $this.cashflowIdScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() >= 1,
  c3_length: $this.value->length() <= 255
]
{
  cashflowIdScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'This type contains all the constituent weight and reference information.'} model::external::cdm::ReferencePoolItem
[
  SettlementChoice: (($this.cashSettlementTermsReference->isEmpty() && $this.physicalSettlementTermsReference->isEmpty()) || ($this.cashSettlementTermsReference->isNotEmpty() && $this.physicalSettlementTermsReference->isEmpty())) || ($this.physicalSettlementTermsReference->isNotEmpty() && $this.cashSettlementTermsReference->isEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'Describes the weight of each of the constituents within the basket. If not provided, it is assumed to be equal weighted.'} constituentWeight: model::external::cdm::ConstituentWeight[0..1];
  referencePair: model::external::cdm::ReferencePair[1];
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'Reference to the documentation terms applicable to this item.'} protectionTermsReference: model::external::cdm::ProtectionTerms[0..1];
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'Reference to the cash settlement terms applicable to this item.'} cashSettlementTermsReference: model::external::cdm::CashSettlementTerms[0..1];
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'Reference to the physical settlement terms applicable to this item.'} physicalSettlementTermsReference: model::external::cdm::PhysicalSettlementTerms[0..1];
}

Class FpML::model::MatrixType
[
  c1_length: $this.matrixTypeScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  matrixTypeScheme: String[0..1];
  value: String[1];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'A data defining:  the parameters used to generate the reset dates schedule and associated fixing dates. The reset dates are the dates on which the new index value (which is observed on the fixing date) is applied for each period and on which the interest rate hence begins to accrue.'} model::external::cdm::ResetDates
[
  RateCutOffDaysOffset: if($this.rateCutOffDaysOffset->isNotEmpty(), |$this.rateCutOffDaysOffset.periodMultiplier < 0, |true),
  WeeklyPeriod: if($this.resetFrequency.period == model::external::cdm::PeriodExtendedEnum.W, |$this.resetFrequency.weeklyRollConvention->isNotEmpty(), |true),
  NonWeeklyPeriod: if(!($this.resetFrequency.period == model::external::cdm::PeriodExtendedEnum.W), |$this.resetFrequency.weeklyRollConvention->isEmpty(), |true)
]
{
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'A pointer style reference to the associated calculation period dates component defined elsewhere in the document.'} calculationPeriodDatesReference: model::external::cdm::CalculationPeriodDates[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies whether the reset dates are determined with respect to each adjusted calculation period start date or adjusted calculation period end date. If the reset frequency is specified as daily this element must not be included.'} resetRelativeTo: model::external::cdm::ResetRelativeToEnum[0..1];
  {meta::pure::profiles::doc.doc = 'The initial fixing date.'} initialFixingDate: model::external::cdm::InitialFixingDate[0..1];
  {meta::pure::profiles::doc.doc = 'The fixing dates are the dates on which the index values are observed. The fixing dates are specified by reference to the reset date through business days offset and an associated set of financial business centers. Normally these offset calculation rules will be those specified in the ISDA definition for the relevant floating rate index (ISDA\'s Floating Rate Option). However, non-standard offset calculation rules may apply for a trade if mutually agreed by the principal parties to the transaction.'} fixingDates: model::external::cdm::RelativeDateOffset[0..1];
  {meta::pure::profiles::doc.doc = 'This attribute is not part of the FpML ResetDate, and has been added as part of the CDM to support the credit derivatives final fixing date.'} finalFixingDate: model::external::cdm::AdjustableDate[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the number of business days before the period end date when the rate cut-off date is assumed to apply. The financial business centers associated with determining the rate cut-off date are those specified in the reset dates adjustments. The rate cut-off number of days must be a negative integer (a value of zero would imply no rate cut off applies in which case the rateCutOffDaysOffset element should not be included). The relevant rate for each reset date in the period from, and including, a rate cut-off date to, but excluding, the next applicable period end date (or, in the case of the last calculation period, the termination date) will (solely for purposes of calculating the floating amount payable on the next applicable payment date) be deemed to be the relevant rate in effect on that rate cut-off date. For example, if rate cut-off days for a daily averaging deal is -2 business days, then the refix rate applied on (period end date - 2 days) will also be applied as the reset on (period end date - 1 day), i.e. the actual number of reset dates remains the same but from the rate cut-off date until the period end date, the same refix rate is applied. Note that in the case of several calculation periods contributing to a single payment, the rate cut-off is assumed only to apply to the final calculation period contributing to that payment. The day type associated with the offset must imply a business days offset.'} rateCutOffDaysOffset: model::external::cdm::Offset[0..1];
  {meta::pure::profiles::doc.doc = 'The frequency at which the reset dates occur. In the case of a weekly reset frequency, also specifies the day of the week that the reset occurs. If the reset frequency is greater than the calculation period frequency then this implies that more than one reset is established for each calculation period and some form of rate averaging is applicable.'} resetFrequency: model::external::cdm::ResetFrequency[0..1];
  {meta::pure::profiles::doc.doc = 'The definition of the business day convention and financial business centers used for adjusting the reset date if it would otherwise fall on a day that is not a business day in the specified business center.'} resetDatesAdjustments: model::external::cdm::BusinessDayAdjustments[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the Credit Support Obligations applicable to the Initial Margin Credit Support Annex and which are common among the English, Japanese and New York governing laws. This excludes the Other Eligible Support election (which only applies to the Japanese Law and New York Law agreements) and the Transfer Timing election (which only applies to the English Law and the New York Law agreements). ISDA 2016 English Law Credit Support Deed for Initial Margin, paragraph 13, General Principles, (c): Credit Support Obligations. | ISDA 2016 Japanese Law Credit Support Annex for Initial Margin, paragraph 13, General Principles, (d): Credit Support Obligations. | ISDA 2016 New York Law Credit Support Annex for Initial Margin, paragraph 13, General Principles, (c): Credit Support Obligations.'} model::external::cdm::CreditSupportObligations
{
  {meta::pure::profiles::doc.doc = 'Delivery Amount (VM) has the meaning specified in Paragraph 3(a), unless otherwise specified here.'} deliveryAmount: String[0..1];
  {meta::pure::profiles::doc.doc = 'Return Amount (VM) has the meaning specified in Paragraph 3(a), unless otherwise specified here.'} returnAmount: String[0..1];
  {meta::pure::profiles::doc.doc = 'The selection of Margin Approach applicable to the agreement.'} marginApproach: model::external::cdm::MarginApproach[0..1];
  {meta::pure::profiles::doc.doc = 'The Other Eligible Support election. If not specified, this election is deemed as not applicable.'} otherEligibleSupport: String[0..1];
  {meta::pure::profiles::doc.doc = 'The amount of net exposure that a party is willing to bear in relation to the other party before it requires asking for collateral. ISDA 2016 English Law Credit Support Deed for Initial Margin, paragraph 13, General Principles, (c)(vi)(A): Threshold. | ISDA 2016 Japanese Law Credit Support Annex for Initial Margin, paragraph 13, General Principles, (d)(vi)(A): Threshold. | ISDA 2016 New York Law Credit Support Annex for Initial Margin, paragraph 13, General Principles, (c)(vi)(A): Threshold.'} threshold: model::external::cdm::Threshold[1];
  {meta::pure::profiles::doc.doc = 'The net amount of exposure reached before collateral has to be posted or returned. ISDA 2016 English Law Credit Support Deed for Initial Margin, paragraph 13, General Principles, (c)(vi)(B): Minimum Transfer Amount. | ISDA 2016 Japanese Law Credit Support Annex for Initial Margin, paragraph 13, General Principles, (d)(vi)(B): Minimum Transfer Amount. | ISDA 2016 New York Law Credit Support Annex for Initial Margin, paragraph 13, General Principles, (c)(vi)(B): Minimum Transfer Amount.'} minimumTransferAmount: model::external::cdm::MinimumTransferAmount[1];
  {meta::pure::profiles::doc.doc = 'The rounding methodology applicable to the Delivery Amount and the Return Amount in terms of nearest integral multiple of Base Currency units. ISDA 2016 English Law Credit Support Deed for Initial Margin, paragraph 13, General Principles, (c)(vi)(C): Rounding. | ISDA 2016 Japanese Law Credit Support Annex for Initial Margin, paragraph 13, General Principles, (d)(vi)(C): Rounding. | ISDA 2016 New York Law Credit Support Annex for Initial Margin, paragraph 13, General Principles, (c)(vi)(C): Rounding.'} rounding: model::external::cdm::CollateralRounding[0..1];
  {meta::pure::profiles::doc.doc = 'The time by which the transfer of collateral must take place when different from the Regular Settlement Day as a result of parties\' election.'} bespokeTransferTiming: model::external::cdm::BespokeTransferTiming[0..1];
  {meta::pure::profiles::doc.doc = 'The specification of Credit Support Obligations applicable to Variation Margin agreements.'} creditSupportObligationsVariationMargin: model::external::cdm::CreditSupportObligationsVariationMargin[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Observation point for trigger.'} model::external::cdm::TriggerEvent
{
  {meta::pure::profiles::doc.doc = 'A derivative schedule.'} schedule: model::external::cdm::AveragingSchedule[*];
  {meta::pure::profiles::doc.doc = 'The trigger Dates.'} triggerDates: model::external::cdm::DateList[0..1];
  {meta::pure::profiles::doc.doc = 'The trigger level'} trigger: model::external::cdm::Trigger[1];
  {meta::pure::profiles::doc.doc = 'The feature payment, i.e. the payment made following trigger occurrence.'} featurePayment: model::external::cdm::FeaturePayment[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Defines a scheme of values for specifiying if the bond has a variable coupon, step-up/down coupon or a zero-coupon.'} FpML::model::CouponType
[
  c1_length: $this.couponTypeScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  couponTypeScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'A code identifying a business day calendar location. A business day calendar location is drawn from the list identified by the business day calendar location scheme.'} FpML::model::BusinessCenter
[
  c1_length: $this.businessCenterScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  businessCenterScheme: String[0..1];
  id: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'Identifies an index by referencing a product identifier.'} model::external::cdm::Index extends model::external::cdm::ProductBase
{
  {meta::pure::profiles::doc.doc = 'Indentifies the index product type.'} indexType: model::external::cdm::IndexTypeEnum[1];
}

Class {meta::pure::profiles::doc.doc = 'A description of the legal agreement(s) and definitions that document a party\'s relationships with other parties'} FpML::model::PartyRelationshipDocumentation
[
  c1_choice: ($this.masterAgreement->isNotEmpty() && ($this.creditSupportAgreement->isEmpty() && $this.agreement->isEmpty())) || (($this.masterAgreement->isEmpty() && ($this.creditSupportAgreement->isNotEmpty() && $this.agreement->isEmpty())) || ($this.masterAgreement->isEmpty() && ($this.creditSupportAgreement->isEmpty() && $this.agreement->isNotEmpty())))
]
{
  {meta::pure::profiles::doc.doc = 'A agreement executed between two parties that includes or references the related party.'} masterAgreement: FpML::model::MasterAgreement[0..1];
  {meta::pure::profiles::doc.doc = 'An agreement executed between two parties intended to govern collateral arrangement for OTC derivatives transactions between those parties, and that references the related party.'} creditSupportAgreement: FpML::model::CreditSupportAgreement[0..1];
  {meta::pure::profiles::doc.doc = 'An agrement that references the related party.'} agreement: FpML::model::GenericAgreement[0..1];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'Specifies the information required for inclusion in a securities lending billing invoice.'} model::external::cdm::SecurityLendingInvoice
{
  {meta::pure::profiles::doc.doc = 'The party issuing the invoice'} sendingParty: model::external::cdm::Party[1];
  {meta::pure::profiles::doc.doc = 'The party receiving the invoice'} receivingParty: model::external::cdm::Party[1];
  {meta::pure::profiles::doc.doc = 'The starting date of the period described by this invoice'} billingStartDate: Date[1];
  {meta::pure::profiles::doc.doc = 'The ending date of the period described by this invoice'} billingEndDate: Date[1];
  {meta::pure::profiles::doc.doc = 'The billing records contained within the invoice'} billingRecord: model::external::cdm::BillingRecord[1..*];
  {meta::pure::profiles::doc.doc = 'The billing summaries contained within the invoice'} billingSummary: model::external::cdm::BillingSummary[1..*];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the custodian and custody account details for each party to the agreement.'} model::external::cdm::Custodian
{
  {meta::pure::profiles::doc.doc = 'The party specific elections.'} partyElection: model::external::cdm::CustodianElection[2];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify Collateral Valuation Agent terms.'} model::external::cdm::CollateralValuationAgent
{
  {meta::pure::profiles::doc.doc = 'The parties Collateral Valuation Agent Elections.'} partyElection: model::external::cdm::CollateralValuationAgentElection[0..2];
}

Class {meta::pure::profiles::doc.doc = 'Characterises the type of cashflow, which can result from either a scheduled or a non-scheduled lifecycle event.'} model::external::cdm::CashflowType
{
  {meta::pure::profiles::doc.doc = 'Type of cashflow corresponding to a scheduled event.'} cashflowType: model::external::cdm::CashflowTypeEnum[0..1];
  {meta::pure::profiles::doc.doc = 'Type of cashflow corresponding to a non-scheduled event, where a price must be agreed between the parties.'} cashPrice: model::external::cdm::CashPrice[0..1];
  {meta::pure::profiles::doc.doc = 'Whether the cashflow is gross, net or a commission, if any.'} grossOrNet: model::external::cdm::GrossOrNetEnum[0..1];
  priceExpression: model::external::cdm::PriceExpressionEnum[0..1];
}

Class {meta::pure::profiles::doc.doc = 'An exchange traded fund whose price depends on exchange traded constituents.'} FpML::model::ExchangeTradedFund extends FpML::model::ExchangeTradedCalculatedPrice
[
  c1_length: $this.fundManager->forAll(x: String[1]|$x->length() >= 1)
]
{
  {meta::pure::profiles::doc.doc = 'Specifies the fund manager that is in charge of the fund.'} fundManager: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the fixed interest rate, floating interest rate or inflation rate.'} model::external::cdm::RateSpecification
[
  one_of_constraint: ((($this.fixedRate->isNotEmpty() && $this.floatingRate->isEmpty()) && $this.inflationRate->isEmpty()) || (($this.floatingRate->isNotEmpty() && $this.fixedRate->isEmpty()) && $this.inflationRate->isEmpty())) || (($this.inflationRate->isNotEmpty() && $this.fixedRate->isEmpty()) && $this.floatingRate->isEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'The fixed rate or fixed rate specification expressed as explicit fixed rates and dates.'} fixedRate: model::external::cdm::FixedRateSpecification[0..1];
  {meta::pure::profiles::doc.doc = 'The floating interest rate specification, which includes the definition of the floating rate index. the tenor, the initial value, and, when applicable, the spread, the rounding convention, the averaging method and the negative interest rate treatment.'} floatingRate: model::external::cdm::FloatingRateSpecification[0..1];
  {meta::pure::profiles::doc.doc = 'An inflation rate calculation definition.'} inflationRate: model::external::cdm::InflationRateSpecification[0..1];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'A class to specify an organizational unit.'} model::external::cdm::BusinessUnit
{
  {meta::pure::profiles::doc.doc = 'A name used to describe the organizational unit'} name: String[1];
  {meta::pure::profiles::doc.doc = 'An identifier used to uniquely identify the organizational unit'} identifier: model::external::cdm::Identifier[0..1];
  {meta::pure::profiles::doc.doc = 'The contact information for such business unit, when different from the contact information associated with the party.'} contactInformation: model::external::cdm::ContactInformation[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Characterise the asset pool behind an asset backed bond.'} FpML::model::AssetPool
{
  {meta::pure::profiles::doc.doc = 'The version number'} version: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'Optionally it is possible to specify a version effective date when a versionId is supplied.'} effectiveDate: FpML::model::IdentifiedDate[0..1];
  {meta::pure::profiles::doc.doc = 'The part of the mortgage that is outstanding on trade inception, i.e. has not been repaid yet as principal. It is expressed as a multiplier factor to the morgage: 1 means that the whole mortage amount is outstanding, 0.8 means that 20% has been repaid.'} initialFactor: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'The part of the mortgage that is currently outstanding. It is expressed similarly to the initial factor, as factor multiplier to the mortgage. This term is formally defined as part of the \'ISDA Standard Terms Supplement for use with credit derivatives transactions on mortgage-backed security with pas-as-you-go or physical settlement\'.'} currentFactor: Decimal[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Reference to a full FpML product.'} FpML::model::ProductReference extends FpML::model::Reference
{
  href: String[1];
}

Class {meta::pure::profiles::doc.doc = 'A class to represent the various set of timestamps that can be associated with lifecycle events, as a collection of [dateTime, qualifier].'} model::external::cdm::EventTimestamp
{
  {meta::pure::profiles::doc.doc = 'The CDM specifies that the zoned date time is to be expressed in accordance with ISO 8601, either as UTC as an offset to UTC.'} dateTime: model::external::cdm::zonedDateTime[1];
  {meta::pure::profiles::doc.doc = 'The timestamp qualifier is specified through an enumeration because the experience of integrating the DTCC and CME data representations suggests that a wide set of timestamps are currently utilized among service providers, while there is not at present an objective set of criteria that could help suggest a defined set of timestamps as part of the CDM. At some future point, one possible baseline could be developed from the review of the set of timestamps specified across regulatory regimes and regulations (incl. regulations such as high frequency trading). Also, the integration with a further set of implementations and the specification of business workflows such as clearing as part of the CDM development should help confirm the implementation approach in this respect.'} qualification: model::external::cdm::EventTimestampQualificationEnum[1];
}

Class {meta::pure::profiles::doc.doc = 'Payment made following trigger occurence.'} FpML::model::FeaturePayment extends FpML::model::PaymentBase
[
  c1_range: $this.amount->forAll(x: Decimal[1]|$x >= 0)
]
{
  {meta::pure::profiles::doc.doc = 'A reference to the party responsible for making the payments defined by this structure.'} payerPartyReference: FpML::model::PartyReference[0..1];
  {meta::pure::profiles::doc.doc = 'A reference to the account responsible for making the payments defined by this structure.'} payerAccountReference: FpML::model::AccountReference[0..1];
  {meta::pure::profiles::doc.doc = 'A reference to the party that receives the payments corresponding to this structure.'} receiverPartyReference: FpML::model::PartyReference[0..1];
  {meta::pure::profiles::doc.doc = 'A reference to the account that receives the payments corresponding to this structure.'} receiverAccountReference: FpML::model::AccountReference[0..1];
  {meta::pure::profiles::doc.doc = 'The trigger level percentage. A value expressed in percentage units i.e. 5 means 5%.'} levelPercentage: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'The monetary quantity in currency units.'} amount: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'The feature payment time.'} time: FpML::model::TimeTypeEnum[0..1];
  {meta::pure::profiles::doc.doc = 'The currency in which an amount is denominated.'} currency: FpML::model::Currency[0..1];
  {meta::pure::profiles::doc.doc = 'The feature payment date.'} featurePaymentDate: FpML::model::AdjustableOrRelativeDate[0..1];
}

Class <<meta::pure::profiles::typemodifiers.abstract>> {meta::pure::profiles::doc.doc = 'Base type for options starting with the 4-3 release, until we refactor the schema as part of the 5-0 release series.'} FpML::model::OptionBaseExtended extends FpML::model::OptionBase
[
  c1_range: $this.optionEntitlement->forAll(x: Decimal[1]|$x > 0),
  c2_range: $this.numberOfOptions->forAll(x: Decimal[1]|$x > 0)
]
{
  {meta::pure::profiles::doc.doc = 'The option premium payable by the buyer to the seller.'} premium: FpML::model::Premium[0..1];
  {meta::pure::profiles::doc.doc = 'An placeholder for the actual option exercise definitions.'} exercise: FpML::model::Exercise[0..1];
  {meta::pure::profiles::doc.doc = 'A set of parameters defining procedures associated with the exercise.'} exerciseProcedure: FpML::model::ExerciseProcedure[0..1];
  {meta::pure::profiles::doc.doc = 'An Option feature such as quanto, asian, barrier, knock.'} feature: FpML::model::OptionFeature[0..1];
  notionalReference: FpML::model::NotionalAmountReference[0..1];
  notionalAmount: FpML::model::Money[0..1];
  {meta::pure::profiles::doc.doc = 'The number of units of underlyer per option comprised in the option transaction.'} optionEntitlement: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'Currency of the relevant bonds to which one option relates. For Bond Options this element should be used to define the currency of the bonds instead of the currency element present in the Bond underlyer.'} entitlementCurrency: FpML::model::Currency[0..1];
  {meta::pure::profiles::doc.doc = 'The number of options comprised in the option transaction.'} numberOfOptions: Decimal[0..1];
  settlementType: FpML::model::SettlementTypeEnum[0..1];
  settlementDate: FpML::model::AdjustableOrRelativeDate[0..1];
  {meta::pure::profiles::doc.doc = 'Settlement Amount'} settlementAmount: FpML::model::Money[0..1];
  {meta::pure::profiles::doc.doc = 'Settlement Currency for use where the Settlement Amount cannot be known in advance'} settlementCurrency: FpML::model::Currency[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the parties to which the provisions of Paragraph 11(g) of the ISDA 2016 Credit Support Annex for Variation Margin will apply to. ISDA 2016 Credit Support Annex for Variation Margin, paragraph 13, (c)(iii): Legally Ineligible Credit Support (VM).'} model::external::cdm::IneligibleCreditSupport
{
  {meta::pure::profiles::doc.doc = 'Total Ineligibility Date has the meaning specified in Paragraph 11(g), unless otherwise specified here.'} totalIneligibilityDate: String[0..1];
  {meta::pure::profiles::doc.doc = 'Transfer Ineligibility Date has the meaning specified in Paragraph 11(g), unless otherwise specified here.'} transferIneligibilityDate: String[0..1];
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'The parties to which the provisions of Paragraph 11(g) of the ISDA 2016 Credit Support Annex for Variation Margin will apply to, as the Secured Party. ISDA 2016 Credit Support Annex for Variation Margin, paragraph 13, (c)(iii): Legally Ineligible Credit Support (VM).'} specifiedParty: model::external::cdm::Party[0..2];
}

Class {meta::pure::profiles::doc.doc = 'This holds the rate calculation defaults applicable for a floating rate index.'} model::external::cdm::FloatingRateIndexCalculationDefaults
{
  {meta::pure::profiles::doc.doc = 'The ISDA FRO category (e.g. screen rate or calculated rate).'} category: model::external::cdm::FloatingRateIndexCategoryEnum[0..1];
  {meta::pure::profiles::doc.doc = 'The ISDA FRO style (e.g. term rate, swap rate, etc).'} indexStyle: model::external::cdm::FloatingRateIndexStyleEnum[0..1];
  {meta::pure::profiles::doc.doc = 'The ISDA FRO calculation method (e.g. OIS Compounding).'} method: model::external::cdm::FloatingRateIndexCalculationMethodEnum[0..1];
  {meta::pure::profiles::doc.doc = 'The default fixing details.'} fixing: model::external::cdm::FloatingRateIndexFixingDetails[0..1];
  {meta::pure::profiles::doc.doc = 'The default day count fraction.'} dayCountFraction: model::external::cdm::DayCountFractionEnum[0..1];
  {meta::pure::profiles::doc.doc = 'The default fixing time parameters.'} fixingTime: model::external::cdm::FloatingRateIndexFixingTime[0..1];
  {meta::pure::profiles::doc.doc = 'The default fixing offset parameters.'} fixingOffset: model::external::cdm::FloatingRateIndexFixingOffset[0..1];
  {meta::pure::profiles::doc.doc = 'The default applicable business days.'} applicableBusinessDays: model::external::cdm::BusinessCenters[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A collection of workflow steps which together makeup an entire workflow sequence.'} model::external::cdm::Workflow
{
  steps: model::external::cdm::WorkflowStep[1..*];
}

Class model::external::cdm::SpecifiedCurrency
{
  {meta::pure::profiles::doc.doc = 'Indicates whether the specified currency provision is applicable.'} applicable: Boolean[1];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'The currency in which the specified currency is denominated. The list of valid currencies is not presently positioned as an enumeration as part of the CDM because that scope is limited to the values specified by ISDA and FpML. As a result, implementers have to make reference to the relevant standard, such as the ISO 4217 standard for currency codes.'} currency: String[0..1];
}

Class <<model::external::cdm::metadata.key, model::external::cdm::metadata.template>> {meta::pure::profiles::doc.doc = 'A class to specify the contractual products\' economic terms, alongside their product identification and product taxonomy. The contractual product class is meant to be used across the pre-execution, execution and (as part of the Contract) post-execution lifecycle contexts.'} model::external::cdm::ContractualProduct
{
  {meta::pure::profiles::doc.doc = 'The product identification value(s) that might be associated with a contractual product. The CDM provides the ability to associate several product identification methods with a product.'} productIdentification: model::external::cdm::ProductIdentification[0..1];
  {meta::pure::profiles::doc.doc = 'The product taxonomy value(s) associated with a contractual product.'} productTaxonomy: model::external::cdm::ProductTaxonomy[*];
  {meta::pure::profiles::doc.doc = 'The economic terms associated with a contractual product, i.e. the set of features that are price-forming.'} economicTerms: model::external::cdm::EconomicTerms[1];
}

Class {meta::pure::profiles::doc.doc = 'A class describing the method for obtaining a settlement rate, specified through either an information source (page), a settlement rate option (fixing) or by using quotes from reference banks.'} model::external::cdm::ValuationSource
{
  <<model::external::cdm::metadata.address>> {meta::pure::profiles::doc.doc = 'Defines the two currencies for an FX trade and the quotation relationship between the two currencies.  This attribute was formerly part of \'fxSettlementTerms\', which is now being harmonised into a common \'CashSettlementTerms\' that includes a \'ValuationDate\'.'} quotedCurrencyPair: model::external::cdm::QuotedCurrencyPair[0..1];
  {meta::pure::profiles::doc.doc = 'The information source where a published or displayed market rate will be obtained, e.g. Telerate Page 3750.'} informationSource: model::external::cdm::FxSpotRateSource[0..1];
  {meta::pure::profiles::doc.doc = 'The rate option to use for the fixing. Currently only applicable to foreign exchange fixing in case of cross-currency settlement.'} settlementRateOption: model::external::cdm::SettlementRateOption[0..1];
  {meta::pure::profiles::doc.doc = 'A container for a set of reference institutions that may be called upon to provide rate quotations as part of the method to determine the applicable cash settlement amount. If institutions are not specified, it is assumed that reference institutions will be agreed between the parties on the exercise date, or in the case of swap transaction to which mandatory early termination is applicable, the cash settlement valuation date.'} referenceBanks: model::external::cdm::ReferenceBanks[0..1];
  {meta::pure::profiles::doc.doc = 'Holds an identifier for the reference entity that is agreed by both parties as a basis for cash settlement calculations. This could be a dealer from whom quotations are obtained by the calculation agent on the reference obligation for purposes of cash settlement in a credit event. ISDA 2003 Term: Dealer. This could be the clearing organization (CCP, DCO) to which the trade should be cleared, as applicable for cash-settled swaptions.'} dealerOrCCP: model::external::cdm::AncillaryEntity[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A date which can be referenced elsewhere.'} FpML::model::IdentifiedDate
{
  id: String[0..1];
  value: StrictDate[1];
}

Class {meta::pure::profiles::doc.doc = 'Type for reporting observations that went into the final reported rate.'} model::external::cdm::CalculatedRateObservations
{
  {meta::pure::profiles::doc.doc = 'The observation date upon which the rate is observed.'} observationDates: Date[*];
  {meta::pure::profiles::doc.doc = 'The corresponding weight for each date.'} weights: Float[*];
  {meta::pure::profiles::doc.doc = 'The value observed for that date'} observedRates: Float[*];
  {meta::pure::profiles::doc.doc = 'The value after any processing, such as application of caps or floors.'} processedRates: Float[*];
}

Class {meta::pure::profiles::doc.doc = 'Specifies individual summaries within a billing invoice.'} model::external::cdm::BillingSummary
{
  {meta::pure::profiles::doc.doc = 'The settlement terms for the billing summary'} summaryTransfer: model::external::cdm::Transfer[0..1];
  {meta::pure::profiles::doc.doc = 'The account level for the billing summary.'} summaryAmountType: model::external::cdm::RecordAmountTypeEnum[1];
}

Class {meta::pure::profiles::doc.doc = 'This class represents the full set of price-forming features associated with a contractual product: the payout component, the notional/quantity, the effective and termination date and the date adjustment provisions when applying uniformily across the payout components. This class also includes the legal provisions which have valuation implications: cancelable provision, extendible provision, early termination provision and extraordinary events specification.'} model::external::cdm::EconomicTerms
[
  ExtraordinaryEvents: if($this.extraordinaryEvents->isNotEmpty(), |$this.payout.equityPayout->isNotEmpty(), |true),
  FpML_cd_30: if($this.payout.interestRatePayout.paymentDates.lastRegularPaymentDate->isNotEmpty() && $this.terminationDate->isNotEmpty(), |!($this.payout.interestRatePayout.paymentDates.lastRegularPaymentDate->map(d|$d < $this.terminationDate.adjustableDate.unadjustedDate)->contains(false)), |true),
  IndependentCalculationAgent: if($this.calculationAgent.calculationAgentParty->isNotEmpty(), |$this.calculationAgent.calculationAgentParty == model::external::cdm::AncillaryRoleEnum.CalculationAgentIndependent, |true)
]
{
  {meta::pure::profiles::doc.doc = 'The first day of the terms of the trade. This day may be subject to adjustment in accordance with a business day convention.'} effectiveDate: model::external::cdm::AdjustableOrRelativeDate[0..1];
  {meta::pure::profiles::doc.doc = 'The last day of the terms of the trade. This date may be subject to adjustments in accordance with the business day convention. It can also be specified in relation to another scheduled date (e.g. the last payment date).'} terminationDate: model::external::cdm::AdjustableOrRelativeDate[0..1];
  {meta::pure::profiles::doc.doc = 'The business day adjustment convention when it applies across all the payout components. This specification of the business day convention and financial business centers is used for adjusting any calculation period date if it would otherwise fall on a day that is not a business day in the specified business center.'} dateAdjustments: model::external::cdm::BusinessDayAdjustments[0..1];
  {meta::pure::profiles::doc.doc = 'The payout specifies the future cashflow computation methodology which characterizes a financial product.'} payout: model::external::cdm::Payout[1];
  {meta::pure::profiles::doc.doc = 'Parameters specifying provisions relating to the optional and mandatory early termination of a swap transaction.'} earlyTerminationProvision: model::external::cdm::EarlyTerminationProvision[0..1];
  {meta::pure::profiles::doc.doc = 'Cancelable and/or extendible provisions.'} optionProvision: model::external::cdm::OptionProvision[0..1];
  {meta::pure::profiles::doc.doc = '2018 ISDA CDM Equity Confirmation for Security Equity Swap: Extraordinary Events.'} extraordinaryEvents: model::external::cdm::ExtraordinaryEvents[0..1];
  {meta::pure::profiles::doc.doc = 'The ISDA calculation agent responsible for performing duties as defined in the applicable product definitions.'} calculationAgent: model::external::cdm::CalculationAgent[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type describing the whole set of possible underlyers: single underlyers or multiple underlyers, each of these having either security or index components.'} FpML::model::Underlyer
[
  c1_choice: ($this.singleUnderlyer->isNotEmpty() && $this.basket->isEmpty()) || ($this.singleUnderlyer->isEmpty() && $this.basket->isNotEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'Describes the swap\'s underlyer when it has only one asset component.'} singleUnderlyer: FpML::model::SingleUnderlyer[0..1];
  {meta::pure::profiles::doc.doc = 'Describes the swap\'s underlyer when it has multiple asset components.'} basket: FpML::model::Basket[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type for defining a time with respect to a business day calendar location. For example, 11:00am London time.'} FpML::model::BusinessCenterTime
{
  {meta::pure::profiles::doc.doc = 'A time specified in hh:mm:ss format where the second component must be \'00\', e.g. 11am would be represented as 11:00:00.'} hourMinuteTime: String[0..1];
  businessCenter: FpML::model::BusinessCenter[0..1];
}

Class {meta::pure::profiles::doc.doc = 'The qualification of the option style: American, Bermuda or European. FpML implements those features as part of a substitution group.'} model::external::cdm::OptionStyle
[
  one_of_constraint: ((($this.americanExercise->isNotEmpty() && $this.bermudaExercise->isEmpty()) && $this.europeanExercise->isEmpty()) || (($this.bermudaExercise->isNotEmpty() && $this.americanExercise->isEmpty()) && $this.europeanExercise->isEmpty())) || (($this.europeanExercise->isNotEmpty() && $this.americanExercise->isEmpty()) && $this.bermudaExercise->isEmpty())
]
{
  americanExercise: model::external::cdm::AmericanExercise[0..1];
  bermudaExercise: model::external::cdm::BermudaExercise[0..1];
  europeanExercise: model::external::cdm::EuropeanExercise[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Class specifying the bond price as either clean or dirty in a bond valuation model.'} model::external::cdm::CleanOrDirtyPrice
{
  {meta::pure::profiles::doc.doc = 'The clean price and accruals presented separately.'} cleanPrice: model::external::cdm::CleanPrice[0..1];
  {meta::pure::profiles::doc.doc = 'The dirty price presented as a single number.'} dirtyPrice: Float[0..1];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'A data defining:  the adjusted dates associated with a particular exercise event.'} model::external::cdm::ExerciseEvent
{
  {meta::pure::profiles::doc.doc = 'The date on which the option exercise takes place. This date should already be adjusted for any applicable business day convention.'} adjustedExerciseDate: Date[1];
  {meta::pure::profiles::doc.doc = 'The effective date of the underlying swap associated with a given exercise date. This date should already be adjusted for any applicable business day convention.'} adjustedRelevantSwapEffectiveDate: Date[1];
  {meta::pure::profiles::doc.doc = 'The date by which the cash settlement amount must be agreed. This date should already be adjusted for any applicable business day convention.'} adjustedCashSettlementValuationDate: Date[0..1];
  {meta::pure::profiles::doc.doc = 'The date on which the cash settlement amount is paid. This date should already be adjusted for any applicable business day convention.'} adjustedCashSettlementPaymentDate: Date[0..1];
  {meta::pure::profiles::doc.doc = 'The date on which the exercise fee amount is paid. This date should already be adjusted for any applicable business day convention.'} adjustedExerciseFeePaymentDate: Date[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Specifies details for a trade to be increased as part of a reallocation event.'} model::external::cdm::IncreasedTrade
{
  {meta::pure::profiles::doc.doc = 'Specifies the trade to be increased.'} tradeState: model::external::cdm::TradeState[1];
  {meta::pure::profiles::doc.doc = 'Specifies the quantity(ies) to be increased on the trade.'} quantity: model::external::cdm::Quantity[1..*];
}

Class {meta::pure::profiles::doc.doc = 'Concrete type to support public/private identifiers and classification (ISIN, CFI, ...) for a security of unspecified type. Derived as no-operation extension on IdentifiedAsset (abstract base type)'} FpML::model::GenericSecurity extends FpML::model::GenericAsset
{
  {meta::pure::profiles::doc.doc = 'Trading currency of the underlyer when transacted as a cash instrument.'} currency: FpML::model::IdentifiedCurrency[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the issuer name of a fixed income security or convertible bond. The name is specified as an href into one of the party blocks.'} issuerPartyReference: FpML::model::PartyReference[0..1];
  {meta::pure::profiles::doc.doc = 'Credit quality type (e.g. SFTR specified types: \'INVG\' - Investment grade; \'NIVG\' - Non-investment grade; \'NOTR\' - Non-rated). Classifies the risk of the security. Note: \'NOAP\' - Not applicable value is indicated by the absence of the \'creditQuality\' element.'} creditQuality: FpML::model::CreditQuality[*];
  {meta::pure::profiles::doc.doc = 'Credit maturity. The date when the principal amount of a security becomes due and payable.'} maturity: StrictDate[0..1];
}

Class FpML::model::PaymentDetail extends FpML::model::PaymentBase
{
  {meta::pure::profiles::doc.doc = 'Payment date.'} paymentDate: FpML::model::AdjustableOrRelativeDate[0..1];
  {meta::pure::profiles::doc.doc = 'A fixed payment amount.'} paymentAmount: FpML::model::Money[0..1];
  {meta::pure::profiles::doc.doc = 'A structure defining the calculation rule of the independent amount. Users are supposed to use type substitution at PaymentRule. PaymentRule is abstract and it is supposed to be substituted by PercentageRule. There is the expectation that other rules will be created in the future to model other types of independent amount payment rules.'} paymentRule: FpML::model::PaymentRule[0..1];
}

Class FpML::model::NotDomesticCurrency
{
  {meta::pure::profiles::doc.doc = 'Indicates whether the not domestic currency provision is applicable.'} applicable: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'An explicit specification of the domestic currency.'} currency: FpML::model::Currency[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Trigger point at which feature is effective.'} model::external::cdm::Trigger
[
  Choice1: ((((($this.level->isNotEmpty() && $this.levelPercentage->isEmpty()) && $this.creditEvents->isEmpty()) && $this.creditEventsReference->isEmpty()) || ((($this.levelPercentage->isNotEmpty() && $this.level->isEmpty()) && $this.creditEvents->isEmpty()) && $this.creditEventsReference->isEmpty())) || ((($this.creditEvents->isNotEmpty() && $this.level->isEmpty()) && $this.levelPercentage->isEmpty()) && $this.creditEventsReference->isEmpty())) || ((($this.creditEventsReference->isNotEmpty() && $this.level->isEmpty()) && $this.levelPercentage->isEmpty()) && $this.creditEvents->isEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'The trigger level.'} level: Float[0..1];
  {meta::pure::profiles::doc.doc = 'The trigger level percentage.'} levelPercentage: Float[0..1];
  creditEvents: model::external::cdm::CreditEvents[0..1];
  <<model::external::cdm::metadata.reference>> creditEventsReference: model::external::cdm::CreditEvents[0..1];
  {meta::pure::profiles::doc.doc = 'The Triggering condition.'} triggerType: model::external::cdm::TriggerTypeEnum[0..1];
  {meta::pure::profiles::doc.doc = 'The valuation time type of knock condition.'} triggerTimeType: model::external::cdm::TriggerTimeTypeEnum[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the elections for the holding and using of posted collateral by the respective parties to the Credit Support Annex for Variation Margin. ISDA 2016 Credit Support Annex for Variation Margin, paragraph 13, (h): Holding and Using Posted Collateral (VM).'} model::external::cdm::HoldingAndUsingPostedCollateral
{
  {meta::pure::profiles::doc.doc = 'The parties\' elections for the holding and using of posted collateral.'} partyElection: model::external::cdm::HoldingAndUsingPostedCollateralElection[2];
}

Class FpML::model::CreditSupportAgreementType
[
  c1_length: $this.creditSupportAgreementTypeScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  creditSupportAgreementTypeScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'Reference to a party.'} FpML::model::PartyReference extends FpML::model::Reference
{
  href: String[1];
}

Class {meta::pure::profiles::doc.doc = 'A reference to the number of options.'} FpML::model::NumberOfOptionsReference extends FpML::model::Reference
{
  href: String[1];
}

Class {meta::pure::profiles::doc.doc = 'A data defining:  the adjusted dates associated with a mandatory early termination provision.'} model::external::cdm::MandatoryEarlyTerminationAdjustedDates
[
  FpML_ird_44: ($this.adjustedEarlyTerminationDate <= $this.adjustedCashSettlementValuationDate) && ($this.adjustedCashSettlementValuationDate <= $this.adjustedCashSettlementPaymentDate)
]
{
  {meta::pure::profiles::doc.doc = 'The early termination date that is applicable if an early termination provision is exercised. This date should already be adjusted for any applicable business day convention.'} adjustedEarlyTerminationDate: Date[1];
  {meta::pure::profiles::doc.doc = 'The date by which the cash settlement amount must be agreed. This date should already be adjusted for any applicable business day convention.'} adjustedCashSettlementValuationDate: Date[1];
  {meta::pure::profiles::doc.doc = 'The date on which the cash settlement amount is paid. This date should already be adjusted for any applicable business date convention.'} adjustedCashSettlementPaymentDate: Date[1];
}

Class {meta::pure::profiles::doc.doc = 'A reference to an asset, e.g. a portfolio, trade, or reference instrument..'} FpML::model::AnyAssetReference extends FpML::model::Reference
{
  href: String[1];
}

Class FpML::model::ProductId
[
  c1_length: $this.productIdScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() >= 1,
  c3_length: $this.value->length() <= 1023
]
{
  productIdScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'List of dateTimes.'} model::external::cdm::DateTimeList
{
  {meta::pure::profiles::doc.doc = 'The CDM specifies that the zoned date time is to be expressed in accordance with ISO 8601, either as UTC as an offset to UTC.'} dateTime: model::external::cdm::zonedDateTime[1..*];
}

Class {meta::pure::profiles::doc.doc = 'This class corresponds to the components of the FpML MessageHeader.model.'} model::external::cdm::MessageInformation
{
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'A unique identifier assigned to the message.'} messageId: String[1];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'The identifier for the originator of a message instance.'} sentBy: String[0..1];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'The identifier(s) for the recipient(s) of a message instance.'} sentTo: String[*];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'A unique identifier (within the specified coding scheme) giving the details of some party to whom a copy of this message will be sent for reference.'} copyTo: String[*];
}

Class FpML::model::SimpleCreditDefaultSwap extends FpML::model::UnderlyingAsset
{
  {meta::pure::profiles::doc.doc = 'The entity for which this is defined.'} referenceEntity: FpML::model::LegalEntity[0..1];
  {meta::pure::profiles::doc.doc = 'An XML reference a credit entity defined elsewhere in the document.'} creditEntityReference: FpML::model::LegalEntityReference[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the term of the simple CD swap, e.g. 5Y.'} term: FpML::model::Period[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the frequency at which the swap pays, e.g. 6M.'} paymentFrequency: FpML::model::Period[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A data to:  provide the ability to point to multiple payment nodes in the document through the unbounded paymentDatesReference.'} model::external::cdm::DateRelativeToCalculationPeriodDates
{
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'A set of href pointers to calculation period dates defined somewhere else in the document.'} calculationPeriodDatesReference: model::external::cdm::CalculationPeriodDates[1..*];
}

Class {meta::pure::profiles::doc.doc = 'A type describing a date when this date is defined in reference to another date through one or several date offsets.'} FpML::model::RelativeDateSequence
[
  c1_choice: ($this.businessCentersReference->isNotEmpty() && $this.businessCenters->isEmpty()) || ($this.businessCentersReference->isEmpty() && $this.businessCenters->isNotEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'Specifies the anchor as an href attribute. The href attribute value is a pointer style reference to the element or component elsewhere in the document where the anchor date is defined.'} dateRelativeTo: FpML::model::DateReference[0..1];
  dateOffset: FpML::model::DateOffset[*];
  {meta::pure::profiles::doc.doc = 'A pointer style reference to a set of financial business centers defined elsewhere in the document. This set of business centers is used to determine whether a particular day is a business day or not.'} businessCentersReference: FpML::model::BusinessCentersReference[0..1];
  businessCenters: FpML::model::BusinessCenters[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Represents a class to specify the credit notation as the combination of agency, notation, scale and debt type qualifications.'} model::external::cdm::CreditNotation
{
  {meta::pure::profiles::doc.doc = 'Specifies The credit agency to which the other variables (notation, scale, debt type) refer to.'} agency: model::external::cdm::CreditRatingAgencyEnum[1];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'Specifies The credit rating notation. As it varies among credit rating agencies, FpML doesn\'t specify a default scheme.'} notation: String[1];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'Specifies the credit rating scale, with a typical distinction between short term, long term. FpML doesn\'t specify a default scheme, which is hence not specified as an enumeration as part of the CDM.'} scale: String[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the credit rating debt type (e.g. long term, high yield, deposits, ...) associated with the credit rating notation and scale.'} debt: model::external::cdm::CreditRatingDebt[0..1];
  {meta::pure::profiles::doc.doc = 'Assesses the potential direction of a long-term credit rating over the intermediate term, which is generally up to two years for investment grade and generally up to one year for speculative grade.'} outlook: model::external::cdm::CreditRatingOutlookEnum[0..1];
  {meta::pure::profiles::doc.doc = 'Indicates the potential direction of a short-term or long-term rating. It focuses on identifiable events and short-term trends that cause ratings to be placed under special surveillance.'} creditWatch: model::external::cdm::CreditRatingCreditWatchEnum[0..1];
}

Class model::external::cdm::Sellr
{
  acctOwnr: model::external::cdm::AcctOwnr[1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the Automatic Early Termination provision applicable to a Master Agreement.'} model::external::cdm::AutomaticEarlyTermination
{
  {meta::pure::profiles::doc.doc = 'A boolean election to specify whether provided that, where a party is governed by a system of law which does not permit the termination of one or more Transactions to occur following an Event of Default specified in Section 5(a)(vii)(1), (3), (4), (5), (6) or, to extent analogous thereto, (8) ,then the Automatic Early Termination provisions of Section 6(a) shall apply to such party.'} fallbackAET: Boolean[1];
  {meta::pure::profiles::doc.doc = 'A boolean attribute to specify whether if an Early Termination Date occurs because Automatic Early Termination applies in respect of a party, the Defaulting Party shall indemnify the Non- defaulting Party, on demand, against any losses, costs, expenses or damages that the Non- defaulting Party incurs (to the extent not already taken into account in Section 6(e)) in relation to terminating, liquidating, establishing or re- establishing any hedge or related positions as result of movements of rates, indices, prices, yields, volatilities, spreads or other market data between the Early Termination Date and the Local Business Day on which the Non-defaulting Party becomes aware that the Early Termination Date has occurred'} indemnity: Boolean[1];
  {meta::pure::profiles::doc.doc = 'The party election specific to the Automatic Early Termination Clause.'} partyElection: model::external::cdm::AutomaticEarlyTerminationElection[0..2];
}

Class {meta::pure::profiles::doc.doc = 'This type represents a CDS Tranche.'} FpML::model::Tranche
{
  {meta::pure::profiles::doc.doc = 'Lower bound percentage of the loss that the Tranche can endure, expressed as a decimal. An attachment point of 5% would be represented as 0.05. The difference between Attachment and Exhaustion points is call the width of the Tranche. A schema facet to constraint the value between 0 to 1 will be introduced in FpML 4.3.'} attachmentPoint: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'Upper bound percentage of the loss that the Tranche can endure, expressed as a decimal. An exhaustion point of 5% would be represented as 0.05. The difference between Attachment and Exhaustion points is call the width of the Tranche. A schema facet to constraint the value between 0 to 1 will be introduced in FpML 4.3.'} exhaustionPoint: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'Outstanding Swap Notional Amount is defined at any time on any day, as the greater of: (a) Zero; If Incurred Recovery Amount Applicable: (b) The Original Swap Notional Amount minus the sum of all Incurred Loss Amounts and all Incurred Recovery Amounts (if any) determined under this Confirmation at or prior to such time.Incurred Recovery Amount not populated: (b) The Original Swap Notional Amount minus the sum of all Incurred Loss Amounts determined under this Confirmation at or prior to such time.'} incurredRecoveryApplicable: Boolean[0..1];
}

Class {meta::pure::profiles::doc.doc = 'The proposed collateral allocation.'} FpML::model::ProposedCollateralAllocation
{
  {meta::pure::profiles::doc.doc = 'Reference to a party.'} allocationPartyReference: FpML::model::PartyReference[0..1];
  {meta::pure::profiles::doc.doc = 'Reference to an account.'} allocationAccountReference: FpML::model::AccountReference[0..1];
  {meta::pure::profiles::doc.doc = 'Collateral allocation by value.'} collateralValueAllocation: FpML::model::CollateralValueAllocation[1];
}

Class {meta::pure::profiles::doc.doc = 'A type describing the strike price.'} FpML::model::Price
[
  c1_choice: ($this.determinationMethod->isNotEmpty() && $this.amountRelativeTo->isEmpty()) || (($this.determinationMethod->isEmpty() && ($this.grossPrice->isEmpty() && ($this.netPrice->isEmpty() && ($this.accruedInterestPrice->isEmpty() && ($this.fxConversion->isEmpty() && $this.amountRelativeTo->isNotEmpty()))))) || ($this.determinationMethod->isEmpty() && $this.amountRelativeTo->isEmpty()))
]
{
  {meta::pure::profiles::doc.doc = 'This optional component specifies the commission to be charged for executing the hedge transactions.'} commission: FpML::model::Commission[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the method according to which an amount or a date is determined.'} determinationMethod: FpML::model::DeterminationMethod[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the price of the underlyer, before commissions.'} grossPrice: FpML::model::ActualPrice[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the price of the underlyer, net of commissions.'} netPrice: FpML::model::ActualPrice[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the accrued interest that are part of the dirty price in the case of a fixed income security or a convertible bond. Expressed in percentage of the notional.'} accruedInterestPrice: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the currency conversion rate that applies to an amount. This rate can either be defined elsewhere in the document (case of a quanto swap), or explicitly described through this component.'} fxConversion: FpML::model::FxConversion[0..1];
  {meta::pure::profiles::doc.doc = 'The href attribute value will be a pointer style reference to the element or component elsewhere in the document where the anchor amount is defined.'} amountRelativeTo: FpML::model::AmountReference[0..1];
  {meta::pure::profiles::doc.doc = 'The net price excluding accrued interest. The \'Dirty Price\' for bonds is put in the \'netPrice\' element, which includes accrued interest. Thus netPrice - cleanNetPrice = accruedInterest. The currency and price expression for this field are the same as those for the (dirty) netPrice.'} cleanNetPrice: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'Allows information about how the price was quoted to be provided.'} quotationCharacteristics: FpML::model::QuotationCharacteristics[0..1];
}

Class FpML::model::UnderlyingAssetTranche
[
  c1_length: $this.loanTrancheScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  loanTrancheScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'A type defining a currency amount or a currency amount schedule.'} FpML::model::NonNegativeAmountSchedule extends FpML::model::NonNegativeSchedule
{
  {meta::pure::profiles::doc.doc = 'The currency in which an amount is denominated.'} currency: FpML::model::Currency[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type describing a financial formula, with its description and components.'} FpML::model::Formula
[
  c1_length: $this.formulaDescription->forAll(x: String[1]|$x->length() >= 1)
]
{
  {meta::pure::profiles::doc.doc = 'Text description of the formula'} formulaDescription: String[0..1];
  {meta::pure::profiles::doc.doc = 'An element for containing an XML representation of the formula. Defined using xsd:any currently for flexibility in choice of language (MathML, OpenMath)'} math: FpML::model::Math[0..1];
  {meta::pure::profiles::doc.doc = 'Elements describing the components of the formula. The name attribute points to a value used in the math element. The href attribute points to a value elsewhere in the document'} formulaComponent: FpML::model::FormulaComponent[*];
}

Class {meta::pure::profiles::doc.doc = 'A type to describe an institution (party) identified by means of a coding scheme and an optional name.'} FpML::model::ReferenceBank
[
  c1_length: $this.referenceBankName->forAll(x: String[1]|$x->length() >= 1)
]
{
  {meta::pure::profiles::doc.doc = 'An institution (party) identifier, e.g. a bank identifier code (BIC).'} referenceBankId: FpML::model::ReferenceBankId[0..1];
  {meta::pure::profiles::doc.doc = 'The name of the institution (party). A free format string. FpML does not define usage rules for the element.'} referenceBankName: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Specifies individual records within a billing invoice.'} model::external::cdm::BillingRecord
{
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'The trade for the individual billing record.'} tradeState: model::external::cdm::TradeState[1];
  {meta::pure::profiles::doc.doc = 'The settlement terms for the billing record'} recordTransfer: model::external::cdm::Transfer[1];
  {meta::pure::profiles::doc.doc = 'The starting date of the period described by this record'} recordStartDate: Date[1];
  {meta::pure::profiles::doc.doc = 'The ending date of the period described by this record'} recordEndDate: Date[1];
  {meta::pure::profiles::doc.doc = 'Indicates the minimum fee amount applied to the billing record, if any.'} minimumFee: model::external::cdm::Money[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify party specific elections when a Collateral Transfer Agreement is governed by French Law.'} model::external::cdm::FrenchLawAddendum
{
  {meta::pure::profiles::doc.doc = 'The qualification of whether the French Law Addendum is deemed applicable by the parties (True) or not (False).'} isApplicable: Boolean[1];
  {meta::pure::profiles::doc.doc = 'The parties French Law Addendum Elections.'} partyElection: model::external::cdm::FrenchLawAddendumElection[2];
}

Class {meta::pure::profiles::doc.doc = 'A type describing the method for obtaining a settlement rate.'} FpML::model::SettlementRateSource
[
  c1_choice: ($this.informationSource->isNotEmpty() && $this.cashSettlementReferenceBanks->isEmpty()) || ($this.informationSource->isEmpty() && $this.cashSettlementReferenceBanks->isNotEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'The information source where a published or displayed market rate will be obtained, e.g. Telerate Page 3750.'} informationSource: FpML::model::InformationSource[0..1];
  {meta::pure::profiles::doc.doc = 'A container for a set of reference institutions. These reference institutions may be called upon to provide rate quotations as part of the method to determine the applicable cash settlement amount. If institutions are not specified, it is assumed that reference institutions will be agreed between the parties on the exercise date, or in the case of swap transaction to which mandatory early termination is applicable, the cash settlement valuation date.'} cashSettlementReferenceBanks: FpML::model::CashSettlementReferenceBanks[0..1];
}

Class {meta::pure::profiles::doc.doc = 'This class corresponds to the FpML BuyerSeller.model construct.'} model::external::cdm::BuyerSeller
{
  {meta::pure::profiles::doc.doc = 'Buyer party that can be resolved as one of the two principal parties to the transaction. The party that buys this instrument, i.e. pays for this instrument and receives the rights defined by it. ISDA 2002 Equity Definitions section 1.18: `Buyer` means the party specified as such in the related Confirmation. | ISDA 2006 Definitions article 12.1 (b)(i) relating to a Swaption: \'Buyer\' means the party that will, on each Premium Payment Date, pay to Seller the Premium | ISDA 2006 Definitions article 12.1 (b)(ii) relating to Swap Transactions with applicable Early Termination: the party specified as such in the related Confirmation, or the Exercising Party if neither party is specified | ISDA 2006 Definitions article 12.1 (b)(iii) relating to any other Option Transaction: the party specified as such in the related Confirmation. | ISDA 2014 Credit Definition article 1.4: `Buyer` means the Fixed Rate Payer.'} buyer: model::external::cdm::CounterpartyRoleEnum[1];
  {meta::pure::profiles::doc.doc = 'Seller party that can be resolved as one of the two principal parties to the transaction. The party that sells (\'writes\') this instrument, i.e. that grants the rights defined by this instrument and in return receives a payment for it. ISDA 2002 Equity Definitions section 1.19: `Seller` means the party specified as such in the related Confirmation. | ISDA 2006 Definitions article 12.1 (a)(i) relating to a Swaption: \'Seller\' means the party the party specified as such or as writer in the related Confirmation | ISDA 2006 Definitions article 12.1 (a)(ii) relating to Swap Transactions with applicable Early Termination: the party specified as such or as writer in the related Confirmation or, if neither party is specified as such, the Non-exercising Party | ISDA 2006 Definitions article 12.1 (a)(iii) relating to any other Option Transaction: the party specified as such in the related Confirmation. | ISDA 2014 Credit Definition article 1.4: `Seller` means the Floating Rate Payer.'} seller: model::external::cdm::CounterpartyRoleEnum[1];
}

Class FpML::model::PaymentType
[
  c1_length: $this.paymentTypeScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  paymentTypeScheme: String[0..1];
  value: String[1];
}

Class FpML::model::SpecifiedCurrency
{
  {meta::pure::profiles::doc.doc = 'Indicates whether the specified currency provision is applicable.'} applicable: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'The currency in which an amount is denominated.'} currency: FpML::model::Currency[*];
}

Class FpML::model::ProductType
[
  c1_length: $this.productTypeScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() >= 1,
  c3_length: $this.value->length() <= 1023
]
{
  productTypeScheme: String[0..1];
  value: String[1];
}

Class <<meta::pure::profiles::typemodifiers.abstract>> {meta::pure::profiles::doc.doc = 'A supertype of leg. All swap legs extend this type.'} FpML::model::Leg
{
  id: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A Primitive Instruction describes the inputs required to pass into the corresponding PrimitiveEvent function.'} model::external::cdm::PrimitiveInstruction
[
  one_of_constraint: ((((((((($this.execution->isNotEmpty() && $this.contractFormation->isEmpty()) && $this.quantityChange->isEmpty()) && $this.termsChange->isEmpty()) && $this.partyChange->isEmpty()) && $this.split->isEmpty()) || ((((($this.contractFormation->isNotEmpty() && $this.execution->isEmpty()) && $this.quantityChange->isEmpty()) && $this.termsChange->isEmpty()) && $this.partyChange->isEmpty()) && $this.split->isEmpty())) || ((((($this.quantityChange->isNotEmpty() && $this.execution->isEmpty()) && $this.contractFormation->isEmpty()) && $this.termsChange->isEmpty()) && $this.partyChange->isEmpty()) && $this.split->isEmpty())) || ((((($this.termsChange->isNotEmpty() && $this.execution->isEmpty()) && $this.contractFormation->isEmpty()) && $this.quantityChange->isEmpty()) && $this.partyChange->isEmpty()) && $this.split->isEmpty())) || ((((($this.partyChange->isNotEmpty() && $this.execution->isEmpty()) && $this.contractFormation->isEmpty()) && $this.quantityChange->isEmpty()) && $this.termsChange->isEmpty()) && $this.split->isEmpty())) || ((((($this.split->isNotEmpty() && $this.execution->isEmpty()) && $this.contractFormation->isEmpty()) && $this.quantityChange->isEmpty()) && $this.termsChange->isEmpty()) && $this.partyChange->isEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'Specifies instructions describing an execution primitive event.'} execution: model::external::cdm::ExecutionInstruction[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies instructions describing an contract formation primitive event.'} contractFormation: model::external::cdm::ContractFormationInstruction[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies instructions describing an quantity change primitive event.'} quantityChange: model::external::cdm::QuantityChangeInstruction[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies instructions describing a terms change primitive event.'} termsChange: model::external::cdm::TermsChangeInstruction[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies instructions describing a party change primitive event.'} partyChange: model::external::cdm::PartyChangeInstruction[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies instructions to split a trade into multiple branches.'} split: model::external::cdm::SplitInstruction[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A reference to the return swap notional determination method.'} FpML::model::DeterminationMethodReference extends FpML::model::Reference
{
  href: String[1];
}

Class {meta::pure::profiles::doc.doc = 'Type which contains pass through payments.'} model::external::cdm::PassThrough
{
  {meta::pure::profiles::doc.doc = 'One to many pass through payment items.'} passThroughItem: model::external::cdm::PassThroughItem[1..*];
}

Class model::external::cdm::Id
{
  lei: String[1];
}

Class {meta::pure::profiles::doc.doc = 'A payment component owed from one party to the other for the cash flow date. This payment component should by of only a single type, e.g. a fee or a cashflow from a cashflow stream.'} FpML::model::GrossCashflow
{
  {meta::pure::profiles::doc.doc = 'Unique identifier for a cash flow.'} cashflowId: FpML::model::CashflowId[0..1];
  {meta::pure::profiles::doc.doc = 'Pointer-style reference to the partyTradeIdentifier block within the tradeIdentifyingItems collection, which identifies the parent trade for this cashflow.'} partyTradeIdentifierReference: FpML::model::PartyTradeIdentifierReference[0..1];
  {meta::pure::profiles::doc.doc = 'A reference to the party responsible for making the payments defined by this structure.'} payerPartyReference: FpML::model::PartyReference[0..1];
  {meta::pure::profiles::doc.doc = 'A reference to the account responsible for making the payments defined by this structure.'} payerAccountReference: FpML::model::AccountReference[0..1];
  {meta::pure::profiles::doc.doc = 'A reference to the party that receives the payments corresponding to this structure.'} receiverPartyReference: FpML::model::PartyReference[0..1];
  {meta::pure::profiles::doc.doc = 'A reference to the account that receives the payments corresponding to this structure.'} receiverAccountReference: FpML::model::AccountReference[0..1];
  {meta::pure::profiles::doc.doc = 'Cash flow amount in a given currency to be paid/received.'} cashflowAmount: FpML::model::Money[0..1];
  {meta::pure::profiles::doc.doc = 'Defines the type of cash flow. For instance, a type of fee, premium, principal exchange, leg fee.'} cashflowType: FpML::model::CashflowType[0..1];
}

Class FpML::model::FloatingAmountEvents
{
  {meta::pure::profiles::doc.doc = 'A floating rate payment event. Corresponds to the failure by the Reference Entity to pay an expected principal amount or the payment of an actual principal amount that is less than the expected principal amount. ISDA 2003 Term: Failure to Pay Principal.'} failureToPayPrincipal: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'A floating rate payment event. With respect to any Reference Obligation Payment Date, either (a) the non-payment of an Expected Interest Amount or (b) the payment of an Actual Interest Amount that is less than the Expected Interest Amount. ISDA 2003 Term: Interest Shortfall.'} interestShortfall: FpML::model::InterestShortFall[0..1];
  {meta::pure::profiles::doc.doc = 'A floating rate payment event. Results from the fact that the underlyer writes down its outstanding principal amount. ISDA 2003 Term: Writedown.'} writedown: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'A floating rate payment event. Results from the fact that losses occur to the underlying instruments that do not result in reductions of the outstanding principal of the reference obligation.'} impliedWritedown: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the floating amount provisions associated with the floatingAmountEvents.'} floatingAmountProvisions: FpML::model::FloatingAmountProvisions[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the events that will give rise to the payment a additional fixed payments.'} additionalFixedPayments: FpML::model::AdditionalFixedPayments[0..1];
}

Class {meta::pure::profiles::doc.doc = 'The data type used for ESMA action type.'} FpML::model::ActionType
[
  c1_length: $this.value->length() <= 255
]
{
  {meta::pure::profiles::doc.doc = 'The identifier scheme used with this actionType. A unique URI to determine the the type of action.'} actionTypeScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'A type for defining payments. Developers of FpML models are encouraged to make use of the SimplePayment type instead of this Payment type. In Transparency view, normally the payer and receiver party references are not used; however they may be provided if necessary for administrative activities such as Reporting Party Determination in FX.'} FpML::model::Payment extends FpML::model::PaymentBase
{
  {meta::pure::profiles::doc.doc = 'A reference to the party responsible for making the payments defined by this structure.'} payerPartyReference: FpML::model::PartyReference[0..1];
  {meta::pure::profiles::doc.doc = 'A reference to the account responsible for making the payments defined by this structure.'} payerAccountReference: FpML::model::AccountReference[0..1];
  {meta::pure::profiles::doc.doc = 'A reference to the party that receives the payments corresponding to this structure.'} receiverPartyReference: FpML::model::PartyReference[0..1];
  {meta::pure::profiles::doc.doc = 'A reference to the account that receives the payments corresponding to this structure.'} receiverAccountReference: FpML::model::AccountReference[0..1];
  {meta::pure::profiles::doc.doc = 'The currency amount of the payment.'} paymentAmount: FpML::model::NonNegativeMoney[0..1];
  {meta::pure::profiles::doc.doc = 'The payment date. This date is subject to adjustment in accordance with any applicable business day convention.'} paymentDate: FpML::model::AdjustableOrAdjustedDate[0..1];
  {meta::pure::profiles::doc.doc = 'A classification of the type of fee or additional payment, e.g. brokerage, upfront fee etc. FpML does not define domain values for this element.'} paymentType: FpML::model::PaymentType[0..1];
  {meta::pure::profiles::doc.doc = 'The information required to settle a currency payment that results from a trade.'} settlementInformation: FpML::model::SettlementInformation[0..1];
  {meta::pure::profiles::doc.doc = 'The value representing the discount factor used to calculate the present value of the cash flow.'} discountFactor: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'The amount representing the present value of the forecast payment.'} presentValueAmount: FpML::model::Money[0..1];
  {meta::pure::profiles::doc.doc = 'Can be used to reference the yield curve used to estimate the discount factor.'} href: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'As per ISDA 2002 Definitions.'} model::external::cdm::Barrier
{
  {meta::pure::profiles::doc.doc = 'A trigger level approached from beneath.'} barrierCap: model::external::cdm::TriggerEvent[0..1];
  {meta::pure::profiles::doc.doc = 'A trigger level approached from above.'} barrierFloor: model::external::cdm::TriggerEvent[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Specifies mechanism for Termination currency to be selected by the Non-defaulting Party/party which is not the Affected Party.'} model::external::cdm::PartyOptionTerminationCurrency
[
  TerminationCurrencyCondition: if($this.terminationCurrencyCondition == model::external::cdm::TerminationCurrencyConditionEnum.Specified, |$this.terminationCurrencyCondition->isNotEmpty(), |true)
]
{
  {meta::pure::profiles::doc.doc = 'Specifies termination currency where there are two Affected Parties and they cannot agree on the termination currency.'} bothAffectedTermCurrencyOption: String[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies alternative conditions for selection of the termination currency.'} terminationCurrencySpecifiedCondition: String[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the enumerated conditions for selection of the termination currency.'} terminationCurrencyCondition: model::external::cdm::TerminationCurrencyConditionEnum[1];
}

Class FpML::model::CommodityBase
[
  c1_length: $this.commodityBaseScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  commodityBaseScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'A type defining a step date and step value pair. This step definitions are used to define varying rate or amount schedules, e.g. a notional amortization or a step-up coupon schedule.'} FpML::model::Step extends FpML::model::StepBase
{
  {meta::pure::profiles::doc.doc = 'The rate or amount which becomes effective on the associated stepDate. A rate of 5% would be represented as 0.05.'} stepValue: Decimal[0..1];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'Generic class to specify the quantity for different payout legs in a contractual product, when that quantity can vary across payout legs or across time. A resolvable quantity can always be resolved into a single quantity from the quantity notation which has a corresponding asset identifier. In addition to the base case, where quantity is directly specified as a number as part of the quantity notation, the other use cases are: (i) quantity based on some pre-defined schedule (eg amortising notional), (ii) quantity based on some pre-defined events (eg resetting cross-currency notional), or quantity set as reference to another quantity (eg equity notional as no. securities x price).'} model::external::cdm::ResolvablePayoutQuantity
[
  ResolvablePayoutQuantityChoice: (($this.quantitySchedule->isEmpty() && $this.quantityReference->isEmpty()) || ($this.quantitySchedule->isNotEmpty() && $this.quantityReference->isEmpty())) || ($this.quantityReference->isNotEmpty() && $this.quantitySchedule->isEmpty()),
  QuantityMultiplier: if($this.quantityMultiplier->isNotEmpty(), |$this.quantityReference->isNotEmpty(), |true)
]
{
  <<model::external::cdm::metadata.address>> {meta::pure::profiles::doc.doc = 'A product\'s quantity as a single, non-negative amount.  When specified as part of a product definition, this quantity attribute would not be set.  Instead it is specified on the quantity notation along with an asset identifier matching this payout\'s asset identifier.  This allows the quantity to be resolved for a payout leg, which can then be specified here for convenience during data processing.  There needs to be at least one resolvable quantity across payout legs of a product to define an anchor that other payout quantities can refer to.  This attribute is ignored when mapping existing FpML messages.'} resolvedQuantity: model::external::cdm::Quantity[0..1];
  {meta::pure::profiles::doc.doc = 'Quantity step schedule, including an initial quantity specified as an absolute number.'} quantitySchedule: model::external::cdm::NonNegativeQuantitySchedule[0..1];
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'Reference quantity when resolvable quantity is defined as relative to another (resolvable) quantity. A resolvable quantity needs to contain either an absolute quantity or a reference to another (resolvable) quantity. This requirement is captured by a choice rule on the class.'} quantityReference: model::external::cdm::ResolvablePayoutQuantity[0..1];
  {meta::pure::profiles::doc.doc = 'Quantity multiplier is specified on top of a reference quantity and is used as a multiplying factor when resolving the quantity. A quantity multiplier can only exist when the resolvable quantity specifies a reference quantity.'} quantityMultiplier: model::external::cdm::QuantityMultiplier[0..1];
  {meta::pure::profiles::doc.doc = 'Whether the quantity is resettable'} reset: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'The future value notional is specific to BRL CDI swaps, and is specified alongside the notional amount. The value is calculated as follows: Future Value Notional = Notional Amount * (1 + Fixed Rate) ^ (Fixed Rate Day Count Fraction). The currency should always match that expressed in the notional schedule. The value date should match the adjusted termination date.'} futureValueNotional: model::external::cdm::FutureValueAmount[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Identification of party specific Credit Support Documents applicable to the document.'} model::external::cdm::CreditSupportDocument
{
  {meta::pure::profiles::doc.doc = 'The party election of Credit Support Document(s), if any.'} creditSupportDocumentElection: model::external::cdm::CreditSupportDocumentElection[2];
}

Class {meta::pure::profiles::doc.doc = 'Period over which an average value is taken.'} FpML::model::AveragingPeriod
[
  c1_choice: ($this.averagingDateTimes->isNotEmpty() && $this.averagingObservations->isEmpty()) || ($this.averagingDateTimes->isEmpty() && $this.averagingObservations->isNotEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'A schedule for generating averaging observation dates.'} schedule: FpML::model::AveragingSchedule[*];
  {meta::pure::profiles::doc.doc = 'An unweighted list of averaging observation date and times.'} averagingDateTimes: FpML::model::DateTimeList[0..1];
  {meta::pure::profiles::doc.doc = 'A weighted list of averaging observation date and times.'} averagingObservations: FpML::model::AveragingObservationList[0..1];
  {meta::pure::profiles::doc.doc = 'The market disruption event as defined by ISDA 2002 Definitions.'} marketDisruption: FpML::model::MarketDisruption[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Defines additional optional features that can be included in an option contract.'} model::external::cdm::OptionFeature
{
  {meta::pure::profiles::doc.doc = 'Describes a quanto or composite FX feature.'} fxFeature: model::external::cdm::FxFeature[*];
  {meta::pure::profiles::doc.doc = 'Defines a simple strategy feature.'} strategyFeature: model::external::cdm::StrategyFeature[0..1];
  {meta::pure::profiles::doc.doc = 'Defines an option feature in which an average market observation price is determined on valuation and compared to the strike to determine a settlement amount.'} averagingRateFeature: model::external::cdm::AveragingCalculation[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies a barrier feature.'} barrier: model::external::cdm::Barrier[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies a knock in or knock out feature.'} knock: model::external::cdm::Knock[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the rules for pass-through payments from the underlier, such as dividends.'} passThrough: model::external::cdm::PassThrough[0..1];
}

Class FpML::model::ProtectionTerms
{
  {meta::pure::profiles::doc.doc = 'The notional amount of protection coverage. ISDA 2003 Term: Floating Rate Payer Calculation Amount'} calculationAmount: FpML::model::Money[0..1];
  {meta::pure::profiles::doc.doc = 'This element contains all the ISDA terms relating to credit events.'} creditEvents: FpML::model::CreditEvents[0..1];
  {meta::pure::profiles::doc.doc = 'The underlying obligations of the reference entity on which you are buying or selling protection. The credit events Failure to Pay, Obligation Acceleration, Obligation Default, Restructuring, Repudiation/Moratorium are defined with respect to these obligations. ISDA 2003 Term:'} obligations: FpML::model::Obligations[0..1];
  {meta::pure::profiles::doc.doc = 'This element contains the ISDA terms relating to the floating rate payment events and the implied additional fixed payments, applicable to the credit derivatives transactions on mortgage-backed securities with pay-as-you-go or physical settlement.'} floatingAmountEvents: FpML::model::FloatingAmountEvents[0..1];
  id: String[0..1];
}

Class FpML::model::AssetClass
[
  c1_length: $this.assetClassScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  assetClassScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'Class to specify a non-negative quantity schedule, which is used to define the quantity of a payout leg. This quantity cannot be negative, while direction is specified through a BuyerSeller or PayerReceiver attribute. The only available schedule implementation is a step schedule, specified as a set of date-value pairs. The non-negativity is enforced by using the non-negative quantity and step schedule classes.'} model::external::cdm::NonNegativeQuantitySchedule
{
  <<model::external::cdm::metadata.address>> {meta::pure::profiles::doc.doc = 'The initial quantity of a schedule represented as a single, non-negative number. In the case where no schedule is specified, the constant quantity is specified at a higher level. Can be referenced from TradableProduct'} initialQuantity: model::external::cdm::Quantity[0..1];
  {meta::pure::profiles::doc.doc = 'The schedule specified as a set of date-value pairs. Attribute is optional, to represent the case where no schedule is specified so quantity is just constant over time.'} stepSchedule: model::external::cdm::NonNegativeStepSchedule[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the outcome of a computed amount, for testing purposes.'} model::external::cdm::ComputedAmount
{
  callFunction: Float[1];
  amount: Float[1];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'The currency in which the computed amount is denominated. The list of valid currencies is not presently positioned as an enumeration as part of the CDM because that scope is limited to the values specified by ISDA and FpML. As a result, implementers have to make reference to the relevant standard, such as the ISO 4217 standard for currency codes.'} currency: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to represent the credit limit utilisation information.'} model::external::cdm::CreditLimitInformation
{
  limitApplicable: model::external::cdm::LimitApplicableExtended[1..*];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify a related legal agreement. For example, ISDA 2016 Credit Support Annex for Initial Margin, paragraph 13, General Principles, (s): Other CSA and Japanese Law CSA (VM). | ISDA 2016 Credit Support Annex for Variation Margin, paragraph 13, (o): Other CSA.'} model::external::cdm::OtherAgreementTerms
{
  {meta::pure::profiles::doc.doc = 'The qualification of whether some other related agreement is specified (True) or not (False).'} isSpecified: Boolean[1];
  {meta::pure::profiles::doc.doc = 'The specification of this other agreement, when the qualification is True.'} legalDocument: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Specifies specific dates or parametric rules for the dates on which the price will be determined'} model::external::cdm::PricingDates
[
  one_of_constraint: ($this.specifiedDates->isNotEmpty() && $this.parametricDates->isEmpty()) || ($this.parametricDates->isNotEmpty() && $this.specifiedDates->isEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'Defines specified dates on which the price will be determined.'} specifiedDates: model::external::cdm::AdjustableDates[*];
  {meta::pure::profiles::doc.doc = 'Defines rules for the dates on which the price will be determined.'} parametricDates: model::external::cdm::ParametricDates[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type defining a rate that is calculated based on a number of observations of an underlying rate that are averaged or compounded using a specified method. These are sometimes called modular calculated rates. These are described in the 2021 ISDA Definitions in Section 7.'} FpML::model::CalculationParameters
[
  c1_choice: ($this.lookback->isNotEmpty() && ($this.observationShift->isEmpty() && $this.lockout->isEmpty())) || (($this.lookback->isEmpty() && ($this.observationShift->isNotEmpty() && $this.lockout->isEmpty())) || ($this.lookback->isEmpty() && ($this.observationShift->isEmpty() && $this.lockout->isNotEmpty())))
]
{
  {meta::pure::profiles::doc.doc = 'Specifies the type of calculation, e.g. whether the calculation is a compounding or an averaging calculation. This element distinguishes between the applicable subsections of Section 7 (7.3, 7.4, and 7.7). If the calculationMethod is Componding or Averaging, this implies that a daily compounded calculation will be done, i.e. that the underlying rate will be observed eacy applicalbe business day during the observation period and then compounded or averaged. If it is CompoundedIndex, this means that the rate administrator is doing the compounding each day and publishing the resulting index value. In this case the calculation agent is responsible for observing the index and the start and at the end of the observation period, and then backing out the implied rate by following the formula in section 7.7. (This formula divides the index value at the end by the index value at the beginning, subtracts 1, and then scales the resulting value based on the year fraction to annualize the rate.) In other words, for CompoundedIndex the observation frequency is effectively 1T, where for Compounding and Averaging, it is 1D.'} calculationMethod: FpML::model::CalculationMethodEnum[1];
  {meta::pure::profiles::doc.doc = 'Specifies the applicable business days to be used for this calculation. If omitted, the business days should be defaulted from the FRO Matrix, as represented in the FRO metadata. Failing that, it should be defaulted from the default business center for the relevant currency. See the ISDA 2021 Definitions Section 7.2.1.'} applicableBusinessDays: FpML::model::BusinessCentersOrReference[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies that lookback calculation is in effect, and supplies parameters needed to support that. See the ISDA 2021 Definitions Section 7.3.2 and 7.4.2. This should not be used when the calculationMethod is CompoundedIndex.'} lookback: FpML::model::ObservationOffset[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies that observation shift calculation is in effect, and supplies parameters needed to support that. See the ISDA 2021 Definitions Section 7.3.3 and 7.4.3 and 7.7.3.'} observationShift: FpML::model::ObservationShiftParameters[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies that lockout calculation is in effect, and supplies parameters needed to support that. See the ISDA 2021 Definitions Section 7.3.4 and 7.4.4. This should not be used when the calculationMethod is CompoundedIndex.'} lockout: FpML::model::ObservationOffset[0..1];
  {meta::pure::profiles::doc.doc = 'A maximum rate for an rate observation; optionally applied for daily averaged rates. These are described in the 2021 ISDA Definitions in Section 7.2.4'} observationCapRate: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'A minimum rate for an rate observation; optionally applied for daily averaged rates. These are described in the 2021 ISDA Definitions in Section 7.2.3'} observationFloorRate: Decimal[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the notification time election by the respective parties to the agreement. ISDA 2016 English Law Credit Support Deed for Initial Margin, paragraph 13, General Principles, (d)(iii): Notification Time. | ISDA 2016 Japanese Law Credit Support Annex for Initial Margin, paragraph 13, General Principles, (e)(iii): Notification Time. | ISDA 2016 New York Law Credit Support Annex for Initial Margin, paragraph 13, General Principles, (d)(iii): Notification Time.'} model::external::cdm::NotificationTimeElection
[
  NotificationTimeElectionChoice: ($this.notificationTime->isNotEmpty() && $this.customNotification->isEmpty()) || ($this.customNotification->isNotEmpty() && $this.notificationTime->isEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'The elective party.'} party: model::external::cdm::CounterpartyRoleEnum[1];
  {meta::pure::profiles::doc.doc = 'The Notification Time as a time that is qualified as a standard business center.'} notificationTime: model::external::cdm::BusinessCenterTime[0..1];
  {meta::pure::profiles::doc.doc = 'The Notification Time as a custom election.'} customNotification: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type for defining the obligations of the counterparty subject to credit support requirements.'} FpML::model::Collateral
{
  {meta::pure::profiles::doc.doc = 'Independent Amount is an amount that usually less creditworthy counterparties are asked to provide. It can either be a fixed amount or a percentage of the Transaction\'s value. The Independent Amount can be: (i) transferred before any trading between the parties occurs (as a deposit at a third party\'s account or with the counterparty) or (ii) callable after trading has occurred (typically because a downgrade has occurred). In situation (i), the Independent Amount is not included in the calculation of Exposure, but in situation (ii), it is included in the calculation of Exposure. Thus, for situation (ii), the Independent Amount may be transferred along with any collateral call. Independent Amount is a defined term in the ISDA Credit Support Annex. (\'with respect to a party, the amount specified as such for that party in Paragraph 13; if no amount is specified, zero\').'} independentAmount: FpML::model::IndependentAmount[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the Termination Events that will be deemed an Access Condition (Initial Margin CSA) or a Specified Condition (Variation Margin CSA). ISDA 2016 English Law Credit Support Deed for Initial Margin, paragraph 13, General Principles, (e)(ii). | ISDA 2016 Japanese Law Credit Support Annex for Initial Margin, paragraph 13, General Principles, (f)(ii). | ISDA 2016 New York Law Credit Support Annex for Initial Margin, paragraph 13, General Principles, (e)(ii). | ISDA 2016 Credit Support Annex for Variation Margin, paragraph 13, (e): Conditions Precedent and Secured Party\u2019s Rights and Remedies.'} model::external::cdm::AccessConditionsElections
{
  {meta::pure::profiles::doc.doc = 'The elective party.'} party: model::external::cdm::CounterpartyRoleEnum[1];
  illegality: Boolean[1];
  forceMajeure: Boolean[1];
  taxEvent: Boolean[1];
  taxEventUponMerger: Boolean[1];
  creditEventUponMerger: Boolean[1];
}

Class {meta::pure::profiles::doc.doc = 'A type defining an offset used in calculating a new date relative to a reference date. E.g. calendar days, business days, Commodity Business days, etc..'} FpML::model::Offset extends FpML::model::Period
{
  {meta::pure::profiles::doc.doc = 'In the case of an offset specified as a number of days, this element defines whether consideration is given as to whether a day is a good business day or not. If a day type of business days is specified then non-business days are ignored when calculating the offset. The financial business centers to use for determination of business days are implied by the context in which this element is used. This element must only be included when the offset is specified as a number of days. If the offset is zero days then the dayType element should not be included.'} dayType: FpML::model::DayTypeEnum[0..1];
}

Class FpML::model::MatrixSource
[
  c1_length: $this.settledEntityMatrixSourceScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  settledEntityMatrixSourceScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify party specific French Law Addendum language'} model::external::cdm::FrenchLawAddendumElection
{
  {meta::pure::profiles::doc.doc = 'The elective party.'} party: model::external::cdm::CounterpartyRoleEnum[1];
  {meta::pure::profiles::doc.doc = 'The qualification of whether the party elects specific language'} isApplicable: Boolean[1];
  {meta::pure::profiles::doc.doc = 'The party specific language to be included in the agreement.'} addendumLanguage: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the Interest Adjustment periodicity either through a standardized election or a custom one. ISDA 2016 Japanese Law Credit Support Annex for Initial Margin, paragraph 13, General Principles, (n)(ii).'} model::external::cdm::InterestAdjustmentPeriodicity
[
  one_of_constraint: ($this.standardElection->isNotEmpty() && $this.customElection->isEmpty()) || ($this.customElection->isNotEmpty() && $this.standardElection->isEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'The Interest Adjustment periodicity when specified through a standardized election.'} standardElection: model::external::cdm::InterestAdjustmentPeriodicityEnum[0..1];
  {meta::pure::profiles::doc.doc = 'The Interest Adjustment periodicity when specified through a custom election.'} customElection: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class defining a schedule of rates or amounts in terms of an initial value and then a series of step date and value pairs. On each step date the rate or amount changes to the new step value. The series of step date and value pairs are optional. If not specified, this implies that the initial value remains unchanged over time.'} model::external::cdm::RateSchedule
{
  <<model::external::cdm::metadata.address>> {meta::pure::profiles::doc.doc = 'The initial rate. An initial rate of 5% would be represented as 0.05.'} initialValue: model::external::cdm::Price[0..1];
  {meta::pure::profiles::doc.doc = 'The schedule of step date and value pairs. On each step date the associated step value becomes effective A list of steps may be ordered in the document by ascending step date. An FpML document containing an unordered list of steps is still regarded as a conformant document.'} step: model::external::cdm::Step[*];
}

Class FpML::model::CreditDefaultSwap extends FpML::model::Product
{
  {meta::pure::profiles::doc.doc = 'This element contains all the data that appears in the section entitled \'1. General Terms\' in the 2003 ISDA Credit Derivatives Confirmation.'} generalTerms: FpML::model::GeneralTerms[0..1];
  {meta::pure::profiles::doc.doc = 'This element contains all the terms relevant to defining the fixed amounts/payments per the applicable ISDA definitions.'} feeLeg: FpML::model::FeeLeg[0..1];
  {meta::pure::profiles::doc.doc = 'This element contains all the terms relevant to defining the applicable floating rate payer calculation amount, credit events and associated conditions to settlement, and reference obligations.'} protectionTerms: FpML::model::ProtectionTerms[*];
  {meta::pure::profiles::doc.doc = 'This element contains all the ISDA terms relevant to cash settlement for when cash settlement is applicable. ISDA 2003 Term: Cash Settlement'} cashSettlementTerms: FpML::model::CashSettlementTerms[0..1];
  {meta::pure::profiles::doc.doc = 'This element contains all the ISDA terms relevant to physical settlement for when physical settlement is applicable. ISDA 2003 Term: Physical Settlement'} physicalSettlementTerms: FpML::model::PhysicalSettlementTerms[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type describing how notice of exercise should be given. This can be either manual or automatic.'} FpML::model::ExerciseProcedureOption
[
  c1_choice: ($this.manualExercise->isNotEmpty() && $this.automaticExercise->isEmpty()) || ($this.manualExercise->isEmpty() && $this.automaticExercise->isNotEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'Specifies that the notice of exercise must be given by the buyer to the seller or seller\'s agent.'} manualExercise: FpML::model::Empty[0..1];
  {meta::pure::profiles::doc.doc = 'If automatic is specified then the notional amount of the underlying swap, not previously exercised under the swaption will be automatically exercised at the expriration time on the expiration date if at such time the buyer is in-the-money, provided that the difference between the settlement rate and the fixed rate under the relevant underlying swap is not less than the specified threshold rate. The term in-the-money is assumed to have the meaning defining in the 2000 ISDA Definitions, Section 17.4 In-the-money.'} automaticExercise: FpML::model::Empty[0..1];
}

Class FpML::model::SettledEntityMatrix
{
  {meta::pure::profiles::doc.doc = 'Relevant settled entity matrix source.'} matrixSource: FpML::model::MatrixSource[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the publication date of the applicable version of the matrix. When this element is omitted, the Standard Terms Supplement defines rules for which version of the matrix is applicable.'} publicationDate: StrictDate[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Bond valuation model for the security leg in a securities financing transaction, closely modelled onto the BondCollateral.model in FpML.'} model::external::cdm::BondValuationModel
{
  {meta::pure::profiles::doc.doc = 'The quantity of the underlier expressed as a nominal amount.'} nominalAmount: model::external::cdm::Money[1];
  {meta::pure::profiles::doc.doc = 'Price and yield model for valuing a bond security leg.'} bondPriceAndYieldModel: model::external::cdm::BondPriceAndYieldModel[1];
  {meta::pure::profiles::doc.doc = 'Accruals amount for the bond in the security leg'} accrualsAmount: model::external::cdm::Money[0..1];
}

Class {meta::pure::profiles::doc.doc = 'The base and eligible currency(ies) for the document as specified by the parties to the agreement.'} model::external::cdm::BaseAndEligibleCurrency
{
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'The base currency for the document as elected by the parties to the agreement. The list of valid currencies is not presently positioned as an enumeration as part of the CDM because that scope is limited to the values specified by ISDA and FpML. As a result, implementers have to make reference to the relevant standard, such as the ISO 4217 standard for currency codes.'} baseCurrency: String[1];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'The list of eligible currencies, in addition to the base currency, for the document as elected by the parties to the agreement.'} eligibleCurrency: String[*];
}

Class {meta::pure::profiles::doc.doc = 'Type for reporting details of calculated rates, including the observations that went into the final reported rate.'} model::external::cdm::CalculatedRateDetails
{
  {meta::pure::profiles::doc.doc = 'The observation dates and weights for each observation date.'} observations: model::external::cdm::CalculatedRateObservations[0..1];
  {meta::pure::profiles::doc.doc = 'The weighted value of each observation.'} weightedRates: Float[*];
  {meta::pure::profiles::doc.doc = 'The daily growth factors, showing the weighted rates divided by the day count basis plus one, giving how much the value grows for each step in the calculation.'} growthFactor: Float[*];
  {meta::pure::profiles::doc.doc = 'The compounding curve, showing how the initial value grew during the calculation period.'} compoundedGrowth: Float[*];
  {meta::pure::profiles::doc.doc = 'The total sum or product of all the individual terms that went into the calculated rate.'} aggregateValue: Float[0..1];
  {meta::pure::profiles::doc.doc = 'The total weight of all the terms that went into the calculated rate.'} aggregateWeight: Float[0..1];
  {meta::pure::profiles::doc.doc = 'The resulting calculated weight.'} calculatedRate: Float[0..1];
}

Class FpML::model::PcDeliverableObligationCharac
{
  {meta::pure::profiles::doc.doc = 'Indicates whether the provision is applicable.'} applicable: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies whether either \'Partial Cash Settlement of Assignable Loans\', \'Partial Cash Settlement of Consent Required Loans\' or \'Partial Cash Settlement of Participations\' is applicable. If this element is specified and Assignable Loan is a Deliverable Obligation Chracteristic, any Assignable Loan that is deliverable, but where a non-receipt of Consent by the Physical Settlement Date has occurred, the Loan can be cash settled rather than physically delivered. If this element is specified and Consent Required Loan is a Deliverable Obligation Characterisitc, any Consent Required Loan that is deliverable, but where a non-receipt of Consent by the Physical Settlement Date has occurred, the Loan can be cash settled rather than physically delivered. If this element is specified and Direct Loan Participation is a Deliverable Obligation Characterisitic, any Participation that is deliverable, but where this participation has not been effected (has not come into effect) by the Physical Settlement Date, the participation can be cash settled rather than physically delivered.'} partialCashSettlement: Boolean[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the rights of Security Taker and/or Security Provider when an Early Termination or Access Condition event has occurred.'} model::external::cdm::RightsEvents
{
  {meta::pure::profiles::doc.doc = 'The bespoke provisions that might be specified by the parties to the agreement applicable to a Security Taker Rights Event.'} securityTakerRightsEvent: model::external::cdm::SecuredPartyRightsEvent[1];
  {meta::pure::profiles::doc.doc = 'The bespoke provisions that might be specified by the parties to the agreement applicable to a Notice of Exclusive Control Event.'} controlAgreementNecEvent: model::external::cdm::ControlAgreementNecEvent[0..1];
  {meta::pure::profiles::doc.doc = 'The bespoke provisions that might be specified by the parties to the agreement applicable to a Security Provider Rights Event.'} securityProviderRightsEvent: model::external::cdm::SecurityProviderRightsEvent[1];
  {meta::pure::profiles::doc.doc = 'The specification of whether Delivery In Lieu language is applicable to the agreement (true) or not (false).'} deliveryInLieuRight: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'The Additional Rights Event election.'} additionalRightsEvent: model::external::cdm::AdditionalRightsEvent[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the unsecured credit exposure that each party to the agreement is prepared to accept before asking for collateral. This threshold is specified either as an amount or as a custom election. ISDA 2016 English Law Credit Support Deed for Initial Margin, paragraph 13, General Principles, (c)(vi)(A): Threshold. | ISDA 2016 Japanese Law Credit Support Annex for Initial Margin, paragraph 13, General Principles, (d)(vi)(A): Threshold. | ISDA 2016 New York Law Credit Support Annex for Initial Margin, paragraph 13, General Principles, (c)(vi)(A): Threshold.'} model::external::cdm::Threshold
{
  {meta::pure::profiles::doc.doc = 'The parties\' Threshold election.'} partyElection: model::external::cdm::ElectiveAmountElection[2];
}

Class {meta::pure::profiles::doc.doc = 'Optional next workflow step defined as an intended BusinessEvent or Instructions.'} model::external::cdm::NextWorkflowStep
[
  one_of_constraint: ($this.nextIntendedEvent->isNotEmpty() && $this.proposedInstruction->isEmpty()) || ($this.proposedInstruction->isNotEmpty() && $this.nextIntendedEvent->isEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'The intended next BusinessEvent'} nextIntendedEvent: model::external::cdm::EventIntentEnum[0..1];
  {meta::pure::profiles::doc.doc = 'The proposed business event instructions for creation of the next workflow step.'} proposedInstruction: model::external::cdm::Instruction[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class describing the dividend payout ratio associated with an equity underlier. In certain cases the actual ratio is not known on trade inception, and only general conditions are then specified.'} model::external::cdm::DividendPayoutRatio
{
  {meta::pure::profiles::doc.doc = '2018 ISDA CDM Equity Confirmation for Security Equity Swap: Security'} underlier: model::external::cdm::Product[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the total actual dividend payout ratio associated with the equity underlier. A ratio of 90% should be expressed at 0.90.'} dividendPayoutRatio: Float[1];
  {meta::pure::profiles::doc.doc = 'Specifies the cash actual dividend payout ratio associated with the equity underlier. A ratio of 90% should be expressed at 0.90.'} dividendPayoutRatioCash: Float[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the non cash actual dividend payout ratio associated with the equity underlier. A ratio of 90% should be expressed at 0.90.'} dividendPayoutRatioNonCash: Float[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the parties\' Additional Representation(s) election.'} model::external::cdm::AdditionalRepresentationElection
{
  {meta::pure::profiles::doc.doc = 'The elective party.'} party: model::external::cdm::CounterpartyRoleEnum[1];
  {meta::pure::profiles::doc.doc = 'The Additional Representation is applicable when True, and not applicable when False.'} isApplicable: Boolean[1];
}

Class {meta::pure::profiles::doc.doc = 'Identifies the market sector in which the trade has been arranged.'} FpML::model::BrokerConfirmationType
[
  c1_length: $this.brokerConfirmationTypeScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  brokerConfirmationTypeScheme: String[0..1];
  value: String[1];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'Defines the fundamental financial information that can be changed by a Primitive Event and by extension any business or life-cycle event. Each TradeState specifies where a Trade is in its life-cycle. TradeState is a root type and as such, can be created independently to any other CDM data type, but can also be used as part of the CDM Event Model.'} model::external::cdm::TradeState
{
  {meta::pure::profiles::doc.doc = 'Represents the Trade that has been effected by a business or life-cycle event.'} trade: model::external::cdm::Trade[1];
  {meta::pure::profiles::doc.doc = 'Represents the State of the Trade through its life-cycle.'} state: model::external::cdm::State[0..1];
  {meta::pure::profiles::doc.doc = 'Represents the updated Trade attributes which can change as the result of a reset event. Only the changed values are captured, leaving the remaining data attributes empty. See Create_Reset function for further details on how TradeState is used in the Reset event. The TradeState data type is used to maintain backwards compatibility with the current Reset mechanism.'} resetHistory: model::external::cdm::Reset[*];
  transferHistory: model::external::cdm::Transfer[*];
}

Class {meta::pure::profiles::doc.doc = 'The security valuation model choice, which can either be based on nominal amount as for a bond, or on the number of contract units as for equity.'} model::external::cdm::SecurityValuationModel
[
  one_of_constraint: ($this.bondValuationModel->isNotEmpty() && $this.unitContractValuationModel->isEmpty()) || ($this.unitContractValuationModel->isNotEmpty() && $this.bondValuationModel->isEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'The valuation model when the security is a bond.'} bondValuationModel: model::external::cdm::BondValuationModel[0..1];
  {meta::pure::profiles::doc.doc = 'The valuation model when the security is a unit contract like equity.'} unitContractValuationModel: model::external::cdm::UnitContractValuationModel[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A data defining:  an option to extend an existing swap transaction on the specified exercise dates for a term ending on the specified new termination date. As a difference from FpML, it extends the BuyerSeller class, which represents the BuyerSeller.model.'} model::external::cdm::ExtendibleProvision extends model::external::cdm::BuyerSeller
[
  ExerciseChoice: ((($this.americanExercise->isNotEmpty() && $this.bermudaExercise->isEmpty()) && $this.europeanExercise->isEmpty()) || (($this.bermudaExercise->isNotEmpty() && $this.americanExercise->isEmpty()) && $this.europeanExercise->isEmpty())) || (($this.europeanExercise->isNotEmpty() && $this.americanExercise->isEmpty()) && $this.bermudaExercise->isEmpty()),
  ExtendibleProvisionExerciseNoticeReceiverParty: if($this.exerciseNotice.exerciseNoticeReceiver->isNotEmpty(), |$this.exerciseNotice.exerciseNoticeReceiver == model::external::cdm::AncillaryRoleEnum.ExerciseNoticeReceiverPartyExtendibleProvision, |true)
]
{
  {meta::pure::profiles::doc.doc = 'American exercise. FpML implementations consists in an exercise substitution group.'} americanExercise: model::external::cdm::AmericanExercise[0..1];
  {meta::pure::profiles::doc.doc = 'Bermuda exercise. FpML implementations consists in an exercise substitution group.'} bermudaExercise: model::external::cdm::BermudaExercise[0..1];
  {meta::pure::profiles::doc.doc = 'European exercise. FpML implementations consists in an exercise substitution group.'} europeanExercise: model::external::cdm::EuropeanExercise[0..1];
  {meta::pure::profiles::doc.doc = 'Definition of the party to whom notice of exercise should be given.'} exerciseNotice: model::external::cdm::ExerciseNotice[0..1];
  {meta::pure::profiles::doc.doc = 'A flag to indicate whether follow-up confirmation of exercise (written or electronic) is required following telephonic notice by the buyer to the seller or seller\'s agent.'} followUpConfirmation: Boolean[1];
  {meta::pure::profiles::doc.doc = 'The adjusted dates associated with an extendible provision. These dates have been adjusted for any applicable business day convention.'} extendibleProvisionAdjustedDates: model::external::cdm::ExtendibleProvisionAdjustedDates[0..1];
  callingParty: model::external::cdm::CallingPartyEnum[0..1];
}

Class FpML::model::InterestShortFall
{
  {meta::pure::profiles::doc.doc = 'Specifies the nature of the interest Shortfall cap (i.e. Fixed Cap or Variable Cap) in the case where it is applicable. ISDA 2003 Term: Interest Shortfall Cap.'} interestShortfallCap: FpML::model::InterestShortfallCapEnum[0..1];
  compounding: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'The rate source in the case of a variable cap.'} rateSource: FpML::model::FloatingRateIndex[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type for defining a time with respect to a geographic location, for example 11:00 Phoenix, USA. This type should be used where a wider range of locations than those available as business centres is required.'} FpML::model::PrevailingTime
{
  {meta::pure::profiles::doc.doc = 'A time specified in hh:mm:ss format where the second component must be \'00\', e.g. 11am would be represented as 11:00:00.'} hourMinuteTime: String[0..1];
  {meta::pure::profiles::doc.doc = 'The geographic location to which the hourMinuteTime applies. The time takes into account any current day light saving changes or other adjustments i.e. it is the prevaling time at the location.'} location: FpML::model::TimezoneLocation[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to represent the CDM attributes that are not part of the FpML standard. Once broader usage is confirmed, it is expected that those two classes can be collapsed.'} model::external::cdm::LimitApplicableExtended extends model::external::cdm::LimitApplicable
{
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'The level at which the limit is set: customer business, proprietary business or account level. This attribute is specified as a string as part of the CME clearing confirmation specification.'} limitLevel: model::external::cdm::LimitLevelEnum[0..1];
  {meta::pure::profiles::doc.doc = 'The total limit available for the limit level and limit type. While the attribute is of type integer in the CME schema, it has been specified to be of type number in the CDM to take into consideration java size limits as well as for consistency purposes with the way most monetary amounts are expressed.'} limitAmount: Float[0..1];
  {meta::pure::profiles::doc.doc = 'The limit utilized by this specific trade. While the attribute is of type integer in the CME schema, it has been specified to be of type number in the CDM to take into consideration java size limits as well as for consistency purposes with the way most monetary amounts are expressed.'} limitImpactDueToTrade: Float[0..1];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'Security payout specification in case the product payout involves some form of security collateral, as in a securities financing transaction.'} model::external::cdm::SecurityFinancePayout extends model::external::cdm::PayoutBase
{
  {meta::pure::profiles::doc.doc = 'Each SecurityLeg represent a buy/sell at different dates, typically 1 near leg and 1 far leg in a securities financing transaction.'} securityFinanceLeg: model::external::cdm::SecurityFinanceLeg[1..*];
  {meta::pure::profiles::doc.doc = 'Specifies the reference asset.  This is The base type which all products extend (similar to FpML model). Within SecurityPayout we include a condition which validates that the product must be a Security (see below condition \'ProductMustBeSecurity\').'} securityInformation: model::external::cdm::Product[1];
  {meta::pure::profiles::doc.doc = 'Specifies the Duration Terms of the Security Finance transaction. e.g. Open or Term.'} durationType: model::external::cdm::Duration[1];
  {meta::pure::profiles::doc.doc = 'A contractual minimum amount which the borrower will pay, regardless of the duration of the loan. A mechanism for making sure that a trade generates enough income.'} minimumFee: model::external::cdm::Money[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the terms under which dividends received by the borrower are passed through to the lender.'} dividendTerms: model::external::cdm::DividendTerms[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies collateral provisions for a Security Finance transaction, including Collateral Type and Margin Percentage.'} collateralProvisions: model::external::cdm::CollateralProvisions[1];
}

Class {meta::pure::profiles::doc.doc = 'A code that describes what type of role an organization plays, for example a SwapsDealer, a Major Swaps Participant, or Other'} FpML::model::OrganizationType
[
  c1_length: $this.organizationTypeScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() >= 0
]
{
  organizationTypeScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify a set of legal entities which are part of a legal agreement beyond the two contracting parties to that agreement. This data representation reflects the ISDA Create representation.'} model::external::cdm::UmbrellaAgreement
{
  {meta::pure::profiles::doc.doc = 'The determination of whether Umbrella Agreement terms are Applicable (True), or Not Applicable (False)'} isApplicable: Boolean[1];
  {meta::pure::profiles::doc.doc = 'The language associated with the umbrella agreement, and which applies to all the parties to the umbrella agreement.'} language: String[0..1];
  {meta::pure::profiles::doc.doc = 'Underlying principals to the umbrella agreement.'} parties: model::external::cdm::UmbrellaAgreementEntity[*];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the Valuation of Appropriated Collateral that is applicable to the English Law ISDA CSA. ISDA 2016 English Law Credit Support Deed for Initial Margin, paragraph 13, General Principles, (u): Valuation of Appropriated Collateral.'} model::external::cdm::AppropriatedCollateralValuation
[
  specified: if($this.isSpecified->toOne(), |$this.election->isNotEmpty(), |true),
  notSpecified: if($this.isSpecified->toOne(), |$this.election->isEmpty(), |true)
]
{
  {meta::pure::profiles::doc.doc = 'The qualification of whether the Valuation of Appropriate Collateral provision is applicable (True) or not applicable (False).'} isSpecified: Boolean[1];
  {meta::pure::profiles::doc.doc = 'The parties\' election that qualify the Valuation of Appropriate Collateral in the case where it is deemed applicable.'} election: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Represents a class to allow specification of different type of Regional government collateral.'} model::external::cdm::RegionalGovernmentIssuerType
{
  {meta::pure::profiles::doc.doc = 'Applies to regional governments, local authorities or municipals.  True if entity has recourse to sovereign (e.g. debt guaranteed by government).  False if entity does not have recourse to sovereign.'} sovereignRecourse: Boolean[1];
}

Class {meta::pure::profiles::doc.doc = 'A class to qualify the closed state of an execution or a contract through the combination or a state (e.g. terminated, novated) and a set of dates: activity date, effective date and, when relevant, last payment date.'} model::external::cdm::ClosedState
{
  {meta::pure::profiles::doc.doc = 'The qualification of what gave way to the contract or execution closure, e.g. allocation, termination, ...'} state: model::external::cdm::ClosedStateEnum[1];
  {meta::pure::profiles::doc.doc = 'The activity date on which the closing state took place, i.e. either the event date of the closing event (e.g. option exercise, contract early termination) or the contractual termination date.'} activityDate: Date[1];
  {meta::pure::profiles::doc.doc = 'The date on which the closing event contractually takes effect, when different from the activity date. When an explicit event effective date attribute is associated with the closing event, it will be that date. In the case of a cancellation event, it will be the date on which the cancelled event took place.'} effectiveDate: Date[0..1];
  {meta::pure::profiles::doc.doc = 'The date associated with the last payment in relation to the artefact (e.g. contract) to which this closed state applies. As an example, in the case of an early termination event, it would be the settlement date of the associated fee, if applicable.'} lastPaymentDate: Date[0..1];
}

Class FpML::model::FixedAmountCalculation
{
  {meta::pure::profiles::doc.doc = 'The notional amount used in the calculation of fixed amounts where an amount is calculated on a formula basis, i.e. fixed amount = fixed rate payer calculation amount x fixed rate x fixed rate day count fraction. ISDA 2003 Term: Fixed Rate Payer Calculation Amount.'} calculationAmount: FpML::model::CalculationAmount[0..1];
  {meta::pure::profiles::doc.doc = 'The calculation period fixed rate. A per annum rate, expressed as a decimal. A fixed rate of 5% would be represented as 0.05.'} fixedRate: FpML::model::FixedRate[0..1];
  {meta::pure::profiles::doc.doc = 'The day count fraction. ISDA 2003 Term: Fixed Rate Day Count Fraction.'} dayCountFraction: FpML::model::DayCountFraction[0..1];
}

Class model::external::cdm::Buyr
{
  acctOwnr: model::external::cdm::AcctOwnr[1];
}

Class <<meta::pure::profiles::typemodifiers.abstract>> {meta::pure::profiles::doc.doc = 'An abstract pricing structure base type. Used as a base for structures such as yield curves and volatility matrices.'} FpML::model::PricingStructure
[
  c1_length: $this.name->forAll(x: String[1]|$x->length() >= 0)
]
{
  {meta::pure::profiles::doc.doc = 'The name of the structure, e.g \'USDLIBOR-3M EOD Curve\'.'} name: String[0..1];
  {meta::pure::profiles::doc.doc = 'The currency that the structure is expressed in (this is relevant mostly for the Interes Rates asset class).'} currency: FpML::model::Currency[0..1];
  id: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A pointer style reference to a set of business day calendar defined elsewhere in the document.'} FpML::model::BusinessCentersOrReference
[
  c1_choice: ($this.businessCentersReference->isNotEmpty() && $this.businessCenters->isEmpty()) || ($this.businessCentersReference->isEmpty() && $this.businessCenters->isNotEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'A pointer style reference to a set of financial business centers defined elsewhere in the document. This set of business centers is used to determine whether a particular day is a business day or not.'} businessCentersReference: FpML::model::BusinessCentersReference[0..1];
  businessCenters: FpML::model::BusinessCenters[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Specifies instruction to change the party on a trade. This primitive instruction is used in a number of scenarios including: clearing, allocation and novation. The instrution must include a trade identifier, because a change of party effectively results in a different trade.'} model::external::cdm::PartyChangeInstruction
{
  {meta::pure::profiles::doc.doc = 'The new counterparty who is stepping into the trade. The stepping out counterparty is inferred based on the counterparty role that is being updated.'} counterparty: model::external::cdm::Counterparty[1];
  {meta::pure::profiles::doc.doc = 'Specifies an ancillary party to be added onto the new transaction, e.g. the original executing party in an allocation.'} ancillaryParty: model::external::cdm::AncillaryParty[0..1];
  {meta::pure::profiles::doc.doc = 'The identifier to be assigned to the new trade post change of party.'} tradeId: model::external::cdm::Identifier[1..*];
}

Class {meta::pure::profiles::doc.doc = 'The data type used for indicating the language of the resource, described using the ISO 639-2/T Code.'} FpML::model::Language
[
  c1_length: $this.languageScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  languageScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'The type that indicates the length of the resource.'} FpML::model::ResourceLength
{
  {meta::pure::profiles::doc.doc = 'The length unit of the resource. For example, pages (pdf, text documents) or time (audio, video files).'} lengthUnit: FpML::model::LengthUnitEnum[0..1];
  {meta::pure::profiles::doc.doc = 'The length value of the resource.'} lengthValue: Decimal[0..1];
}

Class {meta::pure::profiles::doc.doc = 'As per ISDA 2002 Definitions.'} model::external::cdm::Asian
{
  averagingInOut: model::external::cdm::AveragingInOutEnum[1];
  {meta::pure::profiles::doc.doc = 'The factor of strike.'} strikeFactor: Float[0..1];
  {meta::pure::profiles::doc.doc = 'The averaging in period.'} averagingPeriodIn: model::external::cdm::AveragingPeriod[0..1];
  {meta::pure::profiles::doc.doc = 'The averaging out period.'} averagingPeriodOut: model::external::cdm::AveragingPeriod[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Specifies selected economics of a debt instrument.'} model::external::cdm::DebtEconomics
{
  {meta::pure::profiles::doc.doc = 'Specifies the order of repayment in the event of a sale or bankruptcy of the issuer or a related party (eg guarantor).'} debtSeniority: model::external::cdm::DebtSeniorityEnum[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the general rule for periodic interest rate payment.'} debtInterest: model::external::cdm::DebtInterestEnum[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the general rule for repayment of principal.'} debtPrincipal: model::external::cdm::DebtPrincipalEnum[0..1];
}

Class {meta::pure::profiles::doc.doc = 'The data type used for the legal name of an organization.'} FpML::model::PartyName
[
  c1_length: $this.partyNameScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  partyNameScheme: String[0..1];
  value: String[1];
}

Class model::external::cdm::AllocationInstruction
{
  {meta::pure::profiles::doc.doc = 'The set of allocation breakdowns to be applied to a block trade'} breakdowns: model::external::cdm::AllocationBreakdown[1..*];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify Collateral Valuation Agent language.'} model::external::cdm::CollateralValuationAgentElection
{
  {meta::pure::profiles::doc.doc = 'The elective party.'} party: model::external::cdm::CounterpartyRoleEnum[1];
  {meta::pure::profiles::doc.doc = 'The additional language that might be specified by the parties to the legal agreement.'} additionalLanguage: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Describes date details for a set of observation dates in parametric or non-parametric form.'} model::external::cdm::ObservationDates
{
  {meta::pure::profiles::doc.doc = 'Specifies a schedule of dates (non-parametric) on which market observations take place, and allows for the optional definition of weights where applicable.  When no weight is specified, then weight of each date is assumed to be 1.0'} observationSchedule: model::external::cdm::ObservationSchedule[*];
  {meta::pure::profiles::doc.doc = 'Specifies the date range and frequency on which market observations take place.  Weights can be assigned to dates in the schedule by assigning the weight and corresponding observationReference in the observationSchedule.'} periodicSchedule: model::external::cdm::PeriodicDates[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies parametric terms to determine which days within a given calculation period the price would be observed. Typically associated with Commodities.'} parametricDates: model::external::cdm::ParametricDates[0..1];
}

Class FpML::model::OtherAgreementType
[
  c1_length: $this.agreementTypeScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  agreementTypeScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the Custodian Event (English Law & New York Law ISDA CSA) or Collateral Manager Event (Japanese Law ISDA CSA) End Date. Its qualification is function of three elective periods: either (i) a specified number of days after the occurrence of the Custodian Event (the daysAfterCustodianEvent attribute), or (ii) the number of days prior to the date on which the Control Agreement will terminate, with in this latter case (iii) the further qualification of the number of days prior to the Release Date if only one party has effectively provided the Timely Statement to the other party. ISDA 2016 English Law Credit Support Deed for Initial Margin, paragraph 13, General Principles, (n)(iii): CE End Date. | ISDA 2016 Japanese Law Credit Support Annex for Initial Margin, paragraph 13, General Principles, (m)(ii): CME End Date. | ISDA 2016 New York Law Credit Support Annex for Initial Margin, paragraph 13, General Principles, (n)(iii): CE End Date.'} model::external::cdm::CustodianEventEndDate
{
  {meta::pure::profiles::doc.doc = 'The parties\' election to specify the number of days after the occurrence of the Custodian Event (English Law & New York Law ISDA CSA) or the Collateral Management Event (Japanese Law ISDA CSA) for the purpose of qualifying the CE/CME End Date.'} daysAfterCustodianEvent: model::external::cdm::CustomisableOffset[1];
  {meta::pure::profiles::doc.doc = 'The parties\' election to specify the number of days prior to the termination of the Control Agreement (English Law & New York Law ISDA CSA) or the Collateral Management Event (Japanese Law ISDA CSA) for the purpose of qualifying the CE/CME End Date, in the case where advance notice is given.'} releaseDate: model::external::cdm::CustomisableOffset[1];
  {meta::pure::profiles::doc.doc = 'The parties\' election to specify the number of days prior to the end of the safekeeping period (Clearstream CTA) purpose of qualifying the CE/CME End Date, in the case where advance notice is given.'} safekeepingPeriodExpiry: model::external::cdm::CustomisableOffset[0..1];
  {meta::pure::profiles::doc.doc = 'The parties\' election to specify the number of days one party has effectively provided the Timely Statement to the other party.'} dateOfTimelyStatement: model::external::cdm::CustomisableOffset[1];
}

Class {meta::pure::profiles::doc.doc = 'A type describing a mortgage asset.'} FpML::model::Mortgage extends FpML::model::UnderlyingAsset
[
  c1_length: $this.issuerName->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.tranche->forAll(x: String[1]|$x->length() >= 0)
]
{
  insurer: FpML::model::LegalEntity[0..1];
  insurerReference: FpML::model::LegalEntityReference[0..1];
  issuerName: String[0..1];
  issuerPartyReference: FpML::model::PartyReference[0..1];
  {meta::pure::profiles::doc.doc = 'The repayment precedence of a debt instrument.'} seniority: FpML::model::CreditSeniority[0..1];
  {meta::pure::profiles::doc.doc = 'Credit quality type (e.g. \'INVG\' - Investment grade; \'NIVG\' - Non-investment grade; \'NOTR\' - Non-rated). Classifies the risk of the security. Note: \'NOAP\' - Not applicable value is indicated by the absence of the \'creditQuality\' element.'} creditQuality: FpML::model::CreditQuality[*];
  {meta::pure::profiles::doc.doc = 'The credit rating.'} creditRating: FpML::model::CreditRating[*];
  {meta::pure::profiles::doc.doc = 'Specifies if the bond has a variable coupon, step-up/down coupon or a zero-coupon.'} couponType: FpML::model::CouponType[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the coupon rate (expressed in percentage) of a fixed income security or convertible bond.'} couponRate: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'The date when the principal amount of a security becomes due and payable.'} maturity: StrictDate[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the frequency at which the bond pays, e.g. 6M.'} paymentFrequency: FpML::model::Frequency[0..1];
  {meta::pure::profiles::doc.doc = 'The day count basis for the bond.'} dayCountFraction: FpML::model::DayCountFraction[0..1];
  {meta::pure::profiles::doc.doc = 'The initial issued amount of the mortgage obligation.'} originalPrincipalAmount: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'The morgage pool that is underneath the mortgage obligation.'} pool: FpML::model::AssetPool[0..1];
  {meta::pure::profiles::doc.doc = 'The sector classification of the mortgage obligation.'} sector: FpML::model::MortgageSector[0..1];
  {meta::pure::profiles::doc.doc = 'The mortgage obligation tranche that is subject to the derivative transaction.'} tranche: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type that allows an offset specified in business days to be applied for an observation shift, lookback, or lockout provision.'} FpML::model::ObservationOffset
{
  {meta::pure::profiles::doc.doc = 'The number of business days before the base date that the observations are to be shifted. If this element is omitted, the number of offset days will be as specified in the 2021 ISDA Definitions, which is typically 5.'} offsetDays: Decimal[0..1];
}

Class {meta::pure::profiles::doc.doc = 'The source of the Foreign Exchange settlement rate.'} model::external::cdm::FxSettlementRateSource
[
  FxSettlementRateSourceChoice: ($this.settlementRateOption->isNotEmpty() && $this.nonstandardSettlementRate->isEmpty()) || ($this.nonstandardSettlementRate->isNotEmpty() && $this.settlementRateOption->isEmpty())
]
{
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'Indicates that an officially defined rate settlement rate option will be the used for the fixing.'} settlementRateOption: String[0..1];
  {meta::pure::profiles::doc.doc = 'Indicates that a non-standard rate source will be used for the fixing.'} nonstandardSettlementRate: model::external::cdm::FxInformationSource[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Serves as an abstract class to specify a product using a productIdentifier.'} model::external::cdm::ProductBase
{
  <<model::external::cdm::metadata.address>> productIdentifier: model::external::cdm::ProductIdentifier[1..*];
}

Class {meta::pure::profiles::doc.doc = 'Defines a coding scheme of the entity types defined in the ISDA First to Default documentation.'} FpML::model::EntityType
[
  c1_length: $this.entityTypeScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  entityTypeScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'This class corresponds to the FpML PaymentDiscounting.model group for representing the discounting elements that can be associated with a payment.'} model::external::cdm::PaymentDiscounting
{
  {meta::pure::profiles::doc.doc = 'The value representing the discount factor used to calculate the present value of the cash flow.'} discountFactor: Float[0..1];
  {meta::pure::profiles::doc.doc = 'The amount representing the present value of the forecast payment.'} presentValueAmount: model::external::cdm::Money[0..1];
}

Class model::external::cdm::FinInstrmRptgTxRpt
{
  tx: model::external::cdm::Tx[1];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'A class defining parameters associated with an individual observation or fixing. This class forms part of the cashflow representation of a stream.'} model::external::cdm::RateObservation
[
  ObservationWeight: if($this.observationWeight->isNotEmpty(), |$this.observationWeight >= 0, |true)
]
{
  {meta::pure::profiles::doc.doc = 'The reset date.'} resetDate: Date[0..1];
  {meta::pure::profiles::doc.doc = 'The adjusted fixing date, i.e. the actual date the rate is observed. The date should already be adjusted for any applicable business day convention.'} adjustedFixingDate: Date[0..1];
  {meta::pure::profiles::doc.doc = 'The actual observed rate before any required rate treatment is applied, e.g. before converting a rate quoted on a discount basis to an equivalent yield. An observed rate of 5% would be represented as 0.05.'} observedRate: Float[0..1];
  {meta::pure::profiles::doc.doc = 'The observed rate after any required rate treatment is applied. A treated rate of 5% would be represented as 0.05.'} treatedRate: Float[0..1];
  {meta::pure::profiles::doc.doc = 'The number of days weighting to be associated with the rate observation, i.e. the number of days such rate is in effect. This is applicable in the case of a weighted average method of calculation where more than one reset date is established for a single calculation period.'} observationWeight: Integer[0..1];
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'A pointer style reference to a floating rate component defined as part of a stub calculation period amount component. It is only required when it is necessary to distinguish two rate observations for the same fixing date which could occur when linear interpolation of two different rates occurs for a stub calculation period.'} rateReference: model::external::cdm::RateObservation[0..1];
  {meta::pure::profiles::doc.doc = 'The value representing the forecast rate used to calculate the forecast future value of the accrual period.A value of 1% should be represented as 0.01.'} forecastRate: Float[0..1];
  {meta::pure::profiles::doc.doc = 'The value representing the forecast rate after applying rate treatment rules. A value of 1% should be represented as 0.01.'} treatedForecastRate: Float[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type defining a mathematical expression.'} FpML::model::Math
{
}

Class {meta::pure::profiles::doc.doc = 'Specifies a publication that provides the commodity price, including, where applicable, the details of where in the publication the price is published.'} model::external::cdm::PriceSource
{
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'Defines a publication in which the price can be found. (e.g Gas Daily, Platts Bloomberg. Commodity publishers can be found at this URL:  http://www.fpml.org/coding-scheme/commodity-information-provider'} pricePublisher: String[1];
  {meta::pure::profiles::doc.doc = 'Specifies the location of the price which may be a specific page, electornic screen name, or a code (e.g. a RIC code) where the price can be found.'} priceSourceLocation: String[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the heading or field name for the price  on a given page or screen, where applicable.'} priceSourceHeading: String[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the time at which the price should be observed.'} priceSourceTime: DateTime[0..1];
}

Class {meta::pure::profiles::doc.doc = 'As per ISDA 2002 Definitions.'} FpML::model::Asian
{
  averagingInOut: FpML::model::AveragingInOutEnum[0..1];
  {meta::pure::profiles::doc.doc = 'The factor of strike.'} strikeFactor: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'The averaging in period.'} averagingPeriodIn: FpML::model::AveragingPeriod[0..1];
  {meta::pure::profiles::doc.doc = 'The averaging out period.'} averagingPeriodOut: FpML::model::AveragingPeriod[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Specifies the conditions to be applied for converting into a reference currency when the actual currency rate is not determined upfront.'} FpML::model::Composite
{
  {meta::pure::profiles::doc.doc = 'Specifies the method according to which an amount or a date is determined.'} determinationMethod: FpML::model::DeterminationMethod[0..1];
  {meta::pure::profiles::doc.doc = 'A date specified as some offset to another date (the anchor date).'} relativeDate: FpML::model::RelativeDateOffset[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the methodology (reference source and, optionally, fixing time) to be used for determining a currency conversion rate.'} fxSpotRateSource: FpML::model::FxSpotRateSource[0..1];
}

Class FpML::model::PhysicalSettlementTerms extends FpML::model::SettlementTerms
{
  {meta::pure::profiles::doc.doc = 'The number of business days used in the determination of the physical settlement date. The physical settlement date is this number of business days after all applicable conditions to settlement are satisfied. If a number of business days is not specified fallback provisions apply for determining the number of business days. If Section 8.5/8.6 of the 1999/2003 ISDA Definitions are to apply the businessDaysNotSpecified element should be included. If a specified number of business days are to apply these should be specified in the businessDays element. If Section 8.5/8.6 of the 1999/2003 ISDA Definitions are to apply but capped at a maximum number of business days then the maximum number should be specified in the maximumBusinessDays element. ISDA 2003 Term: Physical Settlement Period'} physicalSettlementPeriod: FpML::model::PhysicalSettlementPeriod[0..1];
  {meta::pure::profiles::doc.doc = 'This element contains all the ISDA terms relevant to defining the deliverable obligations.'} deliverableObligations: FpML::model::DeliverableObligations[0..1];
  {meta::pure::profiles::doc.doc = 'If this element is specified and set to \'true\', indicates that physical settlement must take place through the use of an escrow agent. (For Canadian counterparties this is always \'Not Applicable\'. ISDA 2003 Term: Escrow.'} escrow: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'If this element is specified and set to \'true\', for a transaction documented under the 2003 ISDA Credit Derivatives Definitions, has the effect of incorporating the language set forth below into the confirmation. The section references are to the 2003 ISDA Credit Derivatives Definitions. Notwithstanding Section 1.7 or any provisions of Sections 9.9 or 9.10 to the contrary, but without prejudice to Section 9.3 and (where applicable) Sections 9.4, 9.5 and 9.6, if the Termination Date has not occurred on or prior to the date that is 60 Business Days following the Physical Settlement Date, such 60th Business Day shall be deemed to be the Termination Date with respect to this Transaction except in relation to any portion of the Transaction (an \'Affected Portion\') in respect of which: (1) a valid notice of Buy-in Price has been delivered that is effective fewer than three Business Days prior to such 60th Business Day, in which case the Termination Date for that Affected Portion shall be the third Business Day following the date on which such notice is effective; or (2) Buyer has purchased but not Delivered Deliverable Obligations validly specified by Seller pursuant to Section 9.10(b), in which case the Termination Date for that Affected Portion shall be the tenth Business Day following the date on which Seller validly specified such Deliverable Obligations to Buyer.'} sixtyBusinessDaySettlementCap: Boolean[0..1];
}

Class {meta::pure::profiles::doc.doc = 'The payment dates when specified as relative to a set of dates specified somewhere else in the instance document/transaction, e.g. the valuation dates as typically the case for equity swaps, or when specified as a calculation period schedule.'} model::external::cdm::PaymentDateSchedule
{
  interimPaymentDates: model::external::cdm::AdjustableRelativeOrPeriodicDates[*];
  {meta::pure::profiles::doc.doc = 'The last payment when specified as an adjustable or relative date, as in the FpML total return construct.'} finalPaymentDate: model::external::cdm::AdjustableOrRelativeDate[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A data defining:  an early termination provision where either or both parties have the right to exercise.'} model::external::cdm::OptionalEarlyTermination
[
  OptionalEarlyTerminationChoice: ((($this.americanExercise->isNotEmpty() && $this.bermudaExercise->isEmpty()) && $this.europeanExercise->isEmpty()) || (($this.bermudaExercise->isNotEmpty() && $this.americanExercise->isEmpty()) && $this.europeanExercise->isEmpty())) || (($this.europeanExercise->isNotEmpty() && $this.americanExercise->isEmpty()) && $this.bermudaExercise->isEmpty()),
  OptionalEarlyTerminationExerciseNoticeReceiverParty: if($this.exerciseNotice.exerciseNoticeReceiver->isNotEmpty(), |$this.exerciseNotice.exerciseNoticeReceiver == model::external::cdm::AncillaryRoleEnum.ExerciseNoticeReceiverPartyOptionalEarlyTermination, |true),
  MandatoryEarlyTerminationCalculationAgent: if($this.calculationAgent.calculationAgentParty->isNotEmpty(), |$this.calculationAgent.calculationAgentParty == model::external::cdm::AncillaryRoleEnum.CalculationAgentOptionalEarlyTermination, |true)
]
{
  {meta::pure::profiles::doc.doc = 'If optional early termination is not available to both parties then this component specifies the buyer and seller of the option. In FpML, this attribute is of type SinglePsrtyOption, which actually consists of the BuyerSeller.model.'} singlePartyOption: model::external::cdm::BuyerSeller[0..1];
  {meta::pure::profiles::doc.doc = 'Used for specifying whether the Mutual Early Termination Right that is detailed in the Master Confirmation will apply.'} mutualEarlyTermination: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'American exercise. FpML implementations consists in an exercise substitution group.'} americanExercise: model::external::cdm::AmericanExercise[0..1];
  {meta::pure::profiles::doc.doc = 'Bermuda exercise. FpML implementations consists in an exercise substitution group.'} bermudaExercise: model::external::cdm::BermudaExercise[0..1];
  {meta::pure::profiles::doc.doc = 'European exercise. FpML implementations consists in an exercise substitution group.'} europeanExercise: model::external::cdm::EuropeanExercise[0..1];
  {meta::pure::profiles::doc.doc = 'Definition of the party to whom notice of exercise should be given.'} exerciseNotice: model::external::cdm::ExerciseNotice[*];
  {meta::pure::profiles::doc.doc = 'A flag to indicate whether follow-up confirmation of exercise (written or electronic) is required following telephonic notice by the buyer to the seller or seller\'s agent.'} followUpConfirmation: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'The ISDA Calculation Agent responsible for performing duties associated with an optional early termination.'} calculationAgent: model::external::cdm::CalculationAgent[0..1];
  {meta::pure::profiles::doc.doc = 'If specified, this means that cash settlement is applicable to the transaction and defines the parameters associated with the cash settlement procedure. If not specified, then physical settlement is applicable.'} cashSettlement: model::external::cdm::SettlementTerms[0..1];
  {meta::pure::profiles::doc.doc = 'An early termination provision to terminate the trade at fair value where one or both parties have the right to decide on termination.'} optionalEarlyTerminationAdjustedDates: model::external::cdm::OptionalEarlyTerminationAdjustedDates[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type defining the business day convention and financial business centers used for adjusting any relevant date if it would otherwise fall on a day that is not a business day in the specified business centers.'} FpML::model::BusinessDayAdjustments
[
  c1_choice: ($this.businessCentersReference->isNotEmpty() && $this.businessCenters->isEmpty()) || ($this.businessCentersReference->isEmpty() && $this.businessCenters->isNotEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'The convention for adjusting a date if it would otherwise fall on a day that is not a business day.'} businessDayConvention: FpML::model::BusinessDayConventionEnum[0..1];
  {meta::pure::profiles::doc.doc = 'A pointer style reference to a set of financial business centers defined elsewhere in the document. This set of business centers is used to determine whether a particular day is a business day or not.'} businessCentersReference: FpML::model::BusinessCentersReference[0..1];
  businessCenters: FpML::model::BusinessCenters[0..1];
  id: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify contact information associated with a party: telephone, postal/street address, email and web page.'} model::external::cdm::ContactInformation
{
  {meta::pure::profiles::doc.doc = 'The telephone number.'} telephone: model::external::cdm::TelephoneNumber[*];
  {meta::pure::profiles::doc.doc = 'The street/postal address.'} address: model::external::cdm::Address[*];
  {meta::pure::profiles::doc.doc = 'The email address.'} email: String[*];
  {meta::pure::profiles::doc.doc = 'The web page. This attribute is not specified as part of the FpML ContactInformation complex type.'} webPage: String[*];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'A class for defining a date that shall be subject to adjustment if it would otherwise fall on a day that is not a business day in the specified business centers, together with the convention for adjusting the date.'} model::external::cdm::AdjustableOrAdjustedDate
[
  AdjustedDate: ($this.adjustedDate->isNotEmpty() || (($this.unadjustedDate->isNotEmpty() && $this.dateAdjustments->isNotEmpty()) && $this.adjustedDate->isNotEmpty())) || (($this.unadjustedDate->isNotEmpty() && $this.dateAdjustments->isNotEmpty()) && $this.adjustedDate->isEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'A date subject to adjustment.'} unadjustedDate: Date[0..1];
  {meta::pure::profiles::doc.doc = 'The business day convention and financial business centers used for adjusting the date if it would otherwise fall on a day that is not a business date in the specified business centers.'} dateAdjustments: model::external::cdm::BusinessDayAdjustments[0..1];
  <<model::external::cdm::metadata.id>> {meta::pure::profiles::doc.doc = 'The date once the adjustment has been performed. (Note that this date may change if the business center holidays change).'} adjustedDate: Date[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type defining the list of reference institutions polled for relevant rates or prices when determining the cash settlement amount for a product where cash settlement is applicable.'} FpML::model::CashSettlementReferenceBanks
{
  {meta::pure::profiles::doc.doc = 'An institution (party) identified by means of a coding scheme and an optional name.'} referenceBank: FpML::model::ReferenceBank[*];
  id: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type defining partial exercise. As defined in the 2000 ISDA Definitions, Section 12.3 Partial Exercise, the buyer of the option may exercise all or less than all the notional amount of the underlying swap but may not be less than the minimum notional amount (if specified) and must be an integral multiple of the integral multiple amount if specified.'} FpML::model::PartialExercise
[
  c1_range: $this.minimumNumberOfOptions->forAll(x: Decimal[1]|$x >= 0),
  c2_choice: ($this.minimumNotionalAmount->isNotEmpty() && $this.minimumNumberOfOptions->isEmpty()) || ($this.minimumNotionalAmount->isEmpty() && $this.minimumNumberOfOptions->isNotEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'A pointer style reference to the associated notional schedule defined elsewhere in the document. This element has been made optional as part of its integration in the OptionBaseExtended, because not required for the options on securities.'} notionalReference: FpML::model::NotionalReference[*];
  {meta::pure::profiles::doc.doc = 'A notional amount which restricts the amount of notional that can be exercised when partial exercise or multiple exercise is applicable. The integral multiple amount defines a lower limit of notional that can be exercised and also defines a unit multiple of notional that can be exercised, i.e. only integer multiples of this amount can be exercised.'} integralMultipleAmount: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'The minimum notional amount that can be exercised on a given exercise date. See multipleExercise.'} minimumNotionalAmount: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'The minimum number of options that can be exercised on a given exercise date.'} minimumNumberOfOptions: Decimal[0..1];
}

Class model::external::cdm::PriceReturnTerms
{
  {meta::pure::profiles::doc.doc = 'Specifies the interim valuation price(s) of the underlier. This price can be expressed either as an actual amount/currency, as a determination method, or by reference to another value specified in the swap document.'} valuationPriceInterim: model::external::cdm::EquityValuation[0..1];
  {meta::pure::profiles::doc.doc = '2018 ISDA CDM Equity Confirmation for Security Equity Swap: Final Price | Specifies the final valuation price of the underlier. This price can be expressed either as an actual amount/currency, as a determination method, or by reference to another value specified in the swap document.'} valuationPriceFinal: model::external::cdm::EquityValuation[1];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'A class defining the business day convention and financial business centers used for adjusting any relevant date if it would otherwise fall on a day that is not a business day in the specified business center.'} model::external::cdm::BusinessDayAdjustments
{
  {meta::pure::profiles::doc.doc = 'The convention for adjusting a date if it would otherwise fall on a day that is not a business day.'} businessDayConvention: model::external::cdm::BusinessDayConventionEnum[1];
  {meta::pure::profiles::doc.doc = 'The business center(s), specified either explicitly or by reference to those specified somewhere else in the instance document.'} businessCenters: model::external::cdm::BusinessCenters[0..1];
}

Class FpML::model::RequestedAction
[
  c1_length: $this.requestedActionScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  requestedActionScheme: String[0..1];
  value: String[1];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'Type defining the specification for a fixed rate.'} model::external::cdm::FixedRateSpecification
{
  {meta::pure::profiles::doc.doc = 'The fixed rate or fixed rate schedule expressed as explicit fixed rates and dates. In the case of a schedule, the step dates may be subject to adjustment in accordance with any adjustments specified in calculationPeriodDatesAdjustments.'} rateSchedule: model::external::cdm::RateSchedule[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Knock In means option to exercise comes into existence. Knock Out means option to exercise goes out of existence.'} FpML::model::Knock
[
  c1_choice: $this.knockIn->isNotEmpty() || ($this.knockIn->isEmpty() && $this.knockOut->isNotEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'The knock in.'} knockIn: FpML::model::TriggerEvent[0..1];
  {meta::pure::profiles::doc.doc = 'The knock out.'} knockOut: FpML::model::TriggerEvent[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Defines the strike price of an option.'} model::external::cdm::OptionStrike
[
  one_of_constraint: ((((($this.strikePrice->isNotEmpty() && $this.strikeReference->isEmpty()) && $this.referenceSwapCurve->isEmpty()) && $this.averagingStrikeFeature->isEmpty()) || ((($this.strikeReference->isNotEmpty() && $this.strikePrice->isEmpty()) && $this.referenceSwapCurve->isEmpty()) && $this.averagingStrikeFeature->isEmpty())) || ((($this.referenceSwapCurve->isNotEmpty() && $this.strikePrice->isEmpty()) && $this.strikeReference->isEmpty()) && $this.averagingStrikeFeature->isEmpty())) || ((($this.averagingStrikeFeature->isNotEmpty() && $this.strikePrice->isEmpty()) && $this.strikeReference->isEmpty()) && $this.referenceSwapCurve->isEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'Defines the strike of an option in the form of a price that could be a cash price, interestRate, or other types.'} strikePrice: model::external::cdm::Price[0..1];
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'Defines the strike of an option in reference to the spread of the underlying swap (typical practice in the case of an option on a credit single name swaps).'} strikeReference: model::external::cdm::FixedRateSpecification[0..1];
  {meta::pure::profiles::doc.doc = 'Defines the strike of an option when expressed by reference to a swap curve (Typically the case for a convertible bond option).'} referenceSwapCurve: model::external::cdm::ReferenceSwapCurve[0..1];
  {meta::pure::profiles::doc.doc = 'Defines an  option strike that is calculated from an average of observed market prices.'} averagingStrikeFeature: model::external::cdm::AveragingStrikeFeature[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Represents a class to allow specification of different types of special purpose vehicle (SPV) collateral.'} model::external::cdm::SpecialPurposeVehicleIssuerType
{
  {meta::pure::profiles::doc.doc = 'Indicates tranched or untranched credit risk.'} creditRisk: model::external::cdm::CreditRiskEnum[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Defines the handling of an averaging date market disruption for an equity derivative transaction.'} FpML::model::MarketDisruption
[
  c1_length: $this.marketDisruptionScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  marketDisruptionScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'Represents enumeration values to specify the call notification type, direction, specific action type.'} model::external::cdm::MarginCallInstructionType
{
  {meta::pure::profiles::doc.doc = 'Indicates the status of the call message type, such as expected call, notification of a call or an actionable margin call.'} callType: model::external::cdm::CallTypeEnum[1];
  {meta::pure::profiles::doc.doc = 'Indicates the choice if the call instruction is visible or not to the other party.'} visibilityIndicator: Boolean[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type defining the floating rate and definitions relating to the calculation of floating rate amounts. This type mimics the \'FloatingRateCalculation\' type but excludes the option of defining modular calculated rates and fallback rates. It provides an extension point for the InflationRateCalculation which does not require those features.'} FpML::model::InflationRateCalculationBase extends FpML::model::Rate
{
  {meta::pure::profiles::doc.doc = 'The ISDA Floating Rate Option, i.e. the name of the floating rate.'} floatingRateIndex: FpML::model::FloatingRateIndex[1];
  {meta::pure::profiles::doc.doc = 'The ISDA Designated Maturity, i.e. the tenor of the floating rate.'} indexTenor: FpML::model::Period[0..1];
  {meta::pure::profiles::doc.doc = 'A rate multiplier or multiplier schedule to apply to the floating rate. A multiplier schedule is expressed as explicit multipliers and dates. In the case of a schedule, the step dates may be subject to adjustment in accordance with any adjustments specified in the calculationPeriodDatesAdjustments. The multiplier can be a positive or negative decimal. This element should only be included if the multiplier is not equal to 1 (one) for the term of the stream.'} floatingRateMultiplierSchedule: FpML::model::Schedule[0..1];
  {meta::pure::profiles::doc.doc = 'The ISDA Spread or a Spread schedule expressed as explicit spreads and dates. In the case of a schedule, the step dates may be subject to adjustment in accordance with any adjustments specified in calculationPeriodDatesAdjustments. The spread is a per annum rate, expressed as a decimal. For purposes of determining a calculation period amount, if positive the spread will be added to the floating rate and if negative the spread will be subtracted from the floating rate. A positive 10 basis point (0.1%) spread would be represented as 0.001.'} spreadSchedule: FpML::model::SpreadSchedule[*];
  {meta::pure::profiles::doc.doc = 'The specification of any rate conversion which needs to be applied to the observed rate before being used in any calculations. The two common conversions are for securities quoted on a bank discount basis which will need to be converted to either a Money Market Yield or Bond Equivalent Yield. See the Annex to the 2000 ISDA Definitions, Section 7.3. Certain General Definitions Relating to Floating Rate Options, paragraphs (g) and (h) for definitions of these terms.'} rateTreatment: FpML::model::RateTreatmentEnum[0..1];
  {meta::pure::profiles::doc.doc = 'The cap rate or cap rate schedule, if any, which applies to the floating rate. The cap rate (strike) is only required where the floating rate on a swap stream is capped at a certain level. A cap rate schedule is expressed as explicit cap rates and dates and the step dates may be subject to adjustment in accordance with any adjustments specified in calculationPeriodDatesAdjustments. The cap rate is assumed to be exclusive of any spread and is a per annum rate, expressed as a decimal. A cap rate of 5% would be represented as 0.05.'} capRateSchedule: FpML::model::StrikeSchedule[*];
  {meta::pure::profiles::doc.doc = 'The floor rate or floor rate schedule, if any, which applies to the floating rate. The floor rate (strike) is only required where the floating rate on a swap stream is floored at a certain strike level. A floor rate schedule is expressed as explicit floor rates and dates and the step dates may be subject to adjustment in accordance with any adjustments specified in calculationPeriodDatesAdjustments. The floor rate is assumed to be exclusive of any spread and is a per annum rate, expressed as a decimal. A floor rate of 5% would be represented as 0.05.'} floorRateSchedule: FpML::model::StrikeSchedule[*];
  {meta::pure::profiles::doc.doc = 'This element is applicable in Transparency view (only) if both a capRateSchedule and a floorRateSchedule are set. If this is true, the buyer of both the cap and the floor protection is the same, and the structure is a cap/floor straddle. If this is false, the buyer of the cap is the seller of the floor, and the structure is a collar. This is needed because explicit information about the buyer and seller of the protection is not available in Transparnecy view.'} capFloorStraddle: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'The initial floating rate reset agreed between the principal parties involved in the trade. This is assumed to be the first required reset rate for the first regular calculation period. It should only be included when the rate is not equal to the rate published on the source implied by the floating rate index. An initial rate of 5% would be represented as 0.05. The initial floating rate reset agreed between the principal parties involved in the trade. This is assumed to be the first required reset rate for the first regular calculation period. It should only be included when the rate is not equal to the rate published on the source implied by the floating rate index. An initial rate of 5% would be represented as 0.05. - For use with pre-trade Credit Limit Check messages.'} initialRate: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'The rounding convention to apply to the final rate used in determination of a calculation period amount. The rounding convention to apply to the final rate used in determination of a calculation period amount. - For use with pre-trade Credit Limit Check messages.'} finalRateRounding: FpML::model::Rounding[0..1];
  {meta::pure::profiles::doc.doc = 'If averaging is applicable, this component specifies whether a weighted or unweighted average method of calculation is to be used. The component must only be included when averaging applies. If averaging is applicable, this component specifies whether a weighted or unweighted average method of calculation is to be used. The component must only be included when averaging applies. - For use with pre-trade Credit Limit Check messages.'} averagingMethod: FpML::model::AveragingMethodEnum[0..1];
  {meta::pure::profiles::doc.doc = 'The specification of any provisions for calculating payment obligations when a floating rate is negative (either due to a quoted negative floating rate or by operation of a spread that is subtracted from the floating rate). The specification of any provisions for calculating payment obligations when a floating rate is negative (either due to a quoted negative floating rate or by operation of a spread that is subtracted from the floating rate). - For use with pre-trade Credit Limit Check messages.'} negativeInterestRateTreatment: FpML::model::NegativeInterestRateTreatmentEnum[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to represent the transacted price attributes that are positioned as part of the FpML FeeLeg.'} model::external::cdm::TransactedPrice
{
  {meta::pure::profiles::doc.doc = 'An optional element that only has meaning in a credit index trade. This element contains the credit spread (\'fair value\') at which the trade was executed. Unlike the fixedRate of an index, the marketFixedRate varies over the life of the index depending on market conditions. The marketFixedRate is the price of the index as quoted by trading desks.'} marketFixedRate: Float[0..1];
  {meta::pure::profiles::doc.doc = 'An optional element that contains the up-front points expressed as a percentage of the notional. An initialPoints value of 5% would be represented as 0.05. The initialPoints element is an alternative to marketFixedRate in quoting the traded level of a trade. When initialPoints is used, the traded level is the sum of fixedRate and initialPoints. The initialPoints is one of the items that are factored into the initialPayment calculation and is payable by the Buyer to the Seller. Note that initialPoints and marketFixedRate may both be present in the same document when both implied values are desired.'} initialPoints: Float[0..1];
  {meta::pure::profiles::doc.doc = 'An optional element that only has meaning in a credit index trade. This element contains the price at which the trade was executed and is used instead of marketFixedRate on credit trades on certain indicies which are quoted using a price rather than a spread.'} marketPrice: Float[0..1];
  {meta::pure::profiles::doc.doc = 'An optional element that contains the up-front points expressed as a percentage of the notional. An initialPoints value of 5% would be represented as 0.05. The initialPoints element is an alternative to marketFixedRate in quoting the traded level of a trade. When initialPoints is used, the traded level is the sum of fixedRate and initialPoints. The initialPoints is one of the items that are factored into the initialPayment calculation and is payable by the Buyer to the Seller. Note that initialPoints and marketFixedRate may both be present in the same document when both implied values are desired.'} quotationStyle: model::external::cdm::QuotationStyleEnum[0..1];
}

Class {meta::pure::profiles::doc.doc = 'The specification of the Additional Type of transaction that can require the collection or delivery of initial margin under a given regulatory regime for the purposes of Covered Transactions, as specified in ISDA 2016 Credit Support Annex for Initial Margin, paragraph 13, General Principles, (b)(B).'} model::external::cdm::AdditionalType
[
  CustomValue: if($this.standardValue == model::external::cdm::AdditionalTypeEnum.Other, |$this.customValue->isNotEmpty(), |true),
  StandardValue: if(!($this.standardValue == model::external::cdm::AdditionalTypeEnum.Other), |$this.customValue->isEmpty(), |true)
]
{
  {meta::pure::profiles::doc.doc = 'The qualification of the Additional Type of transaction that can require the collection or delivery of initial margin when specified as a standard value.'} standardValue: model::external::cdm::AdditionalTypeEnum[1];
  {meta::pure::profiles::doc.doc = 'The qualification of the Additional Type of transaction that can require the collection or delivery of initial margin when specified as a custom value by the parties to the legal agreement.'} customValue: String[0..1];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'A class defining a legal agreement identifier issued by the indicated party.'} model::external::cdm::PartyAgreementIdentifier
{
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'Party that issued the document identifier.'} partyReference: model::external::cdm::Party[1];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'While FpML specifies the document identifier with a value and an associated scheme, the CDM makes use of the Identifier, which has an explicit issuer. The issuer of this identifier is not necessarily the same as the party reference.'} documentIdentifier: model::external::cdm::Identifier[1..*];
}

Class {meta::pure::profiles::doc.doc = 'Specifies the applicability of the Substituted Regime as denoted in the Substituted Regime Table as part of certain legal agreements, such as such as the ISDA 2016 and 2018 CSA for Initial Margin.'} model::external::cdm::SubstitutedRegimeTerms
{
  {meta::pure::profiles::doc.doc = 'The party for which the regime terms are being specified when acting as collateral taker.'} party: model::external::cdm::CounterpartyRoleEnum[1];
  {meta::pure::profiles::doc.doc = 'The specification of whether the regime is elected as applicable to the party when acting as collateral taker.'} isApplicable: Boolean[1];
}

Class {meta::pure::profiles::doc.doc = 'List of dates.'} model::external::cdm::DateList
{
  date: Date[1..*];
}

Class {meta::pure::profiles::doc.doc = 'An entity for defining a generic agreement executed between two parties for any purpose.'} FpML::model::GenericAgreement
{
  {meta::pure::profiles::doc.doc = 'The type of agreement executed between the parties.'} type: FpML::model::AgreementType[0..1];
  {meta::pure::profiles::doc.doc = 'The version of the agreement.'} version: FpML::model::AgreementVersion[0..1];
  {meta::pure::profiles::doc.doc = 'The date on which the agreement was signed.'} date: StrictDate[0..1];
  {meta::pure::profiles::doc.doc = 'A date on which the agreement was amended.'} amendmentDate: StrictDate[*];
  {meta::pure::profiles::doc.doc = 'Identification of the law governing the agreement.'} governingLaw: FpML::model::GoverningLaw[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type for defining the strike price for an option as a numeric value without currency.'} FpML::model::OptionNumericStrike
[
  c1_choice: ($this.strikePrice->isNotEmpty() && $this.strikePercentage->isEmpty()) || ($this.strikePrice->isEmpty() && $this.strikePercentage->isNotEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'The price or level at which the option has been struck.'} strikePrice: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'The price or level expressed as a percentage of the forward starting spot price. A value expressed in percentage units i.e. 5 means 5%.'} strikePercentage: Decimal[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class defining a currency and a future value date.'} model::external::cdm::FutureValueAmount
[
  PositiveCalculationPeriodNumberOfDays: $this.calculationPeriodNumberOfDays >= 0
]
{
  <<model::external::cdm::metadata.address>> quantity: model::external::cdm::Quantity[0..1];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'The currency in which the an amount is denominated. The list of valid currencies is not presently positioned as an enumeration as part of the CDM because that scope is limited to the values specified by ISDA and FpML. As a result, implementers have to make reference to the relevant standard, such as the ISO 4217 standard for currency codes.'} currency: String[1];
  {meta::pure::profiles::doc.doc = 'The number of days from the adjusted calculation period start date to the adjusted value date, calculated in accordance with the applicable day count fraction.'} calculationPeriodNumberOfDays: Integer[1];
  {meta::pure::profiles::doc.doc = 'Adjusted value date of the future value amount.'} valueDate: Date[1];
}

Class {meta::pure::profiles::doc.doc = 'Represents a set of criteria used to specify and desribe collateral.'} model::external::cdm::CollateralCriteriaBase
{
  {meta::pure::profiles::doc.doc = 'Represents a filter based criterai related to the issuer.'} issuer: model::external::cdm::IssuerCriteria[*];
  {meta::pure::profiles::doc.doc = 'Represents a filter based on the criteria realted to the asset.'} asset: model::external::cdm::AssetCriteria[*];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the type of legal agreement, which is extended by each legal agreement instance, such as the ISDA 2016 CSA for Initial Margin.'} model::external::cdm::LegalAgreementType
{
  {meta::pure::profiles::doc.doc = 'The legal agreement name, e.g. Credit Support Annex for Variation Margin.'} name: model::external::cdm::LegalAgreementNameEnum[1];
  {meta::pure::profiles::doc.doc = 'The legal agreement publisher, e.g. ISDA.'} publisher: model::external::cdm::LegalAgreementPublisherEnum[1];
  {meta::pure::profiles::doc.doc = 'The law governing the legal agreement, e.g. English Law, New York Law or Japanese Law.'} governingLaw: model::external::cdm::GoverningLawEnum[0..1];
  {meta::pure::profiles::doc.doc = 'In the case where successive definitions of the legal agreement have been developed, the vintage identification. This is typically (but not necessarily) done by referencing the year, e.g. 2013 in the case of the ISDA 2013 Standard Credit Support Annex.'} vintage: Integer[0..1];
}

Class model::external::cdm::SchmeNm
{
  prtry: String[1];
}

Class model::external::cdm::UndrlygInstrm
{
  swp: model::external::cdm::Swp[1];
}

Class {meta::pure::profiles::doc.doc = 'A data defining:  discounting information. The 2000 ISDA definitions, section 8.4. discounting (related to the calculation of a discounted fixed amount or floating amount) apply. This type must only be included if discounting applies.'} model::external::cdm::DiscountingMethod
[
  Discounting_discountRate: if($this.discountRateDayCountFraction->isNotEmpty(), |$this.discountRate->isNotEmpty(), |true)
]
{
  {meta::pure::profiles::doc.doc = 'The discounting method that is applicable.'} discountingType: model::external::cdm::DiscountingTypeEnum[1];
  {meta::pure::profiles::doc.doc = 'A discount rate, expressed as a decimal, to be used in the calculation of a discounted amount. A discount amount of 5% would be represented as 0.05.'} discountRate: Float[0..1];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'A discount day count fraction to be used in the calculation of a discounted amount.'} discountRateDayCountFraction: model::external::cdm::DayCountFractionEnum[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type that supports the division of a gross settlement amount into a number of split settlements, each requiring its own settlement instruction.'} FpML::model::SplitSettlement
{
  {meta::pure::profiles::doc.doc = 'One of the monetary amounts in a split settlement payment.'} splitSettlementAmount: FpML::model::Money[0..1];
  {meta::pure::profiles::doc.doc = 'The bank that acts for the ultimate beneficiary of the funds in receiving payments.'} beneficiaryBank: FpML::model::Routing[0..1];
  {meta::pure::profiles::doc.doc = 'The ultimate beneficiary of the funds. The beneficiary can be identified either by an account at the beneficiaryBank (qv) or by explicit routingInformation. This element provides for the latter.'} beneficiary: FpML::model::Routing[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type defines nearest Delivery Date of the underlying Commodity of expiration of the futures contract.'} FpML::model::DeliveryNearby
{
  {meta::pure::profiles::doc.doc = 'A time multiplier, e.g. 1, 2 or 3 etc. used in defining Delivery Nearby date.'} deliveryNearbyMultiplier: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'Defines a type of the delivery nearby qualifier, expect to be used in conjunction with a delivery nearby multiplier, e.g. 1NearByMonth, 1NearbyWeek, etc. If \'CalculationPeriod\' is used, the delivery nearby multiplier is expected to be \'0\'. To represent \'Spot\', the value of the delivery nearby type should be \'NearbyMonth\' and the delivery period multiplier should be set to \'0\' (zero).'} deliveryNearbyType: FpML::model::DeliveryNearbyTypeEnum[0..1];
  id: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Knock In means option to exercise comes into existence. Knock Out means option to exercise goes out of existence.'} model::external::cdm::Knock
{
  {meta::pure::profiles::doc.doc = 'The knock in.'} knockIn: model::external::cdm::TriggerEvent[0..1];
  {meta::pure::profiles::doc.doc = 'The knock out.'} knockOut: model::external::cdm::TriggerEvent[0..1];
}

Class model::external::cdm::PriceExpression
{
  priceType: model::external::cdm::PriceTypeEnum[1];
  priceExpression: model::external::cdm::PriceExpressionEnum[0..1];
  grossOrNet: model::external::cdm::GrossOrNetEnum[0..1];
  cashPrice: model::external::cdm::CashPrice[0..1];
  cleanOrDirty: model::external::cdm::CleanOrDirtyPriceEnum[0..1];
  capFloor: model::external::cdm::CapFloorEnum[0..1];
  spreadType: model::external::cdm::SpreadTypeEnum[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type defining a floating rate.'} FpML::model::FloatingRate extends FpML::model::Rate
{
  {meta::pure::profiles::doc.doc = 'The ISDA Floating Rate Option, i.e. the name of the floating rate.'} floatingRateIndex: FpML::model::FloatingRateIndex[1];
  {meta::pure::profiles::doc.doc = 'The ISDA Designated Maturity, i.e. the tenor of the floating rate.'} indexTenor: FpML::model::Period[0..1];
  {meta::pure::profiles::doc.doc = 'Parameters to specify a rate calculated using an averaging or compounding formula, as described in the 2021 ISDA Defintions, section 7. Please note that when this structure is used, the \'resetDates\' structure will not be used. Instead, the observation rules for the calculated rate are defined within the structure.'} calculationParameters: FpML::model::CalculationParameters[0..1];
  {meta::pure::profiles::doc.doc = 'A fallback rate calculated using an averaging or compounding formula to be used in case of the cessation of the original term rate. This structure is provided to 1) allow a message sender to report that a fallback is effect, and/or 2) allow an approximate representation to be created for published fallback rates to allow operations such as valuation, accrual calculation, and risk calculation.'} fallbackRate: FpML::model::FallbackRate[0..1];
  {meta::pure::profiles::doc.doc = 'A rate multiplier or multiplier schedule to apply to the floating rate. A multiplier schedule is expressed as explicit multipliers and dates. In the case of a schedule, the step dates may be subject to adjustment in accordance with any adjustments specified in the calculationPeriodDatesAdjustments. The multiplier can be a positive or negative decimal. This element should only be included if the multiplier is not equal to 1 (one) for the term of the stream.'} floatingRateMultiplierSchedule: FpML::model::Schedule[0..1];
  {meta::pure::profiles::doc.doc = 'The ISDA Spread or a Spread schedule expressed as explicit spreads and dates. In the case of a schedule, the step dates may be subject to adjustment in accordance with any adjustments specified in calculationPeriodDatesAdjustments. The spread is a per annum rate, expressed as a decimal. For purposes of determining a calculation period amount, if positive the spread will be added to the floating rate and if negative the spread will be subtracted from the floating rate. A positive 10 basis point (0.1%) spread would be represented as 0.001.'} spreadSchedule: FpML::model::SpreadSchedule[*];
  {meta::pure::profiles::doc.doc = 'The specification of any rate conversion which needs to be applied to the observed rate before being used in any calculations. The two common conversions are for securities quoted on a bank discount basis which will need to be converted to either a Money Market Yield or Bond Equivalent Yield. See the Annex to the 2000 ISDA Definitions, Section 7.3. Certain General Definitions Relating to Floating Rate Options, paragraphs (g) and (h) for definitions of these terms.'} rateTreatment: FpML::model::RateTreatmentEnum[0..1];
  {meta::pure::profiles::doc.doc = 'The cap rate or cap rate schedule, if any, which applies to the floating rate. The cap rate (strike) is only required where the floating rate on a swap stream is capped at a certain level. A cap rate schedule is expressed as explicit cap rates and dates and the step dates may be subject to adjustment in accordance with any adjustments specified in calculationPeriodDatesAdjustments. The cap rate is assumed to be exclusive of any spread and is a per annum rate, expressed as a decimal. A cap rate of 5% would be represented as 0.05.'} capRateSchedule: FpML::model::StrikeSchedule[*];
  {meta::pure::profiles::doc.doc = 'The floor rate or floor rate schedule, if any, which applies to the floating rate. The floor rate (strike) is only required where the floating rate on a swap stream is floored at a certain strike level. A floor rate schedule is expressed as explicit floor rates and dates and the step dates may be subject to adjustment in accordance with any adjustments specified in calculationPeriodDatesAdjustments. The floor rate is assumed to be exclusive of any spread and is a per annum rate, expressed as a decimal. A floor rate of 5% would be represented as 0.05.'} floorRateSchedule: FpML::model::StrikeSchedule[*];
  {meta::pure::profiles::doc.doc = 'This element is applicable in Transparency view (only) if both a capRateSchedule and a floorRateSchedule are set. If this is true, the buyer of both the cap and the floor protection is the same, and the structure is a cap/floor straddle. If this is false, the buyer of the cap is the seller of the floor, and the structure is a collar. This is needed because explicit information about the buyer and seller of the protection is not available in Transparnecy view.'} capFloorStraddle: Boolean[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class describing the rate of a currency conversion: pair of currency, quotation mode and exchange rate.'} model::external::cdm::FxRate
{
  {meta::pure::profiles::doc.doc = 'Defines the two currencies for an FX trade and the quotation relationship between the two currencies.'} quotedCurrencyPair: model::external::cdm::QuotedCurrencyPair[1];
  {meta::pure::profiles::doc.doc = 'The rate of exchange between the two currencies of the leg of a deal. Must be specified with a quote basis.'} rate: Float[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the ISDA SIMM as the Method for all Covered Transactions with respect to all Regimes. ISDA 2016 Credit Support Annex for Initial Margin, paragraph 13, General Principles, (ee).'} model::external::cdm::GeneralSimmElections
{
  {meta::pure::profiles::doc.doc = 'The qualification of the ISDA SIMM version that is specified for all Covered Transactions as specified by ISDA 2018 CSA for Initial Margin, Paragraph 13, General Principles, (ee)(1).'} simmVersion: model::external::cdm::SimmVersion[0..1];
  {meta::pure::profiles::doc.doc = 'The SIMM Calculation Currency, as specified for each of the parties to the CSA Initial Margin. ISDA 2016 Credit Support Annex for Initial Margin, paragraph 13, General Principles, (ee)(3).'} simmCalculationCurrency: model::external::cdm::SimmCalculationCurrency[1];
}

Class {meta::pure::profiles::doc.doc = 'Represents the mappings of FRO codes to other.'} model::external::cdm::FloatingRateIndexExternalMappings
{
  isoCode: model::external::cdm::FloatingRateIndexExternalMap[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Class containing terms that are associated with observing a price/benchmark/index across either single or multple observations.'} model::external::cdm::ObservationTerms
{
  {meta::pure::profiles::doc.doc = 'Defines time in respect to a business calendar location that the price/benchmark/index is observed'} pricingTime: model::external::cdm::BusinessCenterTime[1];
  {meta::pure::profiles::doc.doc = 'The enumerated values to specify points in the day when option exercise and valuation can occur.'} pricingTimeType: model::external::cdm::TimeTypeEnum[0..1];
  {meta::pure::profiles::doc.doc = 'The information source where a published or displayed market rate will be obtained, e.g. Telerate Page 3750.'} informationSource: model::external::cdm::FxSpotRateSource[0..1];
  {meta::pure::profiles::doc.doc = 'Defines rounding rules and precision to be used in the rounding of observations.'} precision: model::external::cdm::Rounding[0..1];
  {meta::pure::profiles::doc.doc = 'Defines parameters used to generate the calculation period dates schedule, including the specification of any initial or final stub calculation periods. A calculation period schedule consists of an optional initial stub calculation period, one or more regular calculation periods and an optional final stub calculation period. In the absence of any initial or final stub calculation periods, the regular part of the calculation period schedule is assumed to be between the effective date and the termination date. No implicit stubs are allowed, i.e. stubs must be explicitly specified using an appropriate combination of firstPeriodStartDate, firstRegularPeriodStartDate and lastRegularPeriodEndDate.'} calculationPeriodDates: model::external::cdm::CalculationPeriodDates[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the object to be observed for a price, it could be an asset or a reference.'} observable: model::external::cdm::Observable[0..1];
  {meta::pure::profiles::doc.doc = 'Describes date details for a set of observation dates in parametric or non-parametric form.'} observationDates: model::external::cdm::ObservationDates[1];
}

Class FpML::model::CreditQuality
[
  c1_length: $this.creditQualityScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  creditQualityScheme: String[0..1];
  value: String[1];
}

Class FpML::model::FxInformationSource extends FpML::model::InformationSource
{
  {meta::pure::profiles::doc.doc = 'The time that the fixing will be taken along with a business center to define the time zone'} fixingTime: FpML::model::BusinessCenterTime[0..1];
}

Class {meta::pure::profiles::doc.doc = 'An servicing date relevant for a trade structure, such as a payment or a reset.'} FpML::model::ScheduledDateBase
[
  c1_choice: $this.unadjustedDate->isNotEmpty() || ($this.unadjustedDate->isEmpty() && $this.adjustedDate->isNotEmpty())
]
{
  unadjustedDate: StrictDate[0..1];
  adjustedDate: StrictDate[0..1];
  {meta::pure::profiles::doc.doc = 'The type of the date, e.g. next or previous payment.'} type: FpML::model::ScheduledDateType[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Payout based on the averaged price of a referenced underlier. (e.g. Commodities). Can represent both average (average of many) & bullet (average of 1) pricing'} model::external::cdm::CommodityPayout extends model::external::cdm::ObservationPayout
{
  {meta::pure::profiles::doc.doc = 'Indicates if the averaging calculation, when applicable, is weighted or unweighted.'} averagingMethod: model::external::cdm::AveragingMethodEnum[0..1];
  {meta::pure::profiles::doc.doc = 'Defines parameters in which the commodity price is assessed.'} commodityPriceReturnTerms: model::external::cdm::CommodityPriceReturnTerms[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies specific dates or parametric rules for the dates on which the price will be determined.'} pricingDates: model::external::cdm::PricingDates[1];
}

Class {meta::pure::profiles::doc.doc = 'Represents common attributes required for a Margin Call Response under a legal agreement such as a credit support document or equivalent.'} model::external::cdm::MarginCallResponse extends model::external::cdm::MarginCallBase
{
  {meta::pure::profiles::doc.doc = 'Specifies the margin call action details, including collateral to be moved and direction.'} marginCallResponseAction: model::external::cdm::MarginCallResponseAction[1..*];
  {meta::pure::profiles::doc.doc = 'Indicates the response type, such as, is the margin call response a \'full\' \'part\' agreement or \'dispute\'.'} marginResponseType: model::external::cdm::MarginCallResponseTypeEnum[1];
  {meta::pure::profiles::doc.doc = 'Indicates the amount that posting entity agrees to remit in response to margin call (in base currency).'} agreedAmountBaseCurrency: model::external::cdm::Money[1];
}

Class {meta::pure::profiles::doc.doc = 'Defines the structures needed to represent the calculation parameters for daily averaged and compounded modular rates as defined in the 2021 ISDA Definitions in Section 7. This type is used to represent modular computed rates in interestRatePayouts.'} model::external::cdm::FloatingRateCalculationParameters
{
  {meta::pure::profiles::doc.doc = 'calculation type (averaging or compounding).'} calculationMethod: model::external::cdm::CalculationMethodEnum[1];
  {meta::pure::profiles::doc.doc = 'any obervation shift parameters if applicable.'} observationShiftCalculation: model::external::cdm::ObservationShiftCalculation[0..1];
  {meta::pure::profiles::doc.doc = 'any lookback  parameters if applicable.'} lookbackCalculation: model::external::cdm::OffsetCalculation[0..1];
  {meta::pure::profiles::doc.doc = 'any lockout  parameters if applicable.'} lockoutCalculation: model::external::cdm::OffsetCalculation[0..1];
  {meta::pure::profiles::doc.doc = 'the business days that are applicable for the calculation.'} applicableBusinessDays: model::external::cdm::BusinessCenters[0..1];
  {meta::pure::profiles::doc.doc = 'any applicable observation parameters, such as daily caps or floors.'} observationParameters: model::external::cdm::ObservationParameters[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the application of Interest Amount with respect the Delivery Amount. ISDA 2016 Japanese Law Credit Support Annex for Initial Margin, paragraph 13, General Principles, (n)(ii).'} model::external::cdm::DeliveryAmount
[
  one_of_constraint: ($this.standardElection->isNotEmpty() && $this.customElection->isEmpty()) || ($this.customElection->isNotEmpty() && $this.standardElection->isEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'The standard election as specified by an enumeration.'} standardElection: model::external::cdm::DeliveryAmountElectionEnum[0..1];
  {meta::pure::profiles::doc.doc = 'The custom election that might be specified by the parties to the agreement.'} customElection: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Reference to a currency with ID attribute'} FpML::model::IdentifiedCurrencyReference extends FpML::model::Reference
{
  href: String[1];
}

Class {meta::pure::profiles::doc.doc = 'A type that specifies the source for and timing of a fixing of an exchange rate. This is used in the agreement of non-deliverable forward trades as well as various types of FX OTC options that require observations against a particular rate.'} FpML::model::FxFixing
{
  {meta::pure::profiles::doc.doc = 'Defines the two currencies for an FX trade and the quotation relationship between the two currencies.'} quotedCurrencyPair: FpML::model::QuotedCurrencyPair[0..1];
  {meta::pure::profiles::doc.doc = 'Describes the specific date when a non-deliverable forward or cash-settled option will \'fix\' against a particular rate, which will be used to compute the ultimate cash settlement. This element should be omitted where a single, discrete fixing date cannot be identified e.g. on an american option, where fixing may occur at any date on a continuous range.'} fixingDate: StrictDate[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the methodology (reference source and, optionally, fixing time) to be used for determining a currency conversion rate.'} fxSpotRateSource: FpML::model::FxSpotRateSource[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type describing a role played by a party in one or more transactions. Examples include roles such as guarantor, custodian, confirmation service provider, etc. This can be extended to provide custom roles.'} FpML::model::PartyRole
[
  c1_length: $this.partyRoleScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  partyRoleScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'A single weighted averaging observation.'} FpML::model::WeightedAveragingObservation
[
  c1_range: $this.weight->forAll(x: Decimal[1]|$x >= 0),
  c2_choice: ($this.dateTime->isNotEmpty() && $this.observationNumber->isEmpty()) || ($this.dateTime->isEmpty() && $this.observationNumber->isNotEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'Observation date time, which should be used when literal observation dates are required.'} dateTime: DateTime[0..1];
  {meta::pure::profiles::doc.doc = 'Observation number, which should be unique, within a series generated by a date schedule.'} observationNumber: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'Observation weight, which is used as a multiplier for the observation value.'} weight: Decimal[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type defining an offset used in calculating a date when this date is defined in reference to another date through a date offset. The type includes the convention for adjusting the date and an optional sequence element to indicate the order in a sequence of multiple date offsets.'} FpML::model::DateOffset extends FpML::model::Offset
{
  {meta::pure::profiles::doc.doc = 'The convention for adjusting a date if it would otherwise fall on a day that is not a business day.'} businessDayConvention: FpML::model::BusinessDayConventionEnum[0..1];
}

Class {meta::pure::profiles::doc.doc = 'An entity for defining the definitions that govern the document and should include the year and type of definitions referenced, along with any relevant documentation (such as master agreement) and the date it was signed.'} FpML::model::Documentation
[
  c1_choice: ($this.masterConfirmation->isNotEmpty() && $this.brokerConfirmation->isEmpty()) || ($this.masterConfirmation->isEmpty() && $this.brokerConfirmation->isNotEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'The agreement executed between the parties and intended to govern all OTC derivatives transactions between those parties.'} masterAgreement: FpML::model::MasterAgreement[0..1];
  {meta::pure::profiles::doc.doc = 'The agreement executed between the parties and intended to govern all OTC derivatives transactions between those parties.'} masterConfirmation: FpML::model::MasterConfirmation[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the deails for a broker confirm.'} brokerConfirmation: FpML::model::BrokerConfirmation[0..1];
  {meta::pure::profiles::doc.doc = 'The definitions such as those published by ISDA that will define the terms of the trade.'} contractualDefinitions: FpML::model::ContractualDefinitions[*];
  {meta::pure::profiles::doc.doc = 'A contractual supplement (such as those published by ISDA) that will apply to the trade.'} contractualTermsSupplement: FpML::model::ContractualTermsSupplement[*];
  {meta::pure::profiles::doc.doc = 'A reference to a contractual matrix of elected terms/values (such as those published by ISDA) that shall be deemed to apply to the trade. The applicable matrix is identified by reference to a name and optionally a publication date. Depending on the structure of the matrix, an additional term (specified in the matrixTerm element) may be required to further identify a subset of applicable terms/values within the matrix.'} contractualMatrix: FpML::model::ContractualMatrix[*];
  {meta::pure::profiles::doc.doc = 'The agreement executed between the parties and intended to govern collateral arrangement for all OTC derivatives transactions between those parties.'} creditSupportAgreement: FpML::model::CreditSupportAgreement[0..1];
  {meta::pure::profiles::doc.doc = 'Any other agreement executed between the parties.'} otherAgreement: FpML::model::OtherAgreement[*];
  {meta::pure::profiles::doc.doc = 'A human readable document related to this transaction, for example a confirmation.'} attachment: FpML::model::Resource[*];
}

Class FpML::model::PeriodicPayment extends FpML::model::PaymentBase
{
  {meta::pure::profiles::doc.doc = 'The time interval between regular fixed rate payer payment dates.'} paymentFrequency: FpML::model::Period[0..1];
  {meta::pure::profiles::doc.doc = 'The start date of the initial calculation period if such date is not equal to the trade\u2019s effective date. It must only be specified if it is not equal to the effective date. The applicable business day convention and business day are those specified in the dateAdjustments element within the generalTerms component (or in a transaction supplement FpML representation defined within the referenced general terms confirmation agreement).'} firstPeriodStartDate: StrictDate[0..1];
  {meta::pure::profiles::doc.doc = 'The first unadjusted fixed rate payer payment date. The applicable business day convention and business day are those specified in the dateAdjustments element within the generalTerms component (or in a transaction supplement FpML representation defined within the referenced general terms confirmation agreement). ISDA 2003 Term: Fixed Rate Payer Payment Date'} firstPaymentDate: StrictDate[0..1];
  {meta::pure::profiles::doc.doc = 'The last regular unadjusted fixed rate payer payment date. The applicable business day convention and business day are those specified in the dateAdjustments element within the generalTerms component (or in a transaction supplement FpML representation defined within the referenced general terms confirmation agreement). This element should only be included if there is a final payment stub, i.e. where the last regular unadjusted fixed rate payer payment date is not equal to the scheduled termination date. ISDA 2003 Term: Fixed Rate Payer Payment Date'} lastRegularPaymentDate: StrictDate[0..1];
  {meta::pure::profiles::doc.doc = 'Used in conjunction with the effectiveDate, scheduledTerminationDate, firstPaymentDate, lastRegularPaymentDate and paymentFrequency to determine the regular fixed rate payer payment dates.'} rollConvention: FpML::model::RollConventionEnum[0..1];
  {meta::pure::profiles::doc.doc = 'A fixed payment amount. ISDA 2003 Term: Fixed Amount'} fixedAmount: FpML::model::Money[0..1];
  {meta::pure::profiles::doc.doc = 'This element contains all the terms relevant to calculating a fixed amount where the fixed amount is calculated by reference to a per annum fixed rate. There is no corresponding ISDA 2003 Term. The equivalent is Sec 5.1 \'Calculation of Fixed Amount\' but this in itself is not a defined Term.'} fixedAmountCalculation: FpML::model::FixedAmountCalculation[0..1];
  floatingAmountCalculation: FpML::model::FloatingAmountCalculation[0..1];
  {meta::pure::profiles::doc.doc = 'An optional cashflow-like structure allowing the equivalent representation of the periodic fixed payments in terms of a series of adjusted payment dates and amounts. This is intended to support application integration within an organisation and is not intended for use in inter-firm communication or confirmations. ISDA 2003 Term: Fixed Rate Payer Payment Date'} adjustedPaymentDates: FpML::model::AdjustedPaymentDates[*];
}

Class {meta::pure::profiles::doc.doc = 'Version aware identification of a leg.'} FpML::model::LegIdentifier
{
  {meta::pure::profiles::doc.doc = 'Identity of this leg.'} legId: FpML::model::LegId[0..1];
  {meta::pure::profiles::doc.doc = 'The version number'} version: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'Optionally it is possible to specify a version effective date when a versionId is supplied.'} effectiveDate: FpML::model::IdentifiedDate[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Provides an abstract base class shared by Price and Quantity.'} model::external::cdm::MeasureBase
{
  {meta::pure::profiles::doc.doc = 'Specifies an amount to be qualified and used in a Price or Quantity definition.'} amount: Float[1];
  {meta::pure::profiles::doc.doc = 'Qualifies the unit by which the amount is measured.'} unitOfAmount: model::external::cdm::UnitType[1];
}

Class {meta::pure::profiles::doc.doc = 'A type defining the way in which interests are accrued: the applicable rate (fixed or floating reference) and the compounding method.'} FpML::model::InterestAccrualsCompoundingMethod extends FpML::model::InterestAccrualsMethod
{
  {meta::pure::profiles::doc.doc = 'If more that one calculation period contributes to a single payment amount this element specifies whether compounding is applicable, and if so, what compounding method is to be used. This element must only be included when more that one calculation period contributes to a single payment amount.'} compoundingMethod: FpML::model::CompoundingMethodEnum[0..1];
}

Class {meta::pure::profiles::doc.doc = 'The data type used for resource identifiers.'} FpML::model::ResourceId
[
  c1_length: $this.resourceIdScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() >= 1,
  c3_length: $this.value->length() <= 255
]
{
  resourceIdScheme: String[0..1];
  value: String[1];
}

Class FpML::model::OtherAgreementVersion
[
  c1_length: $this.agreementVersionScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  agreementVersionScheme: String[0..1];
  value: String[1];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'This defines the time interval to the start of the exercise period, i.e. the earliest exercise date, and the frequency of subsequent exercise dates (if any).'} model::external::cdm::ExercisePeriod
{
  {meta::pure::profiles::doc.doc = 'The time interval to the first (and possibly only) exercise date in the exercise period.'} earliestExerciseDateTenor: model::external::cdm::Period[1];
  {meta::pure::profiles::doc.doc = 'The frequency of subsequent exercise dates in the exercise period following the earliest exercise date. An interval of 1 day should be used to indicate an American style exercise period.'} exerciseFrequency: model::external::cdm::Period[0..1];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'A data to:  define the adjusted dates associated with an individual extension event.'} model::external::cdm::ExtensionEvent
[
  FpML_ird_42: $this.adjustedExerciseDate < $this.adjustedExtendedTerminationDate
]
{
  {meta::pure::profiles::doc.doc = 'The date on which option exercise takes place. This date should already be adjusted for any applicable business day convention.'} adjustedExerciseDate: Date[1];
  {meta::pure::profiles::doc.doc = 'The termination date if an extendible provision is exercised. This date should already be adjusted for any applicable business day convention.'} adjustedExtendedTerminationDate: Date[1];
}

Class FpML::model::FixedRateReference extends FpML::model::Reference
{
  href: String[1];
}

Class {meta::pure::profiles::doc.doc = 'This type contains all the constituent weight and reference information.'} FpML::model::ReferencePoolItem
{
  {meta::pure::profiles::doc.doc = 'Describes the weight of each of the constituents within the basket. If not provided, it is assumed to be equal weighted.'} constituentWeight: FpML::model::ConstituentWeight[0..1];
  referencePair: FpML::model::ReferencePair[0..1];
  {meta::pure::profiles::doc.doc = 'Reference to the documentation terms applicable to this item.'} protectionTermsReference: FpML::model::ProtectionTermsReference[0..1];
  {meta::pure::profiles::doc.doc = 'Reference to the settlement terms applicable to this item.'} settlementTermsReference: FpML::model::SettlementTermsReference[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type for defining a date that shall be subject to adjustment if it would otherwise fall on a day that is not a business day in the specified business centers, together with the convention for adjusting the date.'} FpML::model::AdjustableOrAdjustedDate
[
  c1_choice: $this.unadjustedDate->isNotEmpty() || ($this.unadjustedDate->isEmpty() && ($this.dateAdjustments->isEmpty() && $this.adjustedDate->isNotEmpty()))
]
{
  {meta::pure::profiles::doc.doc = 'A date subject to adjustment.'} unadjustedDate: FpML::model::IdentifiedDate[0..1];
  {meta::pure::profiles::doc.doc = 'The business day convention and financial business centers used for adjusting the date if it would otherwise fall on a day that is not a business date in the specified business centers.'} dateAdjustments: FpML::model::BusinessDayAdjustments[0..1];
  {meta::pure::profiles::doc.doc = 'The date once the adjustment has been performed. (Note that this date may change if the business center holidays change).'} adjustedDate: FpML::model::IdentifiedDate[0..1];
  id: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the rounding methodology applicable to the Delivery Amount and the Return Amount in terms of nearest integral multiple of Base Currency units. ISDA 2016 English Law Credit Support Deed for Initial Margin, paragraph 13, General Principles, (c)(vi)(C): Rounding. | ISDA 2016 Japanese Law Credit Support Annex for Initial Margin, paragraph 13, General Principles, (d)(vi)(C): Rounding. | ISDA 2016 New York Law Credit Support Annex for Initial Margin, paragraph 13, General Principles, (c)(vi)(C): Rounding.'} model::external::cdm::CollateralRounding
{
  {meta::pure::profiles::doc.doc = 'The rounding methodology applicable to the Delivery Amount in terms of nearest integral multiple of Base Currency units.'} deliveryAmount: Float[1];
  {meta::pure::profiles::doc.doc = 'The rounding methodology applicable to the Return Amount in terms of nearest integral multiple of Base Currency units.'} returnAmount: Float[1];
}

Class {meta::pure::profiles::doc.doc = 'A code that describes the world region of a counterparty. For example, NorthAmerica, Europe, Asia.'} FpML::model::Region
[
  c1_length: $this.regionScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  regionScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'The party election of Credit Support Provider(s), if any.'} model::external::cdm::CreditSupportProviderElection
[
  creditSupportProvider: if($this.creditSupportProviderTerms == model::external::cdm::CreditSupportProviderTermsEnum.Specified, |$this.creditSupportProvider->isNotEmpty(), |true)
]
{
  {meta::pure::profiles::doc.doc = 'The elective party'} party: model::external::cdm::Party[1];
  {meta::pure::profiles::doc.doc = 'Specification of the Credit Support Provider terms.'} creditSupportProviderTerms: model::external::cdm::CreditSupportProviderTermsEnum[1];
  {meta::pure::profiles::doc.doc = 'The specified Credit Support Provider(s), if any.'} creditSupportProvider: model::external::cdm::LegalEntity[*];
  {meta::pure::profiles::doc.doc = '...'} bespokeCreditSuppportProvider: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the Amendment to Termination Currency elections by the parties to the agreement. ISDA 2016 Credit Support Annex for Initial Margin, paragraph 13, General Principles, (t): Amendment to Termination Currency.'} model::external::cdm::TerminationCurrencyAmendment
[
  Applicablity: if(!($this.isApplicable), |$this.effectiveDate->isEmpty() && $this.partyElection->isEmpty(), |true)
]
{
  {meta::pure::profiles::doc.doc = 'The qualification of whether the Amendment to Termination Currency is deemed applicable by the parties (True) or not (False).'} isApplicable: Boolean[1];
  {meta::pure::profiles::doc.doc = 'The effective date of the Amendment to Termination Currency. This date can be specified as either an actual date, a specific date (e.g. the annex date) or as a custom provision.'} effectiveDate: model::external::cdm::AmendmentEffectiveDate[0..1];
  {meta::pure::profiles::doc.doc = 'The parties\' Amendment Currency election.'} partyElection: model::external::cdm::TerminationCurrencyElection[0..3];
}

Class {meta::pure::profiles::doc.doc = 'Period over which an average value is taken.'} model::external::cdm::AveragingPeriod
[
  AveragingPeriod_choice: (($this.averagingDateTimes->isEmpty() && $this.averagingObservations->isEmpty()) || ($this.averagingDateTimes->isNotEmpty() && $this.averagingObservations->isEmpty())) || ($this.averagingObservations->isNotEmpty() && $this.averagingDateTimes->isEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'A schedule for generating averaging observation dates.'} schedule: model::external::cdm::AveragingSchedule[*];
  {meta::pure::profiles::doc.doc = 'An unweighted list of averaging observation date and times.'} averagingDateTimes: model::external::cdm::DateTimeList[0..1];
  {meta::pure::profiles::doc.doc = 'A weighted list of averaging observation date and times.'} averagingObservations: model::external::cdm::AveragingObservationList[0..1];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'The market disruption event as defined by ISDA 2002 Definitions.'} marketDisruption: model::external::cdm::MarketDisruptionEnum[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Specifies the credit rating debt type(s) associated with the credit rating notation and scale. When several debt types are specified, they must be qualified through an \'any\' or \'all\'.'} model::external::cdm::CreditRatingDebt
[
  one_of_constraint: ($this.debtType->isNotEmpty() && $this.debtTypes->isEmpty()) || ($this.debtTypes->isNotEmpty() && $this.debtType->isEmpty())
]
{
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'Specifies when there is only one debt type. FpML doesn\'t specify values in relation to the associated scheme, which is hence not specified as an enumeration as part of the CDM.'} debtType: String[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies if there are several debt types, alongside an \'any\' or \'all\' or all condition. As an example, Baa1 rating is required for any long term debt and deposit.'} debtTypes: model::external::cdm::MultipleDebtTypes[0..1];
}

Class model::external::cdm::AllocationBreakdown
{
  {meta::pure::profiles::doc.doc = 'Specifies the counterparty to add.'} counterparty: model::external::cdm::Counterparty[1];
  {meta::pure::profiles::doc.doc = 'Specifies an additional counterparty to add as part of the allocation process.'} ancillaryParty: model::external::cdm::PartyRole[1];
  {meta::pure::profiles::doc.doc = 'The quantity to be allocated to the party.'} quantity: model::external::cdm::Quantity[1..*];
  {meta::pure::profiles::doc.doc = 'The identifier to be assigned to the new trade post allocation'} allocationTradeId: model::external::cdm::Identifier[1..*];
  {meta::pure::profiles::doc.doc = 'The account to allocate the trade into'} account: model::external::cdm::Account[0..1];
  {meta::pure::profiles::doc.doc = 'The sum that must be posted upfront to collateralize against counterparty credit risk.'} collateral: model::external::cdm::Collateral[0..1];
}

Class <<meta::pure::profiles::typemodifiers.abstract>> {meta::pure::profiles::doc.doc = 'Abstract base class for all exchange traded financial products with a price which is calculated from exchange traded constituents.'} FpML::model::ExchangeTradedCalculatedPrice extends FpML::model::ExchangeTraded
{
  {meta::pure::profiles::doc.doc = 'Identification of all the exchanges where constituents are traded. The term \'Exchange\' is assumed to have the meaning as defined in the ISDA 2002 Equity Derivatives Definitions.'} constituentExchangeId: FpML::model::ExchangeId[*];
}

Class model::external::cdm::FloatingRateIndexDefinition
{
  {meta::pure::profiles::doc.doc = 'The underlying FRO name and designated maturity.'} fro: model::external::cdm::FloatingRateOption[1];
  {meta::pure::profiles::doc.doc = 'The definition version or versions supported by the FRO.'} supportedDefinition: model::external::cdm::ContractualDefinitionsEnum[*];
  {meta::pure::profiles::doc.doc = 'The source of an FRO, particularly if not a Contractual Definition (e.g. the broker rates matrix).'} definitionalSource: String[0..1];
  designatedMaturityApplicable: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'Any mappings to other FRos.'} mappings: model::external::cdm::FloatingRateIndexMappings[0..1];
  {meta::pure::profiles::doc.doc = 'Any mappings to other codes for this index.'} externalMappings: model::external::cdm::FloatingRateIndexExternalMappings[0..1];
  {meta::pure::profiles::doc.doc = 'Any calculation default values.'} calculationDefaults: model::external::cdm::FloatingRateIndexCalculationDefaults[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class describing how notice of exercise should be given. This can be either manual or automatic.'} model::external::cdm::ExerciseProcedure
[
  ExerciseProcedureChoice: ($this.manualExercise->isNotEmpty() && $this.automaticExercise->isEmpty()) || ($this.manualExercise->isEmpty() && $this.automaticExercise->isNotEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'Specifies that the notice of exercise must be given by the buyer to the seller or seller\'s agent.'} manualExercise: model::external::cdm::ManualExercise[0..1];
  {meta::pure::profiles::doc.doc = 'If automatic is specified, then the notional amount of the underlying swap not previously exercised under the swaption will be automatically exercised at the expiration time on the expiration date if at such time the buyer is in-the-money, provided that the difference between the settlement rate and the fixed rate under the relevant underlying swap is not less than the specified threshold rate. The term in-the-money is assumed to have the meaning defining in the 2000 ISDA Definitions, Section 17.4 In-the-money.'} automaticExercise: model::external::cdm::AutomaticExercise[0..1];
  {meta::pure::profiles::doc.doc = 'A flag to indicate whether follow-up confirmation of exercise (written or electronic) is required following telephonic notice by the buyer to the seller or seller\'s agent.'} followUpConfirmation: Boolean[1];
  {meta::pure::profiles::doc.doc = 'Has the meaning defined as part of the 1997 ISDA Government Bond Option Definitions, section 4.5 Limited Right to Confirm Exercise. If present, (i) the Seller may request the Buyer to confirm its intent if not done on or before the expiration time on the Expiration date (ii) specific rules will apply in relation to the settlement mode.'} limitedRightToConfirm: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'Typically applicable to the physical settlement of bond and convertible bond options. If present, means that the party required to deliver the bonds will divide those to be delivered as notifying party desires to facilitate delivery obligations.'} splitTicket: Boolean[0..1];
}

Class <<meta::pure::profiles::typemodifiers.abstract>> {meta::pure::profiles::doc.doc = 'An abstract base class for all exchange traded financial products.'} FpML::model::ExchangeTraded extends FpML::model::UnderlyingAsset
{
  {meta::pure::profiles::doc.doc = 'A short form unique identifier for a related exchange. If the element is not present then the exchange shall be the primary exchange on which listed futures and options on the underlying are listed. The term \'Exchange\' is assumed to have the meaning as defined in the ISDA 2002 Equity Derivatives Definitions.'} relatedExchangeId: FpML::model::ExchangeId[*];
  {meta::pure::profiles::doc.doc = 'A short form unique identifier for an exchange on which the reference option contract is listed. This is to address the case where the reference exchange for the future is different than the one for the option. The options Exchange is referenced on share options when Merger Elections are selected as Options Exchange Adjustment.'} optionsExchangeId: FpML::model::ExchangeId[*];
  {meta::pure::profiles::doc.doc = 'A short form unique identifier for a specified exchange. If the element is not present then the exchange shall be default terms as defined in the MCA; unless otherwise specified in the Transaction Supplement.'} specifiedExchangeId: FpML::model::ExchangeId[*];
}

Class {meta::pure::profiles::doc.doc = 'A type describing the liens associated with a loan facility.'} FpML::model::Lien
[
  c1_length: $this.lienScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  lienScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'A scheme used to identify the type of a stream scheduled servicing date.'} FpML::model::ScheduledDateType
[
  c1_length: $this.scheduledDateTypeScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  scheduledDateTypeScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'The data type used for account type.'} FpML::model::AccountType
[
  c1_length: $this.accountTypeScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  {meta::pure::profiles::doc.doc = 'The identifier scheme used with this accountType. A unique URI to determine the the type of account.'} accountTypeScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'Describes the resource that contains the media representation of a business event (i.e used for stating the Publicly Available Information). For example, can describe a file or a URL that represents the event. This type is an extended version of a type defined by RIXML (www.rixml.org).'} FpML::model::Resource
[
  c1_length: $this.name->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.comments->forAll(x: String[1]|$x->length() >= 1),
  c3_length: $this.string->forAll(x: String[1]|$x->length() >= 1),
  c4_length: $this.url->forAll(x: String[1]|$x->length() >= 1),
  c5_choice: ($this.string->isNotEmpty() && ($this.hexadecimalBinary->isEmpty() && ($this.base64Binary->isEmpty() && $this.url->isEmpty()))) || (($this.string->isEmpty() && ($this.hexadecimalBinary->isNotEmpty() && ($this.base64Binary->isEmpty() && $this.url->isEmpty()))) || (($this.string->isEmpty() && ($this.hexadecimalBinary->isEmpty() && ($this.base64Binary->isNotEmpty() && $this.url->isEmpty()))) || ($this.string->isEmpty() && ($this.hexadecimalBinary->isEmpty() && ($this.base64Binary->isEmpty() && $this.url->isNotEmpty())))))
]
{
  {meta::pure::profiles::doc.doc = 'The unique identifier of the resource within the event.'} resourceId: FpML::model::ResourceId[0..1];
  {meta::pure::profiles::doc.doc = 'A description of the type of the resource, e.g. a confirmation.'} resourceType: FpML::model::ResourceType[0..1];
  {meta::pure::profiles::doc.doc = 'Indicates the language of the resource, described using the ISO 639-2/T Code.'} language: FpML::model::Language[0..1];
  {meta::pure::profiles::doc.doc = 'Indicates the size of the resource in bytes. It could be used by the end user to estimate the download time and storage needs.'} sizeInBytes: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'Indicates the length of the resource. For example, if the resource were a PDF file, the length would be in pages.'} length: FpML::model::ResourceLength[0..1];
  {meta::pure::profiles::doc.doc = 'Indicates the type of media used to store the content. mimeType is used to determine the software product(s) that can read the content. MIME Types are described in RFC 2046.'} mimeType: FpML::model::MimeType[0..1];
  {meta::pure::profiles::doc.doc = 'The name of the resource.'} name: String[0..1];
  {meta::pure::profiles::doc.doc = 'Any additional comments that are deemed necessary. For example, which software version is required to open the document? Or, how does this resource relate to the others for this event?'} comments: String[0..1];
  {meta::pure::profiles::doc.doc = 'Provides extra information as string. In case the extra information is in XML format, a CDATA section must be placed around the source message to prevent its interpretation as XML content.'} string: String[0..1];
  {meta::pure::profiles::doc.doc = 'Provides extra information as binary contents coded in hexadecimal.'} hexadecimalBinary: String[0..1];
  {meta::pure::profiles::doc.doc = 'Provides extra information as binary contents coded in base64.'} base64Binary: String[0..1];
  {meta::pure::profiles::doc.doc = 'Indicates where the resource can be found, as a URL that references the information on a web server accessible to the message recipient.'} url: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Reference to an underlying asset.'} FpML::model::AssetReference extends FpML::model::Reference
{
  href: String[1];
}

Class {meta::pure::profiles::doc.doc = 'A type defining a date (referred to as the derived date) as a relative offset from another date (referred to as the anchor date) plus optional date adjustments.'} model::external::cdm::AdjustedRelativeDateOffset extends model::external::cdm::RelativeDateOffset
{
  {meta::pure::profiles::doc.doc = 'The business day convention and financial business centers used for adjusting the relative date if it would otherwise fall on a day that is not a business date in the specified business centers.'} relativeDateAdjustments: model::external::cdm::BusinessDayAdjustments[0..1];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'Defines a single, numerical value that was observed in the marketplace. Observations of market data are made independently to business events or trade life-cycle events, so data instances of Observation can be created independently of any other model type, hence it is annotated as a root type. Observations will be broadly reused in many situations, so references to Observation are supported via the \'key\' annotation.'} model::external::cdm::Observation
{
  {meta::pure::profiles::doc.doc = 'Specifies the observed value as a number.'} observedValue: model::external::cdm::Price[1];
  {meta::pure::profiles::doc.doc = 'Represents the observation was made i.e. how to uniquely identify the observed value among the population of all available market data.'} observationIdentifier: model::external::cdm::ObservationIdentifier[1];
}

Class FpML::model::ReferencePair
[
  c1_choice: ($this.referenceObligation->isNotEmpty() && $this.noReferenceObligation->isEmpty()) || ($this.referenceObligation->isEmpty() && $this.noReferenceObligation->isNotEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'The corporate or sovereign entity on which you are buying or selling protection and any successor that assumes all or substantially all of its contractual and other obligations. It is vital to use the correct legal name of the entity and to be careful not to choose a subsidiary if you really want to trade protection on a parent company. Please note, Reference Entities cannot be senior or subordinated. It is the obligations of the Reference Entities that can be senior or subordinated. ISDA 2003 Term: Reference Entity'} referenceEntity: FpML::model::LegalEntity[0..1];
  {meta::pure::profiles::doc.doc = 'The Reference Obligation is a financial instrument that is either issued or guaranteed by the reference entity. It serves to clarify the precise reference entity protection is being offered upon, and its legal position with regard to other related firms (parents/subsidiaries). Furthermore the Reference Obligation is ALWAYS deliverable and establishes the Pari Passu ranking (as the deliverable bonds must rank equal to the reference obligation). ISDA 2003 Term: Reference Obligation'} referenceObligation: FpML::model::ReferenceObligation[0..1];
  {meta::pure::profiles::doc.doc = 'Used to indicate that there is no Reference Obligation associated with this Credit Default Swap and that there will never be one.'} noReferenceObligation: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'Defines the reference entity types corresponding to a list of types in the ISDA First to Default documentation.'} entityType: FpML::model::EntityType[0..1];
}

Class model::external::cdm::Representations
{
  {meta::pure::profiles::doc.doc = 'If true, then non reliance is applicable.'} nonReliance: Boolean[1];
  {meta::pure::profiles::doc.doc = 'If true, then agreements regarding hedging are applicable.'} agreementsRegardingHedging: Boolean[1];
  {meta::pure::profiles::doc.doc = 'If present and true, then index disclaimer is applicable.'} indexDisclaimer: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'If true, then additional acknowledgements are applicable.'} additionalAcknowledgements: Boolean[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Describes a rate source to be fixed and the date the fixing occurs'} model::external::cdm::FxRateSourceFixing
{
  settlementRateSource: model::external::cdm::FxSettlementRateSource[1];
  {meta::pure::profiles::doc.doc = 'The date on which the fixing is scheduled to occur.'} fixingDate: model::external::cdm::AdjustableDate[1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the Credit Support Obligations applicable to the Variation Margin Credit Support Annex and which are common among the English, Japanese and New York governing laws. ISDA 2016 Credit Support Annex for Variation Margin, paragraph 13, (c): Credit Support Obligations.'} model::external::cdm::CreditSupportObligationsVariationMargin
{
  {meta::pure::profiles::doc.doc = 'The parties to which the provisions of Paragraph 11(g) of the ISDA 2016 Credit Support Annex for Variation Margin will apply to. ISDA 2016 Credit Support Annex for Variation Margin, paragraph 13, (c)(iii): Legally Ineligible Credit Support (VM).'} ineligibleCreditSupport: model::external::cdm::IneligibleCreditSupport[0..1];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'The additional currencies that are specified as Major Currency for the purpose of applying the FX Haircut Percentage. ISDA 2016 Credit Support Annex for Variation Margin, paragraph 13, (c)(v)(B): FX Haircut Percentage.'} majorCurrency: String[*];
  {meta::pure::profiles::doc.doc = 'The alternative definition for FX haircut percentage that applies to each party (as the pledgor/chargor/obligor) and item of Eligible Collateral unless this item is denominated in a Major Currency or in the Base Currency. ISDA 2016 Credit Support Annex for Variation Margin, paragraph 13, (c)(v)(B): FX Haircut Percentage.'} fxHaircut: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class describing the legal agreement baseline information, other than the specialized elections: type of legal agreement, agreement date and effective date, parties to the agreement, ... The purpose of this abstract class is to provide the ability to associate a \'one of\' feature to the LegalAgreement class as a way to enforce a systematic choice between its attributes.'} model::external::cdm::LegalAgreementBase
{
  {meta::pure::profiles::doc.doc = 'The date on which the legal agreement has been agreed between the parties. This corresponds to the Date of Deed in an English Law document.'} agreementDate: Date[1];
  {meta::pure::profiles::doc.doc = 'The date on which, or as of which, the agreement is effective, if different from the agreement date. It is expected that it will most often correspond to the agreement date, although there could be situations where the parties will explicitly agree on a distinct effective date.'} effectiveDate: Date[0..1];
  {meta::pure::profiles::doc.doc = 'The legal agreement identifier. Several identifiers can be specified.'} identifier: model::external::cdm::Identifier[*];
  {meta::pure::profiles::doc.doc = 'The type of legal agreement, identified via a set of distinct attributes: name, publisher, governing law and version, e.g. ISDA 2013 Standard Credit Support Annex English Law.'} agreementType: model::external::cdm::LegalAgreementType[1];
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'The two contractual parties to the legal agreement, which reference information is positioned as part of the partyInformation attribute.'} contractualParty: model::external::cdm::Party[2];
  {meta::pure::profiles::doc.doc = 'The role(s) that other party(ies) may have in relation to the legal agreement, further to the contractual parties.'} otherParty: model::external::cdm::PartyRole[*];
}

Class {meta::pure::profiles::doc.doc = 'Defines the ways in which multiple values can be aggregated into a single value.'} model::external::cdm::AggregationMethod
[
  one_of_constraint: ($this.averagingMethod->isNotEmpty() && $this.averagingCalculationMethod->isEmpty()) || ($this.averagingCalculationMethod->isNotEmpty() && $this.averagingMethod->isEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'Identifies whether the average values will be weighted.'} averagingMethod: model::external::cdm::AveragingMethodEnum[0..1];
  {meta::pure::profiles::doc.doc = 'Identifies which of the Pythagorean means is being used to compute an average value.'} averagingCalculationMethod: model::external::cdm::AveragingCalculationMethodEnum[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the ISDA SIMM version that applies to the ISDA 2018 CSA for Initial Margin. According to the ISDA 2018 CSA for Initial Margin, Paragraph 13, General Principles (ee) (1) provisions, the SIMM version is either not specified, or references a version used by one of the parties to the agreement.'} model::external::cdm::SimmVersion
[
  VersionNotSpecified: if(!($this.isSpecified->toOne()), |$this.partyVersion->isEmpty(), |true),
  VersionSpecified: if($this.isSpecified->toOne(), |$this.partyVersion->isNotEmpty(), |true)
]
{
  {meta::pure::profiles::doc.doc = 'A boolean attribute to determine whether the SIMM version is specified for the purpose of the legal agreement.'} isSpecified: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'The party which the specified SIMM version applies to.'} partyVersion: model::external::cdm::CounterpartyRoleEnum[0..1];
  {meta::pure::profiles::doc.doc = 'The SIMM version exception when specified as a customized approach by the party.'} asSpecified: String[0..1];
}

Class FpML::model::RelatedBusinessUnit
{
  {meta::pure::profiles::doc.doc = 'The unit that is related to this.'} businessUnitReference: FpML::model::BusinessUnitReference[0..1];
  {meta::pure::profiles::doc.doc = 'The category of the relationship. The related unit performs the role specified in this field for the base party. For example, if the role is \'Trader\', the related unit acts acts or acted as the base party\'s trading unit.'} role: FpML::model::BusinessUnitRole[0..1];
}

Class {meta::pure::profiles::doc.doc = 'The data type used for the name of the account.'} FpML::model::AccountName
[
  c1_length: $this.accountNameScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  {meta::pure::profiles::doc.doc = 'The identifier scheme used with this accountName. A unique URI to determine the source of the account name.'} accountNameScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'Represents a class to describe concentration limits that may be applicable to eligible collateral criteria.'} model::external::cdm::ConcentrationLimit
{
  {meta::pure::profiles::doc.doc = 'Specifies a set of criteria to describe the assets that the concentration limits apply to.'} concentrationLimitCriteria: model::external::cdm::ConcentrationLimitCriteria[*];
  {meta::pure::profiles::doc.doc = 'Specifies the value of collateral limit represented as a range.'} valueLimit: model::external::cdm::MoneyRange[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the perecentage of collateral limit represented as a decimal number - example 25% is 0.25.'} percentageLimit: model::external::cdm::NumberRange[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class defining multiple exercises. As defined in the 2000 ISDA Definitions, Section 12.4. Multiple Exercise, the buyer of the option has the right to exercise all or less than all the unexercised notional amount of the underlying swap on one or more days in the exercise period, but on any such day may not exercise less than the minimum notional amount or more than the maximum notional amount, and if an integral multiple amount is specified, the notional exercised must be equal to or, be an integral multiple of, the integral multiple amount. In FpML, MultipleExercise is built upon the PartialExercise.model.'} model::external::cdm::MultipleExercise extends model::external::cdm::PartialExercise
[
  one_of_constraint: ($this.maximumNotionalAmount->isNotEmpty() && $this.maximumNumberOfOptions->isEmpty()) || ($this.maximumNumberOfOptions->isNotEmpty() && $this.maximumNotionalAmount->isEmpty()),
  MaximumNumberOfOptions: if($this.maximumNumberOfOptions->isNotEmpty(), |$this.maximumNumberOfOptions >= 0.0, |true),
  MinimumNumberOfOptions: if($this.minimumNumberOfOptions->isNotEmpty(), |$this.minimumNumberOfOptions >= 0, |true)
]
{
  {meta::pure::profiles::doc.doc = 'The maximum notional amount that can be exercised on a given exercise date.'} maximumNotionalAmount: Float[0..1];
  {meta::pure::profiles::doc.doc = 'The maximum number of options that can be exercised on a given exercise date. If the number is not specified, it means that the maximum number of options corresponds to the remaining unexercised options.'} maximumNumberOfOptions: Integer[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Class to specify a mechanism for a quantity to be set as a multiplier to another (reference) quantity, based on a price observation. At the moment this class only supports FX or Equity-linked notional and re-uses existing building blocks for those 2 cases, until such time when component can be made more generic. This captures the case of resetting cross-currency swaps and resetting equity swaps.'} model::external::cdm::QuantityMultiplier
[
  one_of_constraint: ($this.fxLinkedNotionalSchedule->isNotEmpty() && $this.multiplierValue->isEmpty()) || ($this.multiplierValue->isNotEmpty() && $this.fxLinkedNotionalSchedule->isEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'Multiplier specified as an FX-linked schedule, e.g. for a resetting cross-currency swap..'} fxLinkedNotionalSchedule: model::external::cdm::FxLinkedNotionalSchedule[0..1];
  multiplierValue: Float[0..1];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'Terms defining a security leg in a securities financing transaction, which can either be the near leg or the far leg and is closely modelled onto the nearLeg and farLeg types in FpML'} model::external::cdm::SecurityLeg
[
  SecurityLegChoice: ($this.settlementAmount->isNotEmpty() && $this.settlementCurrency->isEmpty()) || ($this.settlementCurrency->isNotEmpty() && $this.settlementAmount->isEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'Whether the leg is a buyer or seller of security'} buyerSeller: model::external::cdm::BuyerSeller[1];
  {meta::pure::profiles::doc.doc = 'Settlement or Payment Date for the security leg'} settlementDate: model::external::cdm::AdjustableOrRelativeDate[1];
  {meta::pure::profiles::doc.doc = 'Settlement amount for the security leg'} settlementAmount: model::external::cdm::Money[0..1];
  {meta::pure::profiles::doc.doc = 'Settlement Currency for use where the Settlement Amount cannot be known in advance.'} settlementCurrency: String[0..1];
  {meta::pure::profiles::doc.doc = 'FX rate in case when cash settlement amount is in a different currency to the security.'} fxRate: model::external::cdm::ExchangeRate[0..1];
  {meta::pure::profiles::doc.doc = 'Delivery Date for the transaction. Delivery Date can be populated when it is not equal to the Settlement Date.'} deliveryDate: model::external::cdm::AdjustableOrRelativeDate[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies a delivery method for the security transaction.'} deliveryMethod: model::external::cdm::DeliveryMethodEnum[1];
}

Class {meta::pure::profiles::doc.doc = 'List of DateTimes'} FpML::model::DateTimeList
{
  dateTime: DateTime[*];
}

Class {meta::pure::profiles::doc.doc = 'Represents attributes required for mark to market value or IM calculation value of the trade portfolio as recorded by the principle (in base currency).'} model::external::cdm::MarginCallExposure extends model::external::cdm::MarginCallBase
{
  {meta::pure::profiles::doc.doc = 'Represents the whole overall mark to market value or IM calculation value of the trade portfolio as recorded by the principle (in base currency).'} overallExposure: model::external::cdm::Exposure[1];
  {meta::pure::profiles::doc.doc = 'Represents Initial Margin (IM) exposure derived from ISDA SIMM calculation.'} simmIMExposure: model::external::cdm::Exposure[0..1];
  {meta::pure::profiles::doc.doc = 'Represents Initial Margin (IM) exposure derived from schedule or Grid calculation.'} scheduleGridIMExposure: model::external::cdm::Exposure[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class defining the reset frequency. In the case of a weekly reset, also specifies the day of the week that the reset occurs. If the reset frequency is greater than the calculation period frequency the this implies that more or more reset dates is established for each calculation period and some form of rate averaging is applicable. The specific averaging method of calculation is specified in FloatingRateCalculation. In case the reset frequency is of value T (term), the period is defined by the swap/swapStream/calculationPerioDates/effectiveDate and the swap/swapStream/calculationPerioDates/terminationDate.'} model::external::cdm::ResetFrequency extends model::external::cdm::Frequency
[
  FpML_ird_49: if($this.weeklyRollConvention->isNotEmpty(), |$this.period == model::external::cdm::PeriodExtendedEnum.W, |true)
]
{
  {meta::pure::profiles::doc.doc = 'The day of the week on which a weekly reset date occurs. This element must be included if the reset frequency is defined as weekly and not otherwise.'} weeklyRollConvention: model::external::cdm::WeeklyRollConventionEnum[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify party specific Secured Party Rights Event language.'} model::external::cdm::SecurityProviderRightsEventElection
{
  {meta::pure::profiles::doc.doc = 'The elective party.'} party: model::external::cdm::CounterpartyRoleEnum[1];
  rightsEvent: Boolean[1];
}

Class {meta::pure::profiles::doc.doc = 'A class describing a schedule of cap or floor rates.'} model::external::cdm::StrikeSchedule extends model::external::cdm::RateSchedule
{
  {meta::pure::profiles::doc.doc = 'The buyer of the option.'} buyer: model::external::cdm::PayerReceiverEnum[0..1];
  {meta::pure::profiles::doc.doc = 'The party that has sold.'} seller: model::external::cdm::PayerReceiverEnum[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the identifier value and its associated version.'} model::external::cdm::AssignedIdentifier
{
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'The identifier value.'} identifier: String[1];
  {meta::pure::profiles::doc.doc = 'The enumerated classification of the identifier.'} identifierType: model::external::cdm::TradeIdentifierTypeEnum[0..1];
  {meta::pure::profiles::doc.doc = 'The identifier version, which is specified as an integer and is meant to be incremented each time the transaction terms (whether contract or event) change. This version is made option to support the use case where the identifier is referenced without the version. The constraint that a contract and a lifecycle event need to have an associated version is enforced through data rules.'} version: Integer[0..1];
}

Class FpML::model::Cash extends FpML::model::Asset
[
  c1_length: $this.description->forAll(x: String[1]|$x->length() >= 1)
]
{
  {meta::pure::profiles::doc.doc = 'Identification of the underlying asset, using public and/or private identifiers.'} instrumentId: FpML::model::InstrumentId[*];
  {meta::pure::profiles::doc.doc = 'Long name of the underlying asset.'} description: String[0..1];
  {meta::pure::profiles::doc.doc = 'The currency in which an amount is denominated.'} currency: FpML::model::Currency[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the Pledgor/Obligor/Chargor Rights Event election. ISDA 2016 English Law Credit Support Deed for Initial Margin, paragraph 13, General Principles, (j): Chargor Rights Event. | ISDA 2016 Japanese Law Credit Support Annex for Initial Margin, paragraph 13, General Principles, (j): Obligor Rights Event. | ISDA 2016 New York Law Credit Support Annex for Initial Margin, paragraph 13, General Principles, (j): Pledgor Rights Event.'} model::external::cdm::SecurityProviderRightsEvent
{
  partyElection: model::external::cdm::SecurityProviderRightsEventElection[0..2];
  {meta::pure::profiles::doc.doc = 'The Pledgor/Obligor/Chargor Rights Event election includes cooling off language when the attribute is set of True.'} includeCoolingOffLanguage: Boolean[1];
  {meta::pure::profiles::doc.doc = 'If specified as applicable here, a Pledgor/Obligor/Chargor Rights Event will not occur unless the Pledgor/Obligor/Chargor (A) has provided a statement to the Secured Party in respect of such Early \t\t\t\t\t\t\t\t\t\t\tTermination Date'} fullDischarge: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'The Automatic Set-Off provision applies when the value is set to True. ISDA 2016 Japanese Law Credit Support Annex for Initial Margin, paragraph 13, General Principles, (l): Modification to Obligor\u2019s Rights and Remedies.'} automaticSetOff: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'A custom Pledgor/Obligor/Chargor Rights Event election might be specified by the parties.'} customElection: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A data defining:  how the initial or final stub calculation period amounts is calculated. For example, the rate to be applied to the initial or final stub calculation period may be the linear interpolation of two different tenors for the floating rate index specified in the calculation period amount component, e.g. A two month stub period may used the linear interpolation of a one month and three month floating rate. The different rate tenors would be specified in this component. Note that a maximum of two rate tenors can be specified. If a stub period uses a single index tenor and this is the same as that specified in the calculation period amount component then the initial stub or final stub component, as the case may be, must not be included.'} model::external::cdm::StubCalculationPeriodAmount
{
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'A pointer style reference to the associated calculation period dates component defined elsewhere in the document.'} calculationPeriodDatesReference: model::external::cdm::CalculationPeriodDates[1];
  {meta::pure::profiles::doc.doc = 'Specifies how the initial stub amount is calculated. A single floating rate tenor different to that used for the regular part of the calculation periods schedule may be specified, or two floating tenors may be specified. If two floating rate tenors are specified then Linear Interpolation (in accordance with the 2000 ISDA Definitions, Section 8.3. Interpolation) is assumed to apply. Alternatively, an actual known stub rate or stub amount may be specified.'} initialStub: model::external::cdm::StubValue[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies how the final stub amount is calculated. A single floating rate tenor different to that used for the regular part of the calculation periods schedule may be specified, or two floating tenors may be specified. If two floating rate tenors are specified then Linear Interpolation (in accordance with the 2000 ISDA Definitions, Section 8.3. Interpolation) is assumed to apply. Alternatively, an actual known stub rate or stub amount may be specified.'} finalStub: model::external::cdm::StubValue[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class describing the conditions governing the payment of dividends to the receiver of the equity return, with the exception of the dividend payout ratio, which is defined for each of the underlying components.'} model::external::cdm::DividendReturnTerms
[
  DividendPeriod: if($this.dividendPeriod->isNotEmpty(), |$this.dividendPeriodEffectiveDate->isEmpty() && $this.dividendPeriodEndDate->isEmpty(), |true),
  ExtraordinaryDividendsParty: if($this.extraordinaryDividendsParty->isNotEmpty(), |$this.extraordinaryDividendsParty == model::external::cdm::AncillaryRoleEnum.ExtraordinaryDividendsParty, |true)
]
{
  {meta::pure::profiles::doc.doc = 'Specifies the dividend payout ratio associated with each underlier. In FpML 5.10 the payout is positioned at the underlier level, although there is an intent to reconsider this approach and position it at the leg level. This is approach adopted by the CDM.'} dividendPayout: model::external::cdm::DividendPayoutRatio[*];
  {meta::pure::profiles::doc.doc = 'Boolean element that defines whether the dividend will be reinvested or not.'} dividendReinvestment: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'Defines the date on which the receiver of the equity return is entitled to the dividend.'} dividendEntitlement: model::external::cdm::DividendEntitlementEnum[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies whether the dividend is paid with respect to the Dividend Period.'} dividendAmountType: model::external::cdm::DividendAmountTypeEnum[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies when the dividend will be paid to the receiver of the equity return. Has the meaning as defined in the ISDA 2002 Equity Derivatives Definitions. Is not applicable in the case of a dividend reinvestment election.'} dividendPaymentDate: model::external::cdm::DividendPaymentDate[0..1];
  {meta::pure::profiles::doc.doc = '2002 ISDA Equity Derivatives Definitions: Dividend Period as either the First Period or the Second Period. |'} dividendPeriod: model::external::cdm::DividendPeriodEnum[0..1];
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = '2002 ISDA Equity Derivatives Definitions: Dividend Period as such other period determined as provided in the related Confirmation. |'} dividendPeriodEffectiveDate: Date[0..1];
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = '2002 ISDA Equity Derivatives Definitions: Dividend Period as such other period determined as provided in the related Confirmation.'} dividendPeriodEndDate: Date[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the party which determines if dividends are extraordinary in relation to normal levels.'} extraordinaryDividendsParty: model::external::cdm::AncillaryRoleEnum[0..1];
  {meta::pure::profiles::doc.doc = 'Determination of Gross Cash Dividend per Share.'} excessDividendAmount: model::external::cdm::DividendAmountTypeEnum[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the currency in which the dividend will be denominated, e.g. the dividend currency, or a specified currency. This class is not specified as such in FpML, which makes use of the CurrencyAndDeterminationMethod.model to specify such terms.'} dividendCurrency: model::external::cdm::DividendCurrency[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the treatment of Non-Cash Dividends.'} nonCashDividendTreatment: model::external::cdm::NonCashDividendTreatmentEnum[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies how the composition of Dividends is to be determined.'} dividendComposition: model::external::cdm::DividendCompositionEnum[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the method according to which special dividends are determined.'} specialDividends: Boolean[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Extends the Offset structure to specify an FX fixing date as an offset to dates specified somewhere else in the document.'} model::external::cdm::FxFixingDate extends model::external::cdm::Offset
[
  BusinessCentersChoice: (($this.businessCenters->isEmpty() && $this.businessCentersReference->isEmpty()) || ($this.businessCenters->isNotEmpty() && $this.businessCentersReference->isEmpty())) || ($this.businessCentersReference->isNotEmpty() && $this.businessCenters->isEmpty()),
  DateRelativeChoice: ($this.dateRelativeToPaymentDates->isNotEmpty() && $this.dateRelativeToCalculationPeriodDates->isEmpty()) || ($this.dateRelativeToCalculationPeriodDates->isNotEmpty() && $this.dateRelativeToPaymentDates->isEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'The convention for adjusting a date if it would otherwise fall on a day that is not a business day, as specified by an ISDA convention (e.g. Following, Precedent).'} businessDayConvention: model::external::cdm::BusinessDayConventionEnum[0..1];
  businessCenters: model::external::cdm::BusinessCenters[0..1];
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'A reference to a set of financial business centers defined elsewhere in the document. This set of business centers is used to determine whether a particular day is a business day or not.'} businessCentersReference: model::external::cdm::BusinessCenters[0..1];
  {meta::pure::profiles::doc.doc = 'The payment date references on which settlements in non-deliverable currency are due and will then have to be converted according to the terms specified through the other parts of the nonDeliverableSettlement structure.'} dateRelativeToPaymentDates: model::external::cdm::DateRelativeToPaymentDates[0..1];
  {meta::pure::profiles::doc.doc = 'The calculation period references on which settlements in non-deliverable currency are due and will then have to be converted according to the terms specified through the other parts of the nonDeliverableSettlement structure. Implemented for Brazilian-CDI swaps where it will refer to the termination date of the appropriate leg.'} dateRelativeToCalculationPeriodDates: model::external::cdm::DateRelativeToCalculationPeriodDates[0..1];
  {meta::pure::profiles::doc.doc = 'Describes the specific date when a non-deliverable forward or cash-settled option will \'fix\' against a particular rate, which will be used to compute the ultimate cash settlement. This element should be omitted where a single, discrete fixing date cannot be identified e.g. on an american option, where fixing may occur at any date on a continuous range.  This attribute was formerly part of \'fxSettlementTerms\', which is now being harmonised into a common \'CashSettlementTerms\' that includes a \'ValuationDate\'.'} fxFixingDate: model::external::cdm::AdjustableOrRelativeDate[0..1];
}

Class {meta::pure::profiles::doc.doc = 'The data type used for party group classification.'} FpML::model::PartyGroupType
[
  c1_length: $this.partyGroupTypeScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  partyGroupTypeScheme: String[0..1];
  value: String[1];
}

Class FpML::model::AdditionalTerm
[
  c1_length: $this.additionalTermScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  additionalTermScheme: String[0..1];
  value: String[1];
}

Class FpML::model::PeriodicDates
{
  calculationStartDate: FpML::model::AdjustableOrRelativeDate[0..1];
  calculationEndDate: FpML::model::AdjustableOrRelativeDate[0..1];
  {meta::pure::profiles::doc.doc = 'The frequency at which calculation period end dates occur with the regular part of the calculation period schedule and their roll date convention.'} calculationPeriodFrequency: FpML::model::CalculationPeriodFrequency[0..1];
  {meta::pure::profiles::doc.doc = 'The business day convention to apply to each calculation period end date if it would otherwise fall on a day that is not a business day in the specified financial business centers.'} calculationPeriodDatesAdjustments: FpML::model::BusinessDayAdjustments[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Specification of the valuation treatment for the specified collateral.'} model::external::cdm::CollateralValuationTreatment
{
  {meta::pure::profiles::doc.doc = 'Specifies a haircut percentage to be applied to the value of asset and used as a discount factor to the value of the collateral asset,expressed as a percentage in decimal terms. As an example a 0.5% haircut would be represented as a decimal number 0.005.'} haircutPercentage: Float[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies a percentage value of transaction needing to be posted as collateral expressed as a valuation. As an example a 104% requirement would be represented as a decimal number 1.04.'} marginPercentage: Float[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies an FX haircut applied to a specific asset which is agreed between the parties (for example, if pledgor eligible collateral is not denominated in the termination currency or under other specified cases in collateral support documents both for initial margin and variation margin).The percentage value is expressed as the discount haircut to the value of the collateral- as an example an 8% FX haircut would be expressed as 0.08.'} fxHaircutPercentage: Float[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies a percentage value of any additional haircut to be applied to a collateral asset,the percentage value is expressed as the discount haircut to the value of the collateral- as an example a 5% haircut would be expressed as 0.05.'} additionalHaircutPercentage: Float[0..1];
}

Class FpML::model::FxRateAsset extends FpML::model::UnderlyingAsset
{
  {meta::pure::profiles::doc.doc = 'Defines the two currencies for an FX trade and the quotation relationship between the two currencies.'} quotedCurrencyPair: FpML::model::QuotedCurrencyPair[0..1];
  {meta::pure::profiles::doc.doc = 'Defines the source of the FX rate.'} rateSource: FpML::model::FxSpotRateSource[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Defines the specification of the consequences of Index Events as defined by the 2002 ISDA Equity Derivatives Definitions.'} model::external::cdm::IndexAdjustmentEvents
{
  {meta::pure::profiles::doc.doc = 'Consequence of index modification.'} indexModification: model::external::cdm::IndexEventConsequenceEnum[1];
  {meta::pure::profiles::doc.doc = 'Consequence of index cancellation.'} indexCancellation: model::external::cdm::IndexEventConsequenceEnum[1];
  {meta::pure::profiles::doc.doc = 'Consequence of index disruption.'} indexDisruption: model::external::cdm::IndexEventConsequenceEnum[1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the party elections specific to the Automatic Early Termination Clause.'} model::external::cdm::AutomaticEarlyTerminationElection
{
  {meta::pure::profiles::doc.doc = 'The party for which the Automatic Early Termination provisions are being specified.'} party: model::external::cdm::Party[1];
  {meta::pure::profiles::doc.doc = 'A boolean election to specify whether the Automatic Early Termination provisions of Section 6(a) are applicable (True) or not applicable (False).'} isApplicable: Boolean[1];
}

Class {meta::pure::profiles::doc.doc = 'Where the underlying is shares, defines market events affecting the issuer of those shares that may require the terms of the transaction to be adjusted.'} model::external::cdm::ExtraordinaryEvents
[
  ExtraordinaryEventsChoice: ($this.additionalDisruptionEvents->isNotEmpty() && $this.failureToDeliver->isEmpty()) || ($this.failureToDeliver->isNotEmpty() && $this.additionalDisruptionEvents->isEmpty())
]
{
  {meta::pure::profiles::doc.doc = '2018 ISDA CDM Equity Confirmation for Security Equity Swap: Merger Event shall occur if a Merger occurs and the Merger Date is on or before the final Equity Valuation Date | Occurs when the underlying ceases to exist following a merger between the Issuer and another company.'} mergerEvents: model::external::cdm::EquityCorporateEvents[0..1];
  {meta::pure::profiles::doc.doc = '2002 ISDA Equity Derivatives Definitions: Tender Offers | 2018 ISDA CDM Equity Confirmation for Security Equity Swap: Tender Offer Event'} tenderOfferEvents: model::external::cdm::EquityCorporateEvents[0..1];
  {meta::pure::profiles::doc.doc = '2002 ISDA Equity Derivatives Definitions: Composition of Combined Consideration | 2018 ISDA CDM Equity Confirmation for Security Equity Swap: Combined Consideration | If present and true, then composition of combined consideration is applicable.'} compositionOfCombinedConsideration: Boolean[0..1];
  {meta::pure::profiles::doc.doc = '2002 ISDA Equity Derivatives Definitions: Adjustments to Indices |'} indexAdjustmentEvents: model::external::cdm::IndexAdjustmentEvents[0..1];
  {meta::pure::profiles::doc.doc = '2002 ISDA Equity Derivatives Definitions: Additional Disruption Events | 2018 ISDA CDM Equity Confirmation for Security Equity Swap: Additional Disruption Events means each Additional Disruption Event specified in the Confirmation Side Letter. For the avoidance of doubt, each Additional Disruption Event shall be an Extraordinary Event.'} additionalDisruptionEvents: model::external::cdm::AdditionalDisruptionEvents[0..1];
  {meta::pure::profiles::doc.doc = 'If true, failure to deliver is applicable.'} failureToDeliver: Boolean[0..1];
  representations: model::external::cdm::Representations[0..1];
  {meta::pure::profiles::doc.doc = '2002 ISDA Equity Derivatives Definitions: Nationalization and Insolvency | 2018 ISDA CDM Equity Confirmation for Security Equity Swap: Nationalization shall occur if all the Securities or all or substantially all the assets of an Issuer are nationalized, expropriated or are otherwise required to be transferred to any governmental agency, authority, entity or instrumentality thereof. Insolvency Filing means as defined in the Confirmation Side Letter.'} nationalizationOrInsolvency: model::external::cdm::NationalizationOrInsolvencyOrDelistingEventEnum[0..1];
  {meta::pure::profiles::doc.doc = '2002 ISDA Equity Derivatives Definitions: Delisting | 2018 ISDA CDM Equity Confirmation for Security Equity Swap: Delisting means Delisting (Broad Relisting) or Delisting (Narrow Relisting), as specified in the Relationship Supplement.'} delisting: model::external::cdm::NationalizationOrInsolvencyOrDelistingEventEnum[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Class TimeZone from CDM: The time alongside with the timezone location information. This class makes use of the FpML TimezoneLocation construct.'} FpML::model::TimeZone
{
  time: String[0..1];
  location: FpML::model::TimezoneLocation[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to indicate the length of the resource.'} model::external::cdm::ResourceLength
{
  {meta::pure::profiles::doc.doc = 'The length unit of the resource. For example, pages (pdf, text documents) or time (audio, video files).'} lengthUnit: model::external::cdm::LengthUnitEnum[1];
  {meta::pure::profiles::doc.doc = 'The length value of the resource.'} lengthValue: Float[1];
}

Class {meta::pure::profiles::doc.doc = 'Type for reporting the raw (untreated) observed or calculated rate for a calculation period.  If this is a calculated rate, it allows details of the observations and the resulting rate to be returned.'} model::external::cdm::FloatingRateSettingDetails
{
  {meta::pure::profiles::doc.doc = 'Calculated rate details (observation dates, values, and weights).'} calculationDetails: model::external::cdm::CalculatedRateDetails[0..1];
  {meta::pure::profiles::doc.doc = 'The day upon which the rate was observed (for term rates).'} observationDate: Date[0..1];
  {meta::pure::profiles::doc.doc = 'The day for which the rate is needed (e.g. period beginning or end date).'} resetDate: Date[0..1];
  {meta::pure::profiles::doc.doc = 'The resulting rate that was observed or calculated.'} floatingRate: Float[1];
}

Class FpML::model::SwaptionPhysicalSettlement
[
  c1_choice: ($this.predeterminedClearingOrganizationPartyReference->isNotEmpty() && $this.mutuallyAgreedClearinghouse->isEmpty()) || ($this.predeterminedClearingOrganizationPartyReference->isEmpty() && $this.mutuallyAgreedClearinghouse->isNotEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'Specifies whether the swap resulting from physical settlement of the swaption transaction will clear through a clearing house. The meaning of Cleared Physical Settlement is defined in the 2006 ISDA Definitions, Section 15.2 (published in Supplement number 28).'} clearedPhysicalSettlement: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'A reference to the clearing organization (CCP, DCO) to which the trade should be cleared. This is also known as the \'Mutually Agreed Clearinghouse\'.'} predeterminedClearingOrganizationPartyReference: FpML::model::PartyReference[0..1];
  {meta::pure::profiles::doc.doc = 'This may be used to specify a \'mutually-agreed clearinghouse\' for settlement.'} mutuallyAgreedClearinghouse: FpML::model::MutuallyAgreedClearinghouse[0..1];
  {meta::pure::profiles::doc.doc = 'This may be used to indicate the discount rate to be used for cash collateral for cash settlement purposes.'} agreedDiscountRate: FpML::model::BenchmarkRate[0..1];
  {meta::pure::profiles::doc.doc = 'The method for obtaining a settlement rate. This may be from some information source (e.g. Reuters) or from a set of reference banks.'} settlementRateSource: FpML::model::SettlementRateSource[0..1];
  {meta::pure::profiles::doc.doc = 'Which rate quote is to be observed, either Bid, Mid, Offer or Exercising Party Pays. The meaning of Exercising Party Pays is defined in the 2000 ISDA Definitions, Section 17.2. Certain Definitions Relating to Cash Settlement, paragraph (j)'} quotationRateType: FpML::model::QuotationRateTypeEnum[0..1];
}

Class {meta::pure::profiles::doc.doc = 'List of Dates'} FpML::model::DateList
{
  date: StrictDate[*];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the Custodian Risk elections specific to a Credit Support Agreement.'} model::external::cdm::CustodianRisk
{
  {meta::pure::profiles::doc.doc = 'The party specific elections.'} partyElection: model::external::cdm::CustodianRiskElection[1..2];
}

Class {meta::pure::profiles::doc.doc = 'A map for a single FRO to or from an equivalent or similar FRO in a different contractual definitions version.'} model::external::cdm::FloatingRateIndexMap
{
  {meta::pure::profiles::doc.doc = 'The FRO name that is being mapped to/from.'} index: model::external::cdm::FloatingRateIndexEnum[1];
  {meta::pure::profiles::doc.doc = 'The definitional version to which the map applies.'} definitionVersion: model::external::cdm::ContractualDefinitionsEnum[1];
}

Class <<meta::pure::profiles::typemodifiers.abstract>> {meta::pure::profiles::doc.doc = 'A type for defining the common features of options. Buyer/seller information is not normally used in Transparency view but is optional in case the information is needed for administrative purposes such as Reporting Party determination.'} FpML::model::Option extends FpML::model::Product
{
  {meta::pure::profiles::doc.doc = 'A reference to the party that buys this instrument, ie. pays for this instrument and receives the rights defined by it. See 2000 ISDA definitions Article 11.1 (b). In the case of FRAs this the fixed rate payer.'} buyerPartyReference: FpML::model::PartyReference[0..1];
  {meta::pure::profiles::doc.doc = 'A reference to the account that buys this instrument.'} buyerAccountReference: FpML::model::AccountReference[0..1];
  {meta::pure::profiles::doc.doc = 'A reference to the party that sells (\'writes\') this instrument, i.e. that grants the rights defined by this instrument and in return receives a payment for it. See 2000 ISDA definitions Article 11.1 (a). In the case of FRAs this is the floating rate payer.'} sellerPartyReference: FpML::model::PartyReference[0..1];
  {meta::pure::profiles::doc.doc = 'A reference to the account that sells this instrument.'} sellerAccountReference: FpML::model::AccountReference[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A date with a required identifier which can be referenced elsewhere.'} FpML::model::RequiredIdentifierDate
{
  id: String[1];
  value: StrictDate[1];
}

Class {meta::pure::profiles::doc.doc = 'Identification of the law governing the transaction.'} FpML::model::GoverningLaw
[
  c1_length: $this.governingLawScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  governingLawScheme: String[0..1];
  value: String[1];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'A class defining the exercise period for an American style option together with any rules governing the notional amount of the underlying which can be exercised on any given exercise date and any associated exercise fees.'} model::external::cdm::AmericanExercise
{
  {meta::pure::profiles::doc.doc = 'The first day of the exercise period for an American style option.'} commencementDate: model::external::cdm::AdjustableOrRelativeDate[1];
  {meta::pure::profiles::doc.doc = 'The last day within an exercise period for an American style option. For a European style option it is the only day within the exercise period.'} expirationDate: model::external::cdm::AdjustableOrRelativeDate[1];
  {meta::pure::profiles::doc.doc = 'The effective date on the underlying product if the option is exercised.  For example, for a swaption it is the swap effective date, for an option on an FX spot or forward it is the value date for settlement, and in an extendible/cancelable provision it is the swap termination date, which is the date on which the termination is effective.\''} relevantUnderlyingDate: model::external::cdm::AdjustableOrRelativeDates[0..1];
  {meta::pure::profiles::doc.doc = 'The earliest time at which notice of exercise can be given by the buyer to the seller (or seller\'s agent) to, and including, the expiration date.'} earliestExerciseTime: model::external::cdm::BusinessCenterTime[0..1];
  {meta::pure::profiles::doc.doc = 'For a Bermuda or American style option, the latest time on an exercise business day (excluding the expiration date) within the exercise period that notice can be given by the buyer to the seller or seller\'s agent. Notice of exercise given after this time will be deemed to have been given on the next exercise business day.'} latestExerciseTime: model::external::cdm::BusinessCenterTime[0..1];
  {meta::pure::profiles::doc.doc = 'The latest time for exercise on expirationDate.'} expirationTime: model::external::cdm::BusinessCenterTime[1];
  {meta::pure::profiles::doc.doc = 'As defined in the 2000 ISDA Definitions, Section 12.4. Multiple Exercise, the buyer of the option has the right to exercise all or less than all the unexercised notional amount of the underlying swap on one or more days in the exercise period, but on any such day may not exercise less than the minimum notional amount or more that the maximum notional amount, and if an integral multiple amount is specified, the notional amount exercised must be equal to, or be an integral multiple of, the integral multiple amount.'} multipleExercise: model::external::cdm::MultipleExercise[0..1];
  {meta::pure::profiles::doc.doc = 'The fees associated with an exercise date. The fees are conditional on the exercise occurring. The fees can be specified as actual currency amounts or as percentages of the notional amount being exercised.'} exerciseFeeSchedule: model::external::cdm::ExerciseFeeSchedule[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type defining a date (referred to as the derived date) as a relative offset from another date (referred to as the anchor date) plus optional date adjustments.'} FpML::model::AdjustedRelativeDateOffset extends FpML::model::RelativeDateOffset
{
  {meta::pure::profiles::doc.doc = 'The business day convention and financial business centers used for adjusting the relative date if it would otherwise fall on a day that is not a business date in the specified business centers.'} relativeDateAdjustments: FpML::model::BusinessDayAdjustments[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type for defining a strike spread feature.'} FpML::model::StrikeSpread
[
  c1_range: $this.upperStrikeNumberOfOptions->forAll(x: Decimal[1]|$x > 0)
]
{
  {meta::pure::profiles::doc.doc = 'Upper strike in a strike spread.'} upperStrike: FpML::model::OptionStrike[0..1];
  {meta::pure::profiles::doc.doc = 'Number of options at the upper strike price in a strike spread.'} upperStrikeNumberOfOptions: Decimal[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type that describes the information to identify a correspondent bank that will make delivery of the funds on the paying bank\'s behalf in the country where the payment is to be made.'} FpML::model::CorrespondentInformation
[
  c1_choice: ($this.routingIds->isNotEmpty() && ($this.routingExplicitDetails->isEmpty() && $this.routingIdsAndExplicitDetails->isEmpty())) || (($this.routingIds->isEmpty() && ($this.routingExplicitDetails->isNotEmpty() && $this.routingIdsAndExplicitDetails->isEmpty())) || ($this.routingIds->isEmpty() && ($this.routingExplicitDetails->isEmpty() && $this.routingIdsAndExplicitDetails->isNotEmpty())))
]
{
  {meta::pure::profiles::doc.doc = 'A set of unique identifiers for a party, eachone identifying the party within a payment system. The assumption is that each party will not have more than one identifier within the same payment system.'} routingIds: FpML::model::RoutingIds[0..1];
  {meta::pure::profiles::doc.doc = 'A set of details that is used to identify a party involved in the routing of a payment when the party does not have a code that identifies it within one of the recognized payment systems.'} routingExplicitDetails: FpML::model::RoutingExplicitDetails[0..1];
  {meta::pure::profiles::doc.doc = 'A combination of coded payment system identifiers and details for physical addressing for a party involved in the routing of a payment.'} routingIdsAndExplicitDetails: FpML::model::RoutingIdsAndExplicitDetails[0..1];
  {meta::pure::profiles::doc.doc = 'Link to the party acting as correspondent. This element can only appear within the correspondentInformation container element.'} correspondentPartyReference: FpML::model::PartyReference[0..1];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'A class to define recurring periods or time offsets.'} model::external::cdm::Period
[
  Period: if($this.periodMultiplier == 0, |$this.period == model::external::cdm::PeriodEnum.D, |true)
]
{
  {meta::pure::profiles::doc.doc = 'A time period multiplier, e.g. 1, 2 or 3 etc. A negative value can be used when specifying an offset relative to another date, e.g. -2 days.'} periodMultiplier: Integer[1];
  {meta::pure::profiles::doc.doc = 'A time period, e.g. a day, week, month or year of the stream. If the periodMultiplier value is 0 (zero) then period must contain the value D (day).'} period: model::external::cdm::PeriodEnum[1];
}

Class {meta::pure::profiles::doc.doc = 'A class defining a date (referred to as the derived date) as a relative offset from another date (referred to as the anchor date). If the anchor date is itself an adjustable date then the offset is assumed to be calculated from the adjusted anchor date. A number of different scenarios can be supported, namely; 1) the derived date may simply be a number of calendar periods (days, weeks, months or years) preceding or following the anchor date; 2) the unadjusted derived date may be a number of calendar periods (days, weeks, months or years) preceding or following the anchor date with the resulting unadjusted derived date subject to adjustment in accordance with a specified business day convention, i.e. the derived date must fall on a good business day; 3) the derived date may be a number of business days preceding or following the anchor date. Note that the businessDayConvention specifies any required adjustment to the unadjusted derived date. A negative or positive value in the periodMultiplier indicates whether the unadjusted derived precedes or follows the anchor date. The businessDayConvention should contain a value NONE if the day type element contains a value of Business (since specifying a negative or positive business days offset would already guarantee that the derived date would fall on a good business day in the specified business centers).'} model::external::cdm::RelativeDateOffset extends model::external::cdm::Offset
{
  {meta::pure::profiles::doc.doc = 'The convention for adjusting a date if it would otherwise fall on a day that is not a business day, as specified by an ISDA convention (e.g. Following, Precedent).'} businessDayConvention: model::external::cdm::BusinessDayConventionEnum[1];
  businessCenters: model::external::cdm::BusinessCenters[0..1];
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'A pointer style reference to a set of financial business centers defined elsewhere in the document. This set of business centers is used to determine whether a particular day is a business day or not.'} businessCentersReference: model::external::cdm::BusinessCenters[0..1];
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'Specifies the anchor as an href attribute. The href attribute value is a pointer style reference to the element or component elsewhere in the document where the anchor date is defined.'} dateRelativeTo: Date[0..1];
  {meta::pure::profiles::doc.doc = 'The date once the adjustment has been performed. (Note that this date may change if the business center holidays change).'} adjustedDate: Date[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class defining the payment calculation rule. As of FpML 5.10, percentage rule is the only calculation rule that has been specified as part of the standard.'} model::external::cdm::PaymentRule
{
  {meta::pure::profiles::doc.doc = 'This attribute is not present as part of the FpML construct, as the payment rule is specialised by means of runtime type extension through the xsi:type.'} percentageRule: model::external::cdm::PercentageRule[0..1];
}

Class {meta::pure::profiles::doc.doc = 'The party election of Credit Support Provider(s), if any.'} model::external::cdm::CreditSupportDocumentElection
[
  creditSupportDocument: if($this.creditSupportDocumentTerms == model::external::cdm::CreditSupportDocumentTermsEnum.Specified, |$this.creditSupportDocument->isNotEmpty(), |true)
]
{
  {meta::pure::profiles::doc.doc = 'The elective party'} party: model::external::cdm::Party[1];
  {meta::pure::profiles::doc.doc = 'Specification of the Credit Support Document terms.'} creditSupportDocumentTerms: model::external::cdm::CreditSupportDocumentTermsEnum[1];
  {meta::pure::profiles::doc.doc = 'The specified Credit Support Document(s), if any.'} creditSupportDocument: model::external::cdm::RelatedAgreement[*];
  {meta::pure::profiles::doc.doc = 'Specification of a document when not captured under RelatedAgreement'} bespokeCreditSuppportDocument: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Reference to protectionTerms component.'} FpML::model::ProtectionTermsReference extends FpML::model::Reference
{
  href: String[1];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'The option payout specification terms. The associated globalKey denotes the ability to associate a hash value to the respective OptionPayout instantiation for the purpose of model cross-referencing, in support of functionality such as the event effect and the lineage.'} model::external::cdm::OptionPayout extends model::external::cdm::PayoutBase
{
  buyerSeller: model::external::cdm::BuyerSeller[1];
  {meta::pure::profiles::doc.doc = 'The type of option transaction. From a usage standpoint, put/call is the default option type, while payer/receiver indicator is used for options on index credit default swaps, consistently with the industry practice. Straddle is used for the case of straddle strategy, that combine a call and a put with the same strike.'} optionType: model::external::cdm::OptionTypeEnum[0..1];
  {meta::pure::profiles::doc.doc = 'The option feature, such as quanto, Asian, barrier, knock.'} feature: model::external::cdm::OptionFeature[0..1];
  {meta::pure::profiles::doc.doc = 'The terms for exercising the option, which include the option style (e.g. American style option), the exercise procedure (e.g. manual exercise) and the settlement terms (e.g. physical vs. cash).'} exerciseTerms: model::external::cdm::OptionExercise[1];
  {meta::pure::profiles::doc.doc = 'The product underlying the option, which can be of any type including ContractualProduct or Security.'} underlier: model::external::cdm::Product[1];
  {meta::pure::profiles::doc.doc = 'Class containing terms that are associated with observing a price/benchmark/index across either single or multple observations. To be used for option contracts that reference a benchmark price.'} observationTerms: model::external::cdm::ObservationTerms[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Defines the settlement rate option to use for fixing in case of cash settlement. Currently only applicable to foreign exchange fixing in case of cross-currency settlement.'} model::external::cdm::SettlementRateOption
{
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'The rate source for the conversion to the settlement currency. This source is specified through a scheme that reflects the terms of the Annex A to the 1998 FX and Currency Option Definitions.'} settlementRateOption: model::external::cdm::SettlementRateOptionEnum[1];
  {meta::pure::profiles::doc.doc = 'An attribute defining the parameters to get a new quote when a settlement rate option is disrupted.'} priceSourceDisruption: model::external::cdm::PriceSourceDisruption[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type defining the rate source and fixing time for an fx rate.'} FpML::model::FxSpotRateSource
{
  {meta::pure::profiles::doc.doc = 'The primary source for where the rate observation will occur. Will typically be either a page or a reference bank published rate.'} primaryRateSource: FpML::model::InformationSource[0..1];
  {meta::pure::profiles::doc.doc = 'An alternative, or secondary, source for where the rate observation will occur. Will typically be either a page or a reference bank published rate.'} secondaryRateSource: FpML::model::InformationSource[0..1];
  {meta::pure::profiles::doc.doc = 'The time at which the spot currency exchange rate will be observed. It is specified as a time in a business day calendar location, e.g. 11:00am London time.'} fixingTime: FpML::model::BusinessCenterTime[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type describing a schedule of cap or floor rates.'} FpML::model::StrikeSchedule extends FpML::model::Schedule
{
  {meta::pure::profiles::doc.doc = 'The buyer of the option'} buyer: FpML::model::IdentifiedPayerReceiver[0..1];
  {meta::pure::profiles::doc.doc = 'The party that has sold.'} seller: FpML::model::IdentifiedPayerReceiver[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Class to specify a non-negative schedule as a schedule of steps, typically used to define a payout leg with variable quantity. This quantity cannot be negative, while direction is specified through a BuyerSeller or PayerReceiver attribute. The non-negativity is enforced by making use of the non-negative step class.'} model::external::cdm::NonNegativeStepSchedule
{
  {meta::pure::profiles::doc.doc = 'The schedule of step date and non-negative value pairs. On each step date the associated step value becomes effective. A list of steps may be ordered in the document by ascending step date. An FpML document containing an unordered list of steps is still regarded as a conformant document.'} step: model::external::cdm::NonNegativeStep[1..*];
}

Class {meta::pure::profiles::doc.doc = 'An exchange traded option.'} FpML::model::ExchangeTradedOption extends FpML::model::ExchangeTradedContract
{
  {meta::pure::profiles::doc.doc = 'Specifies the price at which the option can be exercised.'} strike: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'The currency in which the strike of the option is expressed.'} strikeCurrency: FpML::model::Currency[0..1];
  {meta::pure::profiles::doc.doc = 'Units in which the option strike is expressed e.g. currency Amount, BasisPoints, Percentage, Rate. Reportable reference data under MiFID RTS 22'} strikeUnits: FpML::model::PriceQuoteUnits[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies whether the option allows the holder to buy or sell tne underlying asset.'} optionType: FpML::model::PutCallEnum[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the exercise style of the option {American, Bermuda, European}'} exerciseStyle: FpML::model::ExerciseStyleEnum[0..1];
  {meta::pure::profiles::doc.doc = 'Underlyer of the option e.g. a listed future.'} underlyer: FpML::model::ExchangeTradedContractUnderlyer[0..1];
  {meta::pure::profiles::doc.doc = 'Settlement method for the contract (Cash, Physical). This value is used to populate the \'Delivery Type\' field for regulatory reporting (CFTC, ESMA).'} settlementType: FpML::model::SettlementTypeEnum[0..1];
}

Class <<meta::pure::profiles::typemodifiers.abstract>> {meta::pure::profiles::doc.doc = 'The abstract base class for all types which define interest rate streams.'} FpML::model::Rate
{
  id: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type defining the beneficiary of the funds.'} FpML::model::Beneficiary
[
  c1_choice: ($this.routingIds->isNotEmpty() && ($this.routingExplicitDetails->isEmpty() && $this.routingIdsAndExplicitDetails->isEmpty())) || (($this.routingIds->isEmpty() && ($this.routingExplicitDetails->isNotEmpty() && $this.routingIdsAndExplicitDetails->isEmpty())) || ($this.routingIds->isEmpty() && ($this.routingExplicitDetails->isEmpty() && $this.routingIdsAndExplicitDetails->isNotEmpty())))
]
{
  {meta::pure::profiles::doc.doc = 'A set of unique identifiers for a party, eachone identifying the party within a payment system. The assumption is that each party will not have more than one identifier within the same payment system.'} routingIds: FpML::model::RoutingIds[0..1];
  {meta::pure::profiles::doc.doc = 'A set of details that is used to identify a party involved in the routing of a payment when the party does not have a code that identifies it within one of the recognized payment systems.'} routingExplicitDetails: FpML::model::RoutingExplicitDetails[0..1];
  {meta::pure::profiles::doc.doc = 'A combination of coded payment system identifiers and details for physical addressing for a party involved in the routing of a payment.'} routingIdsAndExplicitDetails: FpML::model::RoutingIdsAndExplicitDetails[0..1];
  {meta::pure::profiles::doc.doc = 'Link to the party acting as beneficiary. This element can only appear within the beneficiary container element.'} beneficiaryPartyReference: FpML::model::PartyReference[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type defining a Credit Default Swap Index.'} FpML::model::IndexReferenceInformation
[
  c1_choice: $this.indexName->isNotEmpty() || $this.indexName->isEmpty()
]
{
  {meta::pure::profiles::doc.doc = 'The name of the index expressed as a free format string. FpML does not define usage rules for this element.'} indexName: FpML::model::IndexName[0..1];
  {meta::pure::profiles::doc.doc = 'A CDS index identifier (e.g. RED pair code).'} indexId: FpML::model::IndexId[*];
  {meta::pure::profiles::doc.doc = 'A CDS index series identifier, e.g. 1, 2, 3 etc.'} indexSeries: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'A CDS index series version identifier, e.g. 1, 2, 3 etc.'} indexAnnexVersion: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'A CDS index series annex date.'} indexAnnexDate: StrictDate[0..1];
  {meta::pure::profiles::doc.doc = 'A CDS index series annex source.'} indexAnnexSource: FpML::model::IndexAnnexSource[0..1];
  {meta::pure::profiles::doc.doc = 'Excluded reference entity.'} excludedReferenceEntity: FpML::model::LegalEntity[*];
  {meta::pure::profiles::doc.doc = 'This element contains CDS tranche terms.'} tranche: FpML::model::Tranche[0..1];
  {meta::pure::profiles::doc.doc = 'Used to specify the Relevant Settled Entity Matrix when there are settled entities at the time of the trade.'} settledEntityMatrix: FpML::model::SettledEntityMatrix[0..1];
  {meta::pure::profiles::doc.doc = 'Index Factor is the index version factor or percent, expressed as an absolute decimal value between 0 and 1, that multiplied by the original notional amount yields the notional amount covered by the seller of protection.'} indexFactor: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'Seniority of debt instruments comprising the index.'} seniority: FpML::model::CreditSeniority[0..1];
  id: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class that is used for describing the exchange rate for a particular transaction.'} model::external::cdm::ExchangeRate
{
  {meta::pure::profiles::doc.doc = 'An optional element that allow for definition of the currency exchange rates used to cross between the traded currencies for non-base currency FX contracts.'} crossRate: model::external::cdm::CrossRate[*];
}

Class FpML::model::SingleValuationDate
{
  {meta::pure::profiles::doc.doc = 'A number of business days. Its precise meaning is dependant on the context in which this element is used. ISDA 2003 Term: Business Day'} businessDays: Decimal[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A data defining:  the adjusted dates associated with an optional early termination provision.'} model::external::cdm::OptionalEarlyTerminationAdjustedDates
{
  {meta::pure::profiles::doc.doc = 'The adjusted dates associated with an individual early termination date.'} earlyTerminationEvent: model::external::cdm::EarlyTerminationEvent[1..*];
}

Class {meta::pure::profiles::doc.doc = 'Observation point for trigger.'} FpML::model::TriggerEvent
{
  {meta::pure::profiles::doc.doc = 'A Equity Derivative schedule.'} schedule: FpML::model::AveragingSchedule[*];
  {meta::pure::profiles::doc.doc = 'The trigger Dates.'} triggerDates: FpML::model::DateList[0..1];
  {meta::pure::profiles::doc.doc = 'The trigger level.'} trigger: FpML::model::Trigger[0..1];
  {meta::pure::profiles::doc.doc = 'The feature payment.'} featurePayment: FpML::model::FeaturePayment[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type for defining Fx Features.'} FpML::model::FxFeature
[
  c1_choice: ($this.composite->isNotEmpty() && ($this.quanto->isEmpty() && $this.crossCurrency->isEmpty())) || (($this.composite->isEmpty() && ($this.quanto->isNotEmpty() && $this.crossCurrency->isEmpty())) || ($this.composite->isEmpty() && ($this.quanto->isEmpty() && $this.crossCurrency->isNotEmpty())))
]
{
  {meta::pure::profiles::doc.doc = 'Specifies the reference currency of the trade.'} referenceCurrency: FpML::model::IdentifiedCurrency[0..1];
  {meta::pure::profiles::doc.doc = 'If \u201CComposite\u201D is specified as the Settlement Type in the relevant Transaction Supplement, an amount in the Settlement Currency, determined by the Calculation Agent as being equal to the number of Options exercised or deemed exercised, multiplied by: (Settlement Price \u2013 Strike Price) / (Strike Price \u2013 Settlement Price) x Multiplier provided that if the above is equal to a negative amount the Option Cash Settlement Amount shall be deemed to be zero.'} composite: FpML::model::Composite[0..1];
  {meta::pure::profiles::doc.doc = 'If \u201CQuanto\u201D is specified as the Settlement Type in the relevant Transaction Supplement, an amount, as determined by the Calculation Agent in accordance with the Section 8.2 of the Equity Definitions.'} quanto: FpML::model::Quanto[0..1];
  {meta::pure::profiles::doc.doc = 'If \u201CCross-Currency\u201D is specified as the Settlement Type in the relevant Transaction Supplement, an amount in the Settlement Currency, determined by the Calculation Agent as being equal to the number of Options exercised or deemed exercised, multiplied by: (Settlement Price \u2013 Strike Price) / (Strike Price \u2013 Settlement Price) x Multiplier x one unit of the Reference Currency converted into an amount in the Settlement Currency using the rate of exchange of the Settlement Currency as quoted on the Reference Price Source on the Valuation Date, provided that if the above is equal to a negative amount the Option Cash Settlement Amount shall be deemed to be zero.'} crossCurrency: FpML::model::Composite[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A published index whose price depends on exchange traded constituents.'} FpML::model::Index extends FpML::model::ExchangeTradedCalculatedPrice
{
  {meta::pure::profiles::doc.doc = 'A short form unique identifier for the reference future contract in the case of an index underlyer.'} futureId: FpML::model::FutureId[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify Additional Representations that may be applicable to an agreement.'} model::external::cdm::AdditionalRepresentations
[
  one_of_constraint: ($this.additionalRepresentation->isNotEmpty() && $this.regulatoryComplianceRepresentation->isEmpty()) || ($this.regulatoryComplianceRepresentation->isNotEmpty() && $this.additionalRepresentation->isEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'The specification of the Additional Representation that may be applicable to the agreement.'} additionalRepresentation: model::external::cdm::AdditionalRepresentation[0..1];
  {meta::pure::profiles::doc.doc = 'The qualification of whether Additional Information related to Regulatory Compliance and Concentration Limits is applicable or not.'} regulatoryComplianceRepresentation: Boolean[0..1];
}

Class {meta::pure::profiles::doc.doc = 'This type holds parameters defining the normal fixing offset for a floating rate index.'} model::external::cdm::FloatingRateIndexFixingOffset extends model::external::cdm::BusinessDayOffset
{
  {meta::pure::profiles::doc.doc = 'Allows a reason to be specified for using the alternative fixing offset.'} designatedMaturity: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A master agreement identifier allocated by a party. FpML does not define the domain values associated with this element. Note that the domain values for this element are not strictly an enumerated list.'} FpML::model::MasterAgreementId
[
  c1_length: $this.masterAgreementIdScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() >= 1,
  c3_length: $this.value->length() <= 255
]
{
  masterAgreementIdScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'Specifies the Duration Terms of the Security Financing Transaction, and optionally any Evergreen terms.'} model::external::cdm::Duration
{
  {meta::pure::profiles::doc.doc = 'Specifies the Duration Terms of the Security Financing transaction. e.g. Open or Term.'} durationType: model::external::cdm::DurationTypeEnum[1];
  {meta::pure::profiles::doc.doc = 'A data defining: the right of a party to exercise an Evergreen option'} evergreenProvision: model::external::cdm::EvergreenProvision[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the ISDA 2003 Term: Not Domestic Currency.'} model::external::cdm::NotDomesticCurrency
{
  {meta::pure::profiles::doc.doc = 'Indicates whether the Not Domestic Currency provision is applicable.'} applicable: Boolean[1];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'An explicit specification of the domestic currency. The list of valid currencies is not presently positioned as an enumeration as part of the CDM because that scope is limited to the values specified by ISDA and FpML. As a result, implementers have to make reference to the relevant standard, such as the ISO 4217 standard for currency codes.'} currency: String[0..1];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'A class to specified payments in a simpler fashion than the Payment type. This construct should be used from the FpML version 4.3 onwards.'} model::external::cdm::SimplePayment extends model::external::cdm::PartyReferencePayerReceiver
{
  {meta::pure::profiles::doc.doc = 'The payment amount.'} paymentAmount: model::external::cdm::Money[1];
  {meta::pure::profiles::doc.doc = 'The payment date. This date is subject to adjustment in accordance with any applicable business day convention.'} paymentDate: model::external::cdm::AdjustableOrRelativeDate[1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the applicable regulatory regime(s) that parties to a legal agreement, such as the ISDA 2016 and 2018 CSA for Initial Margin, might be subject to.'} model::external::cdm::ApplicableRegime
{
  {meta::pure::profiles::doc.doc = 'The applicable regulatory regime, as specified through an enumeration.'} regime: model::external::cdm::RegulatoryRegimeEnum[0..1];
  {meta::pure::profiles::doc.doc = 'The additional regulatory regime as specified by the parties.'} additionalRegime: String[0..1];
  {meta::pure::profiles::doc.doc = 'A class that is used by the ApplicableRegime and the AdditionalRegime classes to specify the terms that are specific to each party and regime which are referred to in the Regime Table as part of certain legal agreements, such as such as the ISDA 2016 and 2018 CSA for Initial Margin.'} regimeTerms: model::external::cdm::RegimeTerms[2];
  {meta::pure::profiles::doc.doc = 'The Additional Type of transaction that can require the collection or delivery of initial margin under the specified regulatory regime for the purposes of Covered Transactions, as specified in ISDA 2016 Credit Support Annex for Initial Margin, paragraph 13, General Principles, (b)(B).'} additionalType: model::external::cdm::AdditionalTypeEnum[0..1];
  {meta::pure::profiles::doc.doc = 'The bespoke Additional Type for the purposes of Covered Transactions (IM).'} additionalTerms: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Represents a class to allow specification of the asset product type.'} model::external::cdm::AssetType
{
  {meta::pure::profiles::doc.doc = 'Represents a filter based on the type of collateral asset.'} assetType: model::external::cdm::AssetTypeEnum[1];
  {meta::pure::profiles::doc.doc = 'Represents a filter based on the type of security.'} securityType: model::external::cdm::SecurityTypeEnum[0..1];
  {meta::pure::profiles::doc.doc = 'Represents a filter based on the type of bond.'} debtType: model::external::cdm::DebtType[0..1];
  {meta::pure::profiles::doc.doc = 'Represents a filter based on the type of equity.'} equityType: model::external::cdm::EquityTypeEnum[0..1];
  {meta::pure::profiles::doc.doc = 'Represents a filter based on the type of fund.'} fundType: model::external::cdm::FundProductTypeEnum[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the eligible asset type when not enumerated.'} otherAssetType: String[*];
}

Class model::external::cdm::zonedDateTime
{
  time: DateTime[1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify a trade affirmation.'} model::external::cdm::Affirmation
[
  BothBuyerAndSellerPartyRolesMustExist: if($this.lineage.tradeReference.tradableProduct.product.security->isNotEmpty(), |$this.partyRole.role->contains(model::external::cdm::PartyRoleEnum.Buyer) || $this.partyRole.role->contains(model::external::cdm::PartyRoleEnum.Seller), |true)
]
{
  {meta::pure::profiles::doc.doc = 'The identifier(s) associated with the trade and resulting confirmation.'} identifier: model::external::cdm::Identifier[1..*];
  {meta::pure::profiles::doc.doc = 'The parties associated with the trade.'} party: model::external::cdm::Party[1..*];
  {meta::pure::profiles::doc.doc = 'The role(s) that party(ies) may have in relation to the trade'} partyRole: model::external::cdm::PartyRole[1..*];
  {meta::pure::profiles::doc.doc = 'The lineage attribute provides a linkage to previous lifecycle events and associated data.'} lineage: model::external::cdm::Lineage[0..1];
  status: model::external::cdm::AffirmationStatusEnum[1];
}

Class FpML::model::IndexAnnexSource
[
  c1_length: $this.indexAnnexSourceScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  indexAnnexSourceScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'An entity for defining the agreement executed between the parties and intended to govern all OTC derivatives transactions between those parties.'} FpML::model::MasterAgreement
{
  {meta::pure::profiles::doc.doc = 'An identifier that has been created to identify the master agreement.'} masterAgreementId: FpML::model::MasterAgreementId[*];
  {meta::pure::profiles::doc.doc = 'The agreement executed between the parties and intended to govern product-specific derivatives transactions between those parties.'} masterAgreementType: FpML::model::MasterAgreementType[0..1];
  {meta::pure::profiles::doc.doc = 'The version of the master agreement.'} masterAgreementVersion: FpML::model::MasterAgreementVersion[0..1];
  {meta::pure::profiles::doc.doc = 'The date on which the master agreement was signed.'} masterAgreementDate: StrictDate[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify a trade confirmation.'} model::external::cdm::Confirmation
{
  {meta::pure::profiles::doc.doc = 'The identifier(s) associated with the trade and resulting confirmation.'} identifier: model::external::cdm::Identifier[1..*];
  {meta::pure::profiles::doc.doc = 'The parties associated with the trade.'} party: model::external::cdm::Party[1..*];
  {meta::pure::profiles::doc.doc = 'The role(s) that party(ies) may have in relation to the trade'} partyRole: model::external::cdm::PartyRole[1..*];
  {meta::pure::profiles::doc.doc = 'The lineage attribute provides a linkage to previous lifecycle events and associated data.'} lineage: model::external::cdm::Lineage[0..1];
  status: model::external::cdm::ConfirmationStatusEnum[1];
}

Class FpML::model::MutuallyAgreedClearinghouse
[
  c1_choice: ($this.partyReference->isNotEmpty() && $this.identifier->isEmpty()) || ($this.partyReference->isEmpty() && $this.identifier->isNotEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'A reference to the party structure for the clearinghouse'} partyReference: FpML::model::PartyReference[0..1];
  {meta::pure::profiles::doc.doc = 'A string that identifies the clearinghouse'} identifier: FpML::model::OrganizationIdentifier[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify whether One Way Provisions apply in relation to the ISDA CSA for Initial Margin and, if yes, to specify the Posting Party. ISDA 2016 Credit Support Annex for Initial Margin, paragraph 13, General Principles (aa): One Way Provisions.'} model::external::cdm::OneWayProvisions
{
  {meta::pure::profiles::doc.doc = 'The determination of whether the One Way Provisions are applicable (true) or not applicable (false).'} isApplicable: Boolean[1];
  {meta::pure::profiles::doc.doc = 'The Posting Party for the purposes of One Way Provisions. It is specified in the case where the One Way Provision is deemed applicable.'} postingParty: model::external::cdm::CounterpartyRoleEnum[0..1];
}

Class FpML::model::SettlementTerms
{
  {meta::pure::profiles::doc.doc = 'ISDA 2003 Term: Settlement Currency'} settlementCurrency: FpML::model::Currency[0..1];
  id: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'This type contains all the reference pool items to define the reference entity and reference obligation(s) in the basket.'} model::external::cdm::ReferencePool
[
  FpML_cd_44_openUnits: if($this.referencePoolItem.constituentWeight.openUnits->isNotEmpty(), |$this.referencePoolItem.constituentWeight.basketPercentage->isEmpty(), |true),
  FpML_cd_44_basketPercentage: if($this.referencePoolItem.constituentWeight.basketPercentage->isNotEmpty(), |$this.referencePoolItem.constituentWeight.openUnits->isEmpty(), |true)
]
{
  {meta::pure::profiles::doc.doc = 'This type contains all the constituent weight and reference information.'} referencePoolItem: model::external::cdm::ReferencePoolItem[1..*];
}

Class {meta::pure::profiles::doc.doc = 'Represents a class to allow specification of the type of entity issuing the collateral.'} model::external::cdm::CollateralIssuerType
{
  {meta::pure::profiles::doc.doc = 'Specifies the origin of entity issuing the collateral.'} issuerType: model::external::cdm::IssuerTypeEnum[1];
  {meta::pure::profiles::doc.doc = 'Specifies debt issued by international organisations and multilateral banks.'} supraNationalType: model::external::cdm::SupraNationalIssuerTypeEnum[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies debt issues by institutions or bodies, typically constituted by statute, with a function mandated by the government and subject to government supervision inclusive of profit- and non-profit making bodies. Includes the US Agencies and GSEs and the EU concept of public sector entities. Excluding any entities which are also Regional Government.'} quasiGovernmentType: model::external::cdm::QuasiGovernmentIssuerType[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies Regional government, local authority or municipal.'} regionalGovernmentType: model::external::cdm::RegionalGovernmentIssuerType[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies a subsidiary company that is formed to undertake a specific business purpose of acquisition and financing of specific assets on a potentially limited recourse basis dependent of how it is designed. E.g. asset backed securities, including securitisations.'} specialPurposeVehicleType: model::external::cdm::SpecialPurposeVehicleIssuerType[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class defining a floating rate.'} model::external::cdm::StubFloatingRate
{
  {meta::pure::profiles::doc.doc = 'The floating rate index.'} floatingRateIndex: model::external::cdm::FloatingRateIndexEnum[1];
  {meta::pure::profiles::doc.doc = 'The ISDA Designated Maturity, i.e. the tenor of the floating rate.'} indexTenor: model::external::cdm::Period[0..1];
  {meta::pure::profiles::doc.doc = 'A rate multiplier or multiplier schedule to apply to the floating rate. A multiplier schedule is expressed as explicit multipliers and dates. In the case of a schedule, the step dates may be subject to adjustment in accordance with any adjustments specified in the calculationPeriodDatesAdjustments. The multiplier can be a positive or negative decimal. This element should only be included if the multiplier is not equal to 1 (one) for the term of the stream.'} floatingRateMultiplierSchedule: model::external::cdm::Schedule[0..1];
  {meta::pure::profiles::doc.doc = 'The ISDA Spread or a Spread schedule expressed as explicit spreads and dates. In the case of a schedule, the step dates may be subject to adjustment in accordance with any adjustments specified in calculationPeriodDatesAdjustments. The spread is a per annum rate, expressed as a decimal. For purposes of determining a calculation period amount, if positive the spread will be added to the floating rate and if negative the spread will be subtracted from the floating rate. A positive 10 basis point (0.1%) spread would be represented as 0.001.'} spreadSchedule: model::external::cdm::SpreadSchedule[*];
  {meta::pure::profiles::doc.doc = 'The specification of any rate conversion which needs to be applied to the observed rate before being used in any calculations. The two common conversions are for securities quoted on a bank discount basis which will need to be converted to either a Money Market Yield or Bond Equivalent Yield. See the Annex to the 2000 ISDA Definitions, Section 7.3. Certain General Definitions Relating to Floating Rate Options, paragraphs (g) and (h) for definitions of these terms.'} rateTreatment: model::external::cdm::RateTreatmentEnum[0..1];
  {meta::pure::profiles::doc.doc = 'The cap rate or cap rate schedule, if any, which applies to the floating rate. The cap rate (strike) is only required where the floating rate on a swap stream is capped at a certain level. A cap rate schedule is expressed as explicit cap rates and dates and the step dates may be subject to adjustment in accordance with any adjustments specified in calculationPeriodDatesAdjustments. The cap rate is assumed to be exclusive of any spread and is a per annum rate, expressed as a decimal. A cap rate of 5% would be represented as 0.05.'} capRateSchedule: model::external::cdm::StrikeSchedule[*];
  {meta::pure::profiles::doc.doc = 'The floor rate or floor rate schedule, if any, which applies to the floating rate. The floor rate (strike) is only required where the floating rate on a swap stream is floored at a certain strike level. A floor rate schedule is expressed as explicit floor rates and dates and the step dates may be subject to adjustment in accordance with any adjustments specified in calculationPeriodDatesAdjustments. The floor rate is assumed to be exclusive of any spread and is a per annum rate, expressed as a decimal. A floor rate of 5% would be represented as 0.05.'} floorRateSchedule: model::external::cdm::StrikeSchedule[*];
}

Class FpML::model::BasketName
[
  c1_length: $this.basketNameScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() >= 1,
  c3_length: $this.value->length() <= 255
]
{
  basketNameScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'A type defining a schedule of rates or amounts in terms of an initial value and then a series of step date and value pairs. On each step date, the rate or amount changes to the new step value. The series of step date and value pairs are optional. If not specified, this implies that the initial value remains unchanged over time.'} FpML::model::Schedule
{
  {meta::pure::profiles::doc.doc = 'The initial rate or amount, as the case may be. An initial rate of 5% would be represented as 0.05.'} initialValue: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'The schedule of step date and value pairs. On each step date, the associated step value becomes effective. A list of steps may be ordered in the document by ascending step date. An FpML document containing an unordered list of steps is still regarded as a conformant document.'} step: FpML::model::Step[*];
  id: String[0..1];
}

Class FpML::model::GeneralTerms
[
  c1_choice: ($this.referenceInformation->isNotEmpty() && ($this.indexReferenceInformation->isEmpty() && $this.basketReferenceInformation->isEmpty())) || (($this.referenceInformation->isEmpty() && ($this.indexReferenceInformation->isNotEmpty() && $this.basketReferenceInformation->isEmpty())) || ($this.referenceInformation->isEmpty() && ($this.indexReferenceInformation->isEmpty() && $this.basketReferenceInformation->isNotEmpty())))
]
{
  {meta::pure::profiles::doc.doc = 'The first day of the term of the trade. This day may be subject to adjustment in accordance with a business day convention. ISDA 2003 Term: Effective Date.'} effectiveDate: FpML::model::AdjustableDate2[0..1];
  {meta::pure::profiles::doc.doc = 'The scheduled date on which the credit protection will lapse. This day may be subject to adjustment in accordance with a business day convention. ISDA 2003 Term: Scheduled Termination Date.'} scheduledTerminationDate: FpML::model::AdjustableDate2[0..1];
  {meta::pure::profiles::doc.doc = 'A reference to the party that buys this instrument, ie. pays for this instrument and receives the rights defined by it. See 2000 ISDA definitions Article 11.1 (b). In the case of FRAs this the fixed rate payer.'} buyerPartyReference: FpML::model::PartyReference[0..1];
  {meta::pure::profiles::doc.doc = 'A reference to the account that buys this instrument.'} buyerAccountReference: FpML::model::AccountReference[0..1];
  {meta::pure::profiles::doc.doc = 'A reference to the party that sells (\'writes\') this instrument, i.e. that grants the rights defined by this instrument and in return receives a payment for it. See 2000 ISDA definitions Article 11.1 (a). In the case of FRAs this is the floating rate payer.'} sellerPartyReference: FpML::model::PartyReference[0..1];
  {meta::pure::profiles::doc.doc = 'A reference to the account that sells this instrument.'} sellerAccountReference: FpML::model::AccountReference[0..1];
  {meta::pure::profiles::doc.doc = 'The purpose of this element is to disambiguate whether the buyer of the product effectively buys protection or whether he buys risk (and, hence, sells protection) in the case, such as high yields instruments, where no firm standard appears to exist at the execution level.'} buyerConvention: FpML::model::BuyerConventionEnum[0..1];
  {meta::pure::profiles::doc.doc = 'ISDA 2003 Terms: Business Day and Business Day Convention.'} dateAdjustments: FpML::model::BusinessDayAdjustments[0..1];
  {meta::pure::profiles::doc.doc = 'This element contains all the terms relevant to defining the reference entity and reference obligation(s).'} referenceInformation: FpML::model::ReferenceInformation[0..1];
  {meta::pure::profiles::doc.doc = 'This element contains all the terms relevant to defining the Credit DefaultSwap Index.'} indexReferenceInformation: FpML::model::IndexReferenceInformation[0..1];
  {meta::pure::profiles::doc.doc = 'This element contains all the terms relevant to defining the Credit Default Swap Basket.'} basketReferenceInformation: FpML::model::BasketReferenceInformation[0..1];
  {meta::pure::profiles::doc.doc = 'This element is used for representing information contained in the Additional Terms field of the 2003 Master Credit Derivatives confirm.'} additionalTerm: FpML::model::AdditionalTerm[*];
  {meta::pure::profiles::doc.doc = 'Value of this element set to \'true\' indicates that substitution is applicable.'} substitution: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'Value of this element set to \'true\' indicates that modified equity delivery is applicable.'} modifiedEquityDelivery: Boolean[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify an optional termination event, additional to the Termination Events that will be deemed an Access Condition (Initial Margin CSA) or a Specified Condition (Variation Margin CSA)'} model::external::cdm::AdditionalTerminationEvent
{
  {meta::pure::profiles::doc.doc = 'The name of the additional termination event'} name: String[1];
  {meta::pure::profiles::doc.doc = 'Whether the additional termination event is applicable for the relevant party'} applicableParty: model::external::cdm::CounterpartyRoleEnum[1..2];
}

Class {meta::pure::profiles::doc.doc = 'A type defining to whom and where notice of execution should be given. The partyReference refers to one of the principal parties of the trade. If present the exerciseNoticePartyReference refers to a party, other than the principal party, to whome notice should be given.'} FpML::model::ExerciseNotice
{
  {meta::pure::profiles::doc.doc = 'The party referenced has allocated the trade identifier.'} partyReference: FpML::model::PartyReference[0..1];
  {meta::pure::profiles::doc.doc = 'The party referenced is the party to which notice of exercise should be given by the buyer.'} exerciseNoticePartyReference: FpML::model::PartyReference[0..1];
  businessCenter: FpML::model::BusinessCenter[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Type for reporting the details of the rate treatment.  This could potentially be replaced by the existing FloatingRateDefinition type , but this is slightly more detailed.'} model::external::cdm::FloatingRateProcessingDetails
{
  {meta::pure::profiles::doc.doc = 'The raw or untreated rate, prior to any of the rate treatments.'} rawRate: Float[1];
  processingParameters: model::external::cdm::FloatingRateProcessingParameters[0..1];
  {meta::pure::profiles::doc.doc = 'The value of the rate after processing.'} processedRate: Float[1];
  {meta::pure::profiles::doc.doc = 'The value of the processed rate without the spread applied, for subsequent compounding, etc.'} spreadExclusiveRate: Float[1];
}

Class {meta::pure::profiles::doc.doc = 'Defines the structure needed to represent fallback rate parameters. This type is used to represent modular computed rates in interestRatePayouts.'} model::external::cdm::FallbackRateParameters
{
  {meta::pure::profiles::doc.doc = 'The floating rate index that is used as the basis of the fallback rate.'} floatingRateIndex: model::external::cdm::FloatingRateIndexEnum[1];
  {meta::pure::profiles::doc.doc = 'The date the fallback rate takes effect.'} effectiveDate: Date[0..1];
  {meta::pure::profiles::doc.doc = 'Support for modular calculated rates, such such as lockout compound calculations.'} calculationParameters: model::external::cdm::FloatingRateCalculationParameters[0..1];
  {meta::pure::profiles::doc.doc = 'The economic spread applied to the underlying fallback rate to replicate the original risky rate.'} spreadAdjustment: Float[0..1];
}

Class {meta::pure::profiles::doc.doc = 'An entity for defining the master confirmation agreement executed between the parties.'} FpML::model::MasterConfirmation
{
  {meta::pure::profiles::doc.doc = 'The type of master confirmation executed between the parties.'} masterConfirmationType: FpML::model::MasterConfirmationType[0..1];
  {meta::pure::profiles::doc.doc = 'The date of the confirmation executed between the parties and intended to govern all relevant transactions between those parties.'} masterConfirmationDate: StrictDate[0..1];
  {meta::pure::profiles::doc.doc = 'The date that an annex to the master confirmation was executed between the parties.'} masterConfirmationAnnexDate: StrictDate[0..1];
  {meta::pure::profiles::doc.doc = 'The type of master confirmation annex executed between the parties.'} masterConfirmationAnnexType: FpML::model::MasterConfirmationAnnexType[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify terms for Recalculation of the Market Value of Posted Collateral when a dispute has been failed to be resolved by Resolution Time.'} model::external::cdm::RecalculationOfValue
{
  {meta::pure::profiles::doc.doc = 'The parties\' Recalculation of Value terms.'} partyElection: model::external::cdm::RecalculationOfValueElection[2];
}

Class {meta::pure::profiles::doc.doc = 'A type describing a single underlyer'} FpML::model::SingleUnderlyer
{
  {meta::pure::profiles::doc.doc = 'Define the underlying asset, either a listed security or other instrument.'} underlyingAsset: FpML::model::Asset[0..1];
  {meta::pure::profiles::doc.doc = 'The number of units (index or securities) that constitute the underlyer of the swap. In the case of a basket swap, this element is used to reference both the number of basket units, and the number of each asset components of the basket when these are expressed in absolute terms.'} openUnits: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the dividend payout ratio associated with an equity underlyer. A basket swap can have different payout ratios across the various underlying constituents. In certain cases the actual ratio is not known on trade inception, and only general conditions are then specified. Users should note that FpML makes a distinction between the derivative contract and the underlyer of the contract. It would be better if the agreed dividend payout on a derivative contract was modelled at the level of the derivative contract, an approach which may be adopted in the next major version of FpML.'} dividendPayout: FpML::model::DividendPayout[0..1];
  {meta::pure::profiles::doc.doc = 'The next upcoming coupon payment.'} couponPayment: FpML::model::PendingPayment[0..1];
  {meta::pure::profiles::doc.doc = 'The average amount of individual securities traded in a day or over a specified amount of time.'} averageDailyTradingVolume: FpML::model::AverageDailyTradingVolumeLimit[0..1];
  {meta::pure::profiles::doc.doc = 'A Depository Receipt is a negotiable certificate issued by a trust company or security depository. This element is used to represent whether a Depository Receipt is applicable or not to the underlyer.'} depositoryReceipt: Boolean[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Specifies the type of commodity.'} model::external::cdm::CommodityReferenceFramework
{
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'Identifies the base type of the commodity being traded, using the names defined in the ISDA 2005 Commodity Definitions SubAnnex A where possible, e.g. AgriculturalProducts, CommodityCompositeIndices, Energy, Freight, Metals, or PaperAndPlastic. Implementors can define their own scheme with additional values.'} commodityBase: String[1];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'Identifies the sub product type of the commodity being traded, using the names defined in the ISDA 2005 Commodity Definitions SubAnnex A where possible, e.g. under Energy, the possible values are Benzene, Coal, DieselFuel, Electricity, FuelOil, GasOil, Gasoline, HeatingOil, JetFuelKerosene, Methanol, Naphtha, NaturalGas, NaturalGasLiquids, Oil, and UltraLowSulpherDiesel. Implementors can define their own scheme with additional values.'} subCommodity: String[1];
  {meta::pure::profiles::doc.doc = 'Identifies the commodity more specifically. Where possible, this should follow the naming convention used in the 2005 ISDA Commodity Definitions SubAnnex A, including the subCommodity and additional qualifiers, but should be limited to 256 characters or less.'} commodityName: String[1];
  {meta::pure::profiles::doc.doc = 'Provides an enumerated value for a capacity unit, generally used in the context of defining quantities for commodities.'} capacityUnit: model::external::cdm::CapacityUnitEnum[0..1];
  {meta::pure::profiles::doc.doc = 'Provides an enumerated values for a weather unit, generally used in the context of defining quantities for commodities.'} weatherUnit: model::external::cdm::WeatherUnitEnum[0..1];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'Defines the currency in which the commodity is priced.'} currency: String[1];
}

Class {meta::pure::profiles::doc.doc = 'The set of elections which specify a Security Agremeent'} model::external::cdm::SecurityAgreementElections
{
  {meta::pure::profiles::doc.doc = 'The pledged account associated with the agreement'} pledgedAccount: model::external::cdm::Account[0..1];
  {meta::pure::profiles::doc.doc = 'Enforcement Events specific to the agreement'} enforcementEvent: model::external::cdm::EnforcementEvent[0..1];
  {meta::pure::profiles::doc.doc = 'Delivery In Lieu rights'} deliveryInLieuRight: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'Full Discharge condition'} fullDischarge: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'The election for the Valuation of Appropriate Collateral.'} appropriatedCollateralValuation: model::external::cdm::AppropriatedCollateralValuation[0..1];
  {meta::pure::profiles::doc.doc = 'The Process Agent that might be appointed by the parties to the agreement.'} processAgent: model::external::cdm::ProcessAgent[0..1];
  {meta::pure::profiles::doc.doc = 'The jurisdiction specific terms'} jurisdictionRelatedTerms: model::external::cdm::JurisdictionRelatedTerms[0..1];
  {meta::pure::profiles::doc.doc = 'Any additional amendments that might be specified by the parties to the agreement.'} additionalAmendments: String[0..1];
  {meta::pure::profiles::doc.doc = 'Any additional terms that might be specified applicable.'} additionalBespokeTerms: String[0..1];
  {meta::pure::profiles::doc.doc = 'The location and language of execution to determine duty to be paid.'} executionTerms: model::external::cdm::ExecutionTerms[0..1];
}

Class model::external::cdm::DerivInstrmAttrbts
{
  xpryDt: String[1];
  pricMltplr: String[1];
  undrlygInstrm: model::external::cdm::UndrlygInstrm[1];
  dlvryTp: String[1];
}

Class {meta::pure::profiles::doc.doc = 'Reference to a swap leg.'} FpML::model::SwapStreamReference extends FpML::model::Reference
{
  href: String[1];
}

Class {meta::pure::profiles::doc.doc = 'The attributes that are specific for consensus based pricing reporting.'} model::external::cdm::TradePricingReport
{
  {meta::pure::profiles::doc.doc = 'Represents the cosensus based pricing parameters on a trade basis.'} trade: model::external::cdm::Trade[1];
  {meta::pure::profiles::doc.doc = 'The regional exchange close time for the underlying contract,including time zone, at which the trades should be priced. This provides an indication for which regional snapshot should be used for pricing primarily for Global markets where there are multiple regional close times.'} pricingTime: model::external::cdm::TimeZone[1];
  {meta::pure::profiles::doc.doc = 'It specifies the interest payable on collateral delivered under a CSA covering the trade.'} discountingIndex: model::external::cdm::FloatingRateIndexEnum[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A single object that represents the different methods to specify a valuation date, as used for cash settlement. The Single / Multiple ValuationDate is used for the determination of recovery in a credit event, the RelativeDateOffset is used for cash-settled option, and FxFixingDate is used for cross-currency settlement.'} model::external::cdm::ValuationDate
[
  one_of_constraint: ((((((($this.singleValuationDate->isNotEmpty() && $this.multipleValuationDates->isEmpty()) && $this.valuationDate->isEmpty()) && $this.fxFixingDate->isEmpty()) && $this.fxFixingSchedule->isEmpty()) || (((($this.multipleValuationDates->isNotEmpty() && $this.singleValuationDate->isEmpty()) && $this.valuationDate->isEmpty()) && $this.fxFixingDate->isEmpty()) && $this.fxFixingSchedule->isEmpty())) || (((($this.valuationDate->isNotEmpty() && $this.singleValuationDate->isEmpty()) && $this.multipleValuationDates->isEmpty()) && $this.fxFixingDate->isEmpty()) && $this.fxFixingSchedule->isEmpty())) || (((($this.fxFixingDate->isNotEmpty() && $this.singleValuationDate->isEmpty()) && $this.multipleValuationDates->isEmpty()) && $this.valuationDate->isEmpty()) && $this.fxFixingSchedule->isEmpty())) || (((($this.fxFixingSchedule->isNotEmpty() && $this.singleValuationDate->isEmpty()) && $this.multipleValuationDates->isEmpty()) && $this.valuationDate->isEmpty()) && $this.fxFixingDate->isEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'Where single valuation date is specified as being applicable for cash settlement, this element specifies the number of business days after satisfaction of all conditions to settlement when such valuation date occurs. ISDA 2003 Term: Single Valuation Date.'} singleValuationDate: model::external::cdm::SingleValuationDate[0..1];
  {meta::pure::profiles::doc.doc = 'Where multiple valuation dates are specified as being applicable for cash settlement, this element specifies (a) the number of applicable valuation dates, and (b) the number of business days after satisfaction of all conditions to settlement when the first such valuation date occurs, and (c) the number of business days thereafter of each successive valuation date. ISDA 2003 Term: Multiple Valuation Dates.'} multipleValuationDates: model::external::cdm::MultipleValuationDates[0..1];
  {meta::pure::profiles::doc.doc = 'The date on which the cash settlement amount will be determined according to the cash settlement method if the parties have not otherwise been able to agree the cash settlement amount. This attribute was formerly part of \'OptionCashSettlement\', which is now being harmonised into a common \'CashSettlementTerms\' that includes a \'ValuationDate\'.'} valuationDate: model::external::cdm::RelativeDateOffset[0..1];
  {meta::pure::profiles::doc.doc = 'The date on which the currency rate will be determined for the purpose of specifying the amount in deliverable currency. This attribute was formerly part of \'NonDeliverableSettlement\', which is now being harmonised into a common \'CashSettlementTerms\' that includes a \'ValuationDate\'.'} fxFixingDate: model::external::cdm::FxFixingDate[0..1];
  {meta::pure::profiles::doc.doc = 'The date, when expressed as a schedule of date(s), on which the currency rate will be determined for the purpose of specifying the amount in deliverable currency. This attribute was formerly part of \'NonDeliverableSettlement\', which is now being harmonised into a common \'CashSettlementTerms\' that includes a \'ValuationDate\'.'} fxFixingSchedule: model::external::cdm::AdjustableDates[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A provision that allows each party to specify its Specified Entities for certain Events of Default and Termination Events'} model::external::cdm::SpecifiedEntities
{
  {meta::pure::profiles::doc.doc = 'The Event of Default or Termination event for which Specified Entities terms are being defined.'} specifiedEntityClause: model::external::cdm::SpecifiedEntityClauseEnum[1];
  {meta::pure::profiles::doc.doc = 'The party specific election of Specified Entities for the Event of Default or Termination Event specified.'} specifiedEntity: model::external::cdm::SpecifiedEntity[2];
}

Class {meta::pure::profiles::doc.doc = 'A type that models name, address and supplementary textual information for the purposes of identifying a party involved in the routing of a payment.'} FpML::model::RoutingExplicitDetails
[
  c1_length: $this.routingName->forAll(x: String[1]|$x->length() <= 255),
  c2_length: $this.routingAccountNumber->forAll(x: String[1]|$x->length() >= 1),
  c3_length: $this.routingReferenceText->forAll(x: String[1]|$x->length() >= 1)
]
{
  {meta::pure::profiles::doc.doc = 'A real name that is used to identify a party involved in the routing of a payment.'} routingName: String[0..1];
  {meta::pure::profiles::doc.doc = 'A physical postal address via which a payment can be routed.'} routingAddress: FpML::model::Address[0..1];
  {meta::pure::profiles::doc.doc = 'An account number via which a payment can be routed.'} routingAccountNumber: String[0..1];
  {meta::pure::profiles::doc.doc = 'A piece of free-format text used to assist the identification of a party involved in the routing of a payment.'} routingReferenceText: String[*];
}

Class {meta::pure::profiles::doc.doc = 'Represents a class to specify multiple credit debt types alongside a conditional \'any\' or \'all\' qualifier.'} model::external::cdm::MultipleDebtTypes
{
  {meta::pure::profiles::doc.doc = 'An enumerated element, to qualify whether All or Any credit notation applies.'} condition: model::external::cdm::QuantifierEnum[1];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'The type of debt, e.g. long term debt, deposit, ... FpML doesn\'t specific a scheme value, hence no enumeration is specified as part of the CDM. At least two debt types much be specified.'} debtType: String[2..*];
}

Class {meta::pure::profiles::doc.doc = 'Specification for General Terms and Elections of an Equity Master Confirmation that is applicable across multiple Equity confirmations and is referenced by each of these confirmations, an example of which being the 2018 ISDA CDM Equity Confirmation for Security Equity Swap.'} model::external::cdm::EquityMasterConfirmation extends model::external::cdm::MasterConfirmationBase
{
}

Class FpML::model::BasketId
[
  c1_length: $this.basketIdScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() >= 1,
  c3_length: $this.value->length() <= 255
]
{
  basketIdScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the role(s) that natural person(s) may have in relation to the contract.'} model::external::cdm::NaturalPersonRole
{
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'A reference to the natural person to whom the role refers to.'} personReference: model::external::cdm::NaturalPerson[1];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'FpML specifies a person role that is distinct from the party role.'} role: model::external::cdm::NaturalPersonRoleEnum[*];
}

Class {meta::pure::profiles::doc.doc = 'The bespoke definition of other agreement terms as specified by the parties to the agreement.'} model::external::cdm::OtherAgreements
{
  {meta::pure::profiles::doc.doc = 'The bespoke definition of Other CSA as specified by the parties to the agreement.'} otherCsa: model::external::cdm::OtherAgreementTerms[0..1];
  {meta::pure::profiles::doc.doc = 'The bespoke definition of whether Japanese Law CSA (VM) are specified by the parties to the agreement. ISDA 2016 Credit Support Annex for Initial Margin, paragraph 13, General Principles, (s)(ii): Japanese Law CSA (VM).'} japaneseLawCsa: model::external::cdm::OtherAgreementTerms[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the interest rate associated with initial margin collateral. ISDA 2016 Japanese Law Credit Support Annex for Initial Margin, paragraph 13, General Principles, (n): Distributions and Interest Payment (IM).'} model::external::cdm::EligibleCurrencyInterestRate
{
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'The eligible currency.'} currency: String[1];
  {meta::pure::profiles::doc.doc = 'The interest rate associated with the eligible currency.'} interestRate: Float[1];
  <<model::external::cdm::metadata.scheme>> actual365Currency: model::external::cdm::DayCountFractionEnum[1];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'Payment made following trigger occurrence.'} model::external::cdm::FeaturePayment
[
  FeaturePaymentChoice: ($this.levelPercentage->isNotEmpty() && $this.amount->isEmpty()) || ($this.amount->isNotEmpty() && $this.levelPercentage->isEmpty()),
  Amount: if($this.amount->isNotEmpty(), |$this.amount >= 0.0, |true)
]
{
  {meta::pure::profiles::doc.doc = 'This attribute doesn\'t exist as part of the FpML construct, which makes use of the PayerReceiver.model group.'} payerReceiver: model::external::cdm::PartyReferencePayerReceiver[1];
  {meta::pure::profiles::doc.doc = 'The trigger level percentage.'} levelPercentage: Float[0..1];
  {meta::pure::profiles::doc.doc = 'The monetary quantity in currency units.'} amount: Float[0..1];
  {meta::pure::profiles::doc.doc = 'The feature payment time.'} time: model::external::cdm::TimeTypeEnum[0..1];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'The currency in which an amount is denominated.'} currency: String[0..1];
  {meta::pure::profiles::doc.doc = 'The feature payment date.'} paymentDate: model::external::cdm::AdjustableOrRelativeDate[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type for defining the obligations of the counterparty subject to credit support requirements.'} model::external::cdm::Collateral
{
  {meta::pure::profiles::doc.doc = 'Independent Amount is an amount that usually less creditworthy counterparties are asked to provide. It can either be a fixed amount or a percentage of the Transaction\'s value. The Independent Amount can be: (i) transferred before any trading between the parties occurs (as a deposit at a third party\'s account or with the counterparty) or (ii) callable after trading has occurred (typically because a downgrade has occurred). In situation (i), the Independent Amount is not included in the calculation of Exposure, but in situation (ii), it is included in the calculation of Exposure. Thus, for situation (ii), the Independent Amount may be transferred along with any collateral call. Independent Amount is a defined term in the ISDA Credit Support Annex. (\'with respect to a party, the amount specified as such for that party in Paragraph 13; if no amount is specified, zero\').'} independentAmount: model::external::cdm::IndependentAmount[1];
}

Class FpML::model::FloatingAmountCalculation
{
  {meta::pure::profiles::doc.doc = 'The notional amount used in the calculation of fixed amounts where an amount is calculated on a formula basis, i.e. fixed amount = fixed rate payer calculation amount x fixed rate x fixed rate day count fraction. ISDA 2003 Term: Fixed Rate Payer Calculation Amount.'} calculationAmount: FpML::model::CalculationAmount[0..1];
  {meta::pure::profiles::doc.doc = 'The calculation period floating rate.'} floatingRate: FpML::model::FloatingRateCalculation[0..1];
  {meta::pure::profiles::doc.doc = 'The day count fraction. ISDA 2003 Term: Fixed Rate Day Count Fraction.'} dayCountFraction: FpML::model::DayCountFraction[0..1];
  initialFixingDate: StrictDate[0..1];
  finalFixingDate: FpML::model::AdjustableDate[0..1];
}

Class model::external::cdm::SwpOut
{
  sngl: model::external::cdm::Sngl[1];
}

Class {meta::pure::profiles::doc.doc = 'The agreement executed between the parties and intended to govern collateral arrangement for all OTC derivatives transactions between those parties.'} FpML::model::CreditSupportAgreement
{
  {meta::pure::profiles::doc.doc = 'The type of ISDA Credit Support Agreement'} type: FpML::model::CreditSupportAgreementType[0..1];
  {meta::pure::profiles::doc.doc = 'The date of the agreement executed between the parties and intended to govern collateral arrangements for all OTC derivatives transactions between those parties.'} date: StrictDate[0..1];
  {meta::pure::profiles::doc.doc = 'An identifier used to uniquely identify the CSA'} identifier: FpML::model::CreditSupportAgreementIdentifier[0..1];
}

Class model::external::cdm::CashPrice
{
  cashPriceType: model::external::cdm::CashPriceTypeEnum[1];
  {meta::pure::profiles::doc.doc = 'Forward start premium type'} premiumExpression: model::external::cdm::PremiumExpression[0..1];
  feeType: model::external::cdm::FeeTypeEnum[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type describing the weight of each of the underlyer constituent within the basket, either in absolute or relative terms.'} FpML::model::ConstituentWeight
{
  {meta::pure::profiles::doc.doc = 'The number of units (index or securities) that constitute the underlyer of the swap. In the case of a basket swap, this element is used to reference both the number of basket units, and the number of each asset components of the basket when these are expressed in absolute terms.'} openUnits: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'The relative weight of each respective basket constituent, expressed in percentage. A basket percentage of 5% would be represented as 0.05.'} basketPercentage: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'DEPRECATED. The relative weight of each respective basket constituent, expressed as a monetary amount.'} basketAmount: FpML::model::Money[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type defining a legal entity.'} FpML::model::LegalEntity
[
  c1_choice: $this.entityName->isNotEmpty() || ($this.entityName->isEmpty() && $this.entityId->isNotEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'The name of the reference entity. A free format string. FpML does not define usage rules for this element.'} entityName: FpML::model::EntityName[0..1];
  {meta::pure::profiles::doc.doc = 'A legal entity identifier (e.g. RED entity code)..'} entityId: FpML::model::EntityId[*];
  id: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type describing the typology of mortgage obligations.'} FpML::model::MortgageSector
[
  c1_length: $this.mortgageSectorScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  mortgageSectorScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'A contractual supplement (such as those published by ISDA) that will apply to the trade.'} FpML::model::ContractualSupplement
[
  c1_length: $this.contractualSupplementScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  contractualSupplementScheme: String[0..1];
  value: String[1];
}

Class FpML::model::PartyContactInformation
{
  {meta::pure::profiles::doc.doc = 'The party to which the terms apply.'} partyReference: FpML::model::PartyReference[0..1];
  contactInfo: FpML::model::ContactInformation[0..1];
  {meta::pure::profiles::doc.doc = 'Optional organization unit information used to describe the organization units (e.g. trading desks) involved in a transaction or business process .'} businessUnit: FpML::model::BusinessUnit[*];
  {meta::pure::profiles::doc.doc = 'Optional information about people involved in a transaction or busines process. (These are eomployees of the party).'} person: FpML::model::Person[*];
}

Class {meta::pure::profiles::doc.doc = 'A type that represents a telephonic contact.'} FpML::model::TelephoneNumber
[
  c1_length: $this.number->forAll(x: String[1]|$x->length() >= 1)
]
{
  {meta::pure::profiles::doc.doc = 'The type of telephone number (work, personal, mobile).'} type: FpML::model::TelephoneTypeEnum[0..1];
  {meta::pure::profiles::doc.doc = 'A telephonic contact.'} number: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type defining the Bermuda option exercise dates and the expiration date together with any rules govenerning the notional amount of the underlying which can be exercised on any given exercise date and any associated exercise fee.'} FpML::model::BermudaExercise extends FpML::model::Exercise
{
  {meta::pure::profiles::doc.doc = 'The dates the define the Bermuda option exercise dates and the expiration date. The last specified date is assumed to be the expiration date. The dates can either be specified as a series of explicit dates and associated adjustments or as a series of dates defined relative to another schedule of dates, for example, the calculation period start dates. Where a relative series of dates are defined the first and last possible exercise dates can be separately specified.'} bermudaExerciseDates: FpML::model::AdjustableOrRelativeDates[0..1];
  {meta::pure::profiles::doc.doc = 'The date on the underlying set by the exercise of an option. What this date is depends on the option (e.g. in a swaption it is the swap effective date, in an extendible/cancelable provision it is the swap termination date).'} relevantUnderlyingDate: FpML::model::AdjustableOrRelativeDates[0..1];
  {meta::pure::profiles::doc.doc = 'The earliest time at which notice of exercise can be given by the buyer to the seller (or seller\'s agent) i) on the expriation date, in the case of a European style option, (ii) on each bermuda option exercise date and the expiration date, in the case of a Bermuda style option the commencement date to, and including, the expiration date , in the case of an American option.'} earliestExerciseTime: FpML::model::BusinessCenterTime[0..1];
  {meta::pure::profiles::doc.doc = 'For a Bermuda or American style option, the latest time on an exercise business day (excluding the expiration date) within the exercise period that notice can be given by the buyer to the seller or seller\'s agent. Notice of exercise given after this time will be deemed to have been given on the next exercise business day.'} latestExerciseTime: FpML::model::BusinessCenterTime[0..1];
  {meta::pure::profiles::doc.doc = 'The latest time for exercise on expirationDate.'} expirationTime: FpML::model::BusinessCenterTime[0..1];
  {meta::pure::profiles::doc.doc = 'As defined in the 2000 ISDA Definitions, Section 12.4. Multiple Exercise, the buyer of the option has the right to exercise all or less than all the unexercised notional amount of the underlying swap on one or more days in the exercise period, but on any such day may not exercise less than the minimum notional amount or more that the maximum notional amount, and if an integral multiple amount is specified, the notional amount exercised must be equal to, or be an intergral multiple of, the integral multiple amount.'} multipleExercise: FpML::model::MultipleExercise[0..1];
  {meta::pure::profiles::doc.doc = 'The fees associated with an exercise date. The fees are conditional on the exercise occuring. The fees can be specified as actual currency amounts or as percentages of the notional amount being exercised.'} exerciseFeeSchedule: FpML::model::ExerciseFeeSchedule[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A reference to the number of units.'} FpML::model::NumberOfUnitsReference extends FpML::model::Reference
{
  href: String[1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the events that will give rise to the payment additional fixed payments.'} model::external::cdm::AdditionalFixedPayments
{
  {meta::pure::profiles::doc.doc = 'An additional Fixed Payment Event. Corresponds to the payment by or on behalf of the Issuer of an actual interest amount in respect to the reference obligation that is greater than the expected interest amount. ISDA 2003 Term: Interest Shortfall Reimbursement.'} interestShortfallReimbursement: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'An additional Fixed Payment Event. Corresponds to the payment by or on behalf of the Issuer of an actual principal amount in respect to the reference obligation that is greater than the expected principal amount. ISDA 2003 Term: Principal Shortfall Reimbursement.'} principalShortfallReimbursement: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'An Additional Fixed Payment. Corresponds to the payment by or on behalf of the issuer of an amount in respect to the reference obligation in reduction of the prior writedowns. ISDA 2003 Term: Writedown Reimbursement.'} writedownReimbursement: Boolean[0..1];
}

Class FpML::model::ReferenceObligation
[
  c1_choice: ($this.bond->isNotEmpty() && ($this.convertibleBond->isEmpty() && ($this.mortgage->isEmpty() && $this.loan->isEmpty()))) || (($this.bond->isEmpty() && ($this.convertibleBond->isNotEmpty() && ($this.mortgage->isEmpty() && $this.loan->isEmpty()))) || (($this.bond->isEmpty() && ($this.convertibleBond->isEmpty() && ($this.mortgage->isNotEmpty() && $this.loan->isEmpty()))) || ($this.bond->isEmpty() && ($this.convertibleBond->isEmpty() && ($this.mortgage->isEmpty() && $this.loan->isNotEmpty()))))),
  c2_choice: ($this.primaryObligor->isNotEmpty() && $this.primaryObligorReference->isEmpty()) || ($this.primaryObligor->isEmpty() && $this.primaryObligorReference->isNotEmpty()),
  c3_choice: ($this.guarantor->isNotEmpty() && $this.guarantorReference->isEmpty()) || ($this.guarantor->isEmpty() && $this.guarantorReference->isNotEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'Identifies the underlying asset when it is a series or a class of bonds.'} bond: FpML::model::Bond[0..1];
  {meta::pure::profiles::doc.doc = 'Identifies the underlying asset when it is a convertible bond.'} convertibleBond: FpML::model::ConvertibleBond[0..1];
  {meta::pure::profiles::doc.doc = 'Identifies a mortgage backed security.'} mortgage: FpML::model::Mortgage[0..1];
  {meta::pure::profiles::doc.doc = 'Identifies a simple underlying asset that is a loan.'} loan: FpML::model::Loan[0..1];
  {meta::pure::profiles::doc.doc = 'The entity primarily responsible for repaying debt to a creditor as a result of borrowing or issuing bonds. ISDA 2003 Term: Primary Obligor'} primaryObligor: FpML::model::LegalEntity[0..1];
  {meta::pure::profiles::doc.doc = 'A pointer style reference to a reference entity defined elsewhere in the document. Used when the reference entity is the primary obligor.'} primaryObligorReference: FpML::model::LegalEntityReference[0..1];
  {meta::pure::profiles::doc.doc = 'The party that guarantees by way of a contractual arrangement to pay the debts of an obligor if the obligor is unable to make the required payments itself. ISDA 2003 Term: Guarantor'} guarantor: FpML::model::LegalEntity[0..1];
  {meta::pure::profiles::doc.doc = 'A pointer style reference to a reference entity defined elsewhere in the document. Used when the reference entity is the guarantor.'} guarantorReference: FpML::model::LegalEntityReference[0..1];
  {meta::pure::profiles::doc.doc = 'Indicates if the reference obligation is a Standard Reference Obligation. ISDA 2014 Term: Standard Reference Obligation.'} standardReferenceObligation: Boolean[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class defining how the initial or final stub calculation period amounts is calculated. For example, the rate to be applied to the initial or final stub calculation period may be the linear interpolation of two different tenors for the floating rate index specified in the calculation period amount component, e.g. A two month stub period may used the linear interpolation of a one month and three month floating rate. The different rate tenors would be specified in this component. Note that a maximum of two rate tenors can be specified. If a stub period uses a single index tenor and this is the same as that specified in the calculation period amount component then the initial stub or final stub component, as the case may be, must not be included.'} model::external::cdm::StubPeriod
{
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'A pointer style reference to the associated calculation period dates component defined elsewhere in the document.'} calculationPeriodDatesReference: model::external::cdm::CalculationPeriodDates[1];
  {meta::pure::profiles::doc.doc = 'Specifies how the initial stub amount is calculated. A single floating rate tenor different to that used for the regular part of the calculation periods schedule may be specified, or two floating tenors may be specified. If two floating rate tenors are specified then Linear Interpolation (in accordance with the 2000 ISDA Definitions, Section 8.3. Interpolation) is assumed to apply. Alternatively, an actual known stub rate or stub amount may be specified.'} initialStub: model::external::cdm::StubValue[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies how the final stub amount is calculated. A single floating rate tenor different to that used for the regular part of the calculation periods schedule may be specified, or two floating tenors may be specified. If two floating rate tenors are specified then Linear Interpolation (in accordance with the 2000 ISDA Definitions, Section 8.3. Interpolation) is assumed to apply. Alternatively, an actual known stub rate or stub amount may be specified.'} finalStub: model::external::cdm::StubValue[0..1];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'A class giving the choice between defining a date as an explicit date together with applicable adjustments or as relative to some other (anchor) date.'} model::external::cdm::AdjustableOrRelativeDate
{
  {meta::pure::profiles::doc.doc = 'A date that shall be subject to adjustment if it would otherwise fall on a day that is not a business day in the specified business centers, together with the convention for adjusting the date.'} adjustableDate: model::external::cdm::AdjustableDate[0..1];
  {meta::pure::profiles::doc.doc = 'A date specified as some offset to another date (the anchor date).'} relativeDate: model::external::cdm::AdjustedRelativeDateOffset[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Specifies details for a trade to be decreased as part of a reallocation event.'} model::external::cdm::DecreasedTrade
{
  {meta::pure::profiles::doc.doc = 'Specifies the trade to be decreased.'} tradeState: model::external::cdm::TradeState[1];
  {meta::pure::profiles::doc.doc = 'Specifies the quantity(ies) to be decreased on the trade.'} quantity: model::external::cdm::Quantity[1..*];
}

Class FpML::model::SimpleIrSwap extends FpML::model::UnderlyingAsset
{
  {meta::pure::profiles::doc.doc = 'Specifies the term of the simple swap, e.g. 5Y.'} term: FpML::model::Period[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the frequency at which the swap pays, e.g. 6M.'} paymentFrequency: FpML::model::Period[0..1];
  {meta::pure::profiles::doc.doc = 'The day count basis for the swap.'} dayCountFraction: FpML::model::DayCountFraction[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Type for reporting the detailed results of calculating a cash flow for a calculation period.  This is enhanced relative to the FpML-based cashflows structure to allow more information to be returned about daily compounded rates.'} model::external::cdm::FloatingAmountCalculationDetails
{
  {meta::pure::profiles::doc.doc = 'The calculation period for which the floating calculation was performed.'} calculationPeriod: model::external::cdm::CalculationPeriodBase[1];
  {meta::pure::profiles::doc.doc = 'The notional in effect during the calculation period.'} calculationPeriodNotionalAmount: model::external::cdm::Money[1];
  {meta::pure::profiles::doc.doc = 'The details of the floating rate setting.  (If it is a calculated rate, details of that calculation will be inside that.'} floatingRate: model::external::cdm::FloatingRateSettingDetails[0..1];
  {meta::pure::profiles::doc.doc = 'Details fo the floating rate treatment after the rate is observed or calculated.  This will include details of things like multipliers, spreads, caps and floors, and the raw and treated rates.'} processingDetails: model::external::cdm::FloatingRateProcessingDetails[0..1];
  {meta::pure::profiles::doc.doc = 'The rate that was actually applied, after all calculations and treatments.'} appliedRate: Float[1];
  {meta::pure::profiles::doc.doc = 'The fraction of a year that this calculation represents, according to the day count fraction method.'} yearFraction: Float[1];
  {meta::pure::profiles::doc.doc = 'The amount of the cash flow that was computed, including any spreads and other processing.'} calculatedAmount: Float[1];
  {meta::pure::profiles::doc.doc = 'The amount of the cash flow excluding any spread, for subsequent processing.'} spreadExclusiveCalculatedAMount: Float[1];
}

Class {meta::pure::profiles::doc.doc = 'Represents a forward settling payout. The \'Underlier\' attribute captures the underlying payout, which is settled according to the \'SettlementTerms\' attribute. Both FX Spot and FX Forward should use this component.'} model::external::cdm::ForwardPayout
{
  {meta::pure::profiles::doc.doc = 'Underlying product that the forward is written on, which can be of any type: FX, a contractual product, a security, etc.'} underlier: model::external::cdm::Product[1];
  {meta::pure::profiles::doc.doc = 'Settlement terms for the underlier that include the settlement date, settlement method etc.'} settlementTerms: model::external::cdm::SettlementTerms[1];
}

Class {meta::pure::profiles::doc.doc = 'A complex type to specify the notional amount.'} FpML::model::NotionalAmount extends FpML::model::NonNegativeMoney
{
}

Class {meta::pure::profiles::doc.doc = 'Specifies the margin call action details, including collateral to be moved and its direction.'} model::external::cdm::MarginCallResponseAction
{
  {meta::pure::profiles::doc.doc = 'Specifies the collateral to be moved and its direction.'} collateralPositionComponent: model::external::cdm::CollateralPosition[1..*];
  {meta::pure::profiles::doc.doc = 'Specifies the margin call action details, specified as either Delivery or Return.'} marginCallAction: model::external::cdm::MarginCallActionEnum[1];
}

Class {meta::pure::profiles::doc.doc = 'A class for specifying a calculation period schedule.'} model::external::cdm::PeriodicDates
{
  {meta::pure::profiles::doc.doc = 'The start date of the calculation period. FpML specifies that for interest rate swaps this date must only be specified if it is not equal to the effective date. It is always specified in the case of equity swaps and credit default swaps with periodic payments. This date may be subject to adjustment in accordance with a business day convention.'} startDate: model::external::cdm::AdjustableOrRelativeDate[0..1];
  {meta::pure::profiles::doc.doc = 'The end date of the calculation period. FpML specifies that for interest rate swaps this date must only be specified if it is not equal to the termination date. It is always specified in the case of equity swaps with periodic payments. This date may be subject to adjustment in accordance with a business day convention.'} endDate: model::external::cdm::AdjustableOrRelativeDate[0..1];
  {meta::pure::profiles::doc.doc = 'The frequency at which calculation period end dates occur with the regular part of the calculation period schedule and their roll date convention.'} periodFrequency: model::external::cdm::CalculationPeriodFrequency[0..1];
  {meta::pure::profiles::doc.doc = 'The specification of the business day convention and financial business centers used for adjusting any calculation period date if it would otherwise fall on a day that is not a business day in the specified business center.'} periodDatesAdjustments: model::external::cdm::BusinessDayAdjustments[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type defining a rate index.'} FpML::model::ForecastRateIndex
{
  {meta::pure::profiles::doc.doc = 'The ISDA Floating Rate Option, i.e. the floating rate index.'} floatingRateIndex: FpML::model::FloatingRateIndex[0..1];
  {meta::pure::profiles::doc.doc = 'The ISDA Designated Maturity, i.e. the tenor of the floating rate.'} indexTenor: FpML::model::Period[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the currency in which the dividends will be denominated, i.e. either in the dividend currency or in a currency specified as part of the contract.'} model::external::cdm::DividendCurrency
[
  one_of_constraint: ((($this.currency->isNotEmpty() && $this.determinationMethod->isEmpty()) && $this.currencyReference->isEmpty()) || (($this.determinationMethod->isNotEmpty() && $this.currency->isEmpty()) && $this.currencyReference->isEmpty())) || (($this.currencyReference->isNotEmpty() && $this.currency->isEmpty()) && $this.determinationMethod->isEmpty())
]
{
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'The currency in which the dividend is denominated. The list of valid currencies is not presently positioned as an enumeration as part of the CDM because that scope is limited to the values specified by ISDA and FpML. As a result, implementers have to make reference to the relevant standard, such as the ISO 4217 standard for currency codes.'} currency: String[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the method according to which the dividend is determined, e.g. the dividend currency.'} determinationMethod: model::external::cdm::DeterminationMethodEnum[0..1];
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'Reference to a currency specified elsewhere in the document'} currencyReference: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'This class corresponds to the FpML Premium.model group for representing the option premium when expressed in a way other than an amount.'} model::external::cdm::PremiumExpression
{
  {meta::pure::profiles::doc.doc = 'Forward start premium type'} premiumType: model::external::cdm::PremiumTypeEnum[0..1];
  {meta::pure::profiles::doc.doc = 'The amount of premium to be paid expressed as a function of the number of options.'} pricePerOption: model::external::cdm::Money[0..1];
  {meta::pure::profiles::doc.doc = 'The amount of premium to be paid expressed as a percentage of the notional value of the transaction. A percentage of 5% would be expressed as 0.05.'} percentageOfNotional: Float[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class defining an offset used in calculating a new date relative to a reference date, e.g. calendar days, business days, commodity Business days, etc.'} model::external::cdm::Offset extends model::external::cdm::Period
{
  {meta::pure::profiles::doc.doc = 'In the case of an offset specified as a number of days, this element defines whether consideration is given as to whether a day is a good business day or not. If a day type of business days is specified then non-business days are ignored when calculating the offset. The financial business centers to use for determination of business days are implied by the context in which this element is used. This element must only be included when the offset is specified as a number of days. If the offset is zero days then the dayType element should not be included.'} dayType: model::external::cdm::DayTypeEnum[0..1];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'A data defining:  an early termination provision for a swap. This early termination is at fair value, i.e. on termination the fair value of the product must be settled between the parties.'} model::external::cdm::EarlyTerminationProvision
[
  MandatoryEarlyTermination: ($this.mandatoryEarlyTermination->isNotEmpty() || $this.optionalEarlyTermination->isNotEmpty()) || ($this.mandatoryEarlyTermination->isNotEmpty() && $this.optionalEarlyTermination->isNotEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'A mandatory early termination provision to terminate the swap at fair value.'} mandatoryEarlyTermination: model::external::cdm::MandatoryEarlyTermination[0..1];
  {meta::pure::profiles::doc.doc = 'Period after trade date of the mandatory early termination date.'} mandatoryEarlyTerminationDateTenor: model::external::cdm::Period[0..1];
  {meta::pure::profiles::doc.doc = 'An option for either or both parties to terminate the swap at fair value.'} optionalEarlyTermination: model::external::cdm::OptionalEarlyTermination[0..1];
  {meta::pure::profiles::doc.doc = 'Definition of the first early termination date and the frequency of the termination dates subsequent to that. American exercise is defined by having a frequency of one day.'} optionalEarlyTerminationParameters: model::external::cdm::ExercisePeriod[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Reference to a pricing structure or any derived components (i.e. yield curve).'} FpML::model::PricingStructureReference extends FpML::model::Reference
{
  href: String[1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the party elective amounts which can be used for the purpose of specifying elections such as the ISDA CSA Threshold and Minimum Transfer Amount.'} model::external::cdm::ElectiveAmountElection
[
  NonZeroAmount: if($this.electiveAmount->isEmpty(), |$this.amount->isNotEmpty() || $this.customElection->isNotEmpty(), |true)
]
{
  {meta::pure::profiles::doc.doc = 'The elective party.'} party: model::external::cdm::CounterpartyRoleEnum[1];
  {meta::pure::profiles::doc.doc = 'Specifies an enumerated election to express the elective amount.'} electiveAmount: model::external::cdm::ElectiveAmountEnum[0..1];
  {meta::pure::profiles::doc.doc = 'The elective amount when expressed as a currency amount. The associated PartyElectiveAmount_amount data rule enforces that the currency amount is actually greater than 0.'} amount: model::external::cdm::Money[0..1];
  {meta::pure::profiles::doc.doc = 'The elective amount when expressed as a custom election by the party.'} customElection: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Instruction to a function that will be used to perform a business event'} model::external::cdm::Instruction
{
  {meta::pure::profiles::doc.doc = 'Specifies the function that will be called.'} instructionFunction: String[0..1];
  {meta::pure::profiles::doc.doc = 'Instruction to allocate'} allocation: model::external::cdm::AllocationInstruction[0..1];
  {meta::pure::profiles::doc.doc = 'Instruction to clear'} clearing: model::external::cdm::ClearingInstruction[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies instructions for transition from execution to a fully formed contract, consisting of an execution and an optional legal agreement.'} contractFormation: model::external::cdm::ContractFormationInstruction[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies instructions for execution of a transaction, consisting of a product, price, quantity, parties, trade identifier, and a trade date.'} execution: model::external::cdm::ExecutionInstruction[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the information required to communicate the choices made by the exercising party, in a financial product endowing the party with at least one option.'} exercise: model::external::cdm::ExerciseInstruction[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies inputs needed to process a Reset business event.'} reset: model::external::cdm::ResetInstruction[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies inputs needed to process a Transfer business event.'} transfer: model::external::cdm::TransferInstruction[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the inputs needed to process a trade quantity change, containing the quantity to increase/decrease/replace the trade by and the price at which this quantity change is agreed. An optional lot identifier can be specified in the case when a trade may contain multiple trade lots, to identify the lot to be changed.'} quantityChange: model::external::cdm::QuantityChangeInstruction[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies inputs needed to process a Index Transition business event.'} indexTransition: model::external::cdm::IndexTransitionInstruction[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies inputs needed to process a Termination business event.'} termination: model::external::cdm::TerminationInstruction[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the primitive instructions that will be used to call primitive event functions.'} primitiveInstruction: model::external::cdm::PrimitiveInstruction[1..*];
  {meta::pure::profiles::doc.doc = 'Specifies the trade state that will be acted on by the primitive event functions.'} before: model::external::cdm::TradeState[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type that represents information about a person connected with a trade or business process.'} FpML::model::Person
[
  c1_length: $this.honorific->forAll(x: String[1]|$x->length() >= 0),
  c2_length: $this.firstName->forAll(x: String[1]|$x->length() >= 0),
  c3_length: $this.middleName->forAll(x: String[1]|$x->length() >= 0),
  c4_length: $this.initial->forAll(x: String[1]|$x->length() == 1),
  c5_length: $this.surname->forAll(x: String[1]|$x->length() >= 0),
  c6_length: $this.suffix->forAll(x: String[1]|$x->length() >= 0),
  c7_choice: ($this.middleName->isNotEmpty() && $this.initial->isEmpty()) || ($this.middleName->isEmpty() && $this.initial->isNotEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'An honorific title, such as Mr., Ms., Dr. etc.'} honorific: String[0..1];
  {meta::pure::profiles::doc.doc = 'Given name, such as John or Mary.'} firstName: String[0..1];
  middleName: String[*];
  initial: String[*];
  {meta::pure::profiles::doc.doc = 'Family name, such as Smith or Jones.'} surname: String[0..1];
  {meta::pure::profiles::doc.doc = 'Name suffix, such as Jr., III, etc.'} suffix: String[0..1];
  {meta::pure::profiles::doc.doc = 'An identifier assigned by a system for uniquely identifying the individual'} personId: FpML::model::PersonId[*];
  {meta::pure::profiles::doc.doc = 'The unit for which the indvidual works.'} businessUnitReference: FpML::model::BusinessUnitReference[0..1];
  {meta::pure::profiles::doc.doc = 'Information on how to contact the individual using various means.'} contactInfo: FpML::model::ContactInformation[0..1];
  {meta::pure::profiles::doc.doc = 'The birth date of the person, e.g. 1970-01-01'} dateOfBirth: StrictDate[0..1];
  {meta::pure::profiles::doc.doc = 'The ISO 3166 standard code for the country where the individual works.'} country: FpML::model::CountryCode[0..1];
  id: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A data defining:  the parameters used to get a price quote to replace the settlement rate option that is disrupted.'} model::external::cdm::PriceSourceDisruption
{
  {meta::pure::profiles::doc.doc = 'The method, prioritised by the order it is listed in this element, to get a replacement rate for the disrupted settlement rate option.'} fallbackReferencePrice: model::external::cdm::FallbackReferencePrice[1];
}

Class FpML::model::OnBehalfOf
{
  {meta::pure::profiles::doc.doc = 'The party for which the message reciever should work.'} partyReference: FpML::model::PartyReference[0..1];
  {meta::pure::profiles::doc.doc = 'Identifies the account(s) related to the party when they cannot be determined from the party alone, for example in a inter-book trade.'} accountReference: FpML::model::AccountReference[*];
}

Class {meta::pure::profiles::doc.doc = 'A class for a two-parts identifier, such as a USI.'} model::external::cdm::IssuerTradeId
{
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'The party that assigns the trade identifier.'} issuer: String[1];
  <<model::external::cdm::metadata.scheme, model::external::cdm::metadata.id>> {meta::pure::profiles::doc.doc = 'The identifier value. The CDM uses a neutral identifier attribute name rather than the FpML trade qualifier because of the focus that includes the pre-execution lifecycle, at which point a trade doesn\'t exist yet.'} identifier: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Identifies a specific commodity by referencing a product identifier or by a product definition.'} model::external::cdm::Commodity extends model::external::cdm::ProductBase
{
  {meta::pure::profiles::doc.doc = 'Specifies the commodity underlier in the event that no ISDA Commodity Reference Benchmark exists.'} commodityProductDefinition: model::external::cdm::CommodityProductDefinition[0..1];
  {meta::pure::profiles::doc.doc = 'Describes the required quote type of the underlying price that will be observed. Example values include \'Bid, \'Ask\', \'Settlement\' (for a futures contract) and \'WeightedAverage\' (for some published prices and indices).'} priceQuoteType: model::external::cdm::QuotationSideEnum[1];
  {meta::pure::profiles::doc.doc = 'Specifies the parameters for identifying the relevant contract date when the commodity reference price is a futures contract.'} deliveryDateReference: model::external::cdm::DeliveryDateParameters[0..1];
}

Class model::external::cdm::MultipleValuationDates extends model::external::cdm::SingleValuationDate
[
  BusinessDaysThereafter: if($this.businessDaysThereafter->isNotEmpty(), |$this.businessDaysThereafter >= 0, |true),
  NumberValuationDates: if($this.numberValuationDates->isNotEmpty(), |$this.numberValuationDates >= 0, |true)
]
{
  {meta::pure::profiles::doc.doc = 'The number of business days between successive valuation dates when multiple valuation dates are applicable for cash settlement. ISDA 2003 Term: Business Days thereafter.'} businessDaysThereafter: Integer[0..1];
  {meta::pure::profiles::doc.doc = 'Where multiple valuation dates are specified as being applicable for cash settlement, this element specifies (a) the number of applicable valuation dates, and (b) the number of business days after satisfaction of all conditions to settlement when the first such valuation date occurs, and (c) the number of business days thereafter of each successive valuation date. ISDA 2003 Term: Multiple Valuation Dates.'} numberValuationDates: Integer[0..1];
}

Class {meta::pure::profiles::doc.doc = 'The definitions, such as those published by ISDA, that will define the terms of the trade.'} FpML::model::ContractualDefinitions
[
  c1_length: $this.contractualDefinitionsScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  contractualDefinitionsScheme: String[0..1];
  value: String[1];
}

Class FpML::model::SimpleFra extends FpML::model::UnderlyingAsset
{
  {meta::pure::profiles::doc.doc = 'Specifies the start term of the simple fra, e.g. 3M.'} startTerm: FpML::model::Period[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the end term of the simple fra, e.g. 9M.'} endTerm: FpML::model::Period[0..1];
  {meta::pure::profiles::doc.doc = 'The day count basis for the FRA.'} dayCountFraction: FpML::model::DayCountFraction[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type defining the exercise period for a European style option together with any rules governing the notional amount of the underlying which can be exercised on any given exercise date and any associated exercise fees.'} FpML::model::EuropeanExercise extends FpML::model::Exercise
{
  {meta::pure::profiles::doc.doc = 'The last day within an exercise period for an American style option. For a European style option it is the only day within the exercise period.'} expirationDate: FpML::model::AdjustableOrRelativeDate[0..1];
  {meta::pure::profiles::doc.doc = 'The date on the underlying set by the exercise of an option. What this date is depends on the option (e.g. in a swaption it is the swap effective date, in an extendible/cancelable provision it is the swap termination date).'} relevantUnderlyingDate: FpML::model::AdjustableOrRelativeDates[0..1];
  {meta::pure::profiles::doc.doc = 'The earliest time at which notice of exercise can be given by the buyer to the seller (or seller\'s agent) i) on the expriation date, in the case of a European style option, (ii) on each bermuda option exercise date and the expiration date, in the case of a Bermuda style option the commencement date to, and including, the expiration date , in the case of an American option.'} earliestExerciseTime: FpML::model::BusinessCenterTime[0..1];
  {meta::pure::profiles::doc.doc = 'The latest time for exercise on expirationDate.'} expirationTime: FpML::model::BusinessCenterTime[0..1];
  {meta::pure::profiles::doc.doc = 'As defined in the 2000 ISDA Definitions, Section 12.3. Partial Exercise, the buyer of the option has the right to exercise all or less than all the notional amount of the underlying swap on the expiration date, but may not exercise less than the minimum notional amount, and if an integral multiple amount is specified, the notional amount exercised must be equal to, or be an integral multiple of, the integral multiple amount.'} partialExercise: FpML::model::PartialExercise[0..1];
  {meta::pure::profiles::doc.doc = 'A fee to be paid on exercise. This could be represented as an amount or a rate and notional reference on which to apply the rate.'} exerciseFee: FpML::model::ExerciseFee[0..1];
}

Class {meta::pure::profiles::doc.doc = 'The time alongside with the timezone location information. This class makes use of the FpML TimezoneLocation construct.'} model::external::cdm::TimeZone
{
  {meta::pure::profiles::doc.doc = 'The observation time.'} time: DateTime[1];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'FpML specifies the timezoneLocationScheme by reference to the Time Zone Database (a.k.a. tz database) maintained by IANA, the Internet Assigned Numbers Authority.'} location: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A data defining:  the cashflow representation of a swap trade.'} model::external::cdm::CashflowRepresentation
{
  {meta::pure::profiles::doc.doc = 'A true/false flag to indicate whether the cashflows match the parametric definition of the stream, i.e. whether the cashflows could be regenerated from the parameters without loss of information.'} cashflowsMatchParameters: Boolean[1];
  {meta::pure::profiles::doc.doc = 'The initial, intermediate and final principal exchange amounts. Typically required on cross currency interest rate swaps where actual exchanges of principal occur. A list of principal exchange elements may be ordered in the document by ascending adjusted principal exchange date. An FpML document containing an unordered principal exchange list is still regarded as a conformant document.'} principalExchange: model::external::cdm::PrincipalExchange[*];
  {meta::pure::profiles::doc.doc = 'The adjusted payment date and associated calculation period parameters required to calculate the actual or projected payment amount. A list of payment calculation period elements may be ordered in the document by ascending adjusted payment date. An FpML document containing an unordered list of payment calculation periods is still regarded as a conformant document.'} paymentCalculationPeriod: model::external::cdm::PaymentCalculationPeriod[*];
}

Class {meta::pure::profiles::doc.doc = 'A class specifying the Independent Amount as the combination of a payer/receiver, a payment amount, a payment date and an associated payment calculation rule.'} model::external::cdm::IndependentAmount extends model::external::cdm::PartyReferencePayerReceiver
{
  {meta::pure::profiles::doc.doc = 'An attribute that specifies a payment as the combination of a payment amount, a payment date and an associated payment calculation rule.'} paymentDetail: model::external::cdm::PaymentDetail[1..*];
}

Class {meta::pure::profiles::doc.doc = 'An exchange traded bond.'} FpML::model::Bond extends FpML::model::UnderlyingAsset
[
  c1_length: $this.issuerName->forAll(x: String[1]|$x->length() >= 1)
]
{
  issuerName: String[0..1];
  issuerPartyReference: FpML::model::PartyReference[0..1];
  {meta::pure::profiles::doc.doc = 'The repayment precedence of a debt instrument.'} seniority: FpML::model::CreditSeniority[0..1];
  {meta::pure::profiles::doc.doc = 'Credit quality type (e.g. \'INVG\' - Investment grade; \'NIVG\' - Non-investment grade; \'NOTR\' - Non-rated). Classifies the risk of the security. Note: \'NOAP\' - Not applicable value is indicated by the absence of the \'creditQuality\' element.'} creditQuality: FpML::model::CreditQuality[*];
  {meta::pure::profiles::doc.doc = 'The credit rating.'} creditRating: FpML::model::CreditRating[*];
  {meta::pure::profiles::doc.doc = 'Specifies if the bond has a variable coupon, step-up/down coupon or a zero-coupon.'} couponType: FpML::model::CouponType[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the coupon rate (expressed in percentage) of a fixed income security or convertible bond.'} couponRate: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'The date when the principal amount of a security becomes due and payable.'} maturity: StrictDate[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the nominal amount of a fixed income security or convertible bond.'} parValue: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the total amount of the issue. Corresponds to the par value multiplied by the number of issued security.'} faceAmount: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the frequency at which the bond pays, e.g. 6M.'} paymentFrequency: FpML::model::Frequency[0..1];
  {meta::pure::profiles::doc.doc = 'The day count basis for the bond.'} dayCountFraction: FpML::model::DayCountFraction[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to represent the applicable terms to qualify an option exercise: the option style (e.g. American style option), the exercise procedure (e.g. manual exercise) and the settlement terms (e.g. physical vs. cash).'} model::external::cdm::OptionExercise
{
  {meta::pure::profiles::doc.doc = 'The option exercise can be of American style, Bermuda style or European style. The FpML implementation makes use of a substitution group.'} optionStyle: model::external::cdm::OptionStyle[1];
  {meta::pure::profiles::doc.doc = 'Specifies the strike of the option on credit default swap.'} strike: model::external::cdm::OptionStrike[0..1];
  {meta::pure::profiles::doc.doc = 'The set of parameters defining the procedure associated with the exercise, e.g. manual exercise.'} exerciseProcedure: model::external::cdm::ExerciseProcedure[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class for defining the master confirmation agreement executed between the parties.'} model::external::cdm::MasterConfirmation
{
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'The type of master confirmation executed between the parties.'} masterConfirmationType: model::external::cdm::MasterConfirmationTypeEnum[1];
  {meta::pure::profiles::doc.doc = 'The date of the confirmation executed between the parties and intended to govern all relevant transactions between those parties.'} masterConfirmationDate: Date[1];
  {meta::pure::profiles::doc.doc = 'The date that an annex to the master confirmation was executed between the parties.'} masterConfirmationAnnexDate: Date[0..1];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'The type of master confirmation annex executed between the parties.'} masterConfirmationAnnexType: model::external::cdm::MasterConfirmationAnnexTypeEnum[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Specifies the instructions for creation of a billing summary.'} model::external::cdm::BillingSummaryInstruction
{
  {meta::pure::profiles::doc.doc = 'The account level for the billing summary.'} summaryAmountType: model::external::cdm::RecordAmountTypeEnum[1];
}

Class FpML::model::RelatedPerson
{
  {meta::pure::profiles::doc.doc = 'The individual person that is related to this.'} personReference: FpML::model::PersonReference[0..1];
  {meta::pure::profiles::doc.doc = 'The category of the relationship. The related individual performs the role specified in this field for the base party. For example, if the role is \'Trader\', the related person acts acts or acted as the base party\'s trader.'} role: FpML::model::PersonRole[0..1];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'Defines specific attributes that relate to contractual details of trades.'} model::external::cdm::ContractDetails
{
  {meta::pure::profiles::doc.doc = 'Represents the legal document(s) that governs a trade and associated contractual product terms, either as a reference to such documents when specified as part of the CDM, or through identification of some of the key terms of those documents, such as the type of document, the document identifier, the publisher, the document vintage and the agreement date.'} documentation: model::external::cdm::RelatedAgreement[*];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'Represents the law governing the trade and associated contractual product terms.'} governingLaw: model::external::cdm::GoverningLawEnum[0..1];
  {meta::pure::profiles::doc.doc = 'Represents additional contractual information provided by each involved party.'} partyContractInformation: model::external::cdm::PartyContractInformation[*];
}

Class {meta::pure::profiles::doc.doc = 'A pointer style reference to a set of business day calendar defined elsewhere in the document.'} FpML::model::BusinessCentersReference extends FpML::model::Reference
{
  href: String[1];
}

Class {meta::pure::profiles::doc.doc = 'Specifies a filter based on an underlying corporate financial official listing defined at a stock exchange.'} model::external::cdm::ListingType
{
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'Represents a filter based on the Primary Stock Exchange facilitating the listing of companies, exchange of Stocks, Exchange traded Derivatives, Bonds, and other Securities expressed in ISO standard 10383.'} exchange: String[0..1];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'Represents a filter based on an industry sector defined under a system for classifying industry types such as \u2018Global Industry Classification Standard (GICS)\u2019 and \u2018North American Industry Classification System (NAICS)\u2019'} sector: String[0..1];
  {meta::pure::profiles::doc.doc = 'Represents a filter based on an index that measures a stock market, or a subset of a stock market.'} index: model::external::cdm::Index[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Specifies a list of primitive instructions to be applied to a single trade. This data type includes a number of constraints to regulate how primitive instructions are allowed to be combined.'} model::external::cdm::PrimitiveInstructionList
{
  {meta::pure::profiles::doc.doc = 'The set of primitive instructions to be applied to a single trade.'} primitiveInstruction: model::external::cdm::PrimitiveInstruction[1..*];
}

Class model::external::cdm::Pric
{
  pric: model::external::cdm::Pric[1];
  bsisPts: String[1];
}

Class {meta::pure::profiles::doc.doc = 'The money range defined as either a lower and upper money bound, or both.'} model::external::cdm::MoneyRange
{
  {meta::pure::profiles::doc.doc = 'The lower bound of a money range, e.g. greater than or equal to 1,000 USD.'} lowerBound: model::external::cdm::MoneyBound[0..1];
  {meta::pure::profiles::doc.doc = 'The upper bound of a money range, e.g. less than 10,000 USD.'} upperBound: model::external::cdm::MoneyBound[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Determines the currency rate that the seller of the equity amounts will apply at each valuation date for converting the respective amounts into a currency that is different from the currency denomination of the underlier.'} model::external::cdm::Quanto
{
  {meta::pure::profiles::doc.doc = 'Specifies a currency conversion rate.'} fxRate: model::external::cdm::FxRate[*];
  {meta::pure::profiles::doc.doc = 'Specifies the methodology (reference source and, optionally, fixing time) to be used for determining a currency conversion rate.'} fxSpotRateSource: model::external::cdm::FxSpotRateSource[0..1];
  {meta::pure::profiles::doc.doc = 'The time at which the spot currency exchange rate will be observed. It is specified as a time in a business day calendar location, e.g. 11:00am London time.'} fixingTime: model::external::cdm::BusinessCenterTime[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Specifies the collateral taxonomy, which is composed of a taxonomy value and a taxonomy source.'} model::external::cdm::CollateralTaxonomy
{
  {meta::pure::profiles::doc.doc = 'Specifies the taxonomy value.'} taxonomyValue: model::external::cdm::CollateralTaxonomyValue[1];
  {meta::pure::profiles::doc.doc = 'Specifies the taxonomy source.'} taxonomySource: model::external::cdm::TaxonomySourceEnum[1];
}

Class {meta::pure::profiles::doc.doc = 'Trigger point at which feature is effective.'} FpML::model::Trigger
[
  c1_choice: ($this.level->isNotEmpty() && ($this.levelPercentage->isEmpty() && ($this.creditEvents->isEmpty() && $this.creditEventsReference->isEmpty()))) || (($this.level->isEmpty() && ($this.levelPercentage->isNotEmpty() && ($this.creditEvents->isEmpty() && $this.creditEventsReference->isEmpty()))) || ($this.level->isEmpty() && $this.levelPercentage->isEmpty()))
]
{
  {meta::pure::profiles::doc.doc = 'The trigger level.'} level: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'The trigger level percentage. A value expressed in percentage units i.e. 5 means 5%.'} levelPercentage: Decimal[0..1];
  creditEvents: FpML::model::CreditEvents[0..1];
  creditEventsReference: FpML::model::CreditEventsReference[0..1];
  {meta::pure::profiles::doc.doc = 'The Triggering condition.'} triggerType: FpML::model::TriggerTypeEnum[0..1];
  {meta::pure::profiles::doc.doc = 'The valuation time type of knock condition.'} triggerTimeType: FpML::model::TriggerTimeTypeEnum[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the amount to be paid by the buyer of the option if the option is exercised prior to the Early Call Date (typically applicable to the convertible bond options).'} model::external::cdm::MakeWholeAmount extends model::external::cdm::SwapCurveValuation
{
  {meta::pure::profiles::doc.doc = 'The type of interpolation method that the calculation agent reserves the right to use.'} interpolationMethod: model::external::cdm::InterpolationMethodEnum[0..1];
  <<model::external::cdm::metadata.id>> {meta::pure::profiles::doc.doc = 'Date prior to which the option buyer will have to pay a Make Whole Amount to the option seller if he/she exercises the option.'} earlyCallDate: Date[1];
}

Class FpML::model::GracePeriodExtension
{
  {meta::pure::profiles::doc.doc = 'Indicates whether the grace period extension provision is applicable.'} applicable: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'The number of calendar or business days after any due date that the reference entity has to fulfil its obligations before a failure to pay credit event is deemed to have occurred. ISDA 2003 Term: Grace Period.'} gracePeriod: FpML::model::Offset[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type that is used for describing cash settlement of an option / non deliverable forward. It includes the currency to settle into together with the fixings required to calculate the currency amount.'} FpML::model::FxCashSettlement
[
  c1_choice: ($this.fixing->isNotEmpty() && $this.rateSourceFixing->isEmpty()) || ($this.fixing->isEmpty() && $this.rateSourceFixing->isNotEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'The currency in which cash settlement occurs for non-deliverable forwards and cash-settled options (non-deliverable or otherwise).'} settlementCurrency: FpML::model::Currency[0..1];
  referenceCurrency: FpML::model::Currency[0..1];
  {meta::pure::profiles::doc.doc = 'The amount of money that the settlement will be derived from.'} notionalAmount: FpML::model::PositiveMoney[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the source for and timing of a fixing of an exchange rate. This is used in the agreement of non-deliverable forward trades as well as various types of FX OTC options that require observations against a particular rate. This element is optional, permitting it to be omitted where fixing details are unavailable at the point of message creation. It has multiple occurrence to support the case where fixing details must be specified for more than one currency pair e.g. on an option settled into a third currency (that is not one of the option currencies).'} fixing: FpML::model::FxFixing[*];
  {meta::pure::profiles::doc.doc = 'Specifies the source for and timing of a fixing of an exchange rate. This is used in the agreement of non-deliverable forward trades as well as various types of FX OTC options that require observations against a particular rate. This element is optional, permitting it to be omitted where fixing details are unavailable at the point of message creation. It has multiple occurrence to support the case where fixing details must be specified for more than one currency pair e.g. on an option settled into a third currency (that is not one of the option currencies).'} rateSourceFixing: FpML::model::FxRateSourceFixing[*];
  {meta::pure::profiles::doc.doc = 'The date on which settlement is scheduled to occur'} settlementDate: FpML::model::AdjustableDate[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A geophraphic location for the purposes of defining a prevailing time according to the tz database.'} FpML::model::TimezoneLocation
[
  c1_length: $this.timezoneLocationScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  timezoneLocationScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'Characterizes the asset pool behind an asset backed bond.'} model::external::cdm::AssetPool
[
  AssetPool_effectiveDate: if($this.version->isEmpty(), |$this.effectiveDate->isEmpty(), |true)
]
{
  {meta::pure::profiles::doc.doc = 'The asset pool version.'} version: String[0..1];
  {meta::pure::profiles::doc.doc = 'Optionally it is possible to specify a version effective date when a version is supplied.'} effectiveDate: Date[0..1];
  {meta::pure::profiles::doc.doc = 'The part of the mortgage that is outstanding on trade inception, i.e. has not been repaid yet as principal. It is expressed as a multiplier factor to the mortgage: 1 means that the whole mortgage amount is outstanding, 0.8 means that 20% has been repaid.'} initialFactor: Float[1];
  {meta::pure::profiles::doc.doc = 'The part of the mortgage that is currently outstanding. It is expressed similarly to the initial factor, as factor multiplier to the mortgage. This term is formally defined as part of the \'ISDA Standard Terms Supplement for use with credit derivatives transactions on mortgage-backed security with pas-as-you-go or physical settlement\'.'} currentFactor: Float[0..1];
}

Class FpML::model::PhysicalSettlementPeriod
[
  c1_choice: ($this.businessDaysNotSpecified->isNotEmpty() && ($this.businessDays->isEmpty() && $this.maximumBusinessDays->isEmpty())) || (($this.businessDaysNotSpecified->isEmpty() && ($this.businessDays->isNotEmpty() && $this.maximumBusinessDays->isEmpty())) || ($this.businessDaysNotSpecified->isEmpty() && ($this.businessDays->isEmpty() && $this.maximumBusinessDays->isNotEmpty())))
]
{
  {meta::pure::profiles::doc.doc = 'An explicit indication that a number of business days are not specified and therefore ISDA fallback provisions should apply.'} businessDaysNotSpecified: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'A number of business days. Its precise meaning is dependant on the context in which this element is used. ISDA 2003 Term: Business Day'} businessDays: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'A maximum number of business days. Its precise meaning is dependant on the context in which this element is used. Intended to be used to limit a particular ISDA fallback provision.'} maximumBusinessDays: Decimal[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Defines rounding rules and precision to be used in the rounding of a number.'} model::external::cdm::Rounding
{
  {meta::pure::profiles::doc.doc = 'Specifies the rounding rounding rule as up, down, or nearest.'} roundingDirection: model::external::cdm::RoundingDirectionEnum[1];
  {meta::pure::profiles::doc.doc = 'Specifies the rounding precision in terms of a number of decimal places when the number is evaluated in decimal form (not percentage), e.g. 0.09876543 rounded to the nearest 5 decimal places is  0.0987654.'} precision: Integer[0..1];
}

Class FpML::model::LoanParticipation extends FpML::model::PcDeliverableObligationCharac
[
  c1_length: $this.qualifyingParticipationSeller->forAll(x: String[1]|$x->length() >= 1)
]
{
  {meta::pure::profiles::doc.doc = 'If Direct Loan Participation is specified as a deliverable obligation characteristic, this specifies any requirements for the Qualifying Participation Seller. The requirements may be listed free-form. ISDA 2003 Term: Qualifying Participation Seller'} qualifyingParticipationSeller: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the collateral posting obligations for the security provider party(ies), for example, as specified under the terms of the ISDA 2016 Credit Support Annex for Initial Margin, paragraph 13, General Principles, (ii).'} model::external::cdm::PostingObligationsElection
[
  AsPermitted: if($this.asPermitted, |$this.eligibleCollateral->isEmpty(), |true),
  EligibleCollateral: if(!($this.asPermitted), |$this.eligibleCollateral->isNotEmpty(), |true)
]
{
  {meta::pure::profiles::doc.doc = 'The elective party.'} party: model::external::cdm::CounterpartyRoleEnum[1];
  {meta::pure::profiles::doc.doc = 'If set to True, the Control Agreement is a Credit Support Document with respect to the party(ies). ISDA 2016 Credit Support Annex for Initial Margin, paragraph 6, (e).'} asPermitted: Boolean[1];
  {meta::pure::profiles::doc.doc = 'The eligible collateral as specified in relation to the pledgor/chargor/obligor(s) posting obligation. ISDA 2016 Credit Support Annex for Initial Margin, Eligible Credit Support (IM) Schedule.'} eligibleCollateral: model::external::cdm::EligibleCollateralSchedule[*];
  {meta::pure::profiles::doc.doc = 'The excluded collateral as specified in relation to the pledgor/chargor/obligor(s) posting obligation. ISDA 2016 Credit Support Annex for Initial Margin, paragraph 13, General Principles, (ii)(B)(i).'} excludedCollateral: String[0..1];
  {meta::pure::profiles::doc.doc = 'The additional language that might be specified by the parties to the legal agreement.'} additionalLanguage: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Defines an ancillary role enumerated value with an associated party reference. The product is agnostic to the actual parties involved in the transaction, with the party references abstracted away from the product definition and replaced by the AncillaryRoleEnum. The AncillaryRoleEnum can then be positioned in the product and this AncillaryParty type, which is positioned outside of the product definition, allows the AncillaryRoleEnum to be associated with an actual party reference.'} model::external::cdm::AncillaryParty
{
  {meta::pure::profiles::doc.doc = 'Specifies the AncillaryRoleEnum that is associated to the party reference. An ancillary party is any involved party that is not one of the two principal parties to the transaction.'} role: model::external::cdm::AncillaryRoleEnum[1];
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'Specifies the party, or parties, associated to the ancillary role.'} partyReference: model::external::cdm::Party[1..*];
  {meta::pure::profiles::doc.doc = 'Optionally specifies the counterparty that the ancillary party is acting on behalf of.'} onBehalfOf: model::external::cdm::CounterpartyRoleEnum[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the Other Eligible Support elections associated Initial and Variation margin agreements.'} model::external::cdm::OtherEligibleAndPostedSupport
{
  {meta::pure::profiles::doc.doc = 'The definition of \'Value\' with respect to Other Eligible Support (IM) and Other Posted Support (IM).'} applicableValue: Boolean[1];
  {meta::pure::profiles::doc.doc = 'The definition of \'Transfer\' with respect to Other Eligible Support (IM) and Other Posted Support (IM).'} applicableTransfer: Boolean[0..1];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'A class defining a floating interest rate through the specification of the floating rate index, the tenor, the multiplier schedule, the spread, the qualification of whether a specific rate treatment and/or a cap or floor apply.'} model::external::cdm::FloatingRate
{
  <<model::external::cdm::metadata.address>> rateOption: model::external::cdm::FloatingRateOption[0..1];
  {meta::pure::profiles::doc.doc = 'Support for modular calculated rates, such such as lockout compound calculations.'} calculationParameters: model::external::cdm::FloatingRateCalculationParameters[0..1];
  {meta::pure::profiles::doc.doc = 'Definition of any fallback rate that may be applicable.'} fallbackRate: model::external::cdm::FallbackRateParameters[0..1];
  {meta::pure::profiles::doc.doc = 'A rate multiplier or multiplier schedule to apply to the floating rate. A multiplier schedule is expressed as explicit multipliers and dates. In the case of a schedule, the step dates may be subject to adjustment in accordance with any adjustments specified in the calculationPeriodDatesAdjustments. The multiplier can be a positive or negative decimal. This element should only be included if the multiplier is not equal to 1 (one) for the term of the stream.'} floatingRateMultiplierSchedule: model::external::cdm::RateSchedule[0..1];
  {meta::pure::profiles::doc.doc = 'The ISDA Spread or a Spread schedule expressed as explicit spreads and dates. In the case of a schedule, the step dates may be subject to adjustment in accordance with any adjustments specified in calculationPeriodDatesAdjustments. The spread is a per annum rate, expressed as a decimal. For purposes of determining a calculation period amount, if positive the spread will be added to the floating rate and if negative the spread will be subtracted from the floating rate. A positive 10 basis point (0.1%) spread would be represented as 0.001.'} spreadSchedule: model::external::cdm::SpreadSchedule[0..1];
  {meta::pure::profiles::doc.doc = 'The specification of any rate conversion which needs to be applied to the observed rate before being used in any calculations. The two common conversions are for securities quoted on a bank discount basis which will need to be converted to either a Money Market Yield or Bond Equivalent Yield. See the Annex to the 2000 ISDA Definitions, Section 7.3. Certain General Definitions Relating to Floating Rate Options, paragraphs (g) and (h) for definitions of these terms.'} rateTreatment: model::external::cdm::RateTreatmentEnum[0..1];
  {meta::pure::profiles::doc.doc = 'The cap rate or cap rate schedule, if any, which applies to the floating rate. The cap rate (strike) is only required where the floating rate on a swap stream is capped at a certain level. A cap rate schedule is expressed as explicit cap rates and dates and the step dates may be subject to adjustment in accordance with any adjustments specified in calculationPeriodDatesAdjustments. The cap rate is assumed to be exclusive of any spread and is a per annum rate, expressed as a decimal. A cap rate of 5% would be represented as 0.05.'} capRateSchedule: model::external::cdm::StrikeSchedule[0..1];
  {meta::pure::profiles::doc.doc = 'The floor rate or floor rate schedule, if any, which applies to the floating rate. The floor rate (strike) is only required where the floating rate on a swap stream is floored at a certain strike level. A floor rate schedule is expressed as explicit floor rates and dates and the step dates may be subject to adjustment in accordance with any adjustments specified in calculationPeriodDatesAdjustments. The floor rate is assumed to be exclusive of any spread and is a per annum rate, expressed as a decimal. A floor rate of 5% would be represented as 0.05.'} floorRateSchedule: model::external::cdm::StrikeSchedule[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Definition of a product as ready to be traded, i.e. included in an execution or contract, by associating a specific price and quantity to this product plus an (optional) mechanism for any potential future quantity adjustment.'} model::external::cdm::TradableProduct
{
  {meta::pure::profiles::doc.doc = 'The underlying product to be included in a contract or execution.'} product: model::external::cdm::Product[1];
  {meta::pure::profiles::doc.doc = 'Specifies the price, quantity and effective date of each trade lot, when the same product may be traded multiple times in different lots with the same counterparty. In a trade increase, a new trade lot is added to the list, with the corresponding effective date. In a trade decrease, the existing trade lot(s) are decreased of the corresponding quantity (and an unwind fee may have to be settled). The multiple cardinality and the ability to increase existing trades is used for Equity Swaps in particular.'} tradeLot: model::external::cdm::TradeLot[1..*];
  {meta::pure::profiles::doc.doc = 'Specifies the parties which are the two counterparties to the transaction.  The product is agnostic to the actual parties to the transaction, with the party references abstracted away from the product definition and replaced by the counterparty enum (e.g. CounterpartyEnum values Party1 or Party2). The counterparty enum can then be positioned in the product (e.g. to specify which counterparty is the payer, receiver etc) and this counterparties attribute, which is positioned outside of the product definition, allows the counterparty enum to be associated with an actual party reference.'} counterparty: model::external::cdm::Counterparty[2];
  {meta::pure::profiles::doc.doc = 'Specifies the parties with ancillary roles in the transaction. The product is agnostic to the actual parties involved in the transaction, with the party references abstracted away from the product definition and replaced by the AncillaryRoleEnum. The AncillaryRoleEnum can then be positioned in the product and this AncillaryParty type, which is positioned outside of the product definition, allows the AncillaryRoleEnum to be associated with an actual party reference.'} ancillaryParty: model::external::cdm::AncillaryParty[*];
  {meta::pure::profiles::doc.doc = 'Specifies the conditions that govern the adjustment to the quantity of a product being traded: e.g. execution, portfolio rebalancing etc. It is typically used in the context of Equity Swaps.'} adjustment: model::external::cdm::NotionalAdjustmentEnum[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Reference to a settlement terms derived construct (cashSettlementTerms or physicalSettlementTerms).'} FpML::model::SettlementTermsReference extends FpML::model::Reference
{
  href: String[1];
}

Class {meta::pure::profiles::doc.doc = 'The set of elections which specify a Credit Support Annex or Deed.'} model::external::cdm::CreditSupportAgreementElections
{
  {meta::pure::profiles::doc.doc = 'The Regime Table provision , which determines the regulatory regime(s) applicable to each of the parties to the agreement.'} regime: model::external::cdm::Regime[1];
  {meta::pure::profiles::doc.doc = 'The determination of whether the One Way Provisions are applicable (true) or not applicable (false).'} oneWayProvisions: model::external::cdm::OneWayProvisions[1];
  {meta::pure::profiles::doc.doc = 'The specification of the ISDA SIMM Method for all Covered Transactions with respect to all Regimes.'} generalSimmElections: model::external::cdm::GeneralSimmElections[0..1];
  {meta::pure::profiles::doc.doc = 'The qualification of whether cross-currency swaps need to be identified in the Confirmation so that the obligations to exchange principal be disregarded for the purpose of determining the Delivery Amount or Return Amount.'} identifiedCrossCurrencySwap: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'The specification of methodologies to compute sensitivities specific to the agreement.'} sensitivityMethodologies: model::external::cdm::SensitivityMethodologies[1];
  {meta::pure::profiles::doc.doc = 'The reference currency for the purpose of specifying the FX Haircut relating to a posting obligation, as being either the Termination Currency or an FX Designated Currency.'} fxHaircutCurrency: model::external::cdm::FxHaircutCurrency[0..1];
  {meta::pure::profiles::doc.doc = 'The security providers posting obligations.'} postingObligations: model::external::cdm::PostingObligations[1];
  {meta::pure::profiles::doc.doc = 'The specification of Additional regimes for purposes of determining whether a Regulatory Event has occurred.'} substitutedRegime: model::external::cdm::SubstitutedRegime[*];
  {meta::pure::profiles::doc.doc = 'The base and eligible currency(ies) for the document as specified by the parties to the agreement.'} baseAndEligibleCurrency: model::external::cdm::BaseAndEligibleCurrency[1];
  {meta::pure::profiles::doc.doc = 'The additional obligations that might be specified by the parties to a Credit Support Agreement.'} additionalObligations: String[0..1];
  {meta::pure::profiles::doc.doc = 'The specification of transactions covered by the terms of the agreement.'} coveredTransactions: model::external::cdm::CoveredTransactions[1];
  {meta::pure::profiles::doc.doc = 'The Credit Support Obligations applicable to the agreement.'} creditSupportObligations: model::external::cdm::CreditSupportObligations[1];
  {meta::pure::profiles::doc.doc = 'The bespoke exchange date terms that might be specified by the parties to the agreement.'} exchangeDate: String[0..1];
  {meta::pure::profiles::doc.doc = 'The set of elections for determining Valuation and Timing terms specific to the agreement'} calculationAndTiming: model::external::cdm::CalculationAndTiming[1];
  {meta::pure::profiles::doc.doc = 'The set of elections that may overwrite the default Condition Precedent provision, and the set of provisions that are deemed Access Condition.'} conditionsPrecedent: model::external::cdm::ConditionsPrecedent[0..1];
  {meta::pure::profiles::doc.doc = 'The conditions under which the Security Provider can substitute posted collateral.'} substitution: model::external::cdm::Substitution[1];
  {meta::pure::profiles::doc.doc = 'The election terms under which a party disputes (i) the Calculation Agent\u2019s calculation of a Delivery Amount or a Return Amount, or (ii) the Value of any Transfer of Eligible Credit Support or Posted Credit Support.'} disputeResolution: model::external::cdm::DisputeResolution[1];
  {meta::pure::profiles::doc.doc = 'The elections for the holding and using of posted collateral by the respective parties to the Credit Support Annex for Variation Margin.'} holdingAndUsingPostedCollateral: model::external::cdm::HoldingAndUsingPostedCollateral[1];
  {meta::pure::profiles::doc.doc = 'The bespoke provisions that might be specified by the parties to the agreement to specify the rights of Security Taker and/or Security Provider when an Early Termination or Access Condition event has occurred..'} rightsEvents: model::external::cdm::RightsEvents[1];
  {meta::pure::profiles::doc.doc = 'The Custodian and Segregated Account details in respect of each party to the agreement.'} custodyArrangements: model::external::cdm::CustodyArrangements[0..1];
  {meta::pure::profiles::doc.doc = 'The Distributions and Interest Payment terms specified as part of the agreement.'} distributionAndInterestPayment: model::external::cdm::DistributionAndInterestPayment[0..1];
  {meta::pure::profiles::doc.doc = 'The specification of whether the standard Credit Support Offset provisions are applicable (true) or not applicable (false).'} creditSupportOffsets: Boolean[1];
  {meta::pure::profiles::doc.doc = 'The specification Additional Representations that may be applicable to the agreement.'} additionalRepresentations: model::external::cdm::AdditionalRepresentations[1];
  {meta::pure::profiles::doc.doc = 'The Other Eligible Support elections associated with margin agreements.'} otherEligibleAndPostedSupport: model::external::cdm::OtherEligibleAndPostedSupport[1];
  {meta::pure::profiles::doc.doc = 'The optional specification of address where the demands, specifications and notices will be communicated to for each of the parties to the agreement.'} demandsAndNotices: model::external::cdm::ContactElection[0..1];
  {meta::pure::profiles::doc.doc = 'The optional specification of address for transfer as specified by the respective parties to the agreement.'} addressesForTransfer: model::external::cdm::ContactElection[0..1];
  {meta::pure::profiles::doc.doc = 'The bespoke definition of other agreement terms as specified by the parties to the agreement.'} otherAgreements: model::external::cdm::OtherAgreements[0..1];
  {meta::pure::profiles::doc.doc = 'The bespoke provision that might be specified by the parties to the agreement applicable to Termination Currency.  Unless specified the definition of Termination Currency has the meaning specified in the Schedule to the ISDA Master Agreement.'} terminationCurrencyAmendment: model::external::cdm::TerminationCurrencyAmendment[1];
  {meta::pure::profiles::doc.doc = 'The bespoke provision that might be specified by the parties to the agreement applicable to Minimum Transfer Amount.  Unless specified the definition of Minimum Transfer Amount in any Other Regulatory CSA has the meaning specified in such Other Regulatory CSA.'} minimumTransferAmountAmendment: model::external::cdm::MinimumTransferAmountAmendment[1];
  {meta::pure::profiles::doc.doc = 'The bespoke provision that might be specified by the parties to the agreement applicable to Interpretations.'} interpretationTerms: String[0..1];
  {meta::pure::profiles::doc.doc = 'The Process Agent that might be appointed by the parties to the agreement.'} processAgent: model::external::cdm::ProcessAgent[0..1];
  {meta::pure::profiles::doc.doc = 'The election for the Valuation of Appropriate Collateral.'} appropriatedCollateralValuation: model::external::cdm::AppropriatedCollateralValuation[0..1];
  {meta::pure::profiles::doc.doc = 'The jurisdiction specific terms relevant to the agreement.'} jurisdictionRelatedTerms: model::external::cdm::JurisdictionRelatedTerms[0..1];
  {meta::pure::profiles::doc.doc = 'Any additional amendments that might be specified by the parties to the agreement.'} additionalAmendments: String[0..1];
  {meta::pure::profiles::doc.doc = 'Any additional terms that might be specified applicable.'} additionalBespokeTerms: String[0..1];
  {meta::pure::profiles::doc.doc = 'The qualification of whether Trust Scheme Addendum is applicable (True) or not applicable (False).'} trustSchemeAddendum: Boolean[1];
}

Class {meta::pure::profiles::doc.doc = 'A reference to the notional amount.'} FpML::model::NotionalAmountReference extends FpML::model::Reference
{
  href: String[1];
}

Class model::external::cdm::GracePeriodExtension
{
  {meta::pure::profiles::doc.doc = 'Indicates whether the grace period extension provision is applicable.'} applicable: Boolean[1];
  {meta::pure::profiles::doc.doc = 'The number of calendar or business days after any due date that the reference entity has to fulfil its obligations before a failure to pay credit event is deemed to have occurred. ISDA 2003 Term: Grace Period.'} gracePeriod: model::external::cdm::Offset[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type giving the choice between defining a series of dates as an explicit list of dates together with applicable adjustments or as relative to some other series of (anchor) dates.'} FpML::model::AdjustableOrRelativeDates
[
  c1_choice: ($this.adjustableDates->isNotEmpty() && $this.relativeDates->isEmpty()) || ($this.adjustableDates->isEmpty() && $this.relativeDates->isNotEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'A series of dates that shall be subject to adjustment if they would otherwise fall on a day that is not a business day in the specified business centers, together with the convention for adjusting the date.'} adjustableDates: FpML::model::AdjustableDates[0..1];
  {meta::pure::profiles::doc.doc = 'A series of dates specified as some offset to another series of dates (the anchor dates).'} relativeDates: FpML::model::RelativeDates[0..1];
  id: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'An identifier of a reporting regime or format used for regulatory reporting. For example DoddFrankAct, MiFID, HongKongOTCDRepository, etc.'} FpML::model::ReportingRegimeName
[
  c1_length: $this.reportingRegimeNameScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  reportingRegimeNameScheme: String[0..1];
  value: String[1];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'A class to specify the applicable Credit Events that would trigger a settlement, as specified in the related Confirmation and defined in the ISDA 2014 Credit Definition article IV section 4.1.'} model::external::cdm::CreditEvents
{
  {meta::pure::profiles::doc.doc = 'A credit event. The reference entity has been dissolved or has become insolvent. It also covers events that may be a precursor to insolvency such as instigation of bankruptcy or insolvency proceedings. Sovereign trades are not subject to Bankruptcy as \'technically\' a Sovereign cannot become bankrupt. ISDA 2003 Term: Bankruptcy.'} bankruptcy: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'A credit event. This credit event triggers, after the expiration of any applicable grace period, if the reference entity fails to make due payments in an aggregate amount of not less than the payment requirement on one or more obligations (e.g. a missed coupon payment). ISDA 2003 Term: Failure to Pay.'} failureToPay: model::external::cdm::FailureToPay[0..1];
  {meta::pure::profiles::doc.doc = 'A credit event. Corresponds to the failure by the Reference Entity to pay an expected principal amount or the payment of an actual principal amount that is less than the expected principal amount. ISDA 2003 Term: Failure to Pay Principal.'} failureToPayPrincipal: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'A credit event. Corresponds to the failure by the Reference Entity to pay an expected interest amount or the payment of an actual interest amount that is less than the expected interest amount. ISDA 2003 Term: Failure to Pay Interest.'} failureToPayInterest: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'A credit event. One or more of the obligations have become capable of being declared due and payable before they would otherwise have been due and payable as a result of, or on the basis of, the occurrence of a default, event of default or other similar condition or event other than failure to pay. ISDA 2003 Term: Obligation Default.'} obligationDefault: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'A credit event. One or more of the obligations have been declared due and payable before they would otherwise have been due and payable as a result of, or on the basis of, the occurrence of a default, event of default or other similar condition or event other than failure to pay (preferred by the market over Obligation Default, because more definitive and encompasses the definition of Obligation Default - this is more favorable to the Seller). Subject to the default requirement amount. ISDA 2003 Term: Obligation Acceleration.'} obligationAcceleration: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'A credit event. The reference entity, or a governmental authority, either refuses to recognise or challenges the validity of one or more obligations of the reference entity, or imposes a moratorium thereby postponing payments on one or more of the obligations of the reference entity. Subject to the default requirement amount. ISDA 2003 Term: Repudiation/Moratorium.'} repudiationMoratorium: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'A credit event. A restructuring is an event that materially impacts the reference entity\'s obligations, such as an interest rate reduction, principal reduction, deferral of interest or principal, change in priority ranking, or change in currency or composition of payment. ISDA 2003 Term: Restructuring.'} restructuring: model::external::cdm::Restructuring[0..1];
  {meta::pure::profiles::doc.doc = 'A credit event. A governmental intervention is an event resulting from an action by a governmental authority that materially impacts the reference entity\'s obligations, such as an interest rate reduction, principal reduction, deferral of interest or principal, change in priority ranking, or change in currency or composition of payment. ISDA 2014 Term: Governmental Intervention.'} governmentalIntervention: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'A credit event. Results from the fact that the rating of the reference obligation is down-graded to a distressed rating level. From a usage standpoint, this credit event is typically not applicable in case of RMBS trades.'} distressedRatingsDowngrade: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'A credit event. Results from the fact that the underlier fails to make principal payments as expected.'} maturityExtension: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'A credit event. Results from the fact that the underlier writes down its outstanding principal amount.'} writedown: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'A credit event. Results from the fact that losses occur to the underlying instruments that do not result in reductions of the outstanding principal of the reference obligation.'} impliedWritedown: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'In relation to certain credit events, serves as a threshold for Obligation Acceleration, Obligation Default, Repudiation/Moratorium and Restructuring. Market standard is USD 10,000,000 (JPY 1,000,000,000 for all Japanese Yen trades). This is applied on an aggregate or total basis across all Obligations of the Reference Entity. Used to prevent technical/operational errors from triggering credit events. ISDA 2003 Term: Default Requirement.'} defaultRequirement: model::external::cdm::Money[0..1];
  {meta::pure::profiles::doc.doc = 'A specified condition to settlement. An irrevocable written or verbal notice that describes a credit event that has occurred. The notice is sent from the notifying party (either the buyer or the seller) to the counterparty. It provides information relevant to determining that a credit event has occurred. This is typically accompanied by Publicly Available Information. ISDA 2003 Term: Credit Event Notice.'} creditEventNotice: model::external::cdm::CreditEventNotice[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Defines business day shifts for daily componded or averaged rates.  This type is used for lookback and lockout rates. This type is used to represent modular computed rates in interestRatePayouts.'} model::external::cdm::OffsetCalculation
{
  {meta::pure::profiles::doc.doc = 'The number of business days offset.'} offsetDays: Integer[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the parties\' election to specify contact information, in relation to elections such as the Addresses for Transfer or the Demand and Notices as specified in the ISDA Credit Support Annex agreement.'} model::external::cdm::ContactElection
{
  {meta::pure::profiles::doc.doc = 'The parties\' contact information election.'} partyElection: model::external::cdm::PartyContactInformation[2];
}

Class {meta::pure::profiles::doc.doc = 'A complex type to specify non negative payments.'} FpML::model::NonNegativePayment extends FpML::model::PaymentBaseExtended
{
  {meta::pure::profiles::doc.doc = 'Non negative payment amount.'} paymentAmount: FpML::model::NonNegativeMoney[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class defining the rate source and fixing time for an FX rate.'} model::external::cdm::FxSpotRateSource
{
  {meta::pure::profiles::doc.doc = 'The primary source for where the rate observation will occur. Will typically be either a page or a reference bank published rate.'} primaryRateSource: model::external::cdm::InformationSource[1];
  {meta::pure::profiles::doc.doc = 'An alternative, or secondary, source for where the rate observation will occur. Will typically be either a page or a reference bank published rate.'} secondaryRateSource: model::external::cdm::InformationSource[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the legal entities that are part of the umbrella agreement.'} model::external::cdm::UmbrellaAgreementEntity extends model::external::cdm::LegalEntity
{
  {meta::pure::profiles::doc.doc = 'The terms that might be associated with each party to the umbrella agreement.'} terms: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the ISDA SIMM Calculation Currency as either the Base Currency or an alternative currency. ISDA 2016 CSA for Initial Margin, Paragraph 13, General Principles (ee)(3). | ISDA 2018 CSA for Initial Margin, Paragraph 13, General Principles (ee)(3).'} model::external::cdm::CalculationCurrencyElection
{
  {meta::pure::profiles::doc.doc = 'The party which the SIMM Calculation Currency qualification applies to.'} party: model::external::cdm::CounterpartyRoleEnum[1];
  {meta::pure::profiles::doc.doc = 'The SIMM Calculation Currency (also known as SIMM Reporting Currency) means the Base Currency when True. It means a different currency when False. In that latter case, the SIMM Calculation Currency is specified as part of the currency attribute.'} isBaseCurrency: Boolean[1];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'The currency in which the ISDA SIMM Calculation is denominated, when different from the Base Currency. The list of valid currencies is not presently positioned as an enumeration as part of the CDM because that scope is limited to the values specified by ISDA and FpML. As a result, implementers have to make reference to the relevant standard, such as the ISO 4217 standard for currency codes.'} currency: String[0..1];
}

Class FpML::model::InitialPayment extends FpML::model::PaymentBase
{
  {meta::pure::profiles::doc.doc = 'A reference to the party responsible for making the payments defined by this structure.'} payerPartyReference: FpML::model::PartyReference[0..1];
  {meta::pure::profiles::doc.doc = 'A reference to the account responsible for making the payments defined by this structure.'} payerAccountReference: FpML::model::AccountReference[0..1];
  {meta::pure::profiles::doc.doc = 'A reference to the party that receives the payments corresponding to this structure.'} receiverPartyReference: FpML::model::PartyReference[0..1];
  {meta::pure::profiles::doc.doc = 'A reference to the account that receives the payments corresponding to this structure.'} receiverAccountReference: FpML::model::AccountReference[0..1];
  {meta::pure::profiles::doc.doc = 'A fixed payment date that shall be subject to adjustment in accordance with the applicable business day convention if it would otherwise fall on a day that is not a business day. The applicable business day convention and business day are those specified in the dateAdjustments element within the generalTerms component.'} adjustablePaymentDate: StrictDate[0..1];
  {meta::pure::profiles::doc.doc = 'The adjusted payment date. This date should already be adjusted for any applicable business day convention. This component is not intended for use in trade confirmation but may be specified to allow the fee structure to also serve as a cashflow type component.'} adjustedPaymentDate: StrictDate[0..1];
  {meta::pure::profiles::doc.doc = 'A fixed payment amount.'} paymentAmount: FpML::model::Money[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Defines the movement of cash, securities or commodities between two parties on a date.'} model::external::cdm::Transfer extends model::external::cdm::TransferBase
{
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'Represents the origin to the transfer as a reference for lineage purposes, whether it originated from trade level settlement terms or from payment terms on an economic payout.'} settlementOrigin: model::external::cdm::SettlementTerms[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class that describes the composition of a rate that has been quoted or is to be quoted. This includes the two currencies and the quotation relationship between the two currencies and is used as a building block throughout the FX specification.'} model::external::cdm::QuotedCurrencyPair
{
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'The first currency specified when a pair of currencies is to be evaluated.'} currency1: String[1];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'The second currency specified when a pair of currencies is to be evaluated.'} currency2: String[1];
  {meta::pure::profiles::doc.doc = 'The method by which the exchange rate is quoted.'} quoteBasis: model::external::cdm::QuoteBasisEnum[1];
}

Class {meta::pure::profiles::doc.doc = 'A type that provides a combination of payment system identification codes with physical postal address details, for the purposes of identifying a party involved in the routing of a payment.'} FpML::model::RoutingIdsAndExplicitDetails
[
  c1_length: $this.routingName->forAll(x: String[1]|$x->length() <= 255),
  c2_length: $this.routingAccountNumber->forAll(x: String[1]|$x->length() >= 1),
  c3_length: $this.routingReferenceText->forAll(x: String[1]|$x->length() >= 1)
]
{
  {meta::pure::profiles::doc.doc = 'A set of unique identifiers for a party, eachone identifying the party within a payment system. The assumption is that each party will not have more than one identifier within the same payment system.'} routingIds: FpML::model::RoutingIds[*];
  {meta::pure::profiles::doc.doc = 'A real name that is used to identify a party involved in the routing of a payment.'} routingName: String[0..1];
  {meta::pure::profiles::doc.doc = 'A physical postal address via which a payment can be routed.'} routingAddress: FpML::model::Address[0..1];
  {meta::pure::profiles::doc.doc = 'An account number via which a payment can be routed.'} routingAccountNumber: String[0..1];
  {meta::pure::profiles::doc.doc = 'A piece of free-format text used to assist the identification of a party involved in the routing of a payment.'} routingReferenceText: String[*];
}

Class {meta::pure::profiles::doc.doc = 'A class defining the fee payable on exercise of an option. This fee may be defined as an amount or a percentage of the notional exercised. As a difference with FpML, it extends the BuyerSeller class.'} model::external::cdm::ExerciseFee extends model::external::cdm::PayerReceiver
[
  ExerciseFeeChoice: ($this.feeAmount->isNotEmpty() && $this.feeRate->isEmpty()) || ($this.feeRate->isNotEmpty() && $this.feeAmount->isEmpty())
]
{
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'A pointer style reference to the associated notional schedule defined elsewhere in the document.'} notionalReference: model::external::cdm::Money[1];
  {meta::pure::profiles::doc.doc = 'The amount of fee to be paid on exercise. The fee currency is that of the referenced notional.'} feeAmount: Float[0..1];
  {meta::pure::profiles::doc.doc = 'A fee represented as a percentage of some referenced notional. A percentage of 5% would be represented as 0.05.'} feeRate: Float[0..1];
  {meta::pure::profiles::doc.doc = 'The date on which exercise fee(s) will be paid. It is specified as a relative date.'} feePaymentDate: model::external::cdm::RelativeDateOffset[1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify Calculation Agent for purposes of Initial or Variation Margin agreements'} model::external::cdm::CalculationAgentTerms
[
  one_of_constraint: ($this.party->isNotEmpty() && $this.bespokeCalculationAgentTerms->isEmpty()) || ($this.bespokeCalculationAgentTerms->isNotEmpty() && $this.party->isEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'The party which is specified as Calculation Agent for Initial Margin.'} party: model::external::cdm::CounterpartyRoleEnum[0..2];
  {meta::pure::profiles::doc.doc = 'The Calculation Agent (IM) terms when specified'} bespokeCalculationAgentTerms: String[0..1];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'Defines the product that is the subject of a tradable product definition, an underlying product definition, a physical exercise, a position, or other purposes.'} model::external::cdm::Product
[
  one_of_constraint: ((((((((((($this.contractualProduct->isNotEmpty() && $this.index->isEmpty()) && $this.loan->isEmpty()) && $this.foreignExchange->isEmpty()) && $this.commodity->isEmpty()) && $this.security->isEmpty()) && $this.basket->isEmpty()) || (((((($this.index->isNotEmpty() && $this.contractualProduct->isEmpty()) && $this.loan->isEmpty()) && $this.foreignExchange->isEmpty()) && $this.commodity->isEmpty()) && $this.security->isEmpty()) && $this.basket->isEmpty())) || (((((($this.loan->isNotEmpty() && $this.contractualProduct->isEmpty()) && $this.index->isEmpty()) && $this.foreignExchange->isEmpty()) && $this.commodity->isEmpty()) && $this.security->isEmpty()) && $this.basket->isEmpty())) || (((((($this.foreignExchange->isNotEmpty() && $this.contractualProduct->isEmpty()) && $this.index->isEmpty()) && $this.loan->isEmpty()) && $this.commodity->isEmpty()) && $this.security->isEmpty()) && $this.basket->isEmpty())) || (((((($this.commodity->isNotEmpty() && $this.contractualProduct->isEmpty()) && $this.index->isEmpty()) && $this.loan->isEmpty()) && $this.foreignExchange->isEmpty()) && $this.security->isEmpty()) && $this.basket->isEmpty())) || (((((($this.security->isNotEmpty() && $this.contractualProduct->isEmpty()) && $this.index->isEmpty()) && $this.loan->isEmpty()) && $this.foreignExchange->isEmpty()) && $this.commodity->isEmpty()) && $this.basket->isEmpty())) || (((((($this.basket->isNotEmpty() && $this.contractualProduct->isEmpty()) && $this.index->isEmpty()) && $this.loan->isEmpty()) && $this.foreignExchange->isEmpty()) && $this.commodity->isEmpty()) && $this.security->isEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'Specifies the contractual product\'s economic terms, product identifier, and product taxonomy.'} contractualProduct: model::external::cdm::ContractualProduct[0..1];
  {meta::pure::profiles::doc.doc = 'Identifies an index by referencing a product identifier.'} index: model::external::cdm::Index[0..1];
  {meta::pure::profiles::doc.doc = 'Identifies a loan by referencing a product identifier and an optiional set of attributes.'} loan: model::external::cdm::Loan[0..1];
  {meta::pure::profiles::doc.doc = 'Defines a foreign exchange spot or forward transaction.'} foreignExchange: model::external::cdm::ForeignExchange[0..1];
  <<model::external::cdm::metadata.address>> {meta::pure::profiles::doc.doc = 'Identifies a commodity by referencing a product identifier.'} commodity: model::external::cdm::Commodity[0..1];
  {meta::pure::profiles::doc.doc = 'Identifies a security by referencing a product identifier and a security type, plus an optional set of attributes.'} security: model::external::cdm::Security[0..1];
  {meta::pure::profiles::doc.doc = 'Identifies a custom basket by referencing a product identifier and its consituents.'} basket: model::external::cdm::Basket[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Specifies the parameters required to obtain a valuation, including the source, quotation method (bid, mid etc.) and any applicable quotation amount.'} model::external::cdm::ValuationMethod
{
  {meta::pure::profiles::doc.doc = 'The source for obtaining a valuation. This may come from some information source (e.g. Reuters), from a rate option fixing (e.g. FX fixing for cross-currency settlement), or from a set of reference banks. This is a mandatory attribute as the valuation method relies on one of those sources to be specified.'} valuationSource: model::external::cdm::ValuationSource[1];
  {meta::pure::profiles::doc.doc = 'The type of price quotations to be requested from dealers when determining the market value of the reference obligation for purposes of cash settlement, or which rate quote is to be observed for a fixing. For example, Bid, Offer, Mid-market or Exercising Party Pays. ISDA 2003 Term: Quotation Method. The meaning of Exercising Party Pays is defined in the 2000 ISDA Definitions, Section 17.2. Certain Definitions Relating to Cash Settlement, paragraph (j).'} quotationMethod: model::external::cdm::QuotationRateTypeEnum[0..1];
  {meta::pure::profiles::doc.doc = 'The ISDA defined methodology for determining the final price of the reference obligation for purposes of cash settlement. (ISDA 2003 Term: Valuation Method). For example, Market, Highest etc.'} valuationMethod: model::external::cdm::ValuationMethodEnum[0..1];
  {meta::pure::profiles::doc.doc = 'In the determination of a cash settlement amount, if weighted average quotations are to be obtained, the quotation amount specifies an upper limit to the outstanding principal balance of the reference obligation for which the quote should be obtained. If not specified, the ISDA definitions provide for a fallback amount equal to the floating rate payer calculation amount. ISDA 2003 Term: Quotation Amount.'} quotationAmount: model::external::cdm::Money[0..1];
  {meta::pure::profiles::doc.doc = 'In the determination of a cash settlement amount, if weighted average quotations are to be obtained, the minimum quotation amount specifies a minimum intended threshold amount of outstanding principal balance of the reference obligation for which the quote should be obtained. If not specified, the ISDA definitions provide for a fallback amount of the lower of either USD 1,000,000 (or its equivalent in the relevant obligation currency) or the quotation amount. ISDA 2003 Term: Minimum Quotation Amount.'} minimumQuotationAmount: model::external::cdm::Money[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the parameters representing several mid-market valuation and replacement value methods.'} cashCollateralValuationMethod: model::external::cdm::CashCollateralValuationMethod[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify a post or street address.'} model::external::cdm::Address
{
  {meta::pure::profiles::doc.doc = 'The set of street and building number information that identifies a postal address within a city.'} street: String[1..*];
  {meta::pure::profiles::doc.doc = 'The city component of the postal address.'} city: String[1];
  {meta::pure::profiles::doc.doc = 'A country subdivision used in postal addresses in some countries. For example, US states, Canadian provinces, Swiss cantons, ...'} state: String[0..1];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'The ISO 3166 standard code for the country within which the postal address is located.'} country: String[1];
  {meta::pure::profiles::doc.doc = 'The code, required for computerized mail sorting systems, that is allocated to a physical address by a national postal authority.'} postalCode: String[1];
}

Class {meta::pure::profiles::doc.doc = 'Specification of the content of a legal agreement.'} model::external::cdm::AgreementTerms
{
  {meta::pure::profiles::doc.doc = 'Specification of the standard set of terms that define a legal agreement.'} agreement: model::external::cdm::Agreement[1];
  counterparty: model::external::cdm::Counterparty[2];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'A class for specifying the business day calendar location used in determining whether a day is a business day or not, either by specifying this business center by reference to an enumerated list that is maintained by the FpML standard, or by reference to such specification when it exists elsewhere as part of the instance document. This class corresponds to the FpML BusinessCentersOrReference.model.'} model::external::cdm::BusinessCenters
[
  BusinessCenters_choice: ($this.businessCenter->isNotEmpty() && $this.businessCentersReference->isEmpty()) || ($this.businessCentersReference->isNotEmpty() && $this.businessCenter->isEmpty())
]
{
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'A code identifying one or several business day calendar location(s). The set of business day calendar locations are specified by the business day calendar location enumeration which is maintained by the FpML standard.'} businessCenter: model::external::cdm::BusinessCenterEnum[*];
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'A reference to a financial business center location specified elsewhere in the instance document.'} businessCentersReference: model::external::cdm::BusinessCenters[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify whether the Interest Adjustment is applicable and what its periodicity is. ISDA 2016 Japanese Law Credit Support Annex for Initial Margin, paragraph 13, General Principles, (n)(ii).'} model::external::cdm::InterestAdjustment
{
  {meta::pure::profiles::doc.doc = 'The Interest Adjustment is applicable when True and not applicable when False'} isApplicable: Boolean[1];
  {meta::pure::profiles::doc.doc = 'The qualification of the Interest Adjustment periodicity.'} periodicity: model::external::cdm::InterestAdjustmentPeriodicity[1];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'Specifies the object to be observed for a price, it could be an asset or a reference.'} model::external::cdm::Observable
[
  one_of_constraint: ((((($this.rateOption->isNotEmpty() && $this.commodity->isEmpty()) && $this.productIdentifier->isEmpty()) && $this.currencyPair->isEmpty()) || ((($this.commodity->isNotEmpty() && $this.rateOption->isEmpty()) && $this.productIdentifier->isEmpty()) && $this.currencyPair->isEmpty())) || ((($this.productIdentifier->isNotEmpty() && $this.rateOption->isEmpty()) && $this.commodity->isEmpty()) && $this.currencyPair->isEmpty())) || ((($this.currencyPair->isNotEmpty() && $this.rateOption->isEmpty()) && $this.commodity->isEmpty()) && $this.productIdentifier->isEmpty())
]
{
  <<model::external::cdm::metadata.location>> {meta::pure::profiles::doc.doc = 'Specifies a floating rate index and tenor.'} rateOption: model::external::cdm::FloatingRateOption[0..1];
  <<model::external::cdm::metadata.location>> {meta::pure::profiles::doc.doc = 'Identifies a commodity by referencing a product identifier.'} commodity: model::external::cdm::Commodity[0..1];
  <<model::external::cdm::metadata.location>> {meta::pure::profiles::doc.doc = 'Comprises of an identifier and a source. The associated metadata key denotes the ability to associate a hash value to the ProductIdentifier instantiations for the purpose of model cross-referencing, in support of functionality such as the event effect and the lineage.'} productIdentifier: model::external::cdm::ProductIdentifier[*];
  <<model::external::cdm::metadata.location>> {meta::pure::profiles::doc.doc = 'Describes the composition of a rate that has been quoted or is to be quoted, including the two currencies and the quotation relationship between the two currencies.'} currencyPair: model::external::cdm::QuotedCurrencyPair[0..1];
  {meta::pure::profiles::doc.doc = 'The underlying contract which is referenced when determining the final settlement price of the instrument. Eg. Rolling Front Month Future; Spot etc.'} optionReferenceType: model::external::cdm::OptionReferenceTypeEnum[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the Process Agent that might be appointed by the parties as part of a Credit Support Annex/Deed or Collateral Transfer Agreement.'} model::external::cdm::ProcessAgent
{
  {meta::pure::profiles::doc.doc = 'The parties\' Process Agent election.'} partyElection: model::external::cdm::ProcessAgentElection[2];
}

Class {meta::pure::profiles::doc.doc = 'This type contains all the reference pool items to define the reference entity and reference obligation(s) in the basket.'} FpML::model::ReferencePool
{
  referencePoolItem: FpML::model::ReferencePoolItem[*];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'Comprises an identifier and a source. The associated metadata key denotes the ability to associate a hash value to the ProductIdentifier instantiations for the purpose of model cross-referencing, in support of functionality such as the event effect and the lineage.'} model::external::cdm::ProductIdentifier
{
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'Provides an identifier associated with a specific product.  The identifier is unique within the public source specified in the source attribute.'} identifier: String[1];
  {meta::pure::profiles::doc.doc = 'Defines the source of the identifier.'} source: model::external::cdm::ProductIdTypeEnum[1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify one or more regimes that may be specified as relevant to a legal agreement. 2016/2018 ISDA Credit Support Annex for Initial Margin: Regime.'} model::external::cdm::Regime
{
  {meta::pure::profiles::doc.doc = 'A class to specify the regime(s) that parties to a legal agreement, such as the ISDA 2016 and 2018 CSA for Initial Margin, might agree to apply to one or both parties when acting as collateral taker, and specific terms associated with that application.'} applicableRegime: model::external::cdm::ApplicableRegime[1..*];
  {meta::pure::profiles::doc.doc = 'The specification of the number of days after effective delivery of notice that Mandatory method fallback applies. Specification is only required when one or more Regimes have Fall Back to Mandatory Method elected as a SIMM exception.'} fallbackToMandatoryMethodDays: Float[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify a convertible bond as having a product identifier. As a difference versus the FpML standard, the CDM structure of this class only includes the productIdentifier class, which consists of an identifier, productTaxonomy, and source of the identifier. The reason for this approach is to avoid the potential for conflicting information between the information associated with the contractual product and the reference information maintained by the relevant service provider.'} model::external::cdm::ConvertibleBond extends model::external::cdm::IdentifiedProduct
{
}

Class model::external::cdm::TransferBase
{
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'Represents a unique reference to the transfer.'} identifier: model::external::cdm::Identifier[*];
  {meta::pure::profiles::doc.doc = 'Represents the amount of the asset to be transferred.'} quantity: model::external::cdm::Quantity[1];
  {meta::pure::profiles::doc.doc = 'Represents the object that is subject to the transfer, it could be an asset or a reference.'} observable: model::external::cdm::Observable[0..1];
  {meta::pure::profiles::doc.doc = 'Represents the parties to the transfer and their role.'} payerReceiver: model::external::cdm::PartyReferencePayerReceiver[1];
  {meta::pure::profiles::doc.doc = 'Represents the date on which the transfer to due.'} settlementDate: model::external::cdm::AdjustableOrAdjustedOrRelativeDate[1];
}

Class {meta::pure::profiles::doc.doc = 'A agreement identifier allocated by a party. FpML does not define the domain values associated with this element. Note that the domain values for this element are not strictly an enumerated list.'} FpML::model::OtherAgreementId
[
  c1_length: $this.agreementIdScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() >= 1,
  c3_length: $this.value->length() <= 255
]
{
  agreementIdScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify whether Amendment to Minimum Transfer Amount language is applicable or not'} model::external::cdm::MinimumTransferAmountAmendment
{
  {meta::pure::profiles::doc.doc = 'The definition of Minimum Transfer Amount in any Other Regulatory CSA will be amended when applicable.'} isApplicable: Boolean[1];
  {meta::pure::profiles::doc.doc = 'The effective date of the Amendment to Termination Currency.'} effectiveDate: model::external::cdm::AmendmentEffectiveDate[0..1];
  {meta::pure::profiles::doc.doc = 'The party elective amounts.'} partyElections: model::external::cdm::ElectiveAmountElection[0..2];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'A data to:  define the adjusted dates associated with an early termination provision.'} model::external::cdm::EarlyTerminationEvent
[
  FpML_ird_39: $this.adjustedExerciseDate <= $this.adjustedEarlyTerminationDate,
  FpML_ird_40: $this.adjustedExerciseDate <= $this.adjustedCashSettlementValuationDate,
  FpML_ird_41: $this.adjustedCashSettlementValuationDate <= $this.adjustedCashSettlementPaymentDate
]
{
  {meta::pure::profiles::doc.doc = 'The date on which option exercise takes place. This date should already be adjusted for any applicable business day convention.'} adjustedExerciseDate: Date[1];
  {meta::pure::profiles::doc.doc = 'The early termination date that is applicable if an early termination provision is exercised. This date should already be adjusted for any applicable business day convention.'} adjustedEarlyTerminationDate: Date[1];
  {meta::pure::profiles::doc.doc = 'The date by which the cash settlement amount must be agreed. This date should already be adjusted for any applicable business day convention.'} adjustedCashSettlementValuationDate: Date[1];
  {meta::pure::profiles::doc.doc = 'The date on which the cash settlement amount is paid. This date should already be adjusted for any applicable business date convention.'} adjustedCashSettlementPaymentDate: Date[1];
  {meta::pure::profiles::doc.doc = 'The date on which the exercise fee amount is paid. This date should already be adjusted for any applicable business day convention.'} adjustedExerciseFeePaymentDate: Date[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type for defining a date that shall be subject to adjustment if it would otherwise fall on a day that is not a business day in the specified business centers, together with the convention for adjusting the date.'} FpML::model::AdjustableDate
{
  {meta::pure::profiles::doc.doc = 'A date subject to adjustment.'} unadjustedDate: FpML::model::IdentifiedDate[0..1];
  {meta::pure::profiles::doc.doc = 'The business day convention and financial business centers used for adjusting the date if it would otherwise fall on a day that is not a business date in the specified business centers.'} dateAdjustments: FpML::model::BusinessDayAdjustments[0..1];
  {meta::pure::profiles::doc.doc = 'The date once the adjustment has been performed. (Note that this date may change if the business center holidays change).'} adjustedDate: FpML::model::IdentifiedDate[0..1];
  id: String[0..1];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'Defines each security movement of a security financing transaction.'} model::external::cdm::SecurityFinanceLeg
{
  {meta::pure::profiles::doc.doc = 'Settlement date of the security movement.'} settlementDate: model::external::cdm::AdjustableOrRelativeDate[1];
  {meta::pure::profiles::doc.doc = 'Specifies a delivery method for the security movement.'} deliveryMethod: model::external::cdm::DeliveryMethodEnum[1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the underlying obligations of the reference entity on which protection is purchased or sold through the Credit Default Swap.'} model::external::cdm::Obligations
[
  ObligationsChoice: (((($this.fullFaithAndCreditObLiability->isEmpty() && $this.generalFundObligationLiability->isEmpty()) && $this.revenueObligationLiability->isEmpty()) || (($this.fullFaithAndCreditObLiability->isNotEmpty() && $this.generalFundObligationLiability->isEmpty()) && $this.revenueObligationLiability->isEmpty())) || (($this.generalFundObligationLiability->isNotEmpty() && $this.fullFaithAndCreditObLiability->isEmpty()) && $this.revenueObligationLiability->isEmpty())) || (($this.revenueObligationLiability->isNotEmpty() && $this.fullFaithAndCreditObLiability->isEmpty()) && $this.generalFundObligationLiability->isEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'Used in both obligations and deliverable obligations to represent a class or type of securities which apply. ISDA 2003 Term: Obligation Category/Deliverable Obligation Category.'} category: model::external::cdm::ObligationCategoryEnum[1];
  {meta::pure::profiles::doc.doc = 'An obligation and deliverable obligation characteristic. An obligation that ranks at least equal with the most senior Reference Obligation in priority of payment or, if no Reference Obligation is specified in the related Confirmation, the obligations of the Reference Entity that are senior. ISDA 2003 Term: Not Subordinated.'} notSubordinated: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'An obligation and deliverable obligation characteristic. The currency or currencies in which an obligation or deliverable obligation must be payable. ISDA 2003 Term: Specified Currency.'} specifiedCurrency: model::external::cdm::SpecifiedCurrency[0..1];
  {meta::pure::profiles::doc.doc = 'An obligation and deliverable obligation characteristic. Any obligation that is not primarily (majority) owed to a Sovereign or Supranational Organisation. ISDA 2003 Term: Not Sovereign Lender.'} notSovereignLender: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'An obligation and deliverable obligation characteristic. Any obligation that is payable in any currency other than the domestic currency. Domestic currency is either the currency so specified or, if no currency is specified, the currency of (a) the reference entity, if the reference entity is a sovereign, or (b) the jurisdiction in which the relevant reference entity is organised, if the reference entity is not a sovereign. ISDA 2003 Term: Not Domestic Currency.'} notDomesticCurrency: model::external::cdm::NotDomesticCurrency[0..1];
  {meta::pure::profiles::doc.doc = 'An obligation and deliverable obligation characteristic. If the reference entity is a Sovereign, this means any obligation that is not subject to the laws of the reference entity. If the reference entity is not a sovereign, this means any obligation that is not subject to the laws of the jurisdiction of the reference entity. ISDA 2003 Term: Not Domestic Law.'} notDomesticLaw: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'An obligation and deliverable obligation characteristic. Indicates whether or not the obligation is quoted, listed or ordinarily purchased and sold on an exchange. ISDA 2003 Term: Listed.'} listed: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'An obligation and deliverable obligation characteristic. Any obligation other than an obligation that was intended to be offered for sale primarily in the domestic market of the relevant Reference Entity. This specifies that the obligation must be an internationally recognised bond. ISDA 2003 Term: Not Domestic Issuance.'} notDomesticIssuance: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'An obligation and deliverable obligation characteristic. Defined in the ISDA published additional provisions for U.S. Municipal as Reference Entity. ISDA 2003 Term: Full Faith and Credit Obligation Liability.'} fullFaithAndCreditObLiability: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'An obligation and deliverable obligation characteristic. Defined in the ISDA published additional provisions for U.S. Municipal as Reference Entity. ISDA 2003 Term: General Fund Obligation Liability.'} generalFundObligationLiability: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'An obligation and deliverable obligation characteristic. Defined in the ISDA published additional provisions for U.S. Municipal as Reference Entity. ISDA 2003 Term: Revenue Obligation Liability.'} revenueObligationLiability: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'OTE: Only allowed as an obligation characteristic under ISDA Credit 1999. In essence Not Contingent means the repayment of principal cannot be dependent on a formula/index, i.e. to prevent the risk of being delivered an instrument that may never pay any element of principal, and to ensure that the obligation is interest bearing (on a regular schedule). ISDA 2003 Term: Not Contingent.'} notContingent: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'A free format string to specify any excluded obligations or deliverable obligations, as the case may be, of the reference entity or excluded types of obligations or deliverable obligations. ISDA 2003 Term: Excluded Obligations/Excluded Deliverable Obligations.'} excluded: String[0..1];
  {meta::pure::profiles::doc.doc = 'This element is used to specify any other obligations of a reference entity in both obligations and deliverable obligations. The obligations can be specified free-form. ISDA 2003 Term: Other Obligations of a Reference Entity.'} othReferenceEntityObligations: String[0..1];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'Applies to Loan CDS, to indicate what lien level is appropriate for a deliverable obligation. Applies to European Loan CDS, to indicate the Ranking of the obligation. Example: a 2nd lien Loan CDS would imply that the deliverable obligations are 1st or 2nd lien loans.'} designatedPriority: String[0..1];
  {meta::pure::profiles::doc.doc = 'An obligation and deliverable obligation characteristic. Defined in the ISDA published Standard Terms Supplement for use with CDS Transactions on Leveraged Loans. ISDA 2003 Term: Cash Settlement Only.'} cashSettlementOnly: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'An obligation and deliverable obligation characteristic. Defined in the ISDA published Standard Terms Supplement for use with CDS Transactions on Leveraged Loans. ISDA 2003 Term: Delivery of Commitments.'} deliveryOfCommitments: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'An obligation and deliverable obligation characteristic. Defined in the ISDA published Standard Terms Supplement for use with CDS Transactions on Leveraged Loans. ISDA 2003 Term: Continuity.'} continuity: Boolean[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type defining the floating rate and definitions relating to the calculation of floating rate amounts.'} FpML::model::FloatingRateCalculation extends FpML::model::FloatingRate
{
  {meta::pure::profiles::doc.doc = 'The initial floating rate reset agreed between the principal parties involved in the trade. This is assumed to be the first required reset rate for the first regular calculation period. It should only be included when the rate is not equal to the rate published on the source implied by the floating rate index. An initial rate of 5% would be represented as 0.05. The initial floating rate reset agreed between the principal parties involved in the trade. This is assumed to be the first required reset rate for the first regular calculation period. It should only be included when the rate is not equal to the rate published on the source implied by the floating rate index. An initial rate of 5% would be represented as 0.05. - For use with pre-trade Credit Limit Check messages.'} initialRate: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'The rounding convention to apply to the final rate used in determination of a calculation period amount. The rounding convention to apply to the final rate used in determination of a calculation period amount. - For use with pre-trade Credit Limit Check messages.'} finalRateRounding: FpML::model::Rounding[0..1];
  {meta::pure::profiles::doc.doc = 'If averaging is applicable, this component specifies whether a weighted or unweighted average method of calculation is to be used. The component must only be included when averaging applies. If averaging is applicable, this component specifies whether a weighted or unweighted average method of calculation is to be used. The component must only be included when averaging applies. - For use with pre-trade Credit Limit Check messages.'} averagingMethod: FpML::model::AveragingMethodEnum[0..1];
  {meta::pure::profiles::doc.doc = 'The specification of any provisions for calculating payment obligations when a floating rate is negative (either due to a quoted negative floating rate or by operation of a spread that is subtracted from the floating rate). The specification of any provisions for calculating payment obligations when a floating rate is negative (either due to a quoted negative floating rate or by operation of a spread that is subtracted from the floating rate). - For use with pre-trade Credit Limit Check messages.'} negativeInterestRateTreatment: FpML::model::NegativeInterestRateTreatmentEnum[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class defining a content model for a calculation rule defined as percentage of the notional amount.'} model::external::cdm::PercentageRule
{
  {meta::pure::profiles::doc.doc = 'A percentage of the notional amount.'} paymentPercent: Float[1];
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'A reference to the notional amount.'} notionalAmountReference: model::external::cdm::Money[1];
}

Class {meta::pure::profiles::doc.doc = 'The observation source can be composed of an curve and/or and information source.'} model::external::cdm::ObservationSource
[
  CurveInformationSource: (($this.curve->isNotEmpty() && $this.informationSource->isNotEmpty()) || $this.curve->isNotEmpty()) || $this.informationSource->isEmpty()
]
{
  curve: model::external::cdm::Curve[0..1];
  informationSource: model::external::cdm::InformationSource[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the Custodian Event (English Law & New York Law ISDA CSA) and the Collateral Manager Event (Japanese Law ISDA CSA) in terms of applicability and end-date. ISDA 2016 English Law Credit Support Deed for Initial Margin, paragraph 13, General Principles, (n)(iii): Custodian Event. | ISDA 2016 Japanese Law Credit Support Annex for Initial Margin, paragraph 13, General Principles, (m)(ii): Collateral Manager Event. | ISDA 2016 New York Law Credit Support Annex for Initial Margin, paragraph 13, General Principles, (n)(iii): Custodian Event.'} model::external::cdm::CustodianEvent
{
  {meta::pure::profiles::doc.doc = 'The qualification as to whether the Custodian Event (English Law & New York Law ISDA CSA) or the Collateral Manager Event (Japanese Law ISDA CSA) is applicable.'} isApplicable: Boolean[1];
  {meta::pure::profiles::doc.doc = 'The qualification of the Custodian Event (English Law & New York Law ISDA CSA) or Collateral Manager Event (Japanese Law ISDA CSA) End Date.'} endDate: model::external::cdm::CustodianEventEndDate[0..1];
}

Class <<meta::pure::profiles::typemodifiers.abstract>> {meta::pure::profiles::doc.doc = 'Abstract base class for all underlying assets.'} FpML::model::Asset
{
  id: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Defines parameters for use in cases when a valuation or other term is based on an average of market observations.'} model::external::cdm::AveragingCalculation
{
  {meta::pure::profiles::doc.doc = 'Specifies enumerations for the type of averaging calculation.'} calculationMethod: model::external::cdm::AveragingCalculationMethodEnum[1];
  {meta::pure::profiles::doc.doc = 'Rounding applied to the average calculation.'} precision: model::external::cdm::Rounding[1];
}

Class {meta::pure::profiles::doc.doc = 'Contains collateral attributes which can also inherit information from a master agreement.'} model::external::cdm::CollateralProvisions
{
  {meta::pure::profiles::doc.doc = 'Cash or NonCash collateral'} collateralType: model::external::cdm::CollateralTypeEnum[1];
  {meta::pure::profiles::doc.doc = 'Specification of the valuation treatment for the specified collateral.'} marginPercentage: model::external::cdm::CollateralValuationTreatment[0..1];
  {meta::pure::profiles::doc.doc = 'The eligible collateral as specified in relation to the transaction.'} eligibleCollateral: model::external::cdm::EligibleCollateralSchedule[*];
}

Class {meta::pure::profiles::doc.doc = 'A class describing a set of dates defined as relative to another set of dates.'} model::external::cdm::RelativeDates extends model::external::cdm::RelativeDateOffset
[
  PeriodSkipGreaterThanOne: if($this.periodSkip->isNotEmpty(), |$this.periodSkip > 1, |true)
]
{
  {meta::pure::profiles::doc.doc = 'The number of periods in the referenced date schedule that are between each date in the relative date schedule. Thus a skip of 2 would mean that dates are relative to every second date in the referenced schedule. If present this should have a value greater than 1.'} periodSkip: Integer[0..1];
  {meta::pure::profiles::doc.doc = 'The first and last dates of a schedule. This can be used to restrict the range of values in a reference series of dates.'} scheduleBounds: model::external::cdm::DateRange[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Defines parameters for use in cases when a valuation or other term is based on an average of market observations.'} model::external::cdm::AveragingObservation
{
  {meta::pure::profiles::doc.doc = 'Specifies enumerations for the type of averaging calculation.'} calculationMethod: model::external::cdm::AveragingCalculationMethodEnum[1];
  {meta::pure::profiles::doc.doc = 'Specifies details of any rounding applied when averaging market observations.'} precision: model::external::cdm::Rounding[1];
  {meta::pure::profiles::doc.doc = 'Specifies the time details at which a market observation will take place.'} observationTime: model::external::cdm::BusinessCenterTime[1];
  {meta::pure::profiles::doc.doc = 'Specifies the date details at which a market observation will take place.'} observationDates: model::external::cdm::ObservationDates[1];
  {meta::pure::profiles::doc.doc = 'Defines foreign exchange (FX) asset class specific parameters.'} fxRateObservable: model::external::cdm::FxRateObservable[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the frequency at which calculation period end dates occur within the regular part of the calculation period schedule and their roll date convention.'} model::external::cdm::CalculationPeriodFrequency extends model::external::cdm::Frequency
[
  FpML_ird_57: if($this.period->in([model::external::cdm::PeriodExtendedEnum.M, model::external::cdm::PeriodExtendedEnum.Y]), |!($this.rollConvention->in([model::external::cdm::RollConventionEnum.NONE, model::external::cdm::RollConventionEnum.SFE, model::external::cdm::RollConventionEnum.MON, model::external::cdm::RollConventionEnum.TUE, model::external::cdm::RollConventionEnum.WED, model::external::cdm::RollConventionEnum.THU, model::external::cdm::RollConventionEnum.FRI, model::external::cdm::RollConventionEnum.SAT, model::external::cdm::RollConventionEnum.SUN])), |true),
  FpML_ird_58: if($this.period == model::external::cdm::PeriodExtendedEnum.W, |$this.rollConvention->in([model::external::cdm::RollConventionEnum.NONE, model::external::cdm::RollConventionEnum.SFE, model::external::cdm::RollConventionEnum.MON, model::external::cdm::RollConventionEnum.TUE, model::external::cdm::RollConventionEnum.WED, model::external::cdm::RollConventionEnum.THU, model::external::cdm::RollConventionEnum.FRI, model::external::cdm::RollConventionEnum.SAT, model::external::cdm::RollConventionEnum.SUN]), |true),
  FpML_ird_60: if($this.period == model::external::cdm::PeriodExtendedEnum.T, |$this.rollConvention == model::external::cdm::RollConventionEnum.NONE, |true)
]
{
  {meta::pure::profiles::doc.doc = 'The roll convention specifies the period term as part of a periodic schedule, i.e. the calculation period end date within the regular part of the calculation period. The value could be a rule, e.g. IMM Settlement Dates, which is the 3rd Wednesday of the month, or it could be a specific day of the month, such as the first day of the applicable month. It is used in conjunction with a frequency and the regular period start date of a calculation period.'} rollConvention: model::external::cdm::RollConventionEnum[1];
  {meta::pure::profiles::doc.doc = 'Indicates, when true, that that the first Calculation Period should run from the Effective Date to the end of the calendar period in which the Effective Date falls, e.g. Jan 15 - Jan 31 if the calculation periods are one month long and Effective Date is Jan 15. If false, the first Calculation Period should run from the Effective Date for one whole period, e.g. Jan 15 to Feb 14 if the calculation periods are one month long and Effective Date is Jan 15. Mostly used in Commmodity Swaps.'} balanceOfFirstPeriod: Boolean[0..1];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'A class defining the Bermuda option exercise dates and the expiration date together with any rules governing the notional amount of the underlying which can be exercised on any given exercise date and any associated exercise fee.'} model::external::cdm::BermudaExercise
{
  {meta::pure::profiles::doc.doc = 'The dates that define the Bermuda option exercise dates and the expiration date. The last specified date is assumed to be the expiration date. The dates can either be specified as a series of explicit dates and associated adjustments or as a series of dates defined relative to another schedule of dates, for example, the calculation period start dates. Where a relative series of dates are defined the first and last possible exercise dates can be separately specified.'} bermudaExerciseDates: model::external::cdm::AdjustableOrRelativeDates[1];
  {meta::pure::profiles::doc.doc = 'The effective date on the underlying product if the option is exercised.  For example, for a swaption it is the swap effective date, for an option on an FX spot or forward it is the value date for settlement, and in an extendible/cancelable provision it is the swap termination date, which is the date on which the termination is effective.'} relevantUnderlyingDate: model::external::cdm::AdjustableOrRelativeDates[0..1];
  {meta::pure::profiles::doc.doc = 'The earliest time at which notice of exercise can be given by the buyer to the seller (or seller\'s agent) on each Bermuda option exercise date and the expiration date.'} earliestExerciseTime: model::external::cdm::BusinessCenterTime[1];
  {meta::pure::profiles::doc.doc = 'For a Bermuda or American style option, the latest time on an exercise business day (excluding the expiration date) within the exercise period that notice can be given by the buyer to the seller or seller\'s agent. Notice of exercise given after this time will be deemed to have been given on the next exercise business day.'} latestExerciseTime: model::external::cdm::BusinessCenterTime[0..1];
  {meta::pure::profiles::doc.doc = 'The latest time for exercise on expirationDate.'} expirationTime: model::external::cdm::BusinessCenterTime[1];
  {meta::pure::profiles::doc.doc = 'As defined in the 2000 ISDA Definitions, Section 12.4. Multiple Exercise, the buyer of the option has the right to exercise all or less than all the unexercised notional amount of the underlying swap on one or more days in the exercise period, but on any such day may not exercise less than the minimum notional amount or more that the maximum notional amount, and if an integral multiple amount is specified, the notional amount exercised must be equal to, or be an integral multiple of, the integral multiple amount.'} multipleExercise: model::external::cdm::MultipleExercise[0..1];
  {meta::pure::profiles::doc.doc = 'The fees associated with an exercise date. The fees are conditional on the exercise occurring. The fees can be specified as actual currency amounts or as percentages of the notional amount being exercised.'} exerciseFeeSchedule: model::external::cdm::ExerciseFeeSchedule[0..1];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'A class defining the exercise period for a European style option together with any rules governing the notional amount of the underlying which can be exercised on any given exercise date and any associated exercise fees.'} model::external::cdm::EuropeanExercise
{
  {meta::pure::profiles::doc.doc = 'The last day within an exercise period for an American style option. For a European style option it is the only day within the exercise period.'} expirationDate: model::external::cdm::AdjustableOrRelativeDate[1..*];
  {meta::pure::profiles::doc.doc = 'The effective date on the underlying product if the option is exercised.  For example, for a swaption it is the swap effective date, for an option on an FX spot or forward it is the value date for settlement, and in an extendible/cancelable provision it is the swap termination date, which is the date on which the termination is effective.'} relevantUnderlyingDate: model::external::cdm::AdjustableOrRelativeDates[0..1];
  {meta::pure::profiles::doc.doc = 'The earliest time at which notice of exercise can be given by the buyer to the seller (or seller\'s agent) on the expiration date.'} earliestExerciseTime: model::external::cdm::BusinessCenterTime[0..1];
  {meta::pure::profiles::doc.doc = 'The latest time for exercise on expirationDate.'} expirationTime: model::external::cdm::BusinessCenterTime[1];
  {meta::pure::profiles::doc.doc = 'As defined in the 2000 ISDA Definitions, Section 12.3. Partial Exercise, the buyer of the option has the right to exercise all or less than all the notional amount of the underlying swap on the expiration date, but may not exercise less than the minimum notional amount, and if an integral multiple amount is specified, the notional amount exercised must be equal to, or be an integral multiple of, the integral multiple amount.'} partialExercise: model::external::cdm::PartialExercise[0..1];
  {meta::pure::profiles::doc.doc = 'A fee to be paid on exercise. This could be represented as an amount or a rate and notional reference on which to apply the rate.'} exerciseFee: model::external::cdm::ExerciseFee[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Defines payout terms relevent where the underlier is an asset (e.g. equities, commodities) or a referenced benchmark that is observed to obtain a price'} model::external::cdm::ObservationPayout extends model::external::cdm::PayoutBase
{
  {meta::pure::profiles::doc.doc = 'Defines the calculation period dates schedule.'} calculationPeriodDates: model::external::cdm::CalculationPeriodDates[0..1];
  {meta::pure::profiles::doc.doc = 'Defines the payment date schedule, as defined by the parameters that are needed to specify it, either in a parametric way or by reference to another schedule of dates (e.g. the valuation dates).'} paymentDates: model::external::cdm::PaymentDates[1];
  {meta::pure::profiles::doc.doc = 'Identifies the underlying product that is referenced for pricing of the applicable leg in a swap.  Referenced in the \'2018 ISDA CDM Equity Confirmation for Security Equity Swap\' as Security.'} underlier: model::external::cdm::Product[1];
  {meta::pure::profiles::doc.doc = 'Defines quanto or composite FX features that are included in the swap leg.'} fxFeature: model::external::cdm::FxFeature[0..1];
}

Class FpML::model::AdjustableRelativeOrPeriodicDates
[
  c1_choice: ($this.adjustableDates->isNotEmpty() && ($this.relativeDates->isEmpty() && ($this.relativeDateSequence->isEmpty() && $this.periodicDates->isEmpty()))) || (($this.adjustableDates->isEmpty() && ($this.relativeDates->isNotEmpty() && ($this.relativeDateSequence->isEmpty() && $this.periodicDates->isEmpty()))) || (($this.adjustableDates->isEmpty() && ($this.relativeDates->isEmpty() && ($this.relativeDateSequence->isNotEmpty() && $this.periodicDates->isEmpty()))) || ($this.adjustableDates->isEmpty() && ($this.relativeDates->isEmpty() && ($this.relativeDateSequence->isEmpty() && $this.periodicDates->isNotEmpty())))))
]
{
  {meta::pure::profiles::doc.doc = 'A series of dates that shall be subject to adjustment if they would otherwise fall on a day that is not a business day in the specified business centers, together with the convention for adjusting the date.'} adjustableDates: FpML::model::AdjustableDates[0..1];
  {meta::pure::profiles::doc.doc = 'A series of dates specified as some offset to another series of dates (the anchor dates). This element is provided to maintain consistency with prior Transparency view models of valuationDates and should not be used for other purposes.'} relativeDates: FpML::model::RelativeDates[0..1];
  {meta::pure::profiles::doc.doc = 'A series of dates specified as some offset to other dates (the anchor dates) which can'} relativeDateSequence: FpML::model::RelativeDateSequence[0..1];
  periodicDates: FpML::model::PeriodicDates[0..1];
  id: String[0..1];
}

Class FpML::model::CommodityDetails
[
  c1_length: $this.commodityDetailsScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  commodityDetailsScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'Adds an optional spread type element to the Schedule to identify a long or short spread value.'} FpML::model::SpreadSchedule extends FpML::model::Schedule
{
  type: FpML::model::SpreadScheduleType[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A Portfolio represents an aggregation of multiple Positions, by describing the parameters that this Portfolio should be aggregated based on. The resulting PortfolioState is calculated using these aggregation parameters as inputs, by aggregating all the Events that are relevant to this Portfolio. The concept of Portfolio works at all levels in the model: from the highest for a given LegalEntity for instance, to the lowest to account for security substitutions in a secutity financing transaction. As such, Portfolio can be used either above or below the Contract level.'} model::external::cdm::Portfolio
{
  {meta::pure::profiles::doc.doc = 'Describes the portfolio by describing how to aggregate all its relevant Events.'} aggregationParameters: model::external::cdm::AggregationParameters[1];
  {meta::pure::profiles::doc.doc = 'Describes the state of the Portfolio as a list of Positions resulting from the aggregation.'} portfolioState: model::external::cdm::PortfolioState[1];
}

Class {meta::pure::profiles::doc.doc = 'TBA'} FpML::model::SharedAmericanExercise extends FpML::model::Exercise
{
  {meta::pure::profiles::doc.doc = 'The first day of the exercise period for an American style option.'} commencementDate: FpML::model::AdjustableOrRelativeDate[0..1];
  {meta::pure::profiles::doc.doc = 'The last day within an exercise period for an American style option. For a European style option it is the only day within the exercise period.'} expirationDate: FpML::model::AdjustableOrRelativeDate[0..1];
  {meta::pure::profiles::doc.doc = 'For a Bermuda or American style option, the latest time on an exercise business day (excluding the expiration date) within the exercise period that notice can be given by the buyer to the seller or seller\'s agent. Notice of exercise given after this time will be deemed to have been given on the next exercise business day.'} latestExerciseTime: FpML::model::BusinessCenterTime[0..1];
  {meta::pure::profiles::doc.doc = 'Latest exercise time determination method.'} latestExerciseTimeDetermination: FpML::model::DeterminationMethod[0..1];
}

Class {meta::pure::profiles::doc.doc = 'The code representation of a currency or fund. By default it is a valid currency code as defined by the ISO standard 4217 - Codes for representation of currencies and funds http://www.iso.org/iso/en/prods-services/popstds/currencycodeslist.html.'} FpML::model::Currency
[
  c1_length: $this.currencyScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  currencyScheme: String[0..1];
  value: String[1];
}

Class model::external::cdm::Document
{
  finInstrmRptgTxRpt: model::external::cdm::FinInstrmRptgTxRpt[1];
}

Class {meta::pure::profiles::doc.doc = 'A type that represents the choice of methods for settling a potential currency payment resulting from a trade: by means of a standard settlement instruction, by netting it out with other payments, or with an explicit settlement instruction.'} FpML::model::SettlementInformation
[
  c1_choice: ($this.standardSettlementStyle->isNotEmpty() && $this.settlementInstruction->isEmpty()) || ($this.standardSettlementStyle->isEmpty() && $this.settlementInstruction->isNotEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'An optional element used to describe how a trade will settle. This defines a scheme and is used for identifying trades that are identified as settling standard and/or flagged for settlement netting.'} standardSettlementStyle: FpML::model::StandardSettlementStyleEnum[0..1];
  {meta::pure::profiles::doc.doc = 'An explicit specification of how a currency payment is to be made, when the payment is not netted and the route is other than the recipient\'s standard settlement instruction.'} settlementInstruction: FpML::model::SettlementInstruction[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to define a fee or schedule of fees to be payable on the exercise of an option. This fee may be defined as an amount or a percentage of the notional exercised. As a difference with FpML, it extends the BuyerSeller class.'} model::external::cdm::ExerciseFeeSchedule extends model::external::cdm::PayerReceiver
{
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'A pointer style reference to the associated notional schedule defined elsewhere in the document.'} notionalReference: model::external::cdm::Money[1];
  {meta::pure::profiles::doc.doc = 'The exercise fee amount schedule. The fees are expressed as currency amounts. The currency of the fee is assumed to be that of the notional schedule referenced.'} feeAmountSchedule: model::external::cdm::AmountSchedule[0..1];
  {meta::pure::profiles::doc.doc = 'The exercise free rate schedule. The fees are expressed as percentage rates of the notional being exercised. The currency of the fee is assumed to be that of the notional schedule referenced.'} feeRateSchedule: model::external::cdm::Schedule[0..1];
  {meta::pure::profiles::doc.doc = 'The date on which exercise fee(s) will be paid. It is specified as a relative date.'} feePaymentDate: model::external::cdm::RelativeDateOffset[1];
}

Class {meta::pure::profiles::doc.doc = 'A type describing the type of loan facility.'} FpML::model::FacilityType
[
  c1_length: $this.facilityTypeScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  facilityTypeScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify amount of exposure reached before collateral has to be posted or returned. ISDA 2016 English Law Credit Support Deed for Initial Margin, paragraph 13, General Principles, (c)(vi)(B): Minimum Transfer Amount. | ISDA 2016 Japanese Law Credit Support Annex for Initial Margin, paragraph 13, General Principles, (d)(vi)(B): Minimum Transfer Amount. | ISDA 2016 New York Law Credit Support Annex for Initial Margin, paragraph 13, General Principles, (c)(vi)(B): Minimum Transfer Amount.'} model::external::cdm::MinimumTransferAmount
{
  {meta::pure::profiles::doc.doc = 'The parties\' minimum transfer amount elections.'} partyElection: model::external::cdm::ElectiveAmountElection[2];
}

Class FpML::model::IndexName
[
  c1_length: $this.indexNameScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() >= 1,
  c3_length: $this.value->length() <= 255
]
{
  indexNameScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the Relevant Settled Entity Matrix.'} model::external::cdm::SettledEntityMatrix
{
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'Relevant settled entity matrix source.'} matrixSource: model::external::cdm::SettledEntityMatrixSourceEnum[1];
  {meta::pure::profiles::doc.doc = 'Specifies the publication date of the applicable version of the matrix. When this element is omitted, the Standard Terms Supplement defines rules for which version of the matrix is applicable.'} publicationDate: Date[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Parameters on daily observed computed rates, specifically daily caps and floors. This type is used to represent modular computed rates in interestRatePayouts.'} model::external::cdm::ObservationParameters
{
  {meta::pure::profiles::doc.doc = 'A daily observation cap rate.'} observationCapRate: Float[0..1];
  {meta::pure::profiles::doc.doc = 'A daily observation floor rate.'} observationFloorRate: Float[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Class to represent a single pass through payment.'} model::external::cdm::PassThroughItem
{
  {meta::pure::profiles::doc.doc = 'This attribute doesn\'t exists in the FpML construct, which makes use of the PayerReceiver.model group.'} payerReceiver: model::external::cdm::PayerReceiver[1];
  {meta::pure::profiles::doc.doc = 'Percentage of payments from the underlier which are passed through.'} passThroughPercentage: Float[1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify an equity as having a product identifier. As a difference versus the FpML standard, the CDM structure of this class only includes the productIdentifier class, which consists of an identifier, productTaxonomy, and source of the identifier. The reason for this approach is to avoid the potential for conflicting information between the information associated with the contractual product and the reference information maintained by the relevant service provider.'} model::external::cdm::Equity extends model::external::cdm::IdentifiedProduct
{
}

Class {meta::pure::profiles::doc.doc = 'Represents a criteria used to specify eligible collateral issuers.'} model::external::cdm::IssuerCriteria
{
  {meta::pure::profiles::doc.doc = 'Represents a filter based on the type of entity issuing the asset.'} issuerType: model::external::cdm::CollateralIssuerType[*];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'Represents a filter based on the issuing entity country of origin, which is the same as filtering by eligible Sovereigns.'} issuerCountryOfOrigin: String[*];
  {meta::pure::profiles::doc.doc = 'Specifies the issuing entity name or LEI.'} issuerName: model::external::cdm::LegalEntity[*];
  {meta::pure::profiles::doc.doc = 'Represents an agency rating based on default risk and creditors claim in event of default associated with asset issuer.'} issuerAgencyRating: model::external::cdm::AgencyRatingCriteria[*];
  {meta::pure::profiles::doc.doc = 'Represents an agency rating based on default risk of the country of the issuer.'} sovereignAgencyRating: model::external::cdm::AgencyRatingCriteria[*];
  {meta::pure::profiles::doc.doc = 'Represents a filter based on whether it is permitted for the underlying asset to be issued by the posting entity or part of their corporate family.'} counterpartyOwnIssuePermitted: Boolean[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify loan with a participation agreement whereby the buyer is capable of creating, or procuring the creation of, a contractual right in favour of the seller that provides the seller with recourse to the participation seller for a specified share in any payments due under the relevant loan which are received by the participation seller. ISDA 2003 Term: Direct Loan Participation.'} model::external::cdm::LoanParticipation extends model::external::cdm::PCDeliverableObligationCharac
{
  {meta::pure::profiles::doc.doc = 'If Direct Loan Participation is specified as a deliverable obligation characteristic, this specifies any requirements for the Qualifying Participation Seller. The requirements may be listed free-form. ISDA 2003 Term: Qualifying Participation Seller.'} qualifyingParticipationSeller: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Class to specify a quantity as a non-negative number, which condition is enforced through a data rule that only applies to the extending class.'} model::external::cdm::NonNegativeQuantity extends model::external::cdm::Quantity
[
  NonNegativeQuantity_amount: $this.amount >= 0.0
]
{
}

Class {meta::pure::profiles::doc.doc = 'A type defining a rounding direction and precision to be used in the rounding of a rate.'} FpML::model::Rounding
{
  {meta::pure::profiles::doc.doc = 'Specifies the rounding direction.'} roundingDirection: FpML::model::RoundingDirectionEnum[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the rounding precision in terms of a number of decimal places. Note how a percentage rate rounding of 5 decimal places is expressed as a rounding precision of 7 in the FpML document since the percentage is expressed as a decimal, e.g. 9.876543% (or 0.09876543) being rounded to the nearest 5 decimal places is 9.87654% (or 0.0987654).'} precision: Decimal[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Bond equity model to value convertible bonds and modelled onto BondEquity.model in FpML.'} model::external::cdm::BondEquityModel
[
  one_of_constraint: ($this.bondchoiceModel->isNotEmpty() && $this.equity->isEmpty()) || ($this.equity->isNotEmpty() && $this.bondchoiceModel->isEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'Either the bond or convertible bond.'} bondchoiceModel: model::external::cdm::BondChoiceModel[0..1];
  {meta::pure::profiles::doc.doc = 'The equity.'} equity: model::external::cdm::Equity[0..1];
}

Class <<meta::pure::profiles::typemodifiers.abstract>> {meta::pure::profiles::doc.doc = 'An abstract base class for all directional leg types with effective date, termination date, where a payer makes a stream of payments of greater than zero value to a receiver.'} FpML::model::DirectionalLeg extends FpML::model::Leg
{
  {meta::pure::profiles::doc.doc = 'Version aware identification of this leg.'} legIdentifier: FpML::model::LegIdentifier[*];
  {meta::pure::profiles::doc.doc = 'A reference to the party responsible for making the payments defined by this structure.'} payerPartyReference: FpML::model::PartyReference[0..1];
  {meta::pure::profiles::doc.doc = 'A reference to the account responsible for making the payments defined by this structure.'} payerAccountReference: FpML::model::AccountReference[0..1];
  {meta::pure::profiles::doc.doc = 'A reference to the party that receives the payments corresponding to this structure.'} receiverPartyReference: FpML::model::PartyReference[0..1];
  {meta::pure::profiles::doc.doc = 'A reference to the account that receives the payments corresponding to this structure.'} receiverAccountReference: FpML::model::AccountReference[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the effective date of this leg of the swap. When defined in relation to a date specified somewhere else in the document (through the relativeDate component), this element will typically point to the effective date of the other leg of the swap.'} effectiveDate: FpML::model::AdjustableOrRelativeDate[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the termination date of this leg of the swap. When defined in relation to a date specified somewhere else in the document (through the relativeDate component), this element will typically point to the termination date of the other leg of the swap.'} terminationDate: FpML::model::AdjustableOrRelativeDate[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify a telephone number as a type of phone number (e.g. work, personal, ...) alongside with the actual number.'} model::external::cdm::TelephoneNumber
{
  {meta::pure::profiles::doc.doc = 'The type of telephone number, e.g. work, mobile.'} telephoneNumberType: model::external::cdm::TelephoneTypeEnum[0..1];
  {meta::pure::profiles::doc.doc = 'The actual telephone number.'} number: String[1];
}

Class {meta::pure::profiles::doc.doc = 'A type defining how a stub calculation period amount is calculated and the start and end date of the stub. A single floating rate tenor different to that used for the regular part of the calculation periods schedule may be specified, or two floating rate tenors many be specified. If two floating rate tenors are specified then Linear Interpolation (in accordance with the 2000 ISDA Definitions, Section 8.3 Interpolation) is assumed to apply. Alternatively, an actual known stub rate or stub amount may be specified.'} FpML::model::Stub extends FpML::model::StubValue
{
  {meta::pure::profiles::doc.doc = 'Start date of stub period. This was created to support use of the InterestRateStream within the Equity Derivative sphere, and this element is not expected to be produced in the representation of Interest Rate products.'} stubStartDate: FpML::model::AdjustableOrRelativeDate[0..1];
  {meta::pure::profiles::doc.doc = 'End date of stub period. This was created to support use of the InterestRateStream within the Equity Derivative sphere, and this element is not expected to be produced in the representation of Interest Rate products.'} stubEndDate: FpML::model::AdjustableOrRelativeDate[0..1];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'A class defining which principal exchanges occur for the stream.'} model::external::cdm::PrincipalExchanges
{
  {meta::pure::profiles::doc.doc = 'A true/false flag to indicate whether there is an initial exchange of principal on the effective date.'} initialExchange: Boolean[1];
  {meta::pure::profiles::doc.doc = 'A true/false flag to indicate whether there is a final exchange of principal on the termination date.'} finalExchange: Boolean[1];
  {meta::pure::profiles::doc.doc = 'A true/false flag to indicate whether there are intermediate or interim exchanges of principal during the term of the swap.'} intermediateExchange: Boolean[1];
}

Class {meta::pure::profiles::doc.doc = 'Specifies the instructions for creation of a Security Lending billing invoice.'} model::external::cdm::BillingInstruction
{
  {meta::pure::profiles::doc.doc = 'The party issuing the invoice'} sendingParty: model::external::cdm::Party[1];
  {meta::pure::profiles::doc.doc = 'The party receiving the invoice'} receivingParty: model::external::cdm::Party[1];
  {meta::pure::profiles::doc.doc = 'The starting date of the period described by this invoice'} billingStartDate: Date[1];
  {meta::pure::profiles::doc.doc = 'The ending date of the period described by this invoice'} billingEndDate: Date[1];
  {meta::pure::profiles::doc.doc = 'Instructions for creating the billing records contained within the invoice'} billingRecordInstruction: model::external::cdm::BillingRecordInstruction[1..*];
  {meta::pure::profiles::doc.doc = 'The billing summaries contained within the invoice'} billingSummary: model::external::cdm::BillingSummaryInstruction[*];
}

Class {meta::pure::profiles::doc.doc = 'A type used to record information about a unit, subdivision, desk, or other similar business entity.'} FpML::model::Unit
[
  c1_length: $this.unitScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  unitScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'A class for defining the merger events and their treatment.'} model::external::cdm::EquityCorporateEvents
{
  {meta::pure::profiles::doc.doc = '2018 ISDA CDM Equity Confirmation for Security Equity Swap: Merger Event (S-F-S) shall occur if a Merger Event occurs and the consideration for the relevant Security consists solely of Combined Consideration. | The consideration paid for the original shares following the Merger Event consists wholly of new shares.'} shareForShare: model::external::cdm::ShareExtraordinaryEventEnum[1];
  {meta::pure::profiles::doc.doc = '2018 ISDA CDM Equity Confirmation for Security Equity Swap: Merger Event (S-F-O) shall occur if a Merger Event occurs and the consideration for the relevant Security consists solely of Other Consideration. | The consideration paid for the original shares following the Merger Event consists wholly of cash/securities other than new shares.'} shareForOther: model::external::cdm::ShareExtraordinaryEventEnum[1];
  {meta::pure::profiles::doc.doc = '2018 ISDA CDM Equity Confirmation for Security Equity Swap: Merger Event (S-F-C) shall occur if a Merger Event occurs and the consideration for the relevant Security consists solely of Combined Consideration. | The consideration paid for the original shares following the Merger Event consists of both cash/securities and new shares.'} shareForCombined: model::external::cdm::ShareExtraordinaryEventEnum[1];
}

Class {meta::pure::profiles::doc.doc = 'As per ISDA 2002 Definitions.'} FpML::model::Barrier
{
  {meta::pure::profiles::doc.doc = 'A trigger level approached from beneath.'} barrierCap: FpML::model::TriggerEvent[0..1];
  {meta::pure::profiles::doc.doc = 'A trigger level approached from above.'} barrierFloor: FpML::model::TriggerEvent[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type defining the frequency at which calculation period end dates occur within the regular part of the calculation period schedule and thier roll date convention. In case the calculation frequency is of value T (term), the period is defined by the swapswapStreamcalculationPerioDateseffectiveDate and the swapswapStreamcalculationPerioDates\terminationDate.'} FpML::model::ObservationFrequency extends FpML::model::Period
{
  {meta::pure::profiles::doc.doc = 'Used in conjunction with a frequency and the regular period start date of an observation period, determines each observation period end date within the regular part of a observation period schedule.'} periodConvention: FpML::model::RollConventionEnum[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class describing the date on which the dividend will be paid/received. This class is also used to specify the date on which the FX rate will be determined, when applicable.'} model::external::cdm::DividendPaymentDate
[
  one_of_constraint: ($this.dividendDateReference->isNotEmpty() && $this.adjustableDate->isEmpty()) || ($this.adjustableDate->isNotEmpty() && $this.dividendDateReference->isEmpty())
]
{
  dividendDateReference: model::external::cdm::DividendDateReference[0..1];
  adjustableDate: model::external::cdm::AdjustableDate[0..1];
}

Class FpML::model::SinglePayment extends FpML::model::PaymentBase
{
  {meta::pure::profiles::doc.doc = 'A fixed amount payment date that shall be subject to adjustment in accordance with the applicable business day convention if it would otherwise fall on a day that is not a business day. The applicable business day convention and business day are those specified in the dateAdjustments element within the generalTerms component. ISDA 2003 Term: Fixed Rate Payer Payment Date'} adjustablePaymentDate: StrictDate[0..1];
  {meta::pure::profiles::doc.doc = 'The adjusted payment date. This date should already be adjusted for any applicable business day convention. This component is not intended for use in trade confirmation but may be specified to allow the fee structure to also serve as a cashflow type component.'} adjustedPaymentDate: StrictDate[0..1];
  {meta::pure::profiles::doc.doc = 'A fixed payment amount. ISDA 2003 Term: Fixed Amount'} fixedAmount: FpML::model::Money[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Specifies the information required to create the return of a Security Finance Transaction.'} model::external::cdm::ReturnInstruction
{
  {meta::pure::profiles::doc.doc = 'Specifies the quantity of shares and cash to be returned in a partial return event.'} quantity: model::external::cdm::Quantity[1..*];
}

Class {meta::pure::profiles::doc.doc = 'The code representation of a country or an area of special sovereignty. By default it is a valid 2 character country code as defined by the ISO standard 3166-1 alpha-2 - Codes for representation of countries http://www.niso.org/standards/resources/3166.html.'} FpML::model::CountryCode
[
  c1_length: $this.countryScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() >= 0
]
{
  countryScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the application of Interest Amount with respect to the Delivery Amount and the Return Amount. ISDA 2016 Japanese Law Credit Support Annex for Initial Margin, paragraph 13, General Principles, (n)(ii).'} model::external::cdm::InterestAmount
{
  {meta::pure::profiles::doc.doc = 'The application of Interest Amount with respect the Return Amount. ISDA 2016 Japanese Law Credit Support Annex for Initial Margin, paragraph 13, General Principles, (n)(ii).'} returnAmount: model::external::cdm::ReturnAmount[1];
  {meta::pure::profiles::doc.doc = 'The application of Interest Amount with respect the Delivery Amount. ISDA 2016 Japanese Law Credit Support Annex for Initial Margin, paragraph 13, General Principles, (n)(ii).'} deliveryAmount: model::external::cdm::DeliveryAmount[1];
}

Class {meta::pure::profiles::doc.doc = 'A type that models a complete instruction for settling a currency payment, including the settlement method to be used, the correspondent bank, any intermediary banks and the ultimate beneficary.'} FpML::model::SettlementInstruction
{
  {meta::pure::profiles::doc.doc = 'The mechanism by which settlement is to be made. The scheme of domain values will include standard mechanisms such as CLS, Fedwire, Chips ABA, Chips UID, SWIFT, CHAPS and DDA.'} settlementMethod: FpML::model::SettlementMethod[0..1];
  {meta::pure::profiles::doc.doc = 'The information required to identify the correspondent bank that will make delivery of the funds on the paying bank\'s behalf in the country where the payment is to be made'} correspondentInformation: FpML::model::CorrespondentInformation[0..1];
  {meta::pure::profiles::doc.doc = 'Information to identify an intermediary through which payment will be made by the correspondent bank to the ultimate beneficiary of the funds.'} intermediaryInformation: FpML::model::IntermediaryInformation[*];
  {meta::pure::profiles::doc.doc = 'The bank that acts for the ultimate beneficiary of the funds in receiving payments.'} beneficiaryBank: FpML::model::Beneficiary[0..1];
  {meta::pure::profiles::doc.doc = 'The ultimate beneficiary of the funds. The beneficiary can be identified either by an account at the beneficiaryBank (qv) or by explicit routingInformation. This element provides for the latter.'} beneficiary: FpML::model::Beneficiary[0..1];
  {meta::pure::profiles::doc.doc = 'Reference to the depository of the settlement.'} depositoryPartyReference: FpML::model::PartyReference[0..1];
  {meta::pure::profiles::doc.doc = 'The set of individual payments that are to be made when a currency payment settling a trade needs to be split between a number of ultimate beneficiaries. Each split payment may need to have its own routing information.'} splitSettlement: FpML::model::SplitSettlement[*];
}

Class {meta::pure::profiles::doc.doc = 'Legal agreement specification for General Terms and Elections that are applicable across multiple confirmations and are referenced by these confirmations.'} model::external::cdm::MasterConfirmationBase
{
}

Class {meta::pure::profiles::doc.doc = 'Specifies the information required to create the termination event of a trade.'} model::external::cdm::TerminationInstruction
{
  {meta::pure::profiles::doc.doc = 'Specifies the quantities of the transaction as a result of the partial or full termination event, including the fee agreed to be exchanged as part of the trade termination (optional).'} terminatedPriceQuantity: model::external::cdm::PriceQuantity[1..*];
  {meta::pure::profiles::doc.doc = 'Date of partial or full termination'} terminationDate: Date[1];
}

Class {meta::pure::profiles::doc.doc = 'Type which contains pass through payments.'} FpML::model::PassThrough
{
  {meta::pure::profiles::doc.doc = 'One to many pass through payment items.'} passThroughItem: FpML::model::PassThroughItem[*];
}

Class {meta::pure::profiles::doc.doc = 'A type defining the source for a piece of information (e.g. a rate refix or an fx fixing).'} FpML::model::InformationSource
[
  c1_length: $this.rateSourcePageHeading->forAll(x: String[1]|$x->length() >= 1)
]
{
  {meta::pure::profiles::doc.doc = 'An information source for obtaining a market rate. For example Bloomberg, Reuters, Telerate etc.'} rateSource: FpML::model::InformationProvider[0..1];
  {meta::pure::profiles::doc.doc = 'A specific page for the rate source for obtaining a market rate.'} rateSourcePage: FpML::model::RateSourcePage[0..1];
  {meta::pure::profiles::doc.doc = 'The heading for the rate source on a given rate source page.'} rateSourcePageHeading: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'An entity for defining the an agreement executed between parties.'} FpML::model::OtherAgreement
{
  {meta::pure::profiles::doc.doc = 'An identifier that has been created to identify the agreement.'} identifier: FpML::model::OtherAgreementId[*];
  {meta::pure::profiles::doc.doc = 'The agreement executed between the parties and intended to govern product-specific derivatives transactions between those parties.'} type: FpML::model::OtherAgreementType[0..1];
  {meta::pure::profiles::doc.doc = 'The version of the agreement.'} version: FpML::model::OtherAgreementVersion[0..1];
  {meta::pure::profiles::doc.doc = 'The date on which the agreement was signed.'} date: StrictDate[0..1];
}

Class model::external::cdm::Restructuring
{
  {meta::pure::profiles::doc.doc = 'Indicates whether the restructuring provision is applicable.'} applicable: Boolean[1];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'Specifies the type of restructuring that is applicable.'} restructuringType: model::external::cdm::RestructuringEnum[0..1];
  {meta::pure::profiles::doc.doc = 'In relation to a restructuring credit event, unless multiple holder obligation is not specified restructurings are limited to multiple holder obligations. A multiple holder obligation means an obligation that is held by more than three holders that are not affiliates of each other and where at least two thirds of the holders must agree to the event that constitutes the restructuring credit event. ISDA 2003 Term: Multiple Holder Obligation.'} multipleHolderObligation: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'Presence of this element and value set to \'true\' indicates that Section 3.9 of the 2003 Credit Derivatives Definitions shall apply. Absence of this element indicates that Section 3.9 shall not apply. NOTE: Not allowed under ISDA Credit 1999.'} multipleCreditEventNotices: Boolean[0..1];
}

Class {meta::pure::profiles::doc.doc = 'The ISDA Floating Rate Option, i.e. the floating rate index.'} FpML::model::FloatingRateIndex
[
  c1_length: $this.floatingRateIndexScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  floatingRateIndexScheme: String[0..1];
  value: String[1];
}

Class <<meta::pure::profiles::typemodifiers.abstract>> {meta::pure::profiles::doc.doc = 'An abstract class to specify a product which terms are abstracted through reference data.'} model::external::cdm::IdentifiedProduct
{
  productIdentifier: model::external::cdm::ProductIdentifier[1];
}

Class {meta::pure::profiles::doc.doc = 'An identifier used to identify matched cashflows.'} FpML::model::MatchId
[
  c1_length: $this.matchIdScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() >= 1,
  c3_length: $this.value->length() <= 255
]
{
  matchIdScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'Reference to an account.'} FpML::model::AccountReference extends FpML::model::Reference
{
  href: String[1];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'Specifies Physical Settlement Terms characteristics for the settlement of a Credit Default Swap or Option.'} model::external::cdm::PhysicalSettlementTerms
{
  {meta::pure::profiles::doc.doc = 'Specifies whether the swap resulting from physical settlement of the swaption transaction will clear through a clearing house. The meaning of Cleared Physical Settlement is defined in the 2006 ISDA Definitions, Section 15.2 (published in Supplement number 28).'} clearedPhysicalSettlement: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the clearing organization (CCP, DCO) to which the trade should be cleared.'} predeterminedClearingOrganizationParty: model::external::cdm::AncillaryRoleEnum[0..1];
  {meta::pure::profiles::doc.doc = 'The number of business days used in the determination of the physical settlement date. The physical settlement date is this number of business days after all applicable conditions to settlement are satisfied. If a number of business days is not specified fallback provisions apply for determining the number of business days. If Section 8.5/8.6 of the 1999/2003 ISDA Definitions are to apply the businessDaysNotSpecified element should be included. If a specified number of business days are to apply these should be specified in the businessDays element. If Section 8.5/8.6 of the 1999/2003 ISDA Definitions are to apply but capped at a maximum number of business days then the maximum number should be specified in the maximumBusinessDays element. ISDA 2003 Term: Physical Settlement Period.'} physicalSettlementPeriod: model::external::cdm::PhysicalSettlementPeriod[0..1];
  {meta::pure::profiles::doc.doc = 'This element contains all the ISDA terms relevant to defining the deliverable obligations.'} deliverableObligations: model::external::cdm::DeliverableObligations[0..1];
  {meta::pure::profiles::doc.doc = 'If this element is specified and set to \'true\', indicates that physical settlement must take place through the use of an escrow agent. (For Canadian counterparties this is always \'Not Applicable\'. ISDA 2003 Term: Escrow.'} escrow: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'If this element is specified and set to \'true\', for a transaction documented under the 2003 ISDA Credit Derivatives Definitions, has the effect of incorporating the language set forth below into the confirmation. The section references are to the 2003 ISDA Credit Derivatives Definitions. Notwithstanding Section 1.7 or any provisions of Sections 9.9 or 9.10 to the contrary, but without prejudice to Section 9.3 and (where applicable) Sections 9.4, 9.5 and 9.6, if the Termination Date has not occurred on or prior to the date that is 60 Business Days following the Physical Settlement Date, such 60th Business Day shall be deemed to be the Termination Date with respect to this Transaction except in relation to any portion of the Transaction (an \'Affected Portion\') in respect of which: (1) a valid notice of Buy-in Price has been delivered that is effective fewer than three Business Days prior to such 60th Business Day, in which case the Termination Date for that Affected Portion shall be the third Business Day following the date on which such notice is effective; or (2) Buyer has purchased but not Delivered Deliverable Obligations validly specified by Seller pursuant to Section 9.10(b), in which case the Termination Date for that Affected Portion shall be the tenth Business Day following the date on which Seller validly specified such Deliverable Obligations to Buyer.'} sixtyBusinessDaySettlementCap: Boolean[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Terms defining the security valuation method as part of a security leg in a securities fianncing transaction and closely modelled onto the CollateralValuation type in FpML.'} model::external::cdm::SecurityValuation
{
  {meta::pure::profiles::doc.doc = 'The security valuation model choice, based on either a nominal amount or a number of units.'} securityValuationModel: model::external::cdm::SecurityValuationModel[1];
  {meta::pure::profiles::doc.doc = 'The underlying security of the security leg.'} underlier: model::external::cdm::Security[1];
}

Class FpML::model::RelatedParty
{
  {meta::pure::profiles::doc.doc = 'Reference to a party.'} partyReference: FpML::model::PartyReference[0..1];
  {meta::pure::profiles::doc.doc = 'Reference to an account.'} accountReference: FpML::model::AccountReference[0..1];
  {meta::pure::profiles::doc.doc = 'The category of the relationship. The related party performs the role specified in this field for the base party. For example, if the role is \'Guarantor\', the related party acts as a guarantor for the base party.'} role: FpML::model::PartyRole[0..1];
  {meta::pure::profiles::doc.doc = 'Additional definition refining the type of relationship. For example, if the \'role\' is Guarantor, this element may be used to specify whether all positions are guaranteed, or only a subset of them.'} type: FpML::model::PartyRoleType[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A complex type to specify the strike of a credit swaption or a credit default swap option.'} FpML::model::CreditOptionStrike
[
  c1_choice: ($this.spread->isNotEmpty() && ($this.price->isEmpty() && $this.strikeReference->isEmpty())) || (($this.spread->isEmpty() && ($this.price->isNotEmpty() && $this.strikeReference->isEmpty())) || ($this.spread->isEmpty() && ($this.price->isEmpty() && $this.strikeReference->isNotEmpty())))
]
{
  {meta::pure::profiles::doc.doc = 'The strike of a credit default swap option or credit swaption when expressed as a spread per annum.'} spread: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'The strike of a credit default swap option or credit swaption when expressed as in reference to the price of the underlying obligation(s) or index.'} price: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'The strike of a credit default swap option or credit swaption when expressed in reference to the spread of the underlying swap (typical practice in the case of single name swaps).'} strikeReference: FpML::model::FixedRateReference[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the collateral posting obligations of the security provider or security providers as specified in the corresponding agreement, for example, the New York Law ISDA 2016 Credit Support Annex for Initial Margin, paragraph 13, General Principles, (ii).'} model::external::cdm::PostingObligations
{
  {meta::pure::profiles::doc.doc = 'The security provider party(ies) to which the posting obligations apply to, which can be either one of the parties to the legal agreement, or both of those.'} securityProvider: String[1];
  {meta::pure::profiles::doc.doc = 'The specification of the collateral posting obligations for the security provider party(ies), for example, as specified under the terms of the ISDA 2016 Credit Support Annex for Initial Margin, paragraph 13, General Principles, (ii).'} partyElection: model::external::cdm::PostingObligationsElection[1..2];
}

Class {meta::pure::profiles::doc.doc = 'A type for defining the Additional Disruption Events.'} model::external::cdm::AdditionalDisruptionEvents
[
  maximumStockLoanRate: if($this.maximumStockLoanRate->isNotEmpty(), |($this.maximumStockLoanRate >= 0) && ($this.maximumStockLoanRate <= 1), |true),
  initialStockLoanRate: if($this.initialStockLoanRate->isNotEmpty(), |($this.initialStockLoanRate >= 0) && ($this.initialStockLoanRate <= 1), |true),
  DisruptionEventsDeterminingParty: if($this.determiningParty->isNotEmpty(), |$this.determiningParty == model::external::cdm::AncillaryRoleEnum.DisruptionEventsDeterminingParty, |true)
]
{
  {meta::pure::profiles::doc.doc = '2002 ISDA Equity Derivatives Definitions: Change in Law | 2018 ISDA CDM Equity Confirmation for Security Equity Swap: Change In Law | If true, then change in law is applicable.'} changeInLaw: Boolean[0..1];
  {meta::pure::profiles::doc.doc = '2002 ISDA Equity Derivatives Definitions: Failure to Deliver | Where the underlying is shares and the transaction is physically settled, then, if true, a failure to deliver the shares on the settlement date will not be an event of default for the purposes of the master agreement.'} failureToDeliver: Boolean[0..1];
  {meta::pure::profiles::doc.doc = '2002 ISDA Equity Derivatives Definitions: Insolvency Filing | If true, then insolvency filing is applicable.'} insolvencyFiling: Boolean[0..1];
  {meta::pure::profiles::doc.doc = '2002 ISDA Equity Derivatives Definitions: Hedging Disruption | If true, then hedging disruption is applicable.'} hedgingDisruption: Boolean[0..1];
  {meta::pure::profiles::doc.doc = '2002 ISDA Equity Derivatives Definitions: Increased Cost of Hedging | If true, then increased cost of hedging is applicable.'} increasedCostOfHedging: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'If true, then foreign ownership event is applicable.'} foreignOwnershipEvent: Boolean[0..1];
  {meta::pure::profiles::doc.doc = '2002 ISDA Equity Derivatives Definitions: Loss of Stock Borrow | If true, then loss of stock borrow is applicable.'} lossOfStockBorrow: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the maximum stock loan rate for Loss of Stock Borrow. A percentage of 5% is represented as 0.05.'} maximumStockLoanRate: Float[0..1];
  {meta::pure::profiles::doc.doc = '2002 ISDA Equity Derivatives Definitions: Increased Cost of Stock Borrow | If true, then increased cost of stock borrow is applicable.'} increasedCostOfStockBorrow: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the initial stock loan rate for Increased Cost of Stock Borrow. A percentage of 5% is represented as 0.05.'} initialStockLoanRate: Float[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the party which determines additional disruption events.'} determiningParty: model::external::cdm::AncillaryRoleEnum[0..1];
}

Class {meta::pure::profiles::doc.doc = 'This Rosetta class specifies the date as either an unadjusted, adjusted or relative date. It supplements the features of the AdjustableOrAdjustedDate to support the credit default swap option premium, which uses the relative date construct.'} model::external::cdm::AdjustableOrAdjustedOrRelativeDate
{
  {meta::pure::profiles::doc.doc = 'A date subject to adjustment.'} unadjustedDate: Date[0..1];
  {meta::pure::profiles::doc.doc = 'The business day convention and financial business centers used for adjusting the date if it would otherwise fall on a day that is not a business date in the specified business centers.'} dateAdjustments: model::external::cdm::BusinessDayAdjustments[0..1];
  <<model::external::cdm::metadata.id>> {meta::pure::profiles::doc.doc = 'The date once the adjustment has been performed. (Note that this date may change if the business center holidays change).'} adjustedDate: Date[0..1];
  {meta::pure::profiles::doc.doc = 'A date specified as some offset to another date (the anchor date).'} relativeDate: model::external::cdm::RelativeDateOffset[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the parties\' elections related to the holding and using of posted collateral. ISDA 2016 Credit Support Annex for Variation Margin, paragraph 13, (h): Holding and Using Posted Collateral (VM).'} model::external::cdm::HoldingAndUsingPostedCollateralElection
{
  {meta::pure::profiles::doc.doc = 'The elective party.'} party: model::external::cdm::CounterpartyRoleEnum[1];
  {meta::pure::profiles::doc.doc = 'The specification of the conditions under which a party and its custodian(s) are entitled to hold posted collateral.'} eligibilityToHoldCollateral: model::external::cdm::EligibilityToHoldCollateral[1];
  {meta::pure::profiles::doc.doc = 'Specifies whether the party to the agreement has the right to rehypothecate the collateral held (True), i.e. whether the condition specified in Paragraph 6, (c) of the ISDA 2016 Credit Support Annex for Variation Margin apply. ISDA 2016 Credit Support Annex for Variation Margin, paragraph 13, (h)(ii): Use of Posted Collateral (VM).'} useOfPostedCollateral: Boolean[1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify a party-related, non-standardized data in a generic form.'} model::external::cdm::PartyCustomisedWorkflow
[
  PartyCustomisedWorkflowChoice: ($this.partyReference->isNotEmpty() && $this.partyName->isEmpty()) || ($this.partyName->isNotEmpty() && $this.partyReference->isEmpty())
]
{
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'Reference to the party to which the workflow pertains to.'} partyReference: model::external::cdm::Party[0..1];
  {meta::pure::profiles::doc.doc = 'The party name to which the workflow pertains to.'} partyName: String[0..1];
  {meta::pure::profiles::doc.doc = 'Non-standardized data in a generic form.'} customisedWorkflow: model::external::cdm::CustomisedWorkflow[1..*];
}

Class {meta::pure::profiles::doc.doc = 'A class for defining a time with respect to a business day calendar location. For example, 11:00:00 GBLO.'} model::external::cdm::BusinessCenterTime
{
  {meta::pure::profiles::doc.doc = 'A time specified in hh:mm:ss format where the second component must be \'00\', e.g. 11am would be represented as 11:00:00.'} hourMinuteTime: DateTime[1];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'A code identifying a business day calendar location. A business day calendar location is drawn from the list identified by the business day calendar location enumeration.'} businessCenter: model::external::cdm::BusinessCenterEnum[1];
}

Class {meta::pure::profiles::doc.doc = 'The publication in which the rate, price, index or factor is to be found. (e.g Gas Daily, Platts Bloomberg.)'} FpML::model::CommodityInformationProvider
[
  c1_length: $this.informationProviderScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  informationProviderScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'Specification of Transactions covered by the legal agreement.'} model::external::cdm::CoveredTransactions
{
  {meta::pure::profiles::doc.doc = 'Includes any Transaction specified below that is entered into on or after the specified date.'} inclusionDate: Date[1];
  {meta::pure::profiles::doc.doc = 'Covered Transactions when expressed using the ISDA taxonomy.'} coveredTransactions: model::external::cdm::ProductTaxonomy[1..*];
  {meta::pure::profiles::doc.doc = 'Covered Transactions when not expressed using the ISDA taxonomy.'} bespokeCoveredTransactions: String[1..*];
  {meta::pure::profiles::doc.doc = 'The party specific additional obligations applicable to the document.'} additionalObligations: model::external::cdm::AdditionalObligations[0..2];
  {meta::pure::profiles::doc.doc = 'The bespoke definition of exposure for Covered Transactions as part of the agreement.'} exposure: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Method of generating a series of dates.'} FpML::model::AveragingSchedule
{
  {meta::pure::profiles::doc.doc = 'Date on which this period begins.'} startDate: StrictDate[0..1];
  {meta::pure::profiles::doc.doc = 'Date on which this period ends.'} endDate: StrictDate[0..1];
  {meta::pure::profiles::doc.doc = 'The frequency at which averaging period occurs with the regular part of the valuation schedule and their roll date convention.'} averagingPeriodFrequency: FpML::model::CalculationPeriodFrequency[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify a bond as having a product identifier. As a difference versus the FpML standard, the CDM structure of this class only includes the productIdentifier class, which consists of an identifier, productTaxonomy, and source of the identifier. The reason for this approach is to avoid the potential for conflicting information between the information associated with the contractual product and the reference information maintained by the relevant service provider.'} model::external::cdm::Bond extends model::external::cdm::IdentifiedProduct
{
}

Class {meta::pure::profiles::doc.doc = 'Reference to credit events.'} FpML::model::CreditEventsReference extends FpML::model::Reference
{
  href: String[1];
}

Class {meta::pure::profiles::doc.doc = 'A type defining the reset frequency. In the case of a weekly reset, also specifies the day of the week that the reset occurs. If the reset frequency is greater than the calculation period frequency the this implies that more or more reset dates is established for each calculation period and some form of rate averaginhg is applicable. The specific averaging method of calculation is specified in FloatingRateCalculation. In case the reset frequency is of value T (term), the period is defined by the swapswapStreamcalculationPerioDateseffectiveDate and the swapswapStreamcalculationPerioDates\terminationDate.'} FpML::model::ResetFrequency extends FpML::model::Frequency
{
  {meta::pure::profiles::doc.doc = 'The day of the week on which a weekly reset date occurs. This element must be included if the reset frequency is defined as weekly and not otherwise.'} weeklyRollConvention: FpML::model::WeeklyRollConventionEnum[0..1];
}

Class {meta::pure::profiles::doc.doc = 'The class to represent a CDS Tranche.'} model::external::cdm::Tranche
[
  AttachmentPoint: ($this.attachmentPoint > 0.0) && ($this.attachmentPoint <= 1.0),
  ExhaustionPoint: ($this.exhaustionPoint >= 0.0) && ($this.exhaustionPoint <= 1.0),
  AttachmentPoint_exhaustionPoint: $this.attachmentPoint <= $this.exhaustionPoint
]
{
  {meta::pure::profiles::doc.doc = 'Lower bound percentage of the loss that the Tranche can endure, expressed as a decimal. An attachment point of 5% would be represented as 0.05. The difference between Attachment and Exhaustion points is called the width of the Tranche.'} attachmentPoint: Float[1];
  {meta::pure::profiles::doc.doc = 'Upper bound percentage of the loss that the Tranche can endure, expressed as a decimal. An exhaustion point of 5% would be represented as 0.05. The difference between Attachment and Exhaustion points is call the width of the Tranche.'} exhaustionPoint: Float[1];
  {meta::pure::profiles::doc.doc = 'Outstanding Swap Notional Amount is defined at any time on any day, as the greater of: (a) Zero; If Incurred Recovery Amount Applicable: (b) The Original Swap Notional Amount minus the sum of all Incurred Loss Amounts and all Incurred Recovery Amounts (if any) determined under this Confirmation at or prior to such time.Incurred Recovery Amount not populated: (b) The Original Swap Notional Amount minus the sum of all Incurred Loss Amounts determined under this Confirmation at or prior to such time.'} incurredRecoveryApplicable: Boolean[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Defines the payout on which to create a Transfer along with all necessary resets.'} model::external::cdm::TransferInstruction
{
  <<model::external::cdm::metadata.reference>> payout: model::external::cdm::Payout[1];
  resets: model::external::cdm::Reset[*];
  payerReceiver: model::external::cdm::PayerReceiver[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies quantity amount returned if not the full amount from the TradeState, e.g. partial return'} quantity: model::external::cdm::Quantity[0..1];
}

Class {meta::pure::profiles::doc.doc = 'The source from which the settlement price is to be obtained, e.g. a Reuters page, Prezzo di Riferimento, etc.'} FpML::model::SettlementPriceSource
[
  c1_length: $this.settlementPriceSourceScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  settlementPriceSourceScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'Adds an optional spread type element to the Schedule to identify a long or short spread value.'} model::external::cdm::SpreadSchedule extends model::external::cdm::RateSchedule
{
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'An element which purpose is to identify a long or short spread value.'} spreadScheduleType: model::external::cdm::SpreadScheduleTypeEnum[0..1];
}

Class FpML::model::MutualFund extends FpML::model::UnderlyingAsset
[
  c1_length: $this.fundManager->forAll(x: String[1]|$x->length() >= 1)
]
{
  {meta::pure::profiles::doc.doc = 'Boolean indicator to specify whether the mutual fund is an open-ended mutual fund.'} openEndedFund: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the fund manager that is in charge of the fund.'} fundManager: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the floating interest rate by extending the floating rate definition with a set of attributes that specify such rate: the initial value specified as part of the trade, the rounding convention, the averaging method and the negative interest rate treatment.'} model::external::cdm::FloatingRateSpecification extends model::external::cdm::FloatingRate
{
  {meta::pure::profiles::doc.doc = 'The initial floating rate reset agreed between the principal parties involved in the trade. This is assumed to be the first required reset rate for the first regular calculation period. It should only be included when the rate is not equal to the rate published on the source implied by the floating rate index. An initial rate of 5% would be represented as 0.05.'} initialRate: model::external::cdm::Price[0..1];
  {meta::pure::profiles::doc.doc = 'The rounding convention to apply to the final rate used in determination of a calculation period amount.'} finalRateRounding: model::external::cdm::Rounding[0..1];
  {meta::pure::profiles::doc.doc = 'If averaging is applicable, this component specifies whether a weighted or unweighted average method of calculation is to be used. The component must only be included when averaging applies.'} averagingMethod: model::external::cdm::AveragingMethodEnum[0..1];
  {meta::pure::profiles::doc.doc = 'The specification of any provisions for calculating payment obligations when a floating rate is negative (either due to a quoted negative floating rate or by operation of a spread that is subtracted from the floating rate).'} negativeInterestRateTreatment: model::external::cdm::NegativeInterestRateTreatmentEnum[0..1];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'Defines specific attributes that relate to trade executions.'} model::external::cdm::ExecutionDetails
[
  ExecutionVenue: if($this.executionType == model::external::cdm::ExecutionTypeEnum.Electronic, |$this.executionVenue->isNotEmpty(), |true)
]
{
  {meta::pure::profiles::doc.doc = 'Identifies the type of execution, e.g. via voice, electronically...'} executionType: model::external::cdm::ExecutionTypeEnum[1];
  {meta::pure::profiles::doc.doc = 'Represents the venue on which a trade was executed.'} executionVenue: model::external::cdm::LegalEntity[0..1];
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'A reference to the package linking the trade with other trades, in case the trade was executed as part of a package (hence this attribute is optional).'} packageReference: model::external::cdm::IdentifiedList[0..1];
}

Class model::external::cdm::Qty
{
  unit: String[1];
}

Class {meta::pure::profiles::doc.doc = 'A complex type to support the credit default swap option.'} FpML::model::CreditDefaultSwapOption extends FpML::model::OptionBaseExtended
{
  {meta::pure::profiles::doc.doc = 'Specifies any instructions on how the physical settlement is to be effected when the option is exercised.'} clearingInstructions: FpML::model::SwaptionPhysicalSettlement[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the strike of the option on credit default swap.'} strike: FpML::model::CreditOptionStrike[0..1];
  creditDefaultSwap: FpML::model::CreditDefaultSwap[0..1];
}

Class {meta::pure::profiles::doc.doc = 'The calculation period fixed rate. A per annum rate, expressed as a decimal. A fixed rate of 5% would be represented as 0.05.'} FpML::model::FixedRate
{
  id: String[0..1];
  value: Decimal[1];
}

Class {meta::pure::profiles::doc.doc = 'Combines the CDM product qualifier with other product types and identifiers. While the CDM product qualifier is derived by the CDM from the product payout features, the other product type and identification elements are assigned by external sources and correspond to values specified by other data representation protocols.'} model::external::cdm::ProductIdentification
{
  {meta::pure::profiles::doc.doc = 'Derived from the product payout features using a CDM product qualification function that determines the product type based on the product payout features.'} productQualifier: String[0..1];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'Classifies the most important risk class of the trade.'} primaryAssetData: model::external::cdm::AssetClassEnum[0..1];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'Classifies additional risk classes of the trade, if any.'} secondaryAssetData: model::external::cdm::AssetClassEnum[*];
  {meta::pure::profiles::doc.doc = 'Provides a classification of the type of product that is external to the product qualifications used in the CDM. Product types mapped from external models are mapped to this data type.'} externalProductType: model::external::cdm::ExternalProductType[*];
  {meta::pure::profiles::doc.doc = 'Comprises an identifier and a source. The associated metadata key denotes the ability to associate a hash value to the ProductIdentifier instantiations for the purpose of model cross-referencing, in support of functionality such as the event effect and the lineage.'} productIdentifier: model::external::cdm::ProductIdentifier[*];
}

Class {meta::pure::profiles::doc.doc = 'To indicate the limitation percentage and limitation period.'} FpML::model::AverageDailyTradingVolumeLimit
{
  {meta::pure::profiles::doc.doc = 'Specifies the limitation percentage in Average Daily trading volume. A value expressed in percentage units i.e. 5 means 5%.'} limitationPercentage: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the limitation period for Average Daily trading volume in number of days.'} limitationPeriod: Decimal[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the parties\' respective elections with respect to the Process Agent.'} model::external::cdm::ProcessAgentElection
[
  Applicable: if($this.isApplicable, |$this.processAgent->isNotEmpty(), |true),
  NotApplicable: if(!($this.isApplicable), |$this.processAgent->isEmpty(), |true)
]
{
  {meta::pure::profiles::doc.doc = 'The elective party.'} party: model::external::cdm::CounterpartyRoleEnum[1];
  {meta::pure::profiles::doc.doc = 'The qualification of whether the Process Agent is applicable (True) or not applicable (False).'} isApplicable: Boolean[1];
  {meta::pure::profiles::doc.doc = 'The Process Agent specification, when applicable.'} processAgent: model::external::cdm::PartyContactInformation[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify workflow information, which is conceptually applicable to all lifecycle events.'} model::external::cdm::WorkflowState
{
  {meta::pure::profiles::doc.doc = 'The workflow status indicator, e.g. Accepted, Rejected, ...'} workflowStatus: model::external::cdm::WorkflowStatusEnum[1];
  {meta::pure::profiles::doc.doc = 'A comment field to be associated with the workflow, e.g. to specify why a transaction event was rejected by a party.'} comment: String[0..1];
  {meta::pure::profiles::doc.doc = 'Workflow data that is specific to certain market participants and is expressed as part of the CDM in a very generic manner, which can be party-specific. The initial use cases have been derived from the CME clearing and the DTCC TIW submissions.'} partyCustomisedWorkflow: model::external::cdm::PartyCustomisedWorkflow[*];
  {meta::pure::profiles::doc.doc = 'The identity of the warehouse, if any, that is executing that workflow step.'} warehouseIdentity: model::external::cdm::WarehouseIdentityEnum[0..1];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'A data for:  defining the parameters used to generate the calculation period dates schedule, including the specification of any initial or final stub calculation periods. A calculation period schedule consists of an optional initial stub calculation period, one or more regular calculation periods and an optional final stub calculation period. In the absence of any initial or final stub calculation periods, the regular part of the calculation period schedule is assumed to be between the effective date and the termination date. No implicit stubs are allowed, i.e. stubs must be explicitly specified using an appropriate combination of firstPeriodStartDate, firstRegularPeriodStartDate and lastRegularPeriodEndDate.'} model::external::cdm::CalculationPeriodDates
[
  FpML_ird_16: if($this.firstRegularPeriodStartDate->isNotEmpty(), |$this.terminationDate.adjustableDate.unadjustedDate > $this.firstRegularPeriodStartDate, |true),
  FpML_ird_17: if($this.lastRegularPeriodEndDate->isNotEmpty(), |$this.terminationDate.adjustableDate.unadjustedDate > $this.lastRegularPeriodEndDate, |true),
  FpML_ird_18: if($this.firstRegularPeriodStartDate->isNotEmpty() && $this.lastRegularPeriodEndDate->isNotEmpty(), |$this.lastRegularPeriodEndDate > $this.firstRegularPeriodStartDate, |true),
  FpML_ird_20: if($this.lastRegularPeriodEndDate->isNotEmpty(), |$this.lastRegularPeriodEndDate > $this.effectiveDate.adjustableDate.unadjustedDate, |true),
  FpML_ird_21: if($this.firstPeriodStartDate->isNotEmpty() && $this.effectiveDate->isNotEmpty(), |$this.firstPeriodStartDate.adjustableDate.unadjustedDate < $this.effectiveDate.adjustableDate.unadjustedDate, |true),
  FpML_ird_22: if($this.firstPeriodStartDate->isNotEmpty() && $this.firstRegularPeriodStartDate->isNotEmpty(), |$this.firstPeriodStartDate.adjustableDate.unadjustedDate < $this.firstRegularPeriodStartDate, |true)
]
{
  {meta::pure::profiles::doc.doc = 'The first day of the terms of the trade. This day may be subject to adjustment in accordance with a business day convention.'} effectiveDate: model::external::cdm::AdjustableOrRelativeDate[0..1];
  {meta::pure::profiles::doc.doc = 'The last day of the terms of the trade. This date may be subject to adjustments in accordance with the business day convention. It can also be specified in relation to another scheduled date (e.g. the last payment date).'} terminationDate: model::external::cdm::AdjustableOrRelativeDate[0..1];
  {meta::pure::profiles::doc.doc = 'The specification of the business day convention and financial business centers used for adjusting any calculation period date if it would otherwise fall on a day that is not a business day in the specified business center.'} calculationPeriodDatesAdjustments: model::external::cdm::BusinessDayAdjustments[0..1];
  {meta::pure::profiles::doc.doc = 'The start date of the calculation period. FpML specifies that for interest rate swaps this date must only be specified if it is not equal to the effective date. It is always specified in the case of equity swaps and credit default swaps with periodic payments. This date may be subject to adjustment in accordance with a business day convention.'} firstPeriodStartDate: model::external::cdm::AdjustableOrRelativeDate[0..1];
  {meta::pure::profiles::doc.doc = 'The start date of the regular part of the calculation period schedule. It must only be specified if there is an initial stub calculation period. This day may be subject to adjustment in accordance with any adjustments specified in calculationPeriodDatesAdjustments.'} firstRegularPeriodStartDate: Date[0..1];
  {meta::pure::profiles::doc.doc = 'The end date of the initial compounding period when compounding is applicable. It must only be specified when the compoundingMethod element is present and not equal to a value of None. This date may be subject to adjustment in accordance with any adjustments specified in calculationPeriodDatesAdjustments.'} firstCompoundingPeriodEndDate: Date[0..1];
  {meta::pure::profiles::doc.doc = 'The end date of the regular part of the calculation period schedule. It must only be specified if there is a final stub calculation period. This day may be subject to adjustment in accordance with any adjustments specified in calculationPeriodDatesAdjustments.'} lastRegularPeriodEndDate: Date[0..1];
  {meta::pure::profiles::doc.doc = 'Method to allocate any irregular period remaining after regular periods have been allocated between the effective and termination date.'} stubPeriodType: model::external::cdm::StubPeriodTypeEnum[0..1];
  {meta::pure::profiles::doc.doc = 'The frequency at which calculation period end dates occur with the regular part of the calculation period schedule and their roll date convention.'} calculationPeriodFrequency: model::external::cdm::CalculationPeriodFrequency[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Identifies a loan by referencing a product identifier and through an optional set of attributes.'} model::external::cdm::Loan extends model::external::cdm::ProductBase
{
  {meta::pure::profiles::doc.doc = 'Specifies the borrower. There can be more than one borrower. It is meant to be used in the event that there is no Bloomberg Id or the Secured List isn\'t applicable.'} borrower: model::external::cdm::LegalEntity[*];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'Specifies the seniority level of the lien.'} lien: String[0..1];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'Specifies the type of loan facility (letter of credit, revolving, ...).'} facilityType: String[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the credit agreement date is the closing date (the date where the agreement has been signed) for the loans in the credit agreement. Funding of the facilities occurs on (or sometimes a little after) the Credit Agreement date. This underlier attribute is used to help identify which of the company\'s outstanding loans are being referenced by knowing to which credit agreement it belongs. ISDA Standards Terms Supplement term: Date of Original Credit Agreement.'} creditAgreementDate: Date[0..1];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'Denotes the loan tranche that is subject to the derivative transaction. It will typically be referenced as the Bloomberg tranche number. ISDA Standards Terms Supplement term: Bloomberg Tranche Number.'} tranche: String[0..1];
}

Class model::external::cdm::DeterminationMethodology
{
  {meta::pure::profiles::doc.doc = 'Represents a more granular dimention of observation. Typically relevent for resolving a unique equity price, which can be expressed as trade-weighted or volume-weighted averages.'} determinationMethod: model::external::cdm::DeterminationMethodEnum[0..1];
  averagingMethod: model::external::cdm::AveragingCalculationMethodEnum[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A structure representing a pending dividend or coupon payment.'} FpML::model::PendingPayment extends FpML::model::PaymentBase
{
  {meta::pure::profiles::doc.doc = 'The date that the dividend or coupon is due.'} paymentDate: StrictDate[0..1];
  {meta::pure::profiles::doc.doc = 'The amount of the dividend or coupon payment. Value of dividends or coupon between ex and pay date. Stock: if we are between ex-date and pay-date and the dividend is payable under the swap, then this should be the ex-div amount * # of securities. Bond: regardless of where we are vis-a-vis resets: (coupon % * face of bonds on swap * (bond day count fraction using days last coupon pay date of the bond through today).'} amount: FpML::model::Money[0..1];
  {meta::pure::profiles::doc.doc = 'Accrued interest on the dividend or coupon payment. When the TRS is structured to pay a dividend or coupon on reset after payable date, you may earn interest on these amounts. This field indicates the interest accrued on dividend/coupon from pay date to statement date. This will only apply to a handful of agreements where dividendss are held to the next reset AND you receive/pay interest on unpaid amounts.'} accruedInterest: FpML::model::Money[0..1];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'The equity payout specification terms. The associated globalKey denotes the ability to associate a hash value to the EquityPayout instantiations for the purpose of model cross-referencing, in support of functionality such as the event effect and the lineage.'} model::external::cdm::EquityPayout extends model::external::cdm::PayoutBase
[
  DividendReturn: if($this.returnType == model::external::cdm::ReturnTypeEnum.Price, |$this.priceReturnTerms->isNotEmpty() && $this.dividendReturnTerms->isEmpty(), |true),
  PriceReturn: if($this.returnType == model::external::cdm::ReturnTypeEnum.Dividend, |$this.dividendReturnTerms->isNotEmpty() && $this.priceReturnTerms->isEmpty(), |true),
  TotalReturn: if($this.returnType == model::external::cdm::ReturnTypeEnum.Total, |$this.priceReturnTerms->isNotEmpty() && $this.dividendReturnTerms->isNotEmpty(), |true)
]
{
  {meta::pure::profiles::doc.doc = '2018 ISDA CDM Equity Confirmation for Security Equity Swap: Security'} underlier: model::external::cdm::Product[1];
  {meta::pure::profiles::doc.doc = 'Specifies the type of return associated with the equity payout.'} returnType: model::external::cdm::ReturnTypeEnum[1];
  {meta::pure::profiles::doc.doc = '2018 ISDA CDM Equity Confirmation for Security Equity Swap: Dividend Obligations'} dividendReturnTerms: model::external::cdm::DividendReturnTerms[0..1];
  {meta::pure::profiles::doc.doc = '2018 ISDA CDM Equity Confirmation for Security Equity Swap: Pricing'} priceReturnTerms: model::external::cdm::PriceReturnTerms[0..1];
  {meta::pure::profiles::doc.doc = 'A quanto or composite FX feature.'} fxFeature: model::external::cdm::FxFeature[*];
  {meta::pure::profiles::doc.doc = 'The calculation period dates schedule.'} calculationPeriodDates: model::external::cdm::CalculationPeriodDates[0..1];
  {meta::pure::profiles::doc.doc = 'The payment date schedule, as defined by the parameters that are needed to specify it, either in a parametric way or by reference to another schedule of dates (e.g. the valuation dates).'} paymentDates: model::external::cdm::PaymentDates[1];
  {meta::pure::profiles::doc.doc = 'Rate of Return calculation, in accordance with Part 1 Section 12 of the 2018 ISDA CDM Equity Confirmation for Security Equity Swap, Para 139. \'Rate Of Return\'.'} rateOfReturn: Float[0..1];
  {meta::pure::profiles::doc.doc = 'Performance calculation, in accordance with Part 1 Section 12 of the 2018 ISDA CDM Equity Confirmation for Security Equity Swap, Para 75. \'Equity Performance\'. Cumulative performance is used as a notional multiplier factor on both legs of an Equity Swap.'} performance: Float[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Specifies parameters specific to the observation shift method of compounding/averaging.'} FpML::model::ObservationShiftParameters extends FpML::model::ObservationOffset
{
  {meta::pure::profiles::doc.doc = 'Specifies how the observation period is to be determined relative to the basic calculation period. Options include \'standard\' (observation period aligns with the calculation period except for any shifts/lookbacks/lockouts, i.e. it is set in arrears), \'InAdvance\' (observation period is based on the prior or deemed prior calculation period plus any shifts), or \'FixingDate\' (observation period is based on a fixing date defined the the FpML resetDates structure; this is used only for fallback rate definitions that reference existing resetDates structures.).'} observationPeriodDates: FpML::model::ObservationPeriodDatesEnum[1];
  {meta::pure::profiles::doc.doc = 'Any additional business centers that are applicable to the observation shift calculation, in addition to the regular \'applicableBusinessDays\'.'} additionalBusinessDays: FpML::model::BusinessCentersOrReference[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Specifies the product taxonomy, which is composed of a taxonomy value and a taxonomy source.'} model::external::cdm::ProductTaxonomy
{
  {meta::pure::profiles::doc.doc = 'Specifies the taxonomy value.'} taxonomyValue: String[1];
  {meta::pure::profiles::doc.doc = 'Specifies the taxonomy source.'} taxonomySource: model::external::cdm::TaxonomySourceEnum[1];
}

Class {meta::pure::profiles::doc.doc = 'A type defining how a stub calculation period amount is calculated. A single floating rate tenor different to that used for the regular part of the calculation periods schedule may be specified, or two floating rate tenors many be specified. If two floating rate tenors are specified then Linear Interpolation (in accordance with the 2000 ISDA Definitions, Section 8.3 Interpolation) is assumed to apply. Alternatively, an actual known stub rate or stub amount may be specified.'} FpML::model::StubValue
[
  c1_choice: ($this.floatingRate->isNotEmpty() && ($this.stubRate->isEmpty() && $this.stubAmount->isEmpty())) || (($this.floatingRate->isEmpty() && ($this.stubRate->isNotEmpty() && $this.stubAmount->isEmpty())) || ($this.floatingRate->isEmpty() && ($this.stubRate->isEmpty() && $this.stubAmount->isNotEmpty())))
]
{
  {meta::pure::profiles::doc.doc = 'The rates to be applied to the initial or final stub may be the linear interpolation of two different rates. While the majority of the time, the rate indices will be the same as that specified in the stream and only the tenor itself will be different, it is possible to specift two different rates. For example, a 2 month stub period may use the linear interpolation of a 1 month and 3 month rate. The different rates would be specified in this component. Note that a maximum of two rates can be specified. If a stub period uses the same floating rate index, including tenor, as the regular calculation periods then this should not be specified again within this component, i.e. the stub calculation period amount component may not need to be specified even if there is an initial or final stub period. If a stub period uses a different floating rate index compared to the regular calculation periods then this should be specified within this component. If specified here, they are likely to have id attributes, allowing them to be referenced from within the cashflows component.'} floatingRate: FpML::model::StubFloatingRate[0..2];
  {meta::pure::profiles::doc.doc = 'An actual rate to apply for the initial or final stub period may have been agreed between the principal parties (in a similar way to how an initial rate may have been agreed for the first regular period). If an actual stub rate has been agreed then it would be included in this component. It will be a per annum rate, expressed as a decimal. A stub rate of 5% would be represented as 0.05.'} stubRate: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'An actual amount to apply for the initial or final stub period may have been agreed between th two parties. If an actual stub amount has been agreed then it would be included in this component.'} stubAmount: FpML::model::Money[0..1];
}

Class model::external::cdm::Sngl
{
  isin: String[1];
  indx: model::external::cdm::Indx[1];
}

Class {meta::pure::profiles::doc.doc = 'A type defining a legal entity or a subdivision of a legal entity. Parties can perform multiple roles in a trade lifecycle. For example, the principal parties obligated to make payments from time to time during the term of the trade, but may include other parties involved in, or incidental to, the trade, such as parties acting in the role of novation transferor/transferee, broker, calculation agent, etc. In FpML roles are defined in multiple places within a document.'} FpML::model::Party
[
  c1_choice: ($this.groupType->isEmpty() && $this.partyReference->isEmpty()) || ($this.partyId->isEmpty() && ($this.partyName->isEmpty() && ($this.classification->isEmpty() && ($this.creditRating->isEmpty() && ($this.country->isEmpty() && ($this.region->isEmpty() && ($this.jurisdiction->isEmpty() && ($this.organizationType->isEmpty() && ($this.relatedParty->isEmpty() && ($this.role->isEmpty() && ($this.contactInfo->isEmpty() && ($this.businessUnit->isEmpty() && $this.person->isEmpty()))))))))))))
]
{
  {meta::pure::profiles::doc.doc = 'A party identifier, e.g. a S.W.I.F.T. bank identifier code (BIC).'} partyId: FpML::model::PartyId[*];
  {meta::pure::profiles::doc.doc = 'The legal name of the organization. A free format string. FpML does not define usage rules for this element.'} partyName: FpML::model::PartyName[0..1];
  {meta::pure::profiles::doc.doc = 'The party\'s industry sector classification.'} classification: FpML::model::IndustryClassification[*];
  {meta::pure::profiles::doc.doc = 'The party\'s credit rating.'} creditRating: FpML::model::CreditRating[*];
  {meta::pure::profiles::doc.doc = 'The country where the party is domiciled.'} country: FpML::model::CountryCode[0..1];
  {meta::pure::profiles::doc.doc = 'A code for a grouping of countries to which this belongs.'} region: FpML::model::Region[*];
  {meta::pure::profiles::doc.doc = 'The legal jurisdiction of the entity\'s registration.'} jurisdiction: FpML::model::GoverningLaw[*];
  {meta::pure::profiles::doc.doc = 'The type of an organization\'s participantion in the OTC derivatives market.'} organizationType: FpML::model::OrganizationType[*];
  {meta::pure::profiles::doc.doc = 'Identifies a party that is related to this party, such as a parent, guarantor, or counterparty.'} relatedParty: FpML::model::PartyRelationship[*];
  {meta::pure::profiles::doc.doc = 'For pretrade processes, anonymous parties can be specified performing a specific role defined in this field such as MarketMaker or PriceTaker.'} role: FpML::model::PartyRole[0..1];
  {meta::pure::profiles::doc.doc = 'Information on how to contact the party using various means.'} contactInfo: FpML::model::ContactInformation[0..1];
  {meta::pure::profiles::doc.doc = 'Optional organization unit information used to describe the organization units (e.g. trading desks) involved in a transaction or business process .'} businessUnit: FpML::model::BusinessUnit[*];
  {meta::pure::profiles::doc.doc = 'Optional information about people involved in a transaction or busines process. (These are eomployees of the party).'} person: FpML::model::Person[*];
  {meta::pure::profiles::doc.doc = 'Party Group Type, e.g. JointAndSeveralLiability'} groupType: FpML::model::PartyGroupType[0..1];
  {meta::pure::profiles::doc.doc = 'Reference to a party that is a member of the group of entities that are acting together as a single party in a transaction.'} partyReference: FpML::model::PartyReference[*];
  {meta::pure::profiles::doc.doc = 'The id uniquely identifying the Party within the document.'} id: String[1];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'A base class to be extended by the SettlementTerms class.'} model::external::cdm::SettlementBase
{
  {meta::pure::profiles::doc.doc = 'Whether the settlement will be cash, physical, by election, ...'} settlementType: model::external::cdm::SettlementTypeEnum[1];
  {meta::pure::profiles::doc.doc = 'The qualification as to how the transfer will settle, e.g. a DvP settlement.'} transferSettlementType: model::external::cdm::TransferSettlementEnum[0..1];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'The settlement currency is to be specified when the Settlement Amount cannot be known in advance. The list of valid currencies is not presently positioned as an enumeration as part of the CDM because that scope is limited to the values specified by ISDA and FpML. As a result, implementers have to make reference to the relevant standard, such as the ISO 4217 standard for currency codes.'} settlementCurrency: String[0..1];
  {meta::pure::profiles::doc.doc = 'The date on which the settlement amount will be paid, subject to adjustment in accordance with any applicable business day convention. This component would not be present for a mandatory early termination provision where the cash settlement payment date is the mandatory early termination date.'} settlementDate: model::external::cdm::SettlementDate[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the effective date of the Amendment to Termination Currency. This date can be specified as either an actual date, a specific date (e.g. the annex date) or as a custom provision.'} model::external::cdm::AmendmentEffectiveDate
[
  one_of_constraint: ((($this.date->isNotEmpty() && $this.specificDate->isEmpty()) && $this.customProvision->isEmpty()) || (($this.specificDate->isNotEmpty() && $this.date->isEmpty()) && $this.customProvision->isEmpty())) || (($this.customProvision->isNotEmpty() && $this.date->isEmpty()) && $this.specificDate->isEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'The effective date of the Amendment to Termination Currency when specified as an actual date.'} date: Date[0..1];
  {meta::pure::profiles::doc.doc = 'The effective date of the Amendment to Termination Currency when specified as relative to another date (e.g. the annex date).'} specificDate: model::external::cdm::AmendmentEffectiveDateEnum[0..1];
  {meta::pure::profiles::doc.doc = 'The effective date of the Amendment to Termination Currency when specified as a non normalized custom provision.'} customProvision: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Reference to an identified date or a complex date structure.'} FpML::model::DateReference extends FpML::model::Reference
{
  href: String[1];
}

Class {meta::pure::profiles::doc.doc = 'A type for defining option features.'} FpML::model::OptionFeature
{
  {meta::pure::profiles::doc.doc = 'A quanto or composite FX feature.'} fxFeature: FpML::model::FxFeature[0..1];
  {meta::pure::profiles::doc.doc = 'A simple strategy feature.'} strategyFeature: FpML::model::StrategyFeature[0..1];
  {meta::pure::profiles::doc.doc = 'An option where and average price is taken on valuation.'} asian: FpML::model::Asian[0..1];
  {meta::pure::profiles::doc.doc = 'An option with a barrier feature.'} barrier: FpML::model::Barrier[0..1];
  {meta::pure::profiles::doc.doc = 'A knock feature.'} knock: FpML::model::Knock[0..1];
  {meta::pure::profiles::doc.doc = 'Pass through payments from the underlyer, such as dividends.'} passThrough: FpML::model::PassThrough[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the requirements applicable to the custodian with respect to the holding of posted collateral. ISDA 2016 Credit Support Annex for Variation Margin, paragraph 13, (h)(i): Eligibility to Hold Posted Collateral (VM) Custodians (VM).'} model::external::cdm::CustodianTerms
{
  {meta::pure::profiles::doc.doc = 'The minimal level of assets requirement with respect to the custody agent.'} minimumAssets: model::external::cdm::Money[0..1];
  {meta::pure::profiles::doc.doc = 'The minimal rating requirement with respect to the custody agent.'} minimumRating: model::external::cdm::CreditNotation[0..1];
  {meta::pure::profiles::doc.doc = 'The 2016 ISDA CSA for Variation Margin provides the ability for the parties to specify the initial custodian.'} initialDesignation: model::external::cdm::LegalEntity[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Defines a counterparty enumerated value, e.g. Party1 or Party2, with an associated party reference. The product is agnostic to the actual parties to the transaction, with the party references abstracted away from the product definition and replaced by the CounterpartyEnum (e.g. values Party1 or Party2). The CounterpartyEnum can then be positioned in the product (e.g. to specify which counterparty is the payer, receiver etc) and this Counterparty type, which is positioned outside of the product definition, allows the CounterpartyEnum to be associated with an actual party reference.'} model::external::cdm::Counterparty
{
  {meta::pure::profiles::doc.doc = 'Specifies the CounterpartyEnum, e.g. either Party1 or Party2, that is associated to the partyReference.'} role: model::external::cdm::CounterpartyRoleEnum[1];
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'Specifies the party that is associated to the counterparty.'} partyReference: model::external::cdm::Party[1];
}

Class {meta::pure::profiles::doc.doc = 'Defines the state of a trade at a point in the Trade\'s life cycle. Trades have many state dimensions, all of which are represented here. For example, states useful for position keeping are represented alongside those needed for regulatory reporting.'} model::external::cdm::State
[
  condition1: if($this.positionState == model::external::cdm::PositionStatusEnum.Closed, |$this.closedState->isEmpty(), |true)
]
{
  {meta::pure::profiles::doc.doc = 'Represents the qualification of what led to the trade\'s closure alongside the dates on which this closure took effect.'} closedState: model::external::cdm::ClosedState[0..1];
  {meta::pure::profiles::doc.doc = 'Identifies the state of the position, to distinguish if just executed, formed, already settled, closed, etc.'} positionState: model::external::cdm::PositionStatusEnum[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the reference currency for the purpose of specifying the FX Haircut relating to a posting obligation, as being either the Termination Currency or an FX Designated Currency.'} model::external::cdm::FxHaircutCurrency
[
  TerminationCurrency: if($this.isTerminationCurrency, |$this.fxDesignatedCurrency->isEmpty(), |true),
  FxDesignatedCurrency: if(!($this.isTerminationCurrency), |$this.fxDesignatedCurrency->isNotEmpty(), |true)
]
{
  {meta::pure::profiles::doc.doc = 'The reference currency for the purpose of specifying the FX Haircut relating to a posting obligation is the Termination Currency when the Boolean value is set to True.'} isTerminationCurrency: Boolean[1];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'When specified, the reference currency for the purpose of specifying the FX Haircut relating to a posting obligation. The list of valid currencies is not presently positioned as an enumeration as part of the CDM because that scope is limited to the values specified by ISDA and FpML. As a result, implementers have to make reference to the relevant standard, such as the ISO 4217 standard for currency codes.'} fxDesignatedCurrency: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Defines the information needed to create a Reset Business Event.'} model::external::cdm::ResetInstruction
{
  <<model::external::cdm::metadata.reference>> payout: model::external::cdm::Payout[1];
  {meta::pure::profiles::doc.doc = 'Specifies the \'Rate Record Day\' for a Fallback rate.  Fallback rate fixing processes typically set the fixing rate in arrears, i.e., the Fallback Rate corresponding to a Rate Record Date is set at the end of the interest accural period.  When this applies, Reset-'} rateRecordDate: Date[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the retrospective effect exception to the regulatory regime clause of Initial Margin documents as either a normalized value specified as part of an enumeration or a customized value specified of type string.'} model::external::cdm::RetrospectiveEffect
{
  {meta::pure::profiles::doc.doc = 'The Standard Initial Margin Model exception when specified by the party according to one of the enumerated values.'} standardisedException: model::external::cdm::ExceptionEnum[0..1];
  {meta::pure::profiles::doc.doc = 'The Standard Initial Margin Model exception when specified as a customized approach by the party.'} asSpecified: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Details on the referenced payment. e.g. Its cashflow components, settlement details.'} FpML::model::PaymentDetails
{
  {meta::pure::profiles::doc.doc = 'The reference to the identified payment strucutre.'} paymentReference: FpML::model::PaymentReference[0..1];
  {meta::pure::profiles::doc.doc = 'Payment details of this cash flow component, including currency, amount and payer/payee.'} grossCashflow: FpML::model::GrossCashflow[*];
  {meta::pure::profiles::doc.doc = 'The information required to settle a currency payment.'} settlementInformation: FpML::model::SettlementInformation[0..1];
}

Class model::external::cdm::RelatedParty
{
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'Reference to a party.'} partyReference: model::external::cdm::Party[1];
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'Reference to an account.'} accountReference: model::external::cdm::Account[0..1];
  {meta::pure::profiles::doc.doc = 'The category of the relationship. The related party performs the role specified in this field for the base party. For example, if the role is ,Guarantor, the related party acts as a guarantor for the base party.'} role: model::external::cdm::PartyRoleEnum[1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the Collateral Management Agreement election by each party as the Obligee. ISDA 2016 Credit Support Annex for Initial Margin, paragraph 13, General Principles, (b(i): Collateral Management Agreement.'} model::external::cdm::CollateralManagementAgreementElection
{
  {meta::pure::profiles::doc.doc = 'The elective party.'} party: model::external::cdm::CounterpartyRoleEnum[1];
  {meta::pure::profiles::doc.doc = 'The designated Collateral Management Agreement with respect to the elective party as the Obligee.'} collateralManagementAgreement: String[1];
}

Class {meta::pure::profiles::doc.doc = 'Specifies instructions for a split, consisting of a breakdown of instructions to be applied to each branch of the split. This instruction can be used to duplicate a trade, as in a clearing scenario, or to split a trade into smaller quantities (in which case each breakdown instruction needs to include a quantity change), as in an allocation.'} model::external::cdm::SplitInstruction
{
  {meta::pure::profiles::doc.doc = 'Each split breakdown specifies the set of primitive instructions to be applied to a single branch of that split. N split breakdowns result in N output trades, which include the original trade. Instructions for how to handle the original trade (e.g. if it must be closed) must be specified in one of the breakdowns.'} breakdown: model::external::cdm::PrimitiveInstructionList[1..*];
}

Class {meta::pure::profiles::doc.doc = 'A type to define automatic exercise of a swaption. With automatic exercise the option is deemed to have exercised if it is in the money by more than the threshold amount on the exercise date.'} model::external::cdm::AutomaticExercise
{
  {meta::pure::profiles::doc.doc = 'A threshold rate. The threshold of 0.10% would be represented as 0.001'} thresholdRate: Float[1];
}

Class {meta::pure::profiles::doc.doc = 'The set of operational and positional effects associated with a lifecycle event, alongside the reference to the contract reference(s) that is subject to the event (and is positioned in the before state of the event primitive).'} model::external::cdm::EventEffect
{
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'A pointer to the trade(s) to which the event effect(s) apply, i.e. in the before event state.'} effectedTrade: model::external::cdm::TradeState[*];
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'A pointer to the trade effect(s), an example of such being the outcome of a new trade, swaption exercise or novation event.'} trade: model::external::cdm::TradeState[*];
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'A pointer to the product identifier effect(s), an example of such being the outcome of the physical exercise of a bond option.'} productIdentifier: model::external::cdm::ProductIdentifier[*];
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'A pointer to the transfer effect(s), either a cash, security or other asset.'} transfer: model::external::cdm::TransferPrimitive[*];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the Custody Arrangements for the agreement.'} model::external::cdm::CustodyArrangements
{
  {meta::pure::profiles::doc.doc = 'Unless specified as True, the Control Agreement is not a Credit Support Document under the agreement with respect to a party. ISDA 2016 Credit Support Annex for Initial Margin, paragraph 6 (e): The Control Agreement as a Credit Support Document.'} isCreditSupportDocument: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'Control Agreement language is specified when True.'} hasControlAgreementLanguage: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'ISDA 2016 Credit Support Annex for Initial Margin, paragraph 13, General Principles, (n)(vii): Other Provisions.'} otherProvisions: String[0..1];
  {meta::pure::profiles::doc.doc = 'The elections specific to Collateral Access Breach language'} collateralAccessBreach: model::external::cdm::CollateralAccessBreach[0..1];
  {meta::pure::profiles::doc.doc = 'The qualification of the Custodian Risk. ISDA 2016 Credit Support Annex for Initial Margin, paragraph 13, General Principles, (n)(ii): Custodian (IM) Risk.'} custodianRisk: model::external::cdm::CustodianRisk[0..1];
  {meta::pure::profiles::doc.doc = 'The party-specific election with respect to the control agreement.'} controlAgreement: model::external::cdm::ControlAgreement[0..1];
  {meta::pure::profiles::doc.doc = 'When specified as True, means that the Custodian Events specified in Paragraph 13 General Principles, (m)(iii) will constitute an Additional Termination Event. ISDA 2016 Credit Support Annex for Initial Margin, paragraph 13, General Principles, (m)(iii): Custodian Event.'} custodianEvent: model::external::cdm::CustodianEvent[1];
  {meta::pure::profiles::doc.doc = 'The custodian and segregated account details for each party to the agreement.'} custodian: model::external::cdm::Custodian[0..1];
  {meta::pure::profiles::doc.doc = 'ISDA 2016 Japanese Law Credit Support Annex for Initial Margin, paragraph 13, General Principles, (b)(i): Collateral Management Agreement.'} collateralManagementAgreement: model::external::cdm::CollateralManagementAgreement[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the Distributions and Interest Payment provisions applicable to the Japanese Law ISDA 2016 CSA for Initial Margin and the New York Law ISDA 2016 CSA for Variation Margin. ISDA 2016 Japanese Law Credit Support Annex for Initial Margin, paragraph 13, General Principles, (n): Distributions and Interest Payment (IM). | ISDA 2016 Credit Support Annex for Variation Margin, paragraph 13, (i): Distributions and Interest Payment (VM).'} model::external::cdm::DistributionAndInterestPayment
{
  {meta::pure::profiles::doc.doc = 'The interest rate associated with initial or variation margin collateral, depending upon the type of credit agreement that this election is associated with. ISDA 2016 Japanese Law Credit Support Annex for Initial Margin, paragraph 13, General Principles, (n)(i): Interest Rate (IM). | ISDA 2016 Credit Support Annex for Variation Margin, paragraph 13, (i)(i): Interest Rate (VM).'} interestRate: model::external::cdm::EligibleCurrencyInterestRate[1..*];
  {meta::pure::profiles::doc.doc = 'The Interest Payment Transfer is applicable when True. ISDA 2016 Japanese Law Credit Support Annex for Initial Margin, paragraph 13, General Principles, (n)(ii): Transfer of Interest Payment (IM) or application of Interest Amount (IM). | ISDA 2016 Credit Support Annex for Variation Margin, paragraph 13, (i)(ii): Transfer of Interest Payment (VM) or application of Interest Amount (VM).'} interestPaymentTransfer: Boolean[1];
  {meta::pure::profiles::doc.doc = 'The Interest Payment Netting is applicable when True. ISDA 2016 Japanese Law Credit Support Annex for Initial Margin, paragraph 13, General Principles, (n)(ii): Transfer of Interest Payment (IM) or application of Interest Amount (IM). | ISDA 2016 Credit Support Annex for Variation Margin, paragraph 13, (i)(ii): Transfer of Interest Payment (VM) or application of Interest Amount (VM).'} interestPaymentNetting: Boolean[1];
  {meta::pure::profiles::doc.doc = 'The application of Interest Amount with respect to the Delivery Amount and the Return Amount. ISDA 2016 Japanese Law Credit Support Annex for Initial Margin, paragraph 13, General Principles, (n)(ii).'} interestAmount: model::external::cdm::InterestAmount[1];
  {meta::pure::profiles::doc.doc = 'To election to specify whether the Interest Adjustment is applicable and what its periodicity is. ISDA 2016 Japanese Law Credit Support Annex for Initial Margin, paragraph 13, General Principles, (n)(ii). | ISDA 2016 Credit Support Annex for Variation Margin, paragraph 13, (i)(ii): Transfer of Interest Payment (VM) or application of Interest Amount (VM).'} interestAdjustment: model::external::cdm::InterestAdjustment[1];
  {meta::pure::profiles::doc.doc = 'Negative Interest is applicable when True, and not applicable when False. ISDA 2016 Japanese Law Credit Support Annex for Initial Margin, paragraph 13, General Principles, (n)(iii): Other Interest Elections. | ISDA 2016 Credit Support Annex for Variation Margin, paragraph 13, (i)(iii): Other Interest Elections.'} negativeInterest: Boolean[1];
  {meta::pure::profiles::doc.doc = 'Daily interest compounding is applicable when True, and not applicable when False. ISDA 2016 Japanese Law Credit Support Annex for Initial Margin, paragraph 13, General Principles, (n)(iii): Other Interest Elections. | ISDA 2016 Credit Support Annex for Variation Margin, paragraph 13, (i)(iii): Other Interest Elections.'} dailyInterestCompounding: Boolean[1];
  {meta::pure::profiles::doc.doc = 'When the alternative provision clause is specified, it means that the ISDA CSA Japanese Law provisions specified in Paragraph 6(c)(ii) don\'t apply and are overwritten by this election. When it is not specified, it means that the ISDA CSA Japanese Law provisions specified in Paragraph 6(c)(ii) apply. ISDA 2016 Japanese Law Credit Support Annex for Initial Margin, paragraph 13, General Principles, (n)(iv): Alternative to Interest Amount (IM) and Interest Payment (IM). | ISDA 2016 Credit Support Annex for Variation Margin, paragraph 13, (i)(iv): Alternative to Interest Amount (VM) and Interest Payment (VM).'} alternativeProvision: String[0..1];
}

Class FpML::model::ValuationDate
[
  c1_choice: ($this.singleValuationDate->isNotEmpty() && $this.multipleValuationDates->isEmpty()) || ($this.singleValuationDate->isEmpty() && $this.multipleValuationDates->isNotEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'Where single valuation date is specified as being applicable for cash settlement, this element specifies the number of business days after satisfaction of all conditions to settlement when such valuation date occurs. ISDA 2003 Term: Single Valuation Date'} singleValuationDate: FpML::model::SingleValuationDate[0..1];
  {meta::pure::profiles::doc.doc = 'Where multiple valuation dates are specified as being applicable for cash settlement, this element specifies (a) the number of applicable valuation dates, and (b) the number of business days after satisfaction of all conditions to settlement when the first such valuation date occurs, and (c) the number of business days thereafter of each successive valuation date. ISDA 2003 Term: Multiple Valuation Dates'} multipleValuationDates: FpML::model::MultipleValuationDates[0..1];
}

Class model::external::cdm::Tx
{
  newTx: model::external::cdm::New[1];
  tradDt: String[1];
  tradgCpcty: String[1];
  qty: model::external::cdm::Qty[1];
  pric: model::external::cdm::Pric[1];
  tradVn: String[1];
  ctryOfBrnch: String[1];
}

Class {meta::pure::profiles::doc.doc = 'A type for defining the strike price for an equity option. The strike price is either: (i) in respect of an index option transaction, the level of the relevant index specified or otherwise determined in the transaction; or (ii) in respect of a share option transaction, the price per share specified or otherwise determined in the transaction. This can be expressed either as a percentage of notional amount or as an absolute value.'} FpML::model::OptionStrike extends FpML::model::OptionNumericStrike
{
  {meta::pure::profiles::doc.doc = 'The currency in which an amount is denominated.'} currency: FpML::model::Currency[0..1];
}

Class {meta::pure::profiles::doc.doc = 'An identifier used to identify a matchable payment.'} FpML::model::PaymentId
[
  c1_length: $this.paymentIdScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  paymentIdScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'Defines the primitive event that represents an executed trade that has been affirmed (or confirmed) by the two parties. If both \'after\' and \'before\' attributes exist, then both must have identical TradableProduct values.'} model::external::cdm::ContractFormationPrimitive
{
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'Represents the output of an execution between the parties.'} before: model::external::cdm::TradeState[0..1];
  {meta::pure::profiles::doc.doc = 'Represents the new contract being formed between the parties.'} after: model::external::cdm::TradeState[1];
}

Class {meta::pure::profiles::doc.doc = 'Specification of the standard set of terms that define a legal agreement.'} model::external::cdm::Agreement
[
  one_of_constraint: ((((($this.creditSupportAgreementElections->isNotEmpty() && $this.collateralTransferAgreementElections->isEmpty()) && $this.securityAgreementElections->isEmpty()) && $this.masterAgreementSchedule->isEmpty()) || ((($this.collateralTransferAgreementElections->isNotEmpty() && $this.creditSupportAgreementElections->isEmpty()) && $this.securityAgreementElections->isEmpty()) && $this.masterAgreementSchedule->isEmpty())) || ((($this.securityAgreementElections->isNotEmpty() && $this.creditSupportAgreementElections->isEmpty()) && $this.collateralTransferAgreementElections->isEmpty()) && $this.masterAgreementSchedule->isEmpty())) || ((($this.masterAgreementSchedule->isNotEmpty() && $this.creditSupportAgreementElections->isEmpty()) && $this.collateralTransferAgreementElections->isEmpty()) && $this.securityAgreementElections->isEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'Elections to specify a Credit Support Annex or Credit Support Deed for Intial or Variation Margin.'} creditSupportAgreementElections: model::external::cdm::CreditSupportAgreementElections[0..1];
  {meta::pure::profiles::doc.doc = 'Elections to specify a Collateral Transfer Agreement.'} collateralTransferAgreementElections: model::external::cdm::CollateralTransferAgreementElections[0..1];
  {meta::pure::profiles::doc.doc = 'Elections to specify a Security agreement.'} securityAgreementElections: model::external::cdm::SecurityAgreementElections[0..1];
  {meta::pure::profiles::doc.doc = 'Elections to specify a Master Agreement Schedule.'} masterAgreementSchedule: model::external::cdm::MasterAgreementSchedule[0..1];
}

Class {meta::pure::profiles::doc.doc = 'The number bound is defined as a number and whether the bound is inclusive.'} model::external::cdm::NumberBound
{
  {meta::pure::profiles::doc.doc = 'The number to be used as the bound, e.g. 5.'} number: Float[1];
  {meta::pure::profiles::doc.doc = 'Whether the number bound is inclusive, e.g. for a lower bound, false would indicate greater than, whereas true would indicate greater than or equal to.'} inclusive: Boolean[1];
}

Class {meta::pure::profiles::doc.doc = 'A type defining a step date and non-negative step value pair. This step definitions are used to define varying rate or amount schedules, e.g. a notional amortization or a step-up coupon schedule.'} FpML::model::NonNegativeStep extends FpML::model::StepBase
[
  c1_range: $this.stepValue->forAll(x: Decimal[1]|$x >= 0)
]
{
  {meta::pure::profiles::doc.doc = 'The non-negative rate or amount which becomes effective on the associated stepDate. A rate of 5% would be represented as 0.05.'} stepValue: Decimal[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type for defining a calendar spread feature.'} model::external::cdm::CalendarSpread
{
  expirationDateTwo: model::external::cdm::AdjustableOrRelativeDate[1];
}

Class {meta::pure::profiles::doc.doc = 'Represents a set of criteria used to specify eligible collateral.'} model::external::cdm::EligibleCollateralCriteria extends model::external::cdm::CollateralCriteriaBase
{
  {meta::pure::profiles::doc.doc = 'Identifies the treatment of specified collateral, e.g., haircuts,holding limits or exclusions.'} treatment: model::external::cdm::CollateralTreatment[1];
}

Class {meta::pure::profiles::doc.doc = 'Indicates The period range defined as either a lower and upper period bound, or both.'} model::external::cdm::PeriodRange
[
  one_of_constraint: ($this.lowerBound->isNotEmpty() && $this.upperBound->isEmpty()) || ($this.upperBound->isNotEmpty() && $this.lowerBound->isEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'Specifies the lower bound of a period range, e.g. greater than or equal to 5Y.'} lowerBound: model::external::cdm::PeriodBound[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the upper bound of a period range, e.g. less than to 10Y.'} upperBound: model::external::cdm::PeriodBound[0..1];
}

Class FpML::model::Deposit extends FpML::model::UnderlyingAsset
{
  {meta::pure::profiles::doc.doc = 'Specifies the term of the deposit, e.g. 5Y.'} term: FpML::model::Period[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the frequency at which the deposit pays, e.g. 6M.'} paymentFrequency: FpML::model::Period[0..1];
  {meta::pure::profiles::doc.doc = 'The day count basis for the deposit.'} dayCountFraction: FpML::model::DayCountFraction[0..1];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'A class to specify a generic identifier, applicable to CDM artefacts such as executions, contracts, lifecycle events and legal documents. An issuer can be associated with the actual identifier value as a way to properly qualify it.'} model::external::cdm::Identifier
[
  IssuerChoice: ($this.issuerReference->isNotEmpty() && $this.issuer->isEmpty()) || ($this.issuer->isNotEmpty() && $this.issuerReference->isEmpty())
]
{
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'The identifier issuer, when specified by reference to a party specified as part of the transaction.'} issuerReference: model::external::cdm::Party[0..1];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'The identifier issuer, when specified explicitly alongside the identifier value (instead of being specified by reference to a party).'} issuer: String[0..1];
  {meta::pure::profiles::doc.doc = 'The identifier value. This level of indirection between the issuer and the identifier and its version provides the ability to associate multiple identifiers to one issuer, consistently with the FpML PartyTradeIdentifier.'} assignedIdentifier: model::external::cdm::AssignedIdentifier[1..*];
}

Class {meta::pure::profiles::doc.doc = 'Specifies the instructions for creation of a billing record.'} model::external::cdm::BillingRecordInstruction
{
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'The trade for the individual billing record.'} tradeState: model::external::cdm::TradeState[1];
  {meta::pure::profiles::doc.doc = 'The observations used to calculate the billing amount.'} observation: model::external::cdm::Observation[1..*];
  {meta::pure::profiles::doc.doc = 'The starting date of the period described by this record'} recordStartDate: Date[1];
  {meta::pure::profiles::doc.doc = 'The ending date of the period described by this record'} recordEndDate: Date[1];
  {meta::pure::profiles::doc.doc = 'The date for settlement of the transfer.'} settlementDate: Date[1];
}

Class {meta::pure::profiles::doc.doc = 'A short form unique identifier for an exchange. If the element is not present then the exchange shall be the primary exchange on which the underlying is listed. The term \'Exchange\' is assumed to have the meaning as defined in the ISDA 2002 Equity Derivatives Definitions.'} FpML::model::ExchangeId
[
  c1_length: $this.exchangeIdScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() >= 1,
  c3_length: $this.value->length() <= 255
]
{
  exchangeIdScheme: String[0..1];
  value: String[1];
}

Class <<meta::pure::profiles::typemodifiers.abstract>> {meta::pure::profiles::doc.doc = 'A type for defining the common features of options.'} FpML::model::OptionBase extends FpML::model::Option
{
  {meta::pure::profiles::doc.doc = 'The type of option transaction. From a usage standpoint, put/call is the default option type, while payer/receiver indicator is used for options index credit default swaps, consistently with the industry practice. Straddle is used for the case of straddle strategy, that combine a call and a put with the same strike.'} optionType: FpML::model::OptionTypeEnum[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type describing a set of dates defined as relative to another set of dates.'} FpML::model::RelativeDates extends FpML::model::RelativeDateOffset
{
  {meta::pure::profiles::doc.doc = 'The number of periods in the referenced date schedule that are between each date in the relative date schedule. Thus a skip of 2 would mean that dates are relative to every second date in the referenced schedule. If present this should have a value greater than 1.'} periodSkip: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'The first and last dates of a schedule. This can be used to restrict the range of values in a reference series of dates.'} scheduleBounds: FpML::model::DateRange[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class describing the weight of each of the underlier constituent within the basket, either in absolute or relative terms.'} model::external::cdm::ConstituentWeight
[
  BasketPercentage: if($this.basketPercentage->isNotEmpty(), |($this.basketPercentage >= 0.0) && ($this.basketPercentage <= 1.0), |true)
]
{
  {meta::pure::profiles::doc.doc = 'The number of units (index or securities) that constitute the underlier of the swap. In the case of a basket swap, this element is used to reference both the number of basket units, and the number of each asset components of the basket when these are expressed in absolute terms.'} openUnits: Float[0..1];
  {meta::pure::profiles::doc.doc = 'The relative weight of each respective basket constituent, expressed in percentage. A basket percentage of 5% would be represented as 0.05.'} basketPercentage: Float[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify party specific Control Agreement language related to delivery of a Notice of Exclusive Control'} model::external::cdm::ControlAgreementNecEventElection
{
  {meta::pure::profiles::doc.doc = 'The elective party.'} party: model::external::cdm::CounterpartyRoleEnum[1];
  necEvent: Boolean[1];
}

Class {meta::pure::profiles::doc.doc = 'A class that is used for including the currency exchange rates used to cross between the traded currencies for non-base currency FX contracts.'} model::external::cdm::CrossRate extends model::external::cdm::QuotedCurrencyPair
[
  CrossRate_rule_1: if($this.forwardPoints->isNotEmpty(), |$this.spotRate->isNotEmpty(), |true)
]
{
  {meta::pure::profiles::doc.doc = 'The exchange rate used to cross between the traded currencies.'} rate: Float[1];
  {meta::pure::profiles::doc.doc = 'An optional element used for FX forwards and certain types of FX OTC options. For deals consummated in the FX Forwards Market, this represents the current market rate for a particular currency pair.'} spotRate: Float[0..1];
  {meta::pure::profiles::doc.doc = 'An optional element used for deals consummated in the FX Forwards market. Forward points represent the interest rate differential between the two currencies traded and are quoted as a premium or a discount. Forward points are added to, or subtracted from, the spot rate to create the rate of the forward trade.'} forwardPoints: Float[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A data defining:  the right of a party to cancel a swap transaction on the specified exercise dates. The provision is for \'walk-away\' cancellation (i.e. the fair value of the swap is not paid). A fee payable on exercise can be specified. As a difference from the FpML construct, the canonical model extends the BuyerSeller class.'} model::external::cdm::CancelableProvision extends model::external::cdm::BuyerSeller
[
  ExerciseChoice: ((($this.americanExercise->isNotEmpty() && $this.bermudaExercise->isEmpty()) && $this.europeanExercise->isEmpty()) || (($this.bermudaExercise->isNotEmpty() && $this.americanExercise->isEmpty()) && $this.europeanExercise->isEmpty())) || (($this.europeanExercise->isNotEmpty() && $this.americanExercise->isEmpty()) && $this.bermudaExercise->isEmpty()),
  CancelableProvisionExerciseNoticeReceiverParty: if($this.exerciseNotice.exerciseNoticeReceiver->isNotEmpty(), |$this.exerciseNotice.exerciseNoticeReceiver == model::external::cdm::AncillaryRoleEnum.ExerciseNoticeReceiverPartyCancelableProvision, |true)
]
{
  {meta::pure::profiles::doc.doc = 'American exercise. FpML implementations consists in an exercise substitution group.'} americanExercise: model::external::cdm::AmericanExercise[0..1];
  {meta::pure::profiles::doc.doc = 'Bermuda exercise. FpML implementations consists in an exercise substitution group.'} bermudaExercise: model::external::cdm::BermudaExercise[0..1];
  {meta::pure::profiles::doc.doc = 'European exercise. FpML implementations consists in an exercise substitution group.'} europeanExercise: model::external::cdm::EuropeanExercise[0..1];
  {meta::pure::profiles::doc.doc = 'Definition of the party to whom notice of exercise should be given.'} exerciseNotice: model::external::cdm::ExerciseNotice[0..1];
  {meta::pure::profiles::doc.doc = 'A flag to indicate whether follow-up confirmation of exercise (written or electronic) is required following telephonic notice by the buyer to the seller or seller\'s agent.'} followUpConfirmation: Boolean[1];
  {meta::pure::profiles::doc.doc = 'The adjusted dates associated with a cancelable provision. These dates have been adjusted for any applicable business day convention.'} cancelableProvisionAdjustedDates: model::external::cdm::CancelableProvisionAdjustedDates[0..1];
  {meta::pure::profiles::doc.doc = 'Business date convention adjustment to final payment period per leg (swapStream) upon exercise event. The adjustments can be made in-line with leg level BDC\'s or they can be specified separately.'} finalCalculationPeriodDateAdjustment: model::external::cdm::FinalCalculationPeriodDateAdjustment[*];
  {meta::pure::profiles::doc.doc = 'An initial fee for the cancelable option.'} initialFee: model::external::cdm::SimplePayment[0..1];
  callingParty: model::external::cdm::CallingPartyEnum[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type defining a short form unique identifier for a future contract.'} FpML::model::FutureId
[
  c1_length: $this.futureIdScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() >= 1,
  c3_length: $this.value->length() <= 255
]
{
  futureIdScheme: String[0..1];
  value: String[1];
}

Class <<meta::pure::profiles::typemodifiers.abstract>> {meta::pure::profiles::doc.doc = 'The abstract base class for all types which define intra-document pointers.'} FpML::model::Reference
{
}

Class {meta::pure::profiles::doc.doc = 'A class to specify bespoke Calculation Date terms for the purposes of Initial Margin'} model::external::cdm::BespokeCalculationDate
{
  {meta::pure::profiles::doc.doc = 'Additional Calculation Date terms are applicable when True and not applicable when False'} isApplicable: Boolean[1];
  {meta::pure::profiles::doc.doc = 'The Additional Calculation Date terms for the purposes of Initial Margin'} calculationDateImTerms: String[0..1];
}

Class FpML::model::AdjustedPaymentDates
{
  {meta::pure::profiles::doc.doc = 'The adjusted payment date. This date should already be adjusted for any applicable business day convention. This component is not intended for use in trade confirmation but my be specified to allow the fee structure to also serve as a cashflow type component (all dates the the Cashflows type are adjusted payment dates).'} adjustedPaymentDate: StrictDate[0..1];
  {meta::pure::profiles::doc.doc = 'The currency amount of the payment.'} paymentAmount: FpML::model::Money[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Determines the currency rate that the seller of the equity amounts will apply at each valuation date for converting the respective amounts into a currency that is different from the currency denomination of the underlyer.'} FpML::model::Quanto
{
  {meta::pure::profiles::doc.doc = 'Specifies a currency conversion rate.'} fxRate: FpML::model::FxRate[*];
  {meta::pure::profiles::doc.doc = 'Specifies the methodology (reference source and, optionally, fixing time) to be used for determining a currency conversion rate.'} fxSpotRateSource: FpML::model::FxSpotRateSource[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Parameters to describe the observation shift for a daily compounded or averaged floating rate. This type is used to represent modular computed rates in interestRatePayouts.'} model::external::cdm::ObservationShiftCalculation
{
  {meta::pure::profiles::doc.doc = 'The number of days of observation shift.'} offsetDays: Integer[0..1];
  {meta::pure::profiles::doc.doc = 'Whether the rate is calculated in advance, in arrears, or relative to a reset date.'} calculationBase: model::external::cdm::ObservationPeriodDatesEnum[0..1];
  {meta::pure::profiles::doc.doc = 'Any additional business days that be applicable.'} additionalBusinessDays: model::external::cdm::BusinessCenters[0..1];
}

Class {meta::pure::profiles::doc.doc = 'An identifier used to identify an individual person.'} FpML::model::PersonId
[
  c1_length: $this.personIdScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() >= 1,
  c3_length: $this.value->length() <= 255
]
{
  personIdScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'Reference to any rate (floating, inflation) derived from the abstract Rate component.'} FpML::model::RateReference
{
  href: String[1];
}

Class {meta::pure::profiles::doc.doc = 'An exchange traded derivative contract.'} FpML::model::ExchangeTradedContract extends FpML::model::ExchangeTraded
[
  c1_range: $this.multiplier->forAll(x: Decimal[1]|$x > 0),
  c2_length: $this.contractReference->forAll(x: String[1]|$x->length() >= 1)
]
{
  {meta::pure::profiles::doc.doc = 'Specifies the contract multiplier that can be associated with the number of units.'} multiplier: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the contract that can be referenced, besides the undelyer type.'} contractReference: String[0..1];
  {meta::pure::profiles::doc.doc = 'The date when the contract expires.'} expirationDate: FpML::model::AdjustableOrRelativeDate[0..1];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'Security payout specification in case the product payout involves some form of security collateral, as in a securities financing transaction.'} model::external::cdm::SecurityPayout
{
  {meta::pure::profiles::doc.doc = 'Each SecurityLeg represent a buy/sell at different dates, typically 1 near leg and 1 far leg in a securities financing transaction.'} securityLeg: model::external::cdm::SecurityLeg[1..*];
  {meta::pure::profiles::doc.doc = 'RepoDurationEnum.'} initialMargin: model::external::cdm::InitialMargin[0..1];
  {meta::pure::profiles::doc.doc = 'A duration code for the repo transaction. This defines a type of a repo transaction with fixed duration.'} repoDuration: model::external::cdm::RepoDurationEnum[0..1];
  {meta::pure::profiles::doc.doc = 'The underlying securities and their valuation for the security leg.'} securityValuation: model::external::cdm::SecurityValuation[1..*];
}

Class {meta::pure::profiles::doc.doc = 'A type describing how notice of exercise should be given. This can be either manual or automatic.'} FpML::model::ExerciseProcedure
[
  c1_choice: ($this.manualExercise->isNotEmpty() && $this.automaticExercise->isEmpty()) || ($this.manualExercise->isEmpty() && $this.automaticExercise->isNotEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'Specifies that the notice of exercise must be given by the buyer to the seller or seller\'s agent.'} manualExercise: FpML::model::ManualExercise[0..1];
  {meta::pure::profiles::doc.doc = 'If automatic is specified then the notional amount of the underlying swap, not previously exercised under the swaption will be automatically exercised at the expriration time on the expiration date if at such time the buyer is in-the-money, provided that the difference between the settlement rate and the fixed rate under the relevant underlying swap is not less than the specified threshold rate. The term in-the-money is assumed to have the meaning defining in the 2000 ISDA Definitions, Section 17.4 In-the-money.'} automaticExercise: FpML::model::AutomaticExercise[0..1];
  {meta::pure::profiles::doc.doc = 'A flag to indicate whether follow-up confirmation of exercise (written or electronic) is required following telephonic notice by the buyer to the seller or seller\'s agent.'} followUpConfirmation: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'Has the meaning defined as part of the 1997 ISDA Government Bond Option Definitions, section 4.5 Limited Right to Confirm Exercise. If present, (i) the Seller may request the Buyer to confirm its intent if not done on or before the expiration time on the Expiration date (ii) specific rules will apply in relation to the settlement mode.'} limitedRightToConfirm: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'Typically applicable to the physical settlement of bond and convertible bond options. If present, means that the Party required to deliver the bonds will divide those to be delivered as notifying party desires to facilitate delivery obligations.'} splitTicket: Boolean[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A data defining:  parameters associated with a floating rate reset. This data forms:  part of the cashflows representation of a stream.'} model::external::cdm::FloatingRateDefinition
[
  FloatingRateMultiplier: if($this.floatingRateMultiplier->isNotEmpty(), |!($this.floatingRateMultiplier == 1), |true)
]
{
  {meta::pure::profiles::doc.doc = 'The final calculated rate for a calculation period after any required averaging of rates A calculated rate of 5% would be represented as 0.05.'} calculatedRate: Float[0..1];
  {meta::pure::profiles::doc.doc = 'The details of a particular rate observation, including the fixing date and observed rate. A list of rate observation elements may be ordered in the document by ascending adjusted fixing date. An FpML document containing an unordered list of rate observations is still regarded as a conformant document.'} rateObservation: model::external::cdm::RateObservation[*];
  {meta::pure::profiles::doc.doc = 'A rate multiplier to apply to the floating rate. The multiplier can be a positive or negative decimal. This element should only be included if the multiplier is not equal to 1 (one).'} floatingRateMultiplier: Float[0..1];
  {meta::pure::profiles::doc.doc = 'The ISDA Spread, if any, which applies for the calculation period. The spread is a per annum rate, expressed as a decimal. For purposes of determining a calculation period amount, if positive the spread will be added to the floating rate and if negative the spread will be subtracted from the floating rate. A positive 10 basis point (0.1%) spread would be represented as 0.001.'} spread: Float[0..1];
  {meta::pure::profiles::doc.doc = 'The cap rate, if any, which applies to the floating rate for the calculation period. The cap rate (strike) is only required where the floating rate on a swap stream is capped at a certain strike level. The cap rate is assumed to be exclusive of any spread and is a per annum rate, expressed as a decimal. A cap rate of 5% would be represented as 0.05.'} capRate: model::external::cdm::Strike[*];
  {meta::pure::profiles::doc.doc = 'The floor rate, if any, which applies to the floating rate for the calculation period. The floor rate (strike) is only required where the floating rate on a swap stream is floored at a certain strike level. The floor rate is assumed to be exclusive of any spread and is a per annum rate, expressed as a decimal. The floor rate of 5% would be represented as 0.05.'} floorRate: model::external::cdm::Strike[*];
}

Class {meta::pure::profiles::doc.doc = 'Reference to a business day adjustments structure.'} FpML::model::BusinessDayAdjustmentsReference extends FpML::model::Reference
{
  href: String[1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify terms jurisdiction related terms.'} model::external::cdm::JurisdictionRelatedTerms
{
  {meta::pure::profiles::doc.doc = 'The Japanese Securities Provisions election.'} japaneseSecuritiesProvisions: model::external::cdm::JapaneseSecuritiesProvisions[0..1];
  {meta::pure::profiles::doc.doc = 'Classification of optional exclusive jurisdiction terms'} exclusiveJurisdiction: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'The Jury Waiver conditions specific to the agreement.'} juryWaiver: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'The French Law Addendum Provisions specific to the agreement.'} frenchLawAddendum: model::external::cdm::FrenchLawAddendum[0..1];
  {meta::pure::profiles::doc.doc = 'The qualification of whether the Belgian Law Security Agreement Addendum is deemed applicable by the parties (True) or not (False).'} belgianLawSecurityAgreement: Boolean[0..1];
}

Class {meta::pure::profiles::doc.doc = 'The set of elections which specify a Master Agreement.'} model::external::cdm::MasterAgreementSchedule
{
  {meta::pure::profiles::doc.doc = 'The specification of whether there is an automatic occurrence of an Early Termination Date in respect of Transactions upon the occurrence of certain bankruptcy / insolvency related events.'} automaticEarlyTermination: model::external::cdm::AutomaticEarlyTermination[1];
  {meta::pure::profiles::doc.doc = 'Specification of the currency in which the termination payment is made (including the process by which such currency is determined).'} terminationCurrency: model::external::cdm::TerminationCurrency[1];
  {meta::pure::profiles::doc.doc = 'Specification of the address and other details for notices.'} addressForNotices: model::external::cdm::AddressForNotices[1];
  {meta::pure::profiles::doc.doc = 'Specification of whether the Governing Law clause extends to Non-Contractual Obligations (True) or does not extend to Non-Contractual Obligations (False).'} nonContractualObligations: Boolean[1];
  {meta::pure::profiles::doc.doc = 'Identification of party specific Credit Support Documents applicable to the document.'} creditSupportDocument: model::external::cdm::CreditSupportDocument[1];
  {meta::pure::profiles::doc.doc = 'Identification of party specific Credit Support Providers applicable to the document.'} creditSupportProvider: model::external::cdm::CreditSupportProvider[1];
  {meta::pure::profiles::doc.doc = 'A provision that allows each party to specify its Specified Entities for certain Events of Default and Termination Events'} specifiedEntities: model::external::cdm::SpecifiedEntities[4];
}

Class {meta::pure::profiles::doc.doc = 'A type defining the settlement rate options through a scheme reflecting the terms of the Annex A to the 1998 FX and Currency Option Definitions.'} FpML::model::SettlementRateOption
[
  c1_length: $this.settlementRateOptionScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  settlementRateOptionScheme: String[0..1];
  value: String[1];
}

Class FpML::model::NotifyingParty
{
  buyerPartyReference: FpML::model::PartyReference[0..1];
  sellerPartyReference: FpML::model::PartyReference[0..1];
}

Class <<meta::pure::profiles::typemodifiers.abstract>> {meta::pure::profiles::doc.doc = 'The base type which all FpML products extend.'} FpML::model::Product
[
  c1_choice: $this.productType->isNotEmpty() || ($this.productType->isEmpty() && $this.productId->isNotEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'A classification of the most important risk class of the trade. FpML defines a simple asset class categorization using a coding scheme.'} primaryAssetClass: FpML::model::AssetClass[0..1];
  {meta::pure::profiles::doc.doc = 'A classification of additional risk classes of the trade, if any. FpML defines a simple asset class categorization using a coding scheme.'} secondaryAssetClass: FpML::model::AssetClass[*];
  {meta::pure::profiles::doc.doc = 'A classification of the type of product. FpML defines a simple product categorization using a coding scheme.'} productType: FpML::model::ProductType[*];
  {meta::pure::profiles::doc.doc = 'A product reference identifier. The product ID is an identifier that describes the key economic characteristics of the trade type, with the exception of concepts such as size (notional, quantity, number of units) and price (fixed rate, strike, etc.) that are negotiated for each transaction. It can be used to hold identifiers such as the \'UPI\' (universal product identifier) required by certain regulatory reporting rules. It can also be used to hold identifiers of benchmark products or product temnplates used by certain trading systems or facilities. FpML does not define the domain values associated with this element. Note that the domain values for this element are not strictly an enumerated list.'} productId: FpML::model::ProductId[*];
  {meta::pure::profiles::doc.doc = 'A classification of the risk class of the trade. FpML defines a simple asset class categorization using a coding scheme.'} assetClass: FpML::model::AssetClass[*];
  {meta::pure::profiles::doc.doc = 'Describes the type of any embedded optionality in the transaction that might not otherwise be apparent. Can be used to represent embedded optionality such as early termination provisions, extendible provisions, or cancelable provisions, etc., where applicable. If omitted, no embedded optionality is applicable.'} embeddedOptionType: FpML::model::EmbeddedOptionType[0..2];
  id: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type defining parameters associated with an individual observation or fixing. This type forms part of the cashflow representation of a stream.'} FpML::model::RateObservation
{
  {meta::pure::profiles::doc.doc = 'The reset date.'} resetDate: StrictDate[0..1];
  {meta::pure::profiles::doc.doc = 'The adjusted fixing date, i.e. the actual date the rate is observed. The date should already be adjusted for any applicable business day convention.'} adjustedFixingDate: StrictDate[0..1];
  {meta::pure::profiles::doc.doc = 'The actual observed rate before any required rate treatment is applied, e.g. before converting a rate quoted on a discount basis to an equivalent yield. An observed rate of 5% would be represented as 0.05.'} observedRate: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'The observed rate after any required rate treatment is applied. A treated rate of 5% would be represented as 0.05.'} treatedRate: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'The number of days weighting to be associated with the rate observation, i.e. the number of days such rate is in effect. This is applicable in the case of a weighted average method of calculation where more than one reset date is established for a single calculation period. If this element is not included, observationWeight = 1 by default.'} observationWeight: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'A pointer style reference to a floating rate component defined as part of a stub calculation period amount component. It is only required when it is necessary to distinguish two rate observations for the same fixing date which could occur when linear interpolation of two different rates occurs for a stub calculation period.'} rateReference: FpML::model::RateReference[0..1];
  {meta::pure::profiles::doc.doc = 'The value representing the forecast rate used to calculate the forecast future value of the accrual period.A value of 1% should be represented as 0.01'} forecastRate: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'The value representing the forecast rate after applying rate treatment rules. A value of 1% should be represented as 0.01'} treatedForecastRate: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'Observation Parameters for IBOR fallback rates. These allow recording information about how the fallback rate was'} fallback: FpML::model::FallbackRateObservation[0..1];
  id: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Defines a custom basket by referencing a product identifier and its consituents.'} model::external::cdm::Basket extends model::external::cdm::ProductBase
{
  {meta::pure::profiles::doc.doc = 'Identifies the constituents of the basket'} basketConstituent: model::external::cdm::Product[1..*];
}

Class <<meta::pure::profiles::typemodifiers.abstract>> {meta::pure::profiles::doc.doc = 'A type defining a step date and step value pair. This step definitions are used to define varying rate or amount schedules, e.g. a notional amortization or a step-up coupon schedule.'} FpML::model::StepBase
{
  {meta::pure::profiles::doc.doc = 'The date on which the associated stepValue becomes effective. This day may be subject to adjustment in accordance with a business day convention.'} stepDate: StrictDate[0..1];
  id: String[0..1];
}

Class FpML::model::FailureToPay
{
  {meta::pure::profiles::doc.doc = 'Indicates whether the failure to pay provision is applicable.'} applicable: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'If this element is specified, indicates whether or not a grace period extension is applicable. ISDA 2003 Term: Grace Period Extension Applicable.'} gracePeriodExtension: FpML::model::GracePeriodExtension[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies a threshold for the failure to pay credit event. Market standard is USD 1,000,000 (JPY 100,000,000 for Japanese Yen trades) or its equivalent in the relevant obligation currency. This is applied on an aggregate basis across all Obligations of the Reference Entity. Intended to prevent technical/operational errors from triggering credit events. ISDA 2003 Term: Payment Requirement.'} paymentRequirement: FpML::model::Money[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type defining a range of contiguous business days by defining an unadjusted first date, an unadjusted last date and a business day convention and business centers for adjusting the first and last dates if they would otherwise fall on a non business day in the specified business centers. The days between the first and last date must also be good business days in the specified centers to be counted in the range.'} FpML::model::BusinessDateRange extends FpML::model::DateRange
{
  {meta::pure::profiles::doc.doc = 'The convention for adjusting a date if it would otherwise fall on a day that is not a business day.'} businessDayConvention: FpML::model::BusinessDayConventionEnum[0..1];
  {meta::pure::profiles::doc.doc = 'A pointer style reference to a set of financial business centers defined elsewhere in the document. This set of business centers is used to determine whether a particular day is a business day or not.'} businessCentersReference: FpML::model::BusinessCentersReference[0..1];
  businessCenters: FpML::model::BusinessCenters[0..1];
}

Class FpML::model::FeeLeg extends FpML::model::Leg
[
  c1_range: $this.marketPrice->forAll(x: Decimal[1]|$x >= 0)
]
{
  {meta::pure::profiles::doc.doc = 'Specifies a single fixed payment that is payable by the payer to the receiver on the initial payment date. The fixed payment to be paid is specified in terms of a known currency amount. This element should be used for CDS Index trades, Standard CDS trades, and can be used for CDS trades where it is necessary to represent a payment from Seller to Buyer. For CDS trades where a payment is to be made from Buyer to Seller the feeLeg/singlePayment structure must be used.'} initialPayment: FpML::model::InitialPayment[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies a single fixed amount that is payable by the buyer to the seller on the fixed rate payer payment date. The fixed amount to be paid is specified in terms of a known currency amount.'} singlePayment: FpML::model::SinglePayment[*];
  {meta::pure::profiles::doc.doc = 'Specifies a periodic schedule of fixed amounts that are payable by the buyer to the seller on the fixed rate payer payment dates. The fixed amount to be paid on each payment date can be specified in terms of a known currency amount or as an amount calculated on a formula basis by reference to a per annum fixed rate. The applicable business day convention and business day for adjusting any fixed rate payer payment date if it would otherwise fall on a day that is not a business day are those specified in the dateAdjustments element within the generalTerms component. ISDA 2003 Term:'} periodicPayment: FpML::model::PeriodicPayment[0..1];
  {meta::pure::profiles::doc.doc = 'An optional element that only has meaning in a credit index trade. This element contains the credit spread (\'fair value\') at which the trade was executed. Unlike the fixedRate of an index, the marketFixedRate varies over the life of the index depending on market conditions. The marketFixedRate is the price of the index as quoted by trading desks.'} marketFixedRate: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'Applicable to CDS on MBS to specify whether payment delays are applicable to the fixed Amount. RMBS typically have a payment delay of 5 days between the coupon date of the reference obligation and the payment date of the synthetic swap. CMBS do not, on the other hand, with both payment dates being on the 25th of each month.'} paymentDelay: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'An optional element that contains the up-front points expressed as a percentage of the notional. An initialPoints value of 5% would be represented as 0.05. The initialPoints element is an alternative to marketFixedRate in quoting the traded level of a trade. When initialPoints is used, the traded level is the sum of fixedRate and initialPoints. The initialPoints is one of the items that are factored into the initialPayment calculation and is payable by the Buyer to the Seller. Note that initialPoints and marketFixedRate may both be present in the same document when both implied values are desired.'} initialPoints: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'An optional element that only has meaning in a credit index trade. This element contains the price at which the trade was executed and is used instead of marketFixedRate on credit trades on certain indicies which are quoted using a price rather than a spread.'} marketPrice: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'The type of quotation that was used between the trading desks. The purpose of this element is to indicate the actual quotation style that was used to quote this trade which may not be apparent when both marketFixedRate and initialPoints are included in the document. When quotationStyle is \u2018PointsUpFront\u2019, the initialPoints element should be populated. When quotationStyle is \u2018TradedSpread\u2019, the marketFixedRate element should be populated.'} quotationStyle: FpML::model::QuotationStyleEnum[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class specifying a set of non-monetary terms for the Credit Derivative Transaction, including the buyer and seller and selected items from the ISDA 2014 Credit Definition article II, such as the reference obligation and related terms. The CDM GeneralTerms class corresponds to the FpML GeneralTerms complex type, except that the effectiveDate and scheduledTerminationDate have been positioned as part of the InterestRatePayout class in the CDM instead of in GeneralTerms.'} model::external::cdm::GeneralTerms
[
  GeneralTermsChoice: ((($this.referenceInformation->isNotEmpty() && $this.indexReferenceInformation->isEmpty()) && $this.basketReferenceInformation->isEmpty()) || (($this.indexReferenceInformation->isNotEmpty() && $this.referenceInformation->isEmpty()) && $this.basketReferenceInformation->isEmpty())) || (($this.basketReferenceInformation->isNotEmpty() && $this.referenceInformation->isEmpty()) && $this.indexReferenceInformation->isEmpty()),
  FpML_cd_41: if($this.indexReferenceInformation.tranche->isEmpty(), |$this.modifiedEquityDelivery->isEmpty(), |true),
  FpML_cd_42: if($this.basketReferenceInformation->isEmpty(), |$this.substitution->isEmpty(), |true),
  BasketReferenceInformation_nameOrId: if($this.basketReferenceInformation->isNotEmpty(), |$this.basketReferenceInformation.basketName->isNotEmpty() || $this.basketReferenceInformation.basketId->isNotEmpty(), |true)
]
{
  {meta::pure::profiles::doc.doc = 'This attribute contains all the terms relevant to defining the reference entity and reference obligation(s).'} referenceInformation: model::external::cdm::ReferenceInformation[0..1];
  {meta::pure::profiles::doc.doc = 'This attribute contains all the terms relevant to defining the Credit DefaultSwap Index.'} indexReferenceInformation: model::external::cdm::IndexReferenceInformation[0..1];
  {meta::pure::profiles::doc.doc = 'This attribute contains all the terms relevant to defining the Credit Default Swap Basket.'} basketReferenceInformation: model::external::cdm::BasketReferenceInformation[0..1];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'This attribute is used for representing information contained in the Additional Terms field of the 2003 Master Credit Derivatives confirm.'} additionalTerm: String[*];
  {meta::pure::profiles::doc.doc = 'Value of this attribute set to \'true\' indicates that substitution is applicable.'} substitution: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'Value of this attribute set to \'true\' indicates that modified equity delivery is applicable.'} modifiedEquityDelivery: Boolean[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Specifies the settlement terms, which can either be cash, physical, or fx-based cash-settlement. This class can be used for the settlement of options and forwards, cash transactions (e.g. securities or foreign exchange), or in case of credit event.'} model::external::cdm::SettlementTerms extends model::external::cdm::SettlementBase
{
  {meta::pure::profiles::doc.doc = 'Specifies the parameters associated with the cash settlement procedure.'} cashSettlementTerms: model::external::cdm::CashSettlementTerms[*];
  {meta::pure::profiles::doc.doc = 'Specifies the physical settlement terms which apply to the transaction.'} physicalSettlementTerms: model::external::cdm::PhysicalSettlementTerms[0..1];
}

Class {meta::pure::profiles::doc.doc = 'An un ordered list of weighted averaging observations.'} FpML::model::AveragingObservationList
{
  {meta::pure::profiles::doc.doc = 'A single weighted averaging observation.'} averagingObservation: FpML::model::WeightedAveragingObservation[*];
}

Class FpML::model::RestructuringType
[
  c1_length: $this.restructuringScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  restructuringScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'A data defining:  the parameters used in the calculation of a fixed or floating rate calculation period amount. This data forms:  part of cashflows representation of a swap stream.'} model::external::cdm::CalculationPeriod extends model::external::cdm::CalculationPeriodBase
[
  StartDateChoice: ($this.unadjustedStartDate->isNotEmpty() && $this.adjustedStartDate->isEmpty()) || ($this.unadjustedStartDate->isEmpty() && $this.adjustedStartDate->isNotEmpty()),
  RateChoice: ($this.floatingRateDefinition->isNotEmpty() && $this.fixedRate->isEmpty()) || ($this.fixedRate->isNotEmpty() && $this.floatingRateDefinition->isEmpty()),
  EndDateChoice: ($this.unadjustedEndDate->isNotEmpty() && $this.adjustedEndDate->isEmpty()) || ($this.unadjustedEndDate->isEmpty() && $this.adjustedEndDate->isNotEmpty()),
  Notionalchoice: ($this.notionalAmount->isNotEmpty() && $this.fxLinkedNotionalAmount->isEmpty()) || ($this.fxLinkedNotionalAmount->isNotEmpty() && $this.notionalAmount->isEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'The calculation start date, unadjusted.'} unadjustedStartDate: Date[0..1];
  {meta::pure::profiles::doc.doc = 'The calculation end date, unadjusted.'} unadjustedEndDate: Date[0..1];
  {meta::pure::profiles::doc.doc = 'The number of days from the adjusted effective / start date to the adjusted termination / end date calculated in accordance with the applicable day count fraction.'} calculationPeriodNumberOfDays: Integer[0..1];
  {meta::pure::profiles::doc.doc = 'The amount that a cashflow will accrue interest on.'} notionalAmount: Float[0..1];
  {meta::pure::profiles::doc.doc = 'The amount that a cashflow will accrue interest on. This is the calculated amount of the FX linked - i.e. the other currency notional amount multiplied by the appropriate FX spot rate.'} fxLinkedNotionalAmount: model::external::cdm::FxLinkedNotionalAmount[0..1];
  {meta::pure::profiles::doc.doc = 'The floating rate reset information for the calculation period.'} floatingRateDefinition: model::external::cdm::FloatingRateDefinition[0..1];
  {meta::pure::profiles::doc.doc = 'The calculation period fixed rate. A per annum rate, expressed as a decimal. A fixed rate of 5% would be represented as 0.05.'} fixedRate: Float[0..1];
  {meta::pure::profiles::doc.doc = 'The year fraction value of the calculation period, result of applying the ISDA rules for day count fraction defined in the ISDA Annex.'} dayCountYearFraction: Float[0..1];
  {meta::pure::profiles::doc.doc = 'The amount representing the forecast of the accrued value of the calculation period. An intermediate value used to generate the forecastPaymentAmount in the PaymentCalculationPeriod.'} forecastAmount: model::external::cdm::Money[0..1];
  {meta::pure::profiles::doc.doc = 'A value representing the forecast rate used to calculate the forecast future value of the accrual period. This is a calculated rate determined based on averaging the rates in the rateObservation elements, and incorporates all of the rate treatment and averaging rules. A value of 1% should be represented as 0.01.'} forecastRate: Float[0..1];
}

Class model::external::cdm::Nm
{
  refRate: model::external::cdm::RefRate[1];
  term: model::external::cdm::Term[1];
}

Class {meta::pure::profiles::doc.doc = 'Leg identity.'} FpML::model::LegId
[
  c1_length: $this.legIdScheme->length() >= 1,
  c2_length: $this.value->length() >= 1,
  c3_length: $this.value->length() <= 60
]
{
  legIdScheme: String[1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify any bespoke Transfer Timing language by each party to the agreement.'} model::external::cdm::BespokeTransferTiming
{
  {meta::pure::profiles::doc.doc = 'A boolean flag to specify whether bespoke transfer terms are applicable or not.'} isApplicable: Boolean[1];
  {meta::pure::profiles::doc.doc = 'The bespoke transfer timing terms applicable to the agreement'} bespokeTransferTimingTerms: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type defining the source of a commodity rate, price or index or of a market rate or of a conversion factor (e.g. a fx conversion factor).'} FpML::model::CommodityInformationSource
[
  c1_length: $this.rateSourcePageHeading->forAll(x: String[1]|$x->length() >= 1)
]
{
  {meta::pure::profiles::doc.doc = 'The publication in which the rate, price, index or factor is to be found. (e.g Gas Daily, Platts Bloomberg.)'} rateSource: FpML::model::CommodityInformationProvider[0..1];
  {meta::pure::profiles::doc.doc = 'A specific page or screen (in the case of electronically published information) on which the rate source is to be found.'} rateSourcePage: FpML::model::RateSourcePage[0..1];
  {meta::pure::profiles::doc.doc = 'The heading for the rate source on a given rate source page or screen.'} rateSourcePageHeading: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class defining a range of contiguous business days by defining an unadjusted first date, an unadjusted last date and a business day convention and business centers for adjusting the first and last dates if they would otherwise fall on a non business day in the specified business centers. The days between the first and last date must also be good business days in the specified centers to be counted in the range.'} model::external::cdm::BusinessDateRange extends model::external::cdm::DateRange
{
  {meta::pure::profiles::doc.doc = 'The convention for adjusting a date if it would otherwise fall on a day that is not a business day, as specified by an ISDA convention (e.g. Following, Precedent).'} businessDayConvention: model::external::cdm::BusinessDayConventionEnum[1];
  {meta::pure::profiles::doc.doc = 'The business center(s), specified either explicitly or by reference to those specified somewhere else in the instance document.'} businessCenters: model::external::cdm::BusinessCenters[0..1];
}

Class FpML::model::MasterConfirmationType
[
  c1_length: $this.masterConfirmationTypeScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  masterConfirmationTypeScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'A class defining manual exercise, i.e. that the option buyer counterparty must give notice to the option seller of exercise.'} model::external::cdm::ManualExercise
{
  {meta::pure::profiles::doc.doc = 'Definition of the party to whom notice of exercise should be given.'} exerciseNotice: model::external::cdm::ExerciseNotice[0..1];
  {meta::pure::profiles::doc.doc = 'If fallback exercise is specified then the notional amount of the underlying swap, not previously exercised under the swaption, will be automatically exercised at the expiration time on the expiration date if at such time the buyer is in-the-money, provided that the difference between the settlement rate and the fixed rate under the relevant underlying swap is not less than one tenth of a percentage point (0.10% or 0.001). The term in-the-money is assumed to have the meaning defined in the 2000 ISDA Definitions, Section 17.4. In-the-money.'} fallbackExercise: Boolean[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the election terms under which a party disputes (i) the Calculation Agent\u2019s calculation of a Delivery Amount or a Return Amount, or (ii) the Value of any Transfer of Eligible Credit Support or Posted Credit Support. Parties can specify such election either through a business center time or through a custom election. ISDA 2016 English Law Credit Support Deed for Initial Margin, paragraph 13, General Principles, (g): Dispute Resolution. | ISDA 2016 Japanese Law Credit Support Annex for Initial Margin, paragraph 13, General Principles, (h): Dispute Resolution. | ISDA 2016 New York Law Credit Support Annex for Initial Margin, paragraph 13, General Principles, (g): Dispute Resolution.'} model::external::cdm::DisputeResolution
{
  {meta::pure::profiles::doc.doc = 'The time by which the dispute needs to be resolved, failure of which would trigger a recalculation alongside a process that is specified as part of the agreement. ISDA 2016 Credit Support Annex for Initial Margin, paragraph 13, General Principles, (g)(i): Resolution Time. | ISDA 2016 Credit Support Annex for Variation Margin, paragraph 13, (g)(i): Resolution Time.'} resolutionTime: model::external::cdm::BusinessCenterTime[0..1];
  {meta::pure::profiles::doc.doc = 'The custom Resolution Time election that might be specified by the parties.'} otherTerms: String[0..1];
  {meta::pure::profiles::doc.doc = 'The method of calculation for determining value for the purposes of a Variation Margin agreement.'} valueTerms: String[1];
  {meta::pure::profiles::doc.doc = 'The alternative dispute resolution procedure if specified'} alternativeTerms: String[0..1];
  {meta::pure::profiles::doc.doc = 'The elections to specify terms for recalculation of the market value of posted collateral.'} recalculationOfValue: model::external::cdm::RecalculationOfValue[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class for defining option provisions.'} model::external::cdm::OptionProvision
{
  {meta::pure::profiles::doc.doc = 'A provision that allows the specification of an embedded option within a swap giving the buyer of the option the right to terminate the swap, in whole or in part, on the early termination date.'} cancelableProvision: model::external::cdm::CancelableProvision[0..1];
  {meta::pure::profiles::doc.doc = 'A provision that allows the specification of an embedded option with a swap giving the buyer of the option the right to extend the swap, in whole or in part, to the extended termination date.'} extendibleProvision: model::external::cdm::ExtendibleProvision[0..1];
}

Class FpML::model::MasterAgreementVersion
[
  c1_length: $this.masterAgreementVersionScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  masterAgreementVersionScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'Specifies the information required to communicate the choices made by the exercising party, in a financial product endowing the party with at least one option.'} model::external::cdm::ExerciseInstruction
{
  {meta::pure::profiles::doc.doc = 'Specifies the date on which an option contained within the financial product would be exercised. The date may be omitted if the contractual product allows for only a single date of exercise (European exercise).'} exerciseDate: model::external::cdm::AdjustableOrAdjustedDate[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the time at which an option contained within the financial product woulld be exercised. The time may be omitted if the contractual product allows for only a single time of exercise (European exercise).'} exerciseTime: model::external::cdm::BusinessCenterTime[0..1];
}

Class {meta::pure::profiles::doc.doc = 'The set of elections which specify a Collateral Transfer Agreement'} model::external::cdm::CollateralTransferAgreementElections
{
  {meta::pure::profiles::doc.doc = 'The Regime Table provision , which determines the regulatory regime(s) applicable to each of the parties to the agreement.'} regime: model::external::cdm::Regime[1];
  {meta::pure::profiles::doc.doc = 'The determination of whether the One Way Provisions are applicable (true) or not applicable (false).'} oneWayProvisions: model::external::cdm::OneWayProvisions[1];
  {meta::pure::profiles::doc.doc = 'The specification of the ISDA SIMM Method for all Covered Transactions with respect to all Regimes.'} generalSimmElections: model::external::cdm::GeneralSimmElections[1];
  {meta::pure::profiles::doc.doc = 'The qualification of whether cross-currency swaps need to be identified in the Confirmation so that the obligations to exchange principal be disregarded for the purpose of determining the Delivery Amount or Return Amount.'} identifiedCrossCurrencySwap: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'The specification of methodologies to compute sensitivities specific to the agreement.'} sensitivityMethodologies: model::external::cdm::SensitivityMethodologies[1];
  {meta::pure::profiles::doc.doc = 'The reference currency for the purpose of specifying the FX Haircut relating to a posting obligation, as being either the Termination Currency or an FX Designated Currency.'} fxHaircutCurrency: model::external::cdm::FxHaircutCurrency[0..1];
  {meta::pure::profiles::doc.doc = 'The security providers posting obligations.'} postingObligations: model::external::cdm::PostingObligations[1];
  {meta::pure::profiles::doc.doc = 'The specification of Additional regimes for purposes of determining whether a Regulatory Event has occurred.'} substitutedRegime: model::external::cdm::SubstitutedRegime[1..*];
  {meta::pure::profiles::doc.doc = 'The base and eligible currency(ies) for the document as specified by the parties to the agreement.'} baseAndEligibleCurrency: model::external::cdm::BaseAndEligibleCurrency[1];
  {meta::pure::profiles::doc.doc = 'The Credit Support Obligations applicable to the agreement.'} creditSupportObligations: model::external::cdm::CreditSupportObligations[1];
  {meta::pure::profiles::doc.doc = 'The set of elections for determining Valuation and Timing terms specific to the agreement'} calculationAndTiming: model::external::cdm::CalculationAndTiming[1];
  {meta::pure::profiles::doc.doc = 'The set of elections that may overwrite the default Condition Precedent provision, and the set of provisions that are deemed Access Condition.'} conditionsPrecedent: model::external::cdm::ConditionsPrecedent[1];
  {meta::pure::profiles::doc.doc = 'The conditions under which the Security Provider can substitute posted collateral.'} substitution: model::external::cdm::Substitution[0..1];
  {meta::pure::profiles::doc.doc = 'The election terms under which a party disputes (i) the Calculation Agent\u2019s calculation of a Delivery Amount or a Return Amount, or (ii) the Value of any Transfer of Eligible Credit Support or Posted Credit Support.'} disputeResolution: model::external::cdm::DisputeResolution[1];
  {meta::pure::profiles::doc.doc = 'The bespoke provisions that might be specified by the parties to the agreement to specify the rights of Security Taker and/or Security Provider when an Early Termination or Access Condition event has occurred..'} rightsEvents: model::external::cdm::RightsEvents[0..1];
  {meta::pure::profiles::doc.doc = 'The Custodian and Segregated Account details in respect of each party to the agreement.'} custodyArrangements: model::external::cdm::CustodyArrangements[1];
  {meta::pure::profiles::doc.doc = 'The specification Additional Representations that may be applicable to the agreement.'} additionalRepresentations: model::external::cdm::AdditionalRepresentations[1];
  {meta::pure::profiles::doc.doc = 'The optional specification of address where the demands, specifications and notices will be communicated to for each of the parties to the agreement.'} demandsAndNotices: model::external::cdm::ContactElection[0..1];
  {meta::pure::profiles::doc.doc = 'The optional specification of address for transfer as specified by the respective parties to the agreement.'} addressesForTransfer: model::external::cdm::ContactElection[0..1];
  {meta::pure::profiles::doc.doc = 'The bespoke definition of Other CSA as specified by the parties to the agreement.'} otherCsa: String[0..1];
  {meta::pure::profiles::doc.doc = 'The bespoke provision that might be specified by the parties to the agreement applicable to Termination Currency.  Unless specified the definition of Termination Currency has the meaning specified in the Schedule to the ISDA Master Agreement.'} terminationCurrencyAmendment: model::external::cdm::TerminationCurrencyAmendment[1];
  {meta::pure::profiles::doc.doc = 'The bespoke provision that might be specified by the parties to the agreement applicable to Minimum Transfer Amount.  Unless specified the definition of Minimum Transfer Amount in any Other Regulatory CSA has the meaning specified in such Other Regulatory CSA.'} minimumTransferAmountAmendment: model::external::cdm::MinimumTransferAmountAmendment[0..1];
  {meta::pure::profiles::doc.doc = 'The bespoke provision that might be specified by the parties to the agreement applicable to Interpretations.'} interpretationTerms: String[0..1];
  {meta::pure::profiles::doc.doc = 'The Process Agent that might be appointed by the parties to the agreement.'} processAgent: model::external::cdm::ProcessAgent[0..1];
  {meta::pure::profiles::doc.doc = 'The jurisdiction specific terms relevant to the agreement.'} jurisdictionRelatedTerms: model::external::cdm::JurisdictionRelatedTerms[0..1];
  {meta::pure::profiles::doc.doc = 'Any additional amendments that might be specified by the parties to the agreement.'} additionalAmendments: String[0..1];
  {meta::pure::profiles::doc.doc = 'Any additional terms that might be specified applicable.'} additionalBespokeTerms: String[0..1];
  {meta::pure::profiles::doc.doc = 'The terms of the Rider for the ISDA Euroclear 2019 Collateral Transfer Agreement with respect to the use of a Pledgee Representative attached to this Agreement.'} pledgeeRepresentativeRider: model::external::cdm::PledgeeRepresentativeRider[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Defines foreign exchange (FX) asset class specific parameters for market observations.'} model::external::cdm::FxRateObservable
{
  <<model::external::cdm::metadata.address>> {meta::pure::profiles::doc.doc = 'Describes the composition of a rate that has been quoted or is to be quoted.'} quotedCurrencyPair: model::external::cdm::QuotedCurrencyPair[1];
  {meta::pure::profiles::doc.doc = 'Specifies the primary source from which a rate should be observed.'} primaryFxSpotRateSource: model::external::cdm::InformationSource[1];
  {meta::pure::profiles::doc.doc = 'Specifies an alternative, or secondary, source from which a rate should be observed.'} secondaryFxSpotRateSource: model::external::cdm::InformationSource[0..1];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'Defines a monetary amount in a specified currency.'} model::external::cdm::Money extends model::external::cdm::Quantity
{
}

Class {meta::pure::profiles::doc.doc = 'A class defining party-specific additional information that may be recorded with respect to a contract.'} model::external::cdm::PartyContractInformation
{
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'The reference to the party that owns this party contract information or, in the case of shared trades information, the reference that originated such information.'} partyReference: model::external::cdm::Party[1];
  {meta::pure::profiles::doc.doc = 'The role(s) that natural person(s) may have in relation to the contract.'} naturalPersonRole: model::external::cdm::NaturalPersonRole[*];
  relatedParty: model::external::cdm::RelatedParty[*];
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'Reference to an account.'} accountReference: model::external::cdm::Account[0..1];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'The qualification of the trade by the counterparty, e.g. customer or principal. This information is relevant for a number of marketplace processes, such as regulatory reporting or clearing.'} category: model::external::cdm::CategoryEnum[0..1];
}

Class model::external::cdm::PubliclyAvailableInformation
[
  SourceChoice: ($this.standardPublicSources->isNotEmpty() && $this.publicSource->isEmpty()) || ($this.publicSource->isNotEmpty() && $this.standardPublicSources->isEmpty()),
  PubliclyAvailableInformation_specifiedNumber: if($this.specifiedNumber->isNotEmpty(), |$this.specifiedNumber >= 0, |true)
]
{
  {meta::pure::profiles::doc.doc = 'If this element is specified and set to \'true\', indicates that ISDA defined Standard Public Sources are applicable.'} standardPublicSources: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'A public information source, e.g. a particular newspaper or electronic news service, that may publish relevant information used in the determination of whether or not a credit event has occurred. ISDA 2003 Term: Public Source.'} publicSource: String[*];
  {meta::pure::profiles::doc.doc = 'The minimum number of the specified public information sources that must publish information that reasonably confirms that a credit event has occurred. The market convention is two. ISDA 2003 Term: Specified Number.'} specifiedNumber: Integer[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify a currency amount or a currency amount schedule.'} model::external::cdm::AmountSchedule extends model::external::cdm::Schedule
{
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'The currency in which the amount schedule is denominated. The currency is specified outside of the actual schedule in order to be applied uniformly to it. The list of valid currencies is not presently positioned as an enumeration as part of the CDM because that scope is limited to the values specified by ISDA and FpML. As a result, implementers have to make reference to the relevant standard, such as the ISO 4217 standard for currency codes.'} currency: String[1..*];
}

Class {meta::pure::profiles::doc.doc = 'A type describing the underlyer features of a basket swap. Each of the basket constituents are described through an embedded component, the basketConstituentsType.'} FpML::model::Basket extends FpML::model::Asset
{
  {meta::pure::profiles::doc.doc = 'The number of units (index or securities) that constitute the underlyer of the swap. In the case of a basket swap, this element is used to reference both the number of basket units, and the number of each asset components of the basket when these are expressed in absolute terms.'} openUnits: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'Describes each of the components of the basket.'} basketConstituent: FpML::model::BasketConstituent[*];
  {meta::pure::profiles::doc.doc = 'Specifies the basket divisor amount. This value is normally used to adjust the constituent weight for pricing or to adjust for dividends, or other corporate actions.'} basketDivisor: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'Basket version, used to record changes in basket composition or weights'} basketVersion: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'The name of the basket expressed as a free format string. FpML does not define usage rules for this element.'} basketName: FpML::model::BasketName[0..1];
  {meta::pure::profiles::doc.doc = 'A CDS basket identifier'} basketId: FpML::model::BasketId[*];
  {meta::pure::profiles::doc.doc = 'Specifies the currency for this basket.'} basketCurrency: FpML::model::Currency[0..1];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'Represents a set of criteria used to specify an eligible collateral schedule.'} model::external::cdm::EligibleCollateralSchedule
{
  {meta::pure::profiles::doc.doc = 'Specifies the identifier(s) to uniquely identify an eligible collateral schedule for an identity issuer.'} scheduleIdentifier: model::external::cdm::Identifier[*];
  {meta::pure::profiles::doc.doc = 'Represents a set of criteria used to specify eligible collateral.'} criteria: model::external::cdm::EligibleCollateralCriteria[1..*];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify Japanese Securities Provision elections.'} model::external::cdm::JapaneseSecuritiesProvisions
{
  {meta::pure::profiles::doc.doc = 'Japanese Securities Provisions are applicable when True and Not Applicable when False'} isApplicable: Boolean[1];
  {meta::pure::profiles::doc.doc = 'Recommended Japanese Securities Provisions are applicable when True, additional Provisions are specified when False'} relevantProvisionsElection: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'Specific terms applicable to Recommended Japanese Securities Provisions'} relevantProvisionsTerms: String[0..1];
  {meta::pure::profiles::doc.doc = 'Additional Amendments to Japanese Securities Provisions are specified when True, and not specified when False'} amendmentsToJapaneseProvisions: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'Specific terms applicable to Additional Amendments to Japanese Securities Provisions'} amendmentsToJapaneseProvisionsTerms: String[0..1];
  {meta::pure::profiles::doc.doc = 'Specification of whether Clearstream Event amendment language is included (true) or excluded (false).'} clearstreamAmendmentToJapaneseProvisions: Boolean[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A complex type for a two part identifier such as a USI.'} FpML::model::IssuerTradeId
{
  issuer: FpML::model::IssuerId[1];
  tradeId: FpML::model::TradeId[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Type to represent a single pass through payment.'} FpML::model::PassThroughItem
{
  {meta::pure::profiles::doc.doc = 'A reference to the party responsible for making the payments defined by this structure.'} payerPartyReference: FpML::model::PartyReference[0..1];
  {meta::pure::profiles::doc.doc = 'A reference to the account responsible for making the payments defined by this structure.'} payerAccountReference: FpML::model::AccountReference[0..1];
  {meta::pure::profiles::doc.doc = 'A reference to the party that receives the payments corresponding to this structure.'} receiverPartyReference: FpML::model::PartyReference[0..1];
  {meta::pure::profiles::doc.doc = 'A reference to the account that receives the payments corresponding to this structure.'} receiverAccountReference: FpML::model::AccountReference[0..1];
  {meta::pure::profiles::doc.doc = 'Reference to the underlyer whose payments are being passed through.'} underlyerReference: FpML::model::AssetReference[0..1];
  {meta::pure::profiles::doc.doc = 'Percentage of payments from the underlyer which are passed through. A value expressed in percentage units i.e. 5 means 5%.'} passThroughPercentage: Decimal[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify contact information within a party: address and, optionally, associated business unit and person. This class also supports the ISDA CSA representation as a single string, through the address attribute.'} model::external::cdm::PartyContactInformation
[
  PartyContactInformationChoice: (($this.contactInformation->isEmpty() && $this.address->isEmpty()) || ($this.contactInformation->isNotEmpty() && $this.address->isEmpty())) || ($this.address->isNotEmpty() && $this.contactInformation->isEmpty())
]
{
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'The reference to the party to which the contact information refers to.'} partyReference: model::external::cdm::Party[0..1];
  {meta::pure::profiles::doc.doc = 'The postal/street address, telephone number, email address and/or web page. If the contact information is specific to the associated business unit(s), it should be associated with those.'} contactInformation: model::external::cdm::ContactInformation[0..1];
  {meta::pure::profiles::doc.doc = 'Optional organization unit information used to describe the organization units (e.g. trading desks) involved in a transaction or business process, incl. the contact information (when relevant).'} businessUnit: model::external::cdm::BusinessUnit[*];
  {meta::pure::profiles::doc.doc = 'Optional information about people involved in a transaction or business process. (These are employees of the party.)'} person: model::external::cdm::NaturalPerson[*];
  {meta::pure::profiles::doc.doc = 'The address specified as a string to support non-normalized contact information, such as in the case of ISDA Create.'} address: String[0..1];
  {meta::pure::profiles::doc.doc = 'Specification of special instructions of the relevant party.'} additionalInformation: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Specifies the parties responsible for making and receiving payments defined by this structure.'} model::external::cdm::PayerReceiver
[
  PayerCounterpartyOrAncillaryRoleOrPartyReference: ((($this.payer->isEmpty() && $this.payerAncillaryRole->isEmpty()) && $this.payerPartyReference->isNotEmpty()) || (($this.payer->isNotEmpty() && $this.payerAncillaryRole->isEmpty()) && $this.payerPartyReference->isEmpty())) || (($this.payer->isEmpty() && $this.payerAncillaryRole->isNotEmpty()) && $this.payerPartyReference->isEmpty()),
  ReceiverCounterpartyOrAncillaryRoleOrPartyReference: ((($this.receiver->isEmpty() && $this.receiverAncillaryRole->isEmpty()) && $this.receiverPartyReference->isNotEmpty()) || (($this.receiver->isNotEmpty() && $this.receiverAncillaryRole->isEmpty()) && $this.receiverPartyReference->isEmpty())) || (($this.receiver->isEmpty() && $this.receiverAncillaryRole->isNotEmpty()) && $this.receiverPartyReference->isEmpty()),
  CashflowPayerAncillaryRole: if($this.payerAncillaryRole->isNotEmpty(), |$this.payerAncillaryRole->in([model::external::cdm::AncillaryRoleEnum.ArrangingBroker, model::external::cdm::AncillaryRoleEnum.Beneficiary, model::external::cdm::AncillaryRoleEnum.ClearingFirm, model::external::cdm::AncillaryRoleEnum.CounterpartyAfflilate, model::external::cdm::AncillaryRoleEnum.Guarantor, model::external::cdm::AncillaryRoleEnum.OtherParty, model::external::cdm::AncillaryRoleEnum.PrimeBroker, model::external::cdm::AncillaryRoleEnum.SettlementAgent]), |true),
  CashflowReceiverAncillaryRole: if($this.receiverAncillaryRole->isNotEmpty(), |$this.receiverAncillaryRole->in([model::external::cdm::AncillaryRoleEnum.ArrangingBroker, model::external::cdm::AncillaryRoleEnum.Beneficiary, model::external::cdm::AncillaryRoleEnum.ClearingFirm, model::external::cdm::AncillaryRoleEnum.CounterpartyAfflilate, model::external::cdm::AncillaryRoleEnum.Guarantor, model::external::cdm::AncillaryRoleEnum.OtherParty, model::external::cdm::AncillaryRoleEnum.PrimeBroker, model::external::cdm::AncillaryRoleEnum.SettlementAgent]), |true)
]
{
  {meta::pure::profiles::doc.doc = 'Specifies the counterparty responsible for making the payments defined by this structure.  The party is one of the two principal parties to the transaction.'} payer: model::external::cdm::CounterpartyRoleEnum[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the ancillary role responsible for making the payments defined by this structure.  Only populated on the cashflow payout when there is a payment to a party which is not one of the two principal parties to the transaction.'} payerAncillaryRole: model::external::cdm::AncillaryRoleEnum[0..1];
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'Specifies the party responsible for making the payments defined by this structure.  Only populated on physical exercise and cash exercise which do not have the required model structure to specify the counterparties.'} payerPartyReference: model::external::cdm::Party[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the party that receives the payments corresponding to this structure.  The party is one of the two counterparties to the transaction.'} receiver: model::external::cdm::CounterpartyRoleEnum[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the ancillary role that receives the payments corresponding to this structure.  Only populated on the cashflow payout when there is a payment to a party which is not one of the two principal parties to the transaction.'} receiverAncillaryRole: model::external::cdm::AncillaryRoleEnum[0..1];
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'Specifies the party that receives the payments corresponding to this structure.  Only populated on physical exercise and cash exercise which do not have the required model structure to specify the counterparties.'} receiverPartyReference: model::external::cdm::Party[0..1];
}

Class FpML::model::ContractualMatrix
{
  {meta::pure::profiles::doc.doc = 'Identifies the form of applicable matrix.'} matrixType: FpML::model::MatrixType[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the publication date of the applicable version of the matrix. When this element is omitted, the ISDA supplemental language for incorporation of the relevant matrix will generally define rules for which version of the matrix is applicable.'} publicationDate: StrictDate[0..1];
  {meta::pure::profiles::doc.doc = 'Defines any applicable key into the relevant matrix. For example, the Transaction Type would be the single term required for the Credit Derivatives Physical Settlement Matrix. This element should be omitted in the case of the 2000 ISDA Definitions Settlement Matrix for Early Termination and Swaptions.'} matrixTerm: FpML::model::MatrixTerm[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type describing the dividend payout ratio associated with an equity underlyer. In certain cases the actual ratio is not known on trade inception, and only general conditions are then specified.'} FpML::model::DividendPayout
[
  c1_length: $this.dividendPayoutConditions->forAll(x: String[1]|$x->length() >= 1),
  c2_choice: $this.dividendPayoutConditions->isEmpty() || ($this.dividendPayoutRatio->isEmpty() && ($this.dividendPayoutRatioCash->isEmpty() && ($this.dividendPayoutRatioNonCash->isEmpty() && $this.dividendPayoutConditions->isNotEmpty())))
]
{
  {meta::pure::profiles::doc.doc = 'Specifies the total actual dividend payout ratio associated with the equity underlyer.'} dividendPayoutRatio: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the cash actual dividend payout ratio associated with the equity underlyer.'} dividendPayoutRatioCash: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the non cash actual dividend payout ratio associated with the equity underlyer.'} dividendPayoutRatioNonCash: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the dividend payout conditions that will be applied in the case where the actual ratio is not known, typically because of regulatory or legal uncertainties.'} dividendPayoutConditions: String[0..1];
  {meta::pure::profiles::doc.doc = 'The next upcoming dividend payment or payments.'} dividendPayment: FpML::model::PendingPayment[*];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'Defines a settlement as an exchange between two parties of a specified quantity of an asset (the quantity) against a specified quantity of another asset (the price). The settlement is optional and can be either cash or physical. In the case of non-cash products, the settlement of the price/quantity would not be specified here and instead would be delegated to the product mechanics, as parameterised by the price/quantity values.'} model::external::cdm::PriceQuantity
[
  NonNegativeQuantity: if($this.quantity.amount->isNotEmpty(), |$this.quantity.amount->toOne() > 0, |true)
]
{
  <<model::external::cdm::metadata.location>> {meta::pure::profiles::doc.doc = 'Specifies a price to be used for trade amounts and other purposes.'} price: model::external::cdm::Price[*];
  <<model::external::cdm::metadata.location>> {meta::pure::profiles::doc.doc = 'Specifies a quantity to be associated with an event, for example a trade amount.'} quantity: model::external::cdm::Quantity[*];
  {meta::pure::profiles::doc.doc = 'Specifies the object to be observed for a price, it could be an asset or a reference. The cardinality is optional as some quantity / price cases have no observable (e.g. a notional and a fixed rate in a given currency).'} observable: model::external::cdm::Observable[0..1];
  {meta::pure::profiles::doc.doc = 'Defines the direction of the exchange. The convention is that the buyer receives the quantity / pays the price, whereas the seller receives the price / pays the quantity. Attribute is optional in case the price/quantity settlement is defined as part of the product mechanics.'} buyerSeller: model::external::cdm::BuyerSeller[0..1];
  {meta::pure::profiles::doc.doc = 'Whether the settlement is cash or physical and the corresponding terms. Attribute is optional in case the price/quantity settlement is defined as part of the product mechanics.'} settlementTerms: model::external::cdm::SettlementTerms[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the date at which the price and quantity become effective. This day may be subject to adjustment in accordance with a business day convention, or could be specified as relative to a trade date, for instance. Optional cardinality, as the effective date is usually specified in the product definition, so it may only need to be specified as part of the PriceQuantity in an increase/decrease scenario for an existing trade.'} effectiveDate: model::external::cdm::AdjustableOrRelativeDate[0..1];
}

Class {meta::pure::profiles::doc.doc = 'The repayment precedence of a debt instrument.'} FpML::model::CreditSeniority
[
  c1_length: $this.creditSeniorityScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  {meta::pure::profiles::doc.doc = 'creditSeniorityTradingScheme overrides creditSeniorityScheme when the underlyer defines the reference obligation used in a single name credit default swap trade.'} creditSeniorityScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'A scheme identifying the types of measures that can be used to describe an asset.'} FpML::model::AssetMeasureType
[
  c1_length: $this.assetMeasureScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  assetMeasureScheme: String[0..1];
  value: String[1];
}

Class model::external::cdm::InterestRateCurve
{
  <<model::external::cdm::metadata.scheme>> floatingRateIndex: model::external::cdm::FloatingRateIndexEnum[1];
  tenor: model::external::cdm::Period[1];
}

Class {meta::pure::profiles::doc.doc = 'A class defining a contiguous series of calendar dates. The date range is defined as all the dates between and including the first and the last date. The first date must fall before the last date.'} model::external::cdm::DateRange
{
  {meta::pure::profiles::doc.doc = 'The first date of a date range.'} unadjustedFirstDate: Date[1];
  {meta::pure::profiles::doc.doc = 'The last date of a date range.'} unadjustedLastDate: Date[1];
}

Class model::external::cdm::FailureToPay
{
  {meta::pure::profiles::doc.doc = 'Indicates whether the failure to pay provision is applicable.'} applicable: Boolean[1];
  {meta::pure::profiles::doc.doc = 'If this element is specified, indicates whether or not a grace period extension is applicable. ISDA 2003 Term: Grace Period Extension Applicable.'} gracePeriodExtension: model::external::cdm::GracePeriodExtension[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies a threshold for the failure to pay credit event. Market standard is USD 1,000,000 (JPY 100,000,000 for Japanese Yen trades) or its equivalent in the relevant obligation currency. This is applied on an aggregate basis across all Obligations of the Reference Entity. Intended to prevent technical/operational errors from triggering credit events. ISDA 2003 Term: Payment Requirement'} paymentRequirement: model::external::cdm::Money[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class for defining option strategy features.'} model::external::cdm::StrategyFeature
{
  {meta::pure::profiles::doc.doc = 'Definition of the upper strike in a strike spread.'} strikeSpread: model::external::cdm::StrikeSpread[0..1];
  {meta::pure::profiles::doc.doc = 'Definition of the later expiration date in a calendar spread.'} calendarSpread: model::external::cdm::CalendarSpread[0..1];
}

Class {meta::pure::profiles::doc.doc = 'CDS Basket Reference Information'} FpML::model::BasketReferenceInformation
[
  c1_choice: $this.basketName->isNotEmpty() || ($this.basketName->isEmpty() && $this.basketId->isNotEmpty()),
  c2_choice: $this.tranche->isEmpty() || ($this.nthToDefault->isEmpty() && ($this.mthToDefault->isEmpty() && $this.tranche->isNotEmpty()))
]
{
  {meta::pure::profiles::doc.doc = 'The name of the basket expressed as a free format string. FpML does not define usage rules for this element.'} basketName: FpML::model::BasketName[0..1];
  {meta::pure::profiles::doc.doc = 'A CDS basket identifier'} basketId: FpML::model::BasketId[*];
  {meta::pure::profiles::doc.doc = 'This element contains all the reference pool items to define the reference entity and reference obligation(s) in the basket'} referencePool: FpML::model::ReferencePool[0..1];
  {meta::pure::profiles::doc.doc = 'N th reference obligation to default triggers payout.'} nthToDefault: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'M th reference obligation to default to allow representation of N th to M th defaults.'} mthToDefault: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'This element contains CDS tranche terms.'} tranche: FpML::model::Tranche[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type for defining FX Features.'} model::external::cdm::FxFeature
{
  <<model::external::cdm::metadata.id, model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'Specifies the reference currency of the trade.'} referenceCurrency: String[1];
  {meta::pure::profiles::doc.doc = 'If \'Composite\' is specified as the Settlement Type in the relevant Transaction Supplement, an amount in the Settlement Currency, determined by the Calculation Agent as being equal to the number of Options exercised or deemed exercised, multiplied by: (Settlement Price \u2013 Strike Price) / (Strike Price \u2013 Settlement Price) x Multiplier provided that if the above is equal to a negative amount the Option Cash Settlement Amount shall be deemed to be zero.'} composite: model::external::cdm::Composite[0..1];
  {meta::pure::profiles::doc.doc = 'If \'Quanto\' is specified as the Settlement Type in the relevant Transaction Supplement, an amount, as determined by the Calculation Agent in accordance with the Section 8.2 of the Equity Definitions.'} quanto: model::external::cdm::Quanto[0..1];
  {meta::pure::profiles::doc.doc = 'If \'Cross-Currency\' is specified as the Settlement Type in the relevant Transaction Supplement, an amount in the Settlement Currency, determined by the Calculation Agent as being equal to the number of Options exercised or deemed exercised, multiplied by: (Settlement Price \u2013 Strike Price) / (Strike Price \u2013 Settlement Price) x Multiplier x one unit of the Reference Currency converted into an amount in the Settlement Currency using the rate of exchange of the Settlement Currency as quoted on the Reference Price Source on the Valuation Date, provided that if the above is equal to a negative amount the Option Cash Settlement Amount shall be deemed to be zero.'} crossCurrency: model::external::cdm::Composite[0..1];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'A class to specify all of the terms necessary to define and calculate a cash flow based on a fixed, a floating or an inflation index rate. The interest rate payout can be applied to interest rate swaps and FRA (which both have two associated interest rate payouts), credit default swaps (to represent the fee leg when subject to periodic payments) and equity swaps (to represent the funding leg). The associated globalKey denotes the ability to associate a hash value to the InterestRatePayout instantiations for the purpose of model cross-referencing, in support of functionality such as the event effect and the lineage.'} model::external::cdm::InterestRatePayout extends model::external::cdm::PayoutBase
[
  InterestRatePayoutChoice: (($this.paymentDates->isEmpty() && $this.paymentDate->isEmpty()) || ($this.paymentDates->isNotEmpty() && $this.paymentDate->isEmpty())) || ($this.paymentDate->isNotEmpty() && $this.paymentDates->isEmpty()),
  FutureValueNotional: if($this.rateSpecification.fixedRate->isEmpty(), |$this.payoutQuantity.futureValueNotional->isEmpty(), |true),
  TerminationDate: if($this.payoutQuantity.futureValueNotional->isNotEmpty(), |$this.payoutQuantity.futureValueNotional.valueDate == $this.calculationPeriodDates.terminationDate.adjustableDate.adjustedDate, |true),
  FpML_ird_6: if($this.paymentDates.firstPaymentDate->isNotEmpty() && $this.calculationPeriodDates.effectiveDate->isNotEmpty(), |$this.paymentDates.firstPaymentDate > $this.calculationPeriodDates.effectiveDate.adjustableDate.unadjustedDate, |true),
  FpML_ird_23: if($this.stubPeriod.initialStub->isNotEmpty(), |$this.calculationPeriodDates.firstRegularPeriodStartDate->isNotEmpty(), |true),
  FpML_ird_24: if($this.stubPeriod.finalStub->isNotEmpty(), |$this.calculationPeriodDates.lastRegularPeriodEndDate->isNotEmpty(), |true),
  InitialStub_FinalStub: if($this.stubPeriod->isNotEmpty(), |$this.stubPeriod.initialStub->isNotEmpty() || $this.stubPeriod.finalStub->isNotEmpty(), |true),
  FpML_ird_7_1: if(($this.paymentDates.paymentFrequency.period == $this.calculationPeriodDates.calculationPeriodFrequency.period) && ($this.paymentDates.paymentFrequency.periodMultiplier == $this.calculationPeriodDates.calculationPeriodFrequency.periodMultiplier), |$this.compoundingMethod->isEmpty() || ($this.compoundingMethod == model::external::cdm::CompoundingMethodEnum.None), |true),
  FpML_ird_7_2: if((($this.paymentDates.paymentFrequency.period->isNotEmpty() && $this.calculationPeriodDates.calculationPeriodFrequency.period->isNotEmpty()) && !($this.paymentDates.paymentFrequency.period == $this.calculationPeriodDates.calculationPeriodFrequency.period)) || (($this.paymentDates.paymentFrequency.periodMultiplier->isNotEmpty() && $this.calculationPeriodDates.calculationPeriodFrequency.periodMultiplier->isNotEmpty()) && !($this.paymentDates.paymentFrequency.periodMultiplier == $this.calculationPeriodDates.calculationPeriodFrequency.periodMultiplier)), |$this.compoundingMethod->isNotEmpty(), |true),
  FpML_ird_9: if($this.compoundingMethod->isNotEmpty(), |$this.resetDates->isNotEmpty(), |true),
  FpML_ird_29: if($this.compoundingMethod->isNotEmpty(), |$this.rateSpecification.fixedRate->isEmpty(), |true),
  CalculationPeriodDatesFirstCompoundingPeriodEndDate: if($this.compoundingMethod->isEmpty() || ($this.compoundingMethod == model::external::cdm::CompoundingMethodEnum.None), |$this.calculationPeriodDates.firstCompoundingPeriodEndDate->isEmpty(), |true)
]
{
  {meta::pure::profiles::doc.doc = 'The specification of the rate value(s) applicable to the contract using either a floating rate calculation, a single fixed rate, a fixed rate schedule, or an inflation rate calculation.'} rateSpecification: model::external::cdm::RateSpecification[1];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'The day count fraction. The cardinality has been relaxed when compared with the FpML interest rate swap for the purpose of accommodating standardized credit default swaps which DCF is not explicitly stated as part of the economic terms. The data rule InterestRatePayout_dayCountFraction requires that the DCF be stated for interest rate products.'} dayCountFraction: model::external::cdm::DayCountFractionEnum[0..1];
  {meta::pure::profiles::doc.doc = 'The parameters used to generate the calculation period dates schedule, including the specification of any initial or final stub calculation periods.'} calculationPeriodDates: model::external::cdm::CalculationPeriodDates[0..1];
  {meta::pure::profiles::doc.doc = 'The payment date schedule, as defined by the parameters that are needed to specify it, either in a parametric way or by reference to another schedule of dates (e.g. the reset dates).'} paymentDates: model::external::cdm::PaymentDates[0..1];
  {meta::pure::profiles::doc.doc = 'The payment date, where only one date is specified, as for the FRA product.'} paymentDate: model::external::cdm::AdjustableDate[0..1];
  {meta::pure::profiles::doc.doc = 'Applicable to CDS on MBS to specify whether payment delays are applicable to the fixed Amount. RMBS typically have a payment delay of 5 days between the coupon date of the reference obligation and the payment date of the synthetic swap. CMBS do not, on the other hand, with both payment dates being on the 25th of each month.'} paymentDelay: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'The reset dates schedule, i.e. the dates on which the new observed index value is applied for each period and the interest rate hence begins to accrue.'} resetDates: model::external::cdm::ResetDates[0..1];
  {meta::pure::profiles::doc.doc = 'The parameters specifying any discounting conventions that may apply. This element must only be included if discounting applies.'} discountingMethod: model::external::cdm::DiscountingMethod[0..1];
  {meta::pure::profiles::doc.doc = 'If one or more calculation period contributes to a single payment amount this element specifies whether compounding is applicable and, if so, what compounding method is to be used. This element must only be included when more than one calculation period contributes to a single payment amount.'} compoundingMethod: model::external::cdm::CompoundingMethodEnum[0..1];
  {meta::pure::profiles::doc.doc = 'The cashflow representation of the swap stream.'} cashflowRepresentation: model::external::cdm::CashflowRepresentation[0..1];
  {meta::pure::profiles::doc.doc = 'The specification of the principal exchange. Optional as only applicable in the case of cross-currency.'} principalExchanges: model::external::cdm::PrincipalExchanges[0..1];
  {meta::pure::profiles::doc.doc = 'The stub calculation period amount parameters. This element must only be included if there is an initial or final stub calculation period. Even then, it must only be included if either the stub references a different floating rate tenor to the regular calculation periods, or if the stub is calculated as a linear interpolation of two different floating rate tenors, or if a specific stub rate or stub amount has been negotiated.'} stubPeriod: model::external::cdm::StubPeriod[0..1];
  {meta::pure::profiles::doc.doc = 'Reference to a bond underlier to represent an asset swap or Condition Precedent Bond.'} bondReference: model::external::cdm::BondReference[0..1];
  {meta::pure::profiles::doc.doc = 'Fixed Amount Calculation'} fixedAmount: Float[0..1];
  {meta::pure::profiles::doc.doc = 'Floating Amount Calculation'} floatingAmount: Float[0..1];
}

Class {meta::pure::profiles::doc.doc = 'The terms of the Rider for the ISDA Euroclear 2019 Collateral Transfer Agreement with respect to the use of a Pledgee Representative attached to this Agreement'} model::external::cdm::PledgeeRepresentativeRider
{
  {meta::pure::profiles::doc.doc = 'Identification of whether the representative CTA provisions are applicable (True) or not applicable (False)'} isApplicable: Boolean[1];
  {meta::pure::profiles::doc.doc = 'Identification of the represented party.'} party: model::external::cdm::CounterpartyRoleEnum[0..1];
  {meta::pure::profiles::doc.doc = 'The specific representative terms applicable when specified.'} representativeTerms: String[0..1];
  {meta::pure::profiles::doc.doc = 'The specification of whether the representative event terms are applicable'} representativeEvent: model::external::cdm::ExceptionEnum[0..1];
  {meta::pure::profiles::doc.doc = 'The specific representative event terms applicable when specified.'} representativeEventTerms: String[0..1];
  {meta::pure::profiles::doc.doc = 'The definition of representative end date in relation to a representative event.'} representativeEndDate: model::external::cdm::CustomisableOffset[0..1];
}

Class {meta::pure::profiles::doc.doc = 'CDS Basket Reference Information.'} model::external::cdm::BasketReferenceInformation
[
  BasketReferenceInformation_choice: ($this.nthToDefault->isNotEmpty() && $this.tranche->isEmpty()) || ($this.tranche->isNotEmpty() && $this.nthToDefault->isEmpty()),
  BasketReferenceInformation_nthToDefault: if($this.mthToDefault->isNotEmpty(), |$this.nthToDefault->isNotEmpty(), |true),
  BasketReferenceInformation_mthToDefault: if($this.nthToDefault->isNotEmpty() && $this.mthToDefault->isNotEmpty(), |$this.nthToDefault < $this.mthToDefault, |true)
]
{
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'The name of the basket expressed as a free format string. FpML does not define usage rules for this element.'} basketName: String[0..1];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'A CDS basket identifier.'} basketId: String[*];
  {meta::pure::profiles::doc.doc = 'This element contains all the reference pool items to define the reference entity and reference obligation(s) in the basket.'} referencePool: model::external::cdm::ReferencePool[1];
  {meta::pure::profiles::doc.doc = 'N th reference obligation to default triggers payout.'} nthToDefault: Integer[0..1];
  {meta::pure::profiles::doc.doc = 'M th reference obligation to default to allow representation of N th to M th defaults.'} mthToDefault: Integer[0..1];
  {meta::pure::profiles::doc.doc = 'This element contains CDS tranche terms.'} tranche: model::external::cdm::Tranche[0..1];
}

Class {meta::pure::profiles::doc.doc = 'The type of the time of the quote.'} FpML::model::QuoteTiming
[
  c1_length: $this.quoteTimingScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  quoteTimingScheme: String[0..1];
  value: String[1];
}

Class model::external::cdm::CalculationPeriodData
{
  startDate: Date[1];
  endDate: Date[1];
  daysInPeriod: Integer[1];
  daysInLeapYearPeriod: Integer[1];
  isFirstPeriod: Boolean[1];
  isLastPeriod: Boolean[1];
}

Class {meta::pure::profiles::doc.doc = 'Specifies the treatment terms for the eligible collateral criteria specified.'} model::external::cdm::CollateralTreatment
{
  {meta::pure::profiles::doc.doc = 'Specification of the valuation treatment for the specified collateral.'} valuationTreatment: model::external::cdm::CollateralValuationTreatment[0..1];
  {meta::pure::profiles::doc.doc = 'Specification of concentration limits applicable to the collateral criteria.'} concentrationLimit: model::external::cdm::ConcentrationLimit[*];
  {meta::pure::profiles::doc.doc = 'A boolean attribute to specify whether collateral critieria are inclusion (True) or exclusion (False) criteria.'} isIncluded: Boolean[1];
}

Class {meta::pure::profiles::doc.doc = 'Type for reporting the detailed results of calculating a cash flow for a calculation period.  This is enhanced relative to the FpML-based cashflows structure to allow more information to be returned about daily compounded rates.'} model::external::cdm::FixedAmountCalculationDetails
{
  {meta::pure::profiles::doc.doc = 'The calculation period for which the floating calculation was performed.'} calculationPeriod: model::external::cdm::CalculationPeriodBase[1];
  {meta::pure::profiles::doc.doc = 'The notional in effect during the calculation period.'} calculationPeriodNotionalAmount: model::external::cdm::Money[1];
  {meta::pure::profiles::doc.doc = 'The value of the fixed rate that was used.'} fixedRate: Float[1];
  {meta::pure::profiles::doc.doc = 'The fraction of a year that this calculation represents, according to the day count fraction method.'} yearFraction: Float[1];
  {meta::pure::profiles::doc.doc = 'The amount of the cash flow that was computed, including any spreads and other processing.'} calculatedAmount: Float[1];
}

Class {meta::pure::profiles::doc.doc = 'Defines how and when an equity option or equity swap is to be valued.'} model::external::cdm::EquityValuation
{
  {meta::pure::profiles::doc.doc = 'Specifies the price used for valuation.'} price: model::external::cdm::Price[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the method according to which an amount or a date is determined.'} determinationMethod: model::external::cdm::DeterminationMethodEnum[1];
  {meta::pure::profiles::doc.doc = '2018 ISDA CDM Equity Confirmation for Security Equity Swap: Pricing Date'} valuationDates: model::external::cdm::AdjustableRelativeOrPeriodicDates[0..1];
  {meta::pure::profiles::doc.doc = '2018 ISDA CDM Equity Confirmation for Security Equity Swap: Pricing Date'} valuationDate: model::external::cdm::AdjustableOrRelativeDate[0..1];
  {meta::pure::profiles::doc.doc = 'The specific time of day at which the calculation agent values the underlying. The SpecificTime is the only case when the valuationTime (time + business center location \u2013 e.g. 10:00:00 USNY) should be provided. You should be able to provide just the valuationTime without valuationTimeType, which infer that this is a specific time.'} valuationTime: model::external::cdm::BusinessCenterTime[0..1];
  {meta::pure::profiles::doc.doc = 'The time of day at which the calculation agent values the underlying, for example the official closing time of the exchange.'} valuationTimeType: model::external::cdm::TimeTypeEnum[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Specifies a specific date or the parameters for identifying the relevant contract date when the commodity reference price is a futures contract.'} model::external::cdm::DeliveryDateParameters
{
  {meta::pure::profiles::doc.doc = 'Provides a container for the parametric representation that specifies which nearby contract date would be used as a refrence for a price .'} deliveryNearby: model::external::cdm::Offset[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the specific contract date for the contract that should be referenced for a price.'} deliveryDate: model::external::cdm::AdjustableDate[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies, for a Commodity Transaction that references a listed future, the day on which the specified future will roll to the next nearby month prior to the expiration of the referenced future. If the future will not roll at all - i.e. the price will be taken from the expiring contract, 0 days should be specified here. If the future will roll to the next nearby on the last trading day - i.e. the price will be taken from the next nearby on the last trading day, then 1 business day should be specified and so on.'} deliveryDateRollConvention: model::external::cdm::Offset[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies, for a Commodity Transaction that references a listed future, the day on which the specified future will expire ahead of the actual expiration of the referenced future. For example: Z21 Contract expires on 19Nov21, with an adjust of 2D the \'expire\' will be 16Nov21. DeliveryDateRollConvention takes precedence. Example: Pricing on the Z21 Contract with NearbyContractDay and a deliveryDateRoll of 10D, Sampling of the F22 Contract will occur on 8Nov21 through the last Date of the Z21 Contract. With an ExpConvention of 5D, the last sampling date on the F22 contract will be 12Nov21.'} deliveryDateExpirationConvention: model::external::cdm::Offset[0..1];
}

Class model::external::cdm::Curve
[
  one_of_constraint: ($this.interestRateCurve->isNotEmpty() && $this.commodityCurve->isEmpty()) || ($this.commodityCurve->isNotEmpty() && $this.interestRateCurve->isEmpty())
]
{
  interestRateCurve: model::external::cdm::InterestRateCurve[0..1];
  <<model::external::cdm::metadata.scheme>> commodityCurve: model::external::cdm::CommodityReferencePriceEnum[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class for defining the definitions that govern the document and should include the year and type of definitions referenced, along with any relevant documentation (such as master agreement) and the date it was signed.'} model::external::cdm::DocumentationIdentification
[
  ConfirmationChoice: (($this.masterConfirmation->isEmpty() && $this.brokerConfirmation->isEmpty()) || ($this.masterConfirmation->isNotEmpty() && $this.brokerConfirmation->isEmpty())) || ($this.brokerConfirmation->isNotEmpty() && $this.masterConfirmation->isEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'The agreement executed between the parties and intended to govern all OTC derivatives transactions between those parties.'} masterAgreement: model::external::cdm::MasterAgreement[0..1];
  masterConfirmation: model::external::cdm::MasterConfirmation[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the details for a broker confirm.'} brokerConfirmation: model::external::cdm::BrokerConfirmation[0..1];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'The definitions such as those published by ISDA that will define the terms of the trade.'} contractualDefinitions: model::external::cdm::ContractualDefinitionsEnum[*];
  {meta::pure::profiles::doc.doc = 'A contractual supplement (such as those published by ISDA) that will apply to the trade.'} contractualTermsSupplement: model::external::cdm::ContractualTermsSupplement[*];
  {meta::pure::profiles::doc.doc = 'A reference to a contractual matrix of elected terms/values (such as those published by ISDA) that shall be deemed to apply to the trade. The applicable matrix is identified by reference to a name and optionally a publication date. Depending on the structure of the matrix, an additional term (specified in the matrixTerm element) may be required to further identify a subset of applicable terms/values within the matrix.'} contractualMatrix: model::external::cdm::ContractualMatrix[*];
  {meta::pure::profiles::doc.doc = 'The agreement executed between the parties and intended to govern collateral arrangement for all OTC derivatives transactions between those parties.'} creditSupportAgreement: model::external::cdm::CreditSupportAgreement[0..1];
  {meta::pure::profiles::doc.doc = 'Any other agreement executed between the parties.'} otherAgreement: model::external::cdm::OtherAgreement[*];
  {meta::pure::profiles::doc.doc = 'A human readable document related to this transaction, for example a confirmation.'} attachment: model::external::cdm::Resource[*];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'The specification of a legal agreement between two parties, including the baseline information and the optional specification of agreement terms allowing .'} model::external::cdm::LegalAgreement extends model::external::cdm::LegalAgreementBase
{
  {meta::pure::profiles::doc.doc = 'Specification of the content of the legal agreement.'} agreementTerms: model::external::cdm::AgreementTerms[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the agreement(s) that govern the agreement, either as a reference to such agreements when specified as part of the CDM, or through identification of some of the key terms of those agreements, such as the type of agreement, the publisher, the vintage, the agreement identifier and the agreement date.'} relatedAgreements: model::external::cdm::RelatedAgreement[*];
  {meta::pure::profiles::doc.doc = 'The determination of whether Umbrella Agreement terms are applicable (True) or Not Applicable (False).'} umbrellaAgreement: model::external::cdm::UmbrellaAgreement[0..1];
}

Class model::external::cdm::ReferencePair
{
  {meta::pure::profiles::doc.doc = 'The corporate or sovereign entity on which you are buying or selling protection and any successor that assumes all or substantially all of its contractual and other obligations. It is vital to use the correct legal name of the entity and to be careful not to choose a subsidiary if you really want to trade protection on a parent company. Please note, Reference Entities cannot be senior or subordinated. It is the obligations of the Reference Entities that can be senior or subordinated. ISDA 2003 Term: Reference Entity.'} referenceEntity: model::external::cdm::LegalEntity[1];
  {meta::pure::profiles::doc.doc = 'The Reference Obligation is a financial instrument that is either issued or guaranteed by the reference entity. It serves to clarify the precise reference entity protection is being offered upon, and its legal position with regard to other related firms (parents/subsidiaries). Furthermore the Reference Obligation is ALWAYS deliverable and establishes the Pari Passu ranking (as the deliverable bonds must rank equal to the reference obligation). ISDA 2003 Term: Reference Obligation.'} referenceObligation: model::external::cdm::ReferenceObligation[0..1];
  {meta::pure::profiles::doc.doc = 'Used to indicate that there is no Reference Obligation associated with this Credit Default Swap and that there will never be one.'} noReferenceObligation: Boolean[0..1];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'Defines the reference entity types corresponding to a list of types in the ISDA First to Default documentation.'} entityType: model::external::cdm::EntityTypeEnum[1];
}

Class {meta::pure::profiles::doc.doc = 'Represents common attributes required for Issuance and Response to a Margin Call action as a result of a demand for delivery or return of collateral determined under a legal agreement such as a credit support document or equivalent.'} model::external::cdm::MarginCallBase
{
  {meta::pure::profiles::doc.doc = 'Identifies the enumeration values to specify the call notification type, direction, specific action type.'} instructionType: model::external::cdm::MarginCallInstructionType[1];
  {meta::pure::profiles::doc.doc = 'Represents the parties to the margin call. The cardinality is optional to address the case where both parties of the event are specified and a third party if applicable.'} party: model::external::cdm::Party[*];
  {meta::pure::profiles::doc.doc = 'Represents the role each specified party takes in the margin call. further to the principal roles, payer and receiver.'} partyRole: model::external::cdm::PartyRole[*];
  {meta::pure::profiles::doc.doc = 'Indicates the name of the Clearing Broker FCM/DCM.'} clearingBroker: model::external::cdm::Party[0..1];
  {meta::pure::profiles::doc.doc = 'Represents a unique Identifier for a margin call message, that can be referenced throughout all points of the process.'} callIdentifier: model::external::cdm::Identifier[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the legal agreement type the margin call is generated from and governed by.'} callAgreementType: model::external::cdm::LegalAgreementType[1];
  {meta::pure::profiles::doc.doc = 'Specifies the collateral legal agreement minimum transfer amount in base currency.'} agreementMinimumTransferAmount: model::external::cdm::Money[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the collateral legal agreement threshold amount in base currency.'} agreementThreshold: model::external::cdm::Money[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the collateral legal agreement rounding in base currency.'} agreementRounding: model::external::cdm::Money[0..1];
  {meta::pure::profiles::doc.doc = 'Identifies margin type and if related regulatory mandate'} regMarginType: model::external::cdm::RegMarginTypeEnum[1];
  {meta::pure::profiles::doc.doc = 'Indicates the role of the party in an regulatory initial margin call instruction (i.e Pledgor party or Secured party).'} regIMRole: model::external::cdm::RegIMRoleEnum[0..1];
  {meta::pure::profiles::doc.doc = 'Represents the current mark to market value or IM calculation value of the trade portfolio as recorded by the principle (in base currency), to be referenced in a margin call.'} baseCurrencyExposure: model::external::cdm::MarginCallExposure[0..1];
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'Represents attributes to define the details of collateral assets within a collateral portfolio to be used in margin call messaging and contribute to collateral balances e.g securities in a collateral account recorded by the principal as held or posted.'} collateralPortfolio: model::external::cdm::CollateralPortfolio[0..1];
  {meta::pure::profiles::doc.doc = 'Represents additional credit support amount over and above mark to market value.'} independentAmountBalance: model::external::cdm::CollateralBalance[0..1];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'A class defining a step date and step value pair. This step definitions are used to define varying rate or amount schedules, e.g. a notional amortisation or a step-up coupon schedule.'} model::external::cdm::Step
{
  {meta::pure::profiles::doc.doc = 'The date on which the associated step value becomes effective.'} stepDate: Date[1];
  {meta::pure::profiles::doc.doc = 'The rate of amount which becomes effective on the associated step date. A rate of 5% would be represented as 0.05.'} stepValue: Float[1];
}

Class {meta::pure::profiles::doc.doc = 'The specification for how the number of days between two dates is calculated for purposes of calculation of a fixed or floating payment amount and the basis for how many days are assumed to be in a year. Day Count Fraction is an ISDA term. The equivalent AFB (Association Francaise de Banques) term is Calculation Basis.'} FpML::model::DayCountFraction
[
  c1_length: $this.dayCountFractionScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  dayCountFractionScheme: String[0..1];
  value: String[1];
}

Class FpML::model::RateIndex extends FpML::model::UnderlyingAsset
{
  floatingRateIndex: FpML::model::FloatingRateIndex[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the term of the simple swap, e.g. 5Y.'} term: FpML::model::Period[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the frequency at which the index pays, e.g. 6M.'} paymentFrequency: FpML::model::Period[0..1];
  {meta::pure::profiles::doc.doc = 'The day count basis for the index.'} dayCountFraction: FpML::model::DayCountFraction[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Specifies instructions for terms change consisting of the new transaction terms, and the renegotiation fee.'} model::external::cdm::TermsChangeInstruction
{
  {meta::pure::profiles::doc.doc = 'product to be changed'} product: model::external::cdm::Product[0..1];
  {meta::pure::profiles::doc.doc = 'ancillary party to be changed'} ancillaryParty: model::external::cdm::AncillaryParty[*];
  adjustment: model::external::cdm::NotionalAdjustmentEnum[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type defining a currency amount as at a future value date. A type defining a currency amount as at a future value date. - For use with pre-trade Credit Limit Check messages.'} FpML::model::FutureValueAmount extends FpML::model::NonNegativeMoney
{
  {meta::pure::profiles::doc.doc = 'The number of days from the adjusted calculation period start date to the adjusted value date, calculated in accordance with the applicable day count fraction.'} calculationPeriodNumberOfDays: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'Adjusted value date of the future value amount.'} valueDate: StrictDate[0..1];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'A class to specify a party, without a qualification as to whether this party is a legal entity or a natural person, although the model provides the ability to associate a person (or set of persons) to a party, which use case would imply that such party would be a legal entity (even if not formally specified as such).'} model::external::cdm::Party
{
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'The identifier associated with a party, e.g. the 20 digits LEI code.'} partyId: String[1..*];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'The party name.'} name: String[0..1];
  {meta::pure::profiles::doc.doc = 'The person(s) who might be associated with the party as part of the execution, contract or legal document.'} person: model::external::cdm::NaturalPerson[*];
  {meta::pure::profiles::doc.doc = 'The account that might be associated with the party. At most one account can be specified, as it is expected that this information is used in the context of a contract or legal document where only one account per party can be associated with such object.'} account: model::external::cdm::Account[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the conditions under which the Security Provider can substitute posted collateral.'} model::external::cdm::Substitution
{
  {meta::pure::profiles::doc.doc = 'The election as to whether the Pledgor/Obligor/Chargor must obtain the Secured Party\u2019s consent for any collateral substitution. ISDA 2016 Credit Support Annex for Initial Margin, paragraph 13, General Principles, (f)(ii): Consent. | ISDA 2016 Credit Support Annex for Variation Margin, paragraph 13, (f)(ii): Consent.'} needsConsent: Boolean[1];
  {meta::pure::profiles::doc.doc = 'Substiution   Date  has  the  meaning  specified  in  Paragraph4(d)(ii),   unless   otherwise   specified.'} substitutionDateLanguage: String[0..1];
  {meta::pure::profiles::doc.doc = 'Specific consent language might be specified by the parties.'} specificConsentLanguage: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the Amendment to Termination Currency election by the parties to the agreement. ISDA 2016 Credit Support Annex for Initial Margin, paragraph 13, General Principles, (t) (A) & (B).'} model::external::cdm::TerminationCurrencyElection
[
  CurrencyElection: if(!($this.isSpecified), |$this.currency->isEmpty(), |true)
]
{
  {meta::pure::profiles::doc.doc = 'The elective party.'} party: model::external::cdm::CounterpartyRoleEnum[1..2];
  {meta::pure::profiles::doc.doc = 'The qualification of whether the Termination Currency is specified in this document (True) or in an Eligible Support Credit Support (IM) Schedule (False)'} isSpecified: Boolean[1];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'The Termination Currency associated with the party that referenced as part of this class. The list of valid currencies is not presently positioned as an enumeration as part of the CDM because that scope is limited to the values specified by ISDA and FpML. As a result, implementers have to make reference to the relevant standard, such as the ISO 4217 standard for currency codes.'} currency: String[1];
}

Class {meta::pure::profiles::doc.doc = 'A type giving the choice between defining a date as an explicit date together with applicable adjustments or as relative to some other (anchor) date.'} FpML::model::AdjustableOrRelativeDate
[
  c1_choice: ($this.adjustableDate->isNotEmpty() && $this.relativeDate->isEmpty()) || ($this.adjustableDate->isEmpty() && $this.relativeDate->isNotEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'A date that is subject to adjustment if it would otherwise fall on a day that is not a business day in the specified business centers, together with the convention for adjusting the date.'} adjustableDate: FpML::model::AdjustableDate[0..1];
  {meta::pure::profiles::doc.doc = 'A date specified as an offset to another date (the anchor date).'} relativeDate: FpML::model::RelativeDateOffset[0..1];
  id: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class for selection of Margin Approach.'} model::external::cdm::MarginApproach
{
  marginApproach: model::external::cdm::MarginApproachEnum[1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the interest shortfall floating rate payment event.'} model::external::cdm::InterestShortFall
{
  {meta::pure::profiles::doc.doc = 'Specifies the nature of the interest Shortfall cap (i.e. Fixed Cap or Variable Cap) in the case where it is applicable. ISDA 2003 Term: Interest Shortfall Cap.'} interestShortfallCap: model::external::cdm::InterestShortfallCapEnum[1];
  compounding: Boolean[1];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'The rate source in the case of a variable cap.'} rateSource: model::external::cdm::FloatingRateIndexEnum[0..1];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'A data defining:  the adjusted payment date and associated calculation period parameters required to calculate the actual or projected payment amount. This data forms:  part of the cashflow representation of a swap stream.'} model::external::cdm::PaymentCalculationPeriod
[
  PaymentCalculationPeriodChoice: ($this.calculationPeriod->isNotEmpty() && $this.fixedPaymentAmount->isEmpty()) || ($this.fixedPaymentAmount->isNotEmpty() && $this.calculationPeriod->isEmpty()),
  CalculationPeriodNumberOfDays: if($this.calculationPeriod.calculationPeriodNumberOfDays->isNotEmpty(), |!($this.calculationPeriod.calculationPeriodNumberOfDays->map(d|$d >= 0)->contains(false)), |true),
  FpML_ird_34: $this.unadjustedPaymentDate->isNotEmpty() || $this.adjustedPaymentDate->isNotEmpty()
]
{
  {meta::pure::profiles::doc.doc = 'The unadjusted payment date.'} unadjustedPaymentDate: Date[0..1];
  {meta::pure::profiles::doc.doc = 'The adjusted payment date. This date should already be adjusted for any applicable business day convention. This component is not intended for use in trade confirmation but may be specified to allow the fee structure to also serve as a cashflow type component.'} adjustedPaymentDate: Date[0..1];
  {meta::pure::profiles::doc.doc = 'The parameters used in the calculation of a fixed or floating rate calculation period amount. A list of calculation period elements may be ordered in the document by ascending start date. An FpML document which contains an unordered list of calculation periods is still regarded as a conformant document.'} calculationPeriod: model::external::cdm::CalculationPeriod[1..*];
  {meta::pure::profiles::doc.doc = 'A known fixed payment amount.'} fixedPaymentAmount: Float[0..1];
  {meta::pure::profiles::doc.doc = 'A decimal value representing the discount factor used to calculate the present value of cash flow.'} discountFactor: Float[0..1];
  {meta::pure::profiles::doc.doc = 'A monetary amount representing the forecast of the future value of the payment.'} forecastPaymentAmount: model::external::cdm::Money[0..1];
  {meta::pure::profiles::doc.doc = 'A monetary amount representing the present value of the forecast payment.'} presentValueAmount: model::external::cdm::Money[0..1];
}

Class FpML::model::AgreementType
[
  c1_length: $this.agreementTypeScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  agreementTypeScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'A flexible description of the type or characteristics of an option embbedded within another product. For example, a cancelable provision or an optional early termination provision.'} FpML::model::EmbeddedOptionType
[
  c1_length: $this.embeddedOptionTypeScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  {meta::pure::profiles::doc.doc = 'The type scheme used with this option type.'} embeddedOptionTypeScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'A class for defining the agreement executed between the parties and intended to govern all OTC derivatives transactions between those parties.'} model::external::cdm::MasterAgreement
{
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'An identifier that has been created to identify the master agreement.'} masterAgreementId: String[0..1];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'The agreement executed between the parties and intended to govern product-specific derivatives transactions between those parties.'} masterAgreementType: model::external::cdm::MasterAgreementTypeEnum[1];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'The version of the master agreement.'} masterAgreementVersion: String[0..1];
  {meta::pure::profiles::doc.doc = 'The date on which the master agreement was signed.'} masterAgreementDate: Date[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A scheme identifying the types of pricing model used to evaluate the price of an asset. Examples include Intrinsic, ClosedForm, MonteCarlo, BackwardInduction.'} FpML::model::PricingModel
[
  c1_length: $this.pricingModelScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  pricingModelScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify additional Calculation Time terms for the purposes of Initial Margin'} model::external::cdm::BespokeCalculationTime
{
  {meta::pure::profiles::doc.doc = 'If set to True, the Calculation Time for Initial Margin is the time as of which the Calculation Agent (IM) computes its end of day valuations of derivatives transactions'} asCalculationAgent: Boolean[1];
  {meta::pure::profiles::doc.doc = 'Additional Terms applicable to Calculation Time for Initial Margin'} bespokeCalculationTimeTerms: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A coding scheme used to describe the type or purpose of a cash flow or cash flow component.'} FpML::model::CashflowType
[
  c1_length: $this.cashflowTypeScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  cashflowTypeScheme: String[0..1];
  value: String[1];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'A class defining a step date and non-negative step value pair. This step definitions are used to define varying rate or amount schedules, e.g. a notional amortisation or a step-up coupon schedule.'} model::external::cdm::NonNegativeStep
[
  NonNegativeStep_stepValue: $this.stepValue >= 0.0
]
{
  {meta::pure::profiles::doc.doc = 'The date on which the associated stepValue becomes effective. This day may be subject to adjustment in accordance with a business day convention.'} stepDate: Date[1];
  {meta::pure::profiles::doc.doc = 'The non-negative rate or amount which becomes effective on the associated stepDate. A rate of 5% would be represented as 0.05.'} stepValue: Float[1];
}

Class model::external::cdm::RefRate
{
  indx: String[1];
  nm: String[1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify all the ISDA terms relevant to defining the deliverable obligations.'} model::external::cdm::DeliverableObligations
[
  DeliverableObligationsChoice: (((($this.fullFaithAndCreditObLiability->isEmpty() && $this.generalFundObligationLiability->isEmpty()) && $this.revenueObligationLiability->isEmpty()) || (($this.fullFaithAndCreditObLiability->isNotEmpty() && $this.generalFundObligationLiability->isEmpty()) && $this.revenueObligationLiability->isEmpty())) || (($this.generalFundObligationLiability->isNotEmpty() && $this.fullFaithAndCreditObLiability->isEmpty()) && $this.revenueObligationLiability->isEmpty())) || (($this.revenueObligationLiability->isNotEmpty() && $this.fullFaithAndCreditObLiability->isEmpty()) && $this.generalFundObligationLiability->isEmpty()),
  FpML_cd_34: if($this.category->isNotEmpty() && ($this.category == model::external::cdm::ObligationCategoryEnum.ReferenceObligationsOnly), |(((((((((((((((((((($this.acceleratedOrMatured->isEmpty() && $this.accruedInterest->isEmpty()) && $this.assignableLoan->isEmpty()) && $this.consentRequiredLoan->isEmpty()) && $this.directLoanParticipation->isEmpty()) && $this.excluded->isEmpty()) && $this.fullFaithAndCreditObLiability->isEmpty()) && $this.generalFundObligationLiability->isEmpty()) && $this.indirectLoanParticipation->isEmpty()) && $this.listed->isEmpty()) && $this.maximumMaturity->isEmpty()) && $this.notBearer->isEmpty()) && $this.notContingent->isEmpty()) && $this.notDomesticCurrency->isEmpty()) && $this.notDomesticIssuance->isEmpty()) && $this.notDomesticLaw->isEmpty()) && $this.notSovereignLender->isEmpty()) && $this.notSubordinated->isEmpty()) && $this.othReferenceEntityObligations->isEmpty()) && $this.revenueObligationLiability->isEmpty()) && $this.specifiedCurrency->isEmpty()) && $this.transferable->isEmpty(), |true)
]
{
  {meta::pure::profiles::doc.doc = 'Indicates whether accrued interest is included (true) or not (false). For cash settlement this specifies whether quotations should be obtained inclusive or not of accrued interest. For physical settlement this specifies whether the buyer should deliver the obligation with an outstanding principal balance that includes or excludes accrued interest. ISDA 2003 Term: Include/Exclude Accrued Interest.'} accruedInterest: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'Used in both obligations and deliverable obligations to represent a class or type of securities which apply. ISDA 2003 Term: Obligation Category/Deliverable Obligation Category.'} category: model::external::cdm::ObligationCategoryEnum[0..1];
  {meta::pure::profiles::doc.doc = 'An obligation and deliverable obligation characteristic. An obligation that ranks at least equal with the most senior Reference Obligation in priority of payment or, if no Reference Obligation is specified in the related Confirmation, the obligations of the Reference Entity that are senior. ISDA 2003 Term: Not Subordinated.'} notSubordinated: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'An obligation and deliverable obligation characteristic. The currency or currencies in which an obligation or deliverable obligation must be payable. ISDA 2003 Term: Specified Currency.'} specifiedCurrency: model::external::cdm::SpecifiedCurrency[0..1];
  {meta::pure::profiles::doc.doc = 'An obligation and deliverable obligation characteristic. Any obligation that is not primarily (majority) owed to a Sovereign or Supranational Organisation. ISDA 2003 Term: Not Sovereign Lender.'} notSovereignLender: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'An obligation and deliverable obligation characteristic. Any obligation that is payable in any currency other than the domestic currency. Domestic currency is either the currency so specified or, if no currency is specified, the currency of (a) the reference entity, if the reference entity is a sovereign, or (b) the jurisdiction in which the relevant reference entity is organised, if the reference entity is not a sovereign. ISDA 2003 Term: Not Domestic Currency.'} notDomesticCurrency: model::external::cdm::NotDomesticCurrency[0..1];
  {meta::pure::profiles::doc.doc = 'An obligation and deliverable obligation characteristic. If the reference entity is a Sovereign, this means any obligation that is not subject to the laws of the reference entity. If the reference entity is not a sovereign, this means any obligation that is not subject to the laws of the jurisdiction of the reference entity. ISDA 2003 Term: Not Domestic Law.'} notDomesticLaw: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'An obligation and deliverable obligation characteristic. Indicates whether or not the obligation is quoted, listed or ordinarily purchased and sold on an exchange. ISDA 2003 Term: Listed.'} listed: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'A deliverable obligation characteristic. In essence Not Contingent means the repayment of principal cannot be dependant on a formula/index, i.e. to prevent the risk of being delivered an instrument that may never pay any element of principal, and to ensure that the obligation is interest bearing (on a regular schedule). ISDA 2003 Term: Not Contingent.'} notContingent: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'An obligation and deliverable obligation characteristic. Any obligation other than an obligation that was intended to be offered for sale primarily in the domestic market of the relevant Reference Entity. This specifies that the obligation must be an internationally recognised bond. ISDA 2003 Term: Not Domestic Issuance.'} notDomesticIssuance: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'A deliverable obligation characteristic. A loan that is freely assignable to a bank or financial institution without the consent of the Reference Entity or the guarantor, if any, of the loan (or the consent of the applicable borrower if a Reference Entity is guaranteeing the loan) or any agent. ISDA 2003 Term: Assignable Loan.'} assignableLoan: model::external::cdm::PCDeliverableObligationCharac[0..1];
  {meta::pure::profiles::doc.doc = 'A deliverable obligation characteristic. A loan that is capable of being assigned with the consent of the Reference Entity or the guarantor, if any, of the loan or any agent. ISDA 2003 Term: Consent Required Loan.'} consentRequiredLoan: model::external::cdm::PCDeliverableObligationCharac[0..1];
  {meta::pure::profiles::doc.doc = 'A deliverable obligation characteristic. A loan with a participation agreement whereby the buyer is capable of creating, or procuring the creation of, a contractual right in favour of the seller that provides the seller with recourse to the participation seller for a specified share in any payments due under the relevant loan which are received by the participation seller. ISDA 2003 Term: Direct Loan Participation.'} directLoanParticipation: model::external::cdm::LoanParticipation[0..1];
  {meta::pure::profiles::doc.doc = 'A deliverable obligation characteristic. An obligation that is transferable to institutional investors without any contractual, statutory or regulatory restrictions. ISDA 2003 Term: Transferable.'} transferable: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'A deliverable obligation characteristic. An obligation that has a remaining maturity from the Physical Settlement Date of not greater than the period specified. ISDA 2003 Term: Maximum Maturity.'} maximumMaturity: model::external::cdm::Period[0..1];
  {meta::pure::profiles::doc.doc = 'A deliverable obligation characteristic. An obligation at time of default is due to mature and due to be repaid, or as a result of downgrade/bankruptcy is due to be repaid as a result of an acceleration clause. ISDA 2003 Term: Accelerated or Matured.'} acceleratedOrMatured: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'A deliverable obligation characteristic. Any obligation that is not a bearer instrument. This applies to Bonds only and is meant to avoid tax, fraud and security/delivery provisions that can potentially be associated with Bearer Bonds. ISDA 2003 Term: Not Bearer.'} notBearer: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'An obligation and deliverable obligation characteristic. Defined in the ISDA published additional provisions for U.S. Municipal as Reference Entity. ISDA 2003 Term: Full Faith and Credit Obligation Liability.'} fullFaithAndCreditObLiability: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'An obligation and deliverable obligation characteristic. Defined in the ISDA published additional provisions for U.S. Municipal as Reference Entity. ISDA 2003 Term: General Fund Obligation Liability.'} generalFundObligationLiability: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'An obligation and deliverable obligation characteristic. Defined in the ISDA published additional provisions for U.S. Municipal as Reference Entity. ISDA 2003 Term: Revenue Obligation Liability.'} revenueObligationLiability: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'ISDA 1999 Term: Indirect Loan Participation. NOTE: Only applicable as a deliverable obligation under ISDA Credit 1999.'} indirectLoanParticipation: model::external::cdm::LoanParticipation[0..1];
  {meta::pure::profiles::doc.doc = 'A free format string to specify any excluded obligations or deliverable obligations, as the case may be, of the reference entity or excluded types of obligations or deliverable obligations. ISDA 2003 Term: Excluded Obligations/Excluded Deliverable Obligations.'} excluded: String[0..1];
  {meta::pure::profiles::doc.doc = 'This element is used to specify any other obligations of a reference entity in both obligations and deliverable obligations. The obligations can be specified free-form. ISDA 2003 Term: Other Obligations of a Reference Entity.'} othReferenceEntityObligations: String[0..1];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'A class for defining a date frequency, e.g. one day, three months, through the combination of an integer value and a standardized period value that is specified as part of an enumeration.'} model::external::cdm::Frequency
[
  TermPeriod: if($this.period == model::external::cdm::PeriodExtendedEnum.T, |$this.periodMultiplier == 1, |true),
  PositivePeriodMultiplier: $this.periodMultiplier >= 0
]
{
  {meta::pure::profiles::doc.doc = 'A time period multiplier, e.g. 1, 2, or 3. If the period value is T (Term) then period multiplier must contain the value 1.'} periodMultiplier: Integer[1];
  {meta::pure::profiles::doc.doc = 'A time period, e.g. a day, week, month, year or term of the stream.'} period: model::external::cdm::PeriodExtendedEnum[1];
}

Class {meta::pure::profiles::doc.doc = 'A type that represents information about a unit within an organization.'} FpML::model::BusinessUnit
[
  c1_length: $this.name->forAll(x: String[1]|$x->length() >= 1)
]
{
  {meta::pure::profiles::doc.doc = 'A name used to describe the organization unit'} name: String[0..1];
  {meta::pure::profiles::doc.doc = 'An identifier used to uniquely identify organization unit'} businessUnitId: FpML::model::Unit[0..1];
  {meta::pure::profiles::doc.doc = 'Information on how to contact the unit using various means.'} contactInfo: FpML::model::ContactInformation[0..1];
  {meta::pure::profiles::doc.doc = 'The ISO 3166 standard code for the country where the individual works.'} country: FpML::model::CountryCode[0..1];
  id: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type describing a loan underlying asset.'} FpML::model::Loan extends FpML::model::UnderlyingAsset
{
  borrower: FpML::model::LegalEntity[0..1];
  borrowerReference: FpML::model::LegalEntityReference[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the seniority level of the lien.'} lien: FpML::model::Lien[0..1];
  {meta::pure::profiles::doc.doc = 'The type of loan facility (letter of credit, revolving, ...).'} facilityType: FpML::model::FacilityType[0..1];
  {meta::pure::profiles::doc.doc = 'The date when the principal amount of the loan becomes due and payable.'} maturity: StrictDate[0..1];
  {meta::pure::profiles::doc.doc = 'The credit agreement date is the closing date (the date where the agreement has been signed) for the loans in the credit agreement. Funding of the facilities occurs on (or sometimes a little after) the Credit Agreement date. This underlyer attribute is used to help identify which of the company\'s outstanding loans are being referenced by knowing to which credit agreement it belongs. ISDA Standards Terms Supplement term: Date of Original Credit Agreement.'} creditAgreementDate: StrictDate[0..1];
  {meta::pure::profiles::doc.doc = 'The loan tranche that is subject to the derivative transaction. It will typically be referenced as the Bloomberg tranche number. ISDA Standards Terms Supplement term: Bloomberg Tranche Number.'} tranche: FpML::model::UnderlyingAssetTranche[0..1];
  {meta::pure::profiles::doc.doc = 'The seniority. E.g. senior, senior secured etc.'} seniority: FpML::model::CreditSeniority[0..1];
}

Class FpML::model::FxConversion
[
  c1_choice: ($this.amountRelativeTo->isNotEmpty() && $this.fxRate->isEmpty()) || ($this.amountRelativeTo->isEmpty() && $this.fxRate->isNotEmpty())
]
{
  amountRelativeTo: FpML::model::AmountReference[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies a currency conversion rate.'} fxRate: FpML::model::FxRate[*];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the Collateral Management Agreement election by the respective parties to a Japanese Law ISDA CSA. ISDA 2016 Japanese Law Credit Support Annex for Initial Margin, paragraph 13, General Principles, (b)(i): Collateral Management Agreement.'} model::external::cdm::CollateralManagementAgreement
{
  {meta::pure::profiles::doc.doc = 'The parties\' Collateral Management Agreement election.'} partyElection: model::external::cdm::CollateralManagementAgreementElection[2];
}

Class FpML::model::FxSettlementRateSource
[
  c1_choice: ($this.settlementRateOption->isNotEmpty() && $this.nonstandardSettlementRate->isEmpty()) || ($this.settlementRateOption->isEmpty() && $this.nonstandardSettlementRate->isNotEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'Indicates that an officially defined rate settlement rate option will be the used for the fixing.'} settlementRateOption: FpML::model::SettlementRateOption[0..1];
  {meta::pure::profiles::doc.doc = 'Indicates that a non-standard rate source will be used for the fixing.'} nonstandardSettlementRate: FpML::model::FxInformationSource[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A data to:  describe the cashflow representation for FX linked notionals.'} model::external::cdm::FxLinkedNotionalAmount
{
  {meta::pure::profiles::doc.doc = 'The reset date.'} resetDate: Date[0..1];
  {meta::pure::profiles::doc.doc = 'The date on which the FX spot rate is observed. This date should already be adjusted for any applicable business day convention.'} adjustedFxSpotFixingDate: Date[0..1];
  {meta::pure::profiles::doc.doc = 'The actual observed FX spot rate.'} observedFxSpotRate: Float[0..1];
  {meta::pure::profiles::doc.doc = 'The calculation period notional amount.'} notionalAmount: Float[0..1];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'A class to represent the set of future cashflow methodologies in the form of specific payout class(es) that can be associated for the purpose of specifying a financial product. For example, two interest rate payouts can be combined to specify an interest rate swap, or one interest rate payout can be combined with a credit default payout to specify a credit default swap.'} model::external::cdm::Payout
[
  LastRegularPaymentDate: if($this.interestRatePayout.paymentDates.lastRegularPaymentDate->isNotEmpty() && $this.interestRatePayout.stubPeriod.finalStub->isNotEmpty(), |$this.interestRatePayout->size() == 2, |true),
  PayRelativeTo: if(($this.interestRatePayout->size() == 2) && $this.interestRatePayout.paymentDates->isNotEmpty(), |$this.interestRatePayout.paymentDates.payRelativeTo->isNotEmpty(), |true),
  PaymentDatesAdjustments: if(($this.interestRatePayout->size() == 2) && $this.interestRatePayout.paymentDates->isNotEmpty(), |$this.interestRatePayout.paymentDates.paymentDatesAdjustments->isNotEmpty(), |true),
  PpaymentFrequency: if(($this.interestRatePayout->size() == 2) && $this.interestRatePayout.paymentDates->isNotEmpty(), |$this.interestRatePayout.paymentDates.paymentFrequency->isNotEmpty(), |true),
  Qantity: if(($this.interestRatePayout->isNotEmpty() && $this.creditDefaultPayout->isEmpty()) && $this.optionPayout->isEmpty(), |$this.interestRatePayout.payoutQuantity->isNotEmpty(), |true),
  DayCountFraction: if($this.interestRatePayout->size() == 2, |$this.interestRatePayout.dayCountFraction->isNotEmpty(), |true),
  PaymentDates: if($this.interestRatePayout->size() == 2, |$this.interestRatePayout.dayCountFraction->isNotEmpty(), |true),
  MarketPrice: if($this.creditDefaultPayout.generalTerms.indexReferenceInformation->isEmpty(), |$this.creditDefaultPayout.transactedPrice.marketFixedRate->isEmpty() && $this.creditDefaultPayout.transactedPrice.marketPrice->isEmpty(), |true),
  NotionalResetInterestRatePayoutExists: if($this.equityPayout.payoutQuantity.reset->toOne(), |$this.interestRatePayout->isNotEmpty(), |true)
]
{
  {meta::pure::profiles::doc.doc = 'All of the terms necessary to define and calculate a cash flow based on a fixed, a floating or an inflation index rate. The interest rate payout can be applied to interest rate swaps and FRA (which both have two associated interest rate payouts), credit default swaps (to represent the fee leg when subject to periodic payments) and equity swaps (to represent the funding leg).'} interestRatePayout: model::external::cdm::InterestRatePayout[*];
  {meta::pure::profiles::doc.doc = 'The credit default payout, which provides the details necessary for determining when a credit payout will be triggered as well as the parameters for calculating the payout and the settlement terms.'} creditDefaultPayout: model::external::cdm::CreditDefaultPayout[0..1];
  {meta::pure::profiles::doc.doc = 'The equity payout, which encompasses the equity price returns, dividend returns, volatility and variance return provisions.'} equityPayout: model::external::cdm::EquityPayout[*];
  {meta::pure::profiles::doc.doc = 'The option payout.'} optionPayout: model::external::cdm::OptionPayout[*];
  {meta::pure::profiles::doc.doc = 'Defines the payout for the floating leg of a Commodity Swap.'} commodityPayout: model::external::cdm::CommodityPayout[*];
  {meta::pure::profiles::doc.doc = 'Represents a forward settling payout. The \'Underlier\' attribute captures the underlying payout, which is settled according to the \'SettlementTerms\' attribute. Both FX Spot and FX Forward should use this component.'} forwardPayout: model::external::cdm::ForwardPayout[*];
  {meta::pure::profiles::doc.doc = 'Defines a payout in which one or more forward payouts are defined as a fixed price.'} fixedForwardPayout: model::external::cdm::FixedForwardPayout[*];
  {meta::pure::profiles::doc.doc = 'The security payout when the product involves some form of securities, such as collateral in a securities financing transaction'} securityPayout: model::external::cdm::SecurityPayout[*];
  {meta::pure::profiles::doc.doc = 'The security payout when the product involves some form of securities, such as collateral in a securities financing transaction'} securityFinancePayout: model::external::cdm::SecurityFinancePayout[*];
  {meta::pure::profiles::doc.doc = 'A cashflow between the parties to the trade. For interest rate and equity products, this corresponds to the FpML additionalPayment element. For credit default swaps, this corresponds to the FpML initialPayment element and the singlePayment element of the fee leg. For option products, it represents the FpML premium element.'} cashflow: model::external::cdm::Cashflow[*];
}

Class <<meta::pure::profiles::typemodifiers.abstract>> {meta::pure::profiles::doc.doc = 'Abstract base class for all underlying assets.'} FpML::model::UnderlyingAsset extends FpML::model::IdentifiedAsset
{
  {meta::pure::profiles::doc.doc = 'Trading currency of the underlyer when transacted as a cash instrument.'} currency: FpML::model::IdentifiedCurrency[0..1];
  {meta::pure::profiles::doc.doc = 'Identification of the exchange on which this asset is transacted for the purposes of calculating a contractural payoff. The term \'Exchange\' is assumed to have the meaning as defined in the ISDA 2002 Equity Derivatives Definitions.'} exchangeId: FpML::model::ExchangeId[0..1];
  {meta::pure::profiles::doc.doc = 'Identification of the clearance system associated with the transaction exchange.'} clearanceSystem: FpML::model::ClearanceSystem[0..1];
  {meta::pure::profiles::doc.doc = 'An optional reference to a full FpML product that defines the simple product in greater detail. In case of inconsistency between the terms of the simple product and those of the detailed definition, the values in the simple product override those in the detailed definition.'} definition: FpML::model::ProductReference[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Specifies a price to be used for trade amounts and other purposes.'} model::external::cdm::Price extends model::external::cdm::MeasureBase
{
  {meta::pure::profiles::doc.doc = 'Provides a value for the type of price expression (cash price, interest rate, gross or net, clean or dirty etc.) in order to explain how to interpret the amount and use it in calculations.'} priceExpression: model::external::cdm::PriceExpression[1];
  {meta::pure::profiles::doc.doc = 'Provides an attribute to define the unit being priced.  For example, {amount, unitOfAmount, PerUnitOfAmount} = [10, EUR, Shares] = (10.00 EUR/SHARE) * (300,000 SHARES) = EUR 3,000,000.00 (Shares cancel out in the calculation).'} perUnitOfAmount: model::external::cdm::UnitType[1];
}

Class {meta::pure::profiles::doc.doc = 'A data to:  describe a notional schedule where each notional that applies to a calculation period is calculated with reference to a notional amount or notional amount schedule in a different currency by means of a spot currency exchange rate which is normally observed at the beginning of each period.'} model::external::cdm::FxLinkedNotionalSchedule
{
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'The currency of the varying notional amount, i.e. the notional amount being determined periodically based on observation of a spot currency exchange rate. The list of valid currencies is not presently positioned as an enumeration as part of the CDM because that scope is limited to the values specified by ISDA and FpML. As a result, implementers have to make reference to the relevant standard, such as the ISO 4217 standard for currency codes.'} varyingNotionalCurrency: String[1];
  {meta::pure::profiles::doc.doc = 'The dates on which spot currency exchange rates are observed for purposes of determining the varying notional currency amount that will apply to a calculation period.'} varyingNotionalFixingDates: model::external::cdm::RelativeDateOffset[1];
  {meta::pure::profiles::doc.doc = 'The information source and time at which the spot currency exchange rate will be observed.'} fxSpotRateSource: model::external::cdm::FxSpotRateSource[1];
  {meta::pure::profiles::doc.doc = 'The time at which the spot currency exchange rate will be observed. It is specified as a time in a business day calendar location, e.g. 11:00am London time.'} fixingTime: model::external::cdm::BusinessCenterTime[0..1];
  {meta::pure::profiles::doc.doc = 'The dates on which interim exchanges of notional are paid. Interim exchanges will arise as a result of changes in the spot currency exchange amount or changes in the constant notional schedule (e.g. amortisation).'} varyingNotionalInterimExchangePaymentDates: model::external::cdm::RelativeDateOffset[1];
}

Class {meta::pure::profiles::doc.doc = 'Instructions required to create a Quantity Change Primitive Event, which can be either an increase, a decrease or a replacement. An increase adds a new trade lot to the original trade, whereas a decrease subtracts from an existing trade lot\'s quantity. A replacement updates the quantity of an existing trade lot to the new value.'} model::external::cdm::QuantityChangeInstruction
{
  {meta::pure::profiles::doc.doc = 'Quantity by which the trade is being increased, decreased or replaced, and the price at which such quantity change is agreed. The quantity change should always be specified as a positive number, with the direction (increase/decrease/replacement) being specified by the direction enumeration. A fee can also be associated to the quantity change by specifying a Price component of type CashPrice, including the corresponding settlement date and direction.'} change: model::external::cdm::PriceQuantity[1..*];
  {meta::pure::profiles::doc.doc = 'Direction of the quantity change specified as either an increase, decrease or replacement.'} direction: model::external::cdm::QuantityChangeDirectionEnum[1];
  {meta::pure::profiles::doc.doc = 'Identifier for the new lot (in case of increase) or for the existing lot to be changed(in case of decrease or replacement). This optional attribute is mandatory in case of a decrease or replacement if the initial trade state contains multiple trade lots.'} lotIdentifier: model::external::cdm::Identifier[*];
}

Class FpML::model::FloatingAmountProvisions
{
  {meta::pure::profiles::doc.doc = 'As specified by the ISDA Supplement for use with trades on mortgage-backed securities, \'WAC Cap\' means a weighted average coupon or weighted average rate cap provision (however defined in the Underlying Instruments) of the Underlying Instruments that limits, increases or decreases the interest rate or interest entitlement, as set out in the Underlying Instruments on the Effective Date without regard to any subsequent amendment The presence of the element with value set to \'true\' signifies that the provision is applicable. From a usage standpoint, this provision is typically applicable in the case of CMBS and not applicable in case of RMBS trades.'} wacCapInterestProvision: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'As specified by the ISDA Standard Terms Supplement for use with trades on mortgage-backed securities. The presence of the element with value set to \'true\' signifies that the provision is applicable. If applicable, the applicable step-up terms are specified as part of that ISDA Standard Terms Supplement. From a usage standpoint, this provision is typically applicable in the case of RMBS and not applicable in case of CMBS trades.'} stepUpProvision: Boolean[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Specification of the address and other details for notices.'} model::external::cdm::AddressForNotices
{
  {meta::pure::profiles::doc.doc = 'Specification of primary notice details'} primaryNotices: model::external::cdm::ContactElection[1];
  {meta::pure::profiles::doc.doc = 'The optional specification of additional information when a party requires notices to be delivered to more than one address.'} additionalNotices: model::external::cdm::PartyContactInformation[*];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the Custodian Risk (English Law and New York Law ISDA CSA) and the Collateral Manager Risk (Japanese Law ISDA CSA) election. | ISDA 2016 English Law Credit Support Deed for Initial Margin, paragraph 13, General Principles, (n)(ii): Custodian (IM) Risk. | ISDA 2018 English Law Credit Support Deed for Initial Margin, paragraph 13, General Principles, (n)(ii): Custodian (IM) Risk. | ISDA 2016 Japanese Law Credit Support Annex for Initial Margin, paragraph 13, General Principles, (m)(i): Collateral Manager Risk. | ISDA 2016 New York Law Credit Support Annex for Initial Margin, paragraph 13, General Principles, (n)(ii): Custodian (IM) Risk.'} model::external::cdm::CustodianRiskElection
{
  {meta::pure::profiles::doc.doc = 'The elective party.'} party: model::external::cdm::CounterpartyRoleEnum[0..1];
  {meta::pure::profiles::doc.doc = 'The qualification as to whether the risk is deemed as Specified.'} isSpecified: Boolean[1];
  {meta::pure::profiles::doc.doc = 'The Custodian Risk (English Law and New York Law ISDA CSA) or Collateral Manager Risk (Japanese Law ISDA CSA) qualification. This attribute is optional because the Custodian Risk provision can be deemed as \'Specified\', although not be qualified through this attribute.'} qualification: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A data to:  define the adjusted dates for a cancelable provision on a swap transaction.'} model::external::cdm::CancelableProvisionAdjustedDates
{
  {meta::pure::profiles::doc.doc = 'The adjusted dates for an individual cancellation date.'} cancellationEvent: model::external::cdm::CancellationEvent[1..*];
}

Class {meta::pure::profiles::doc.doc = 'A class that is used by the ApplicableRegime and the AdditionalRegime classes to specify the regulatory regime terms which are referred to as part of certain legal agreements, such as such as the ISDA 2016 and 2018 CSA for Initial Margin.'} model::external::cdm::RegimeTerms
{
  {meta::pure::profiles::doc.doc = 'The party for which the regime terms are being specified when acting as collateral taker.'} party: model::external::cdm::CounterpartyRoleEnum[1];
  {meta::pure::profiles::doc.doc = 'The specification of whether the regime is elected as applicable to the party when acting as collateral taker.'} isApplicable: model::external::cdm::ExceptionEnum[0..1];
  {meta::pure::profiles::doc.doc = 'The bespoke party specific Regime term elections applicable when specified.'} asSpecified: String[0..1];
  {meta::pure::profiles::doc.doc = 'The election for SIMM exception to the regulatory regime clause of the ISDA 2016 and 2018 CSA for Initial Margin as either a normalized value specified as part of an enumeration or a customized value specified of type string. ISDA 2016 Credit Support Annex for Initial Margin paragraph 13, Regime: SIMM Exception.'} simmException: model::external::cdm::SimmException[0..1];
  {meta::pure::profiles::doc.doc = 'ISDA 2016 CSA for Initial Margin, paragraph 13 (b)(i): if `Retrospective Effect` is specified as applicable to a Regime (a `Retrospective Regime`) then all Covered Transactions (IM) under all other Regimes with an earlier Regime Effective Time will, to the extent that they would have been Covered Transactions (IM) under such Retrospective Regime had such Transactions been entered into at or after the Regime Effective Time of the Retrospective Regime, be deemed to be Covered Transactions (IM) for such Retrospective Regime.'} retrospectiveEffect: model::external::cdm::RetrospectiveEffect[0..1];
}

Class {meta::pure::profiles::doc.doc = 'The data type used for party identifiers.'} FpML::model::PartyId
[
  c1_length: $this.partyIdScheme->length() >= 1,
  c2_length: $this.value->length() >= 1,
  c3_length: $this.value->length() <= 255
]
{
  partyIdScheme: String[1];
  value: String[1];
}

Class FpML::model::IndexId
[
  c1_length: $this.indexIdScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() >= 1,
  c3_length: $this.value->length() <= 255
]
{
  indexIdScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'An exchange traded equity asset.'} FpML::model::EquityAsset extends FpML::model::ExchangeTraded
{
}

Class {meta::pure::profiles::doc.doc = 'A type for definining equity option simple strike or calendar spread strategy features.'} FpML::model::StrategyFeature
[
  c1_choice: ($this.strikeSpread->isNotEmpty() && $this.calendarSpread->isEmpty()) || ($this.strikeSpread->isEmpty() && $this.calendarSpread->isNotEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'Definition of the upper strike in a strike spread.'} strikeSpread: FpML::model::StrikeSpread[0..1];
  {meta::pure::profiles::doc.doc = 'Definition of the later expiration date in a calendar spread.'} calendarSpread: FpML::model::CalendarSpread[0..1];
}

Class {meta::pure::profiles::doc.doc = 'This type holds parameters defining the alternative fixing time for a floating rate index.'} model::external::cdm::FloatingRateIndexAlternativeFixingTime extends model::external::cdm::FloatingRateIndexFixingTime
{
  {meta::pure::profiles::doc.doc = 'Allows a reason to be specified for using the alternative fixing time.'} fallbackReason: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Indicator to specify if the period bound is defined as a period and whether the bound is inclusive.'} model::external::cdm::PeriodBound
{
  {meta::pure::profiles::doc.doc = 'Specifies the period is to be used as the bound, e.g. 5Y.'} period: model::external::cdm::Period[1];
  {meta::pure::profiles::doc.doc = 'Specifies whether the period bound is inclusive, e.g. for a lower bound, false would indicate greater than, whereas true would indicate greater than or equal to.'} inclusive: Boolean[1];
}

Class {meta::pure::profiles::doc.doc = 'A single weighted averaging observation.'} model::external::cdm::WeightedAveragingObservation
[
  WeightedAveragingObservationChoice: ($this.dateTime->isNotEmpty() && $this.observationNumber->isEmpty()) || ($this.observationNumber->isNotEmpty() && $this.dateTime->isEmpty()),
  PositiveObservationNumber: if($this.observationNumber->isNotEmpty(), |$this.observationNumber >= 0, |true),
  PositiveWeight: if($this.weight->isNotEmpty(), |$this.weight >= 0, |true)
]
{
  {meta::pure::profiles::doc.doc = 'Observation date time, which should be used when literal observation dates are required. The CDM specifies that the zoned date time is to be expressed in accordance with ISO 8601, either as UTC as an offset to UTC.'} dateTime: model::external::cdm::zonedDateTime[0..1];
  {meta::pure::profiles::doc.doc = 'Observation number, which should be unique, within a series generated by a date schedule.'} observationNumber: Integer[0..1];
  {meta::pure::profiles::doc.doc = 'Observation weight, which is used as a multiplier for the observation value.'} weight: Float[1];
}

Class {meta::pure::profiles::doc.doc = 'An exchange traded future contract.'} FpML::model::Future extends FpML::model::ExchangeTraded
[
  c1_range: $this.multiplier->forAll(x: Decimal[1]|$x > 0),
  c2_length: $this.futureContractReference->forAll(x: String[1]|$x->length() >= 1)
]
{
  {meta::pure::profiles::doc.doc = 'The multiplier is the minimum number of the underlying - index or stock - that a participant has to trade while taking a position in the Future contract. The purpose of the multiplier is to inflate the value of the contract to add leverage to the trade. The multiplier for the Dow is 10, for the Nasdaq it is 100 and it is 250 for the Standard and Poor\'s index.'} multiplier: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'Native identifier for the contract on the listing exchange.'} futureContractReference: String[0..1];
  {meta::pure::profiles::doc.doc = 'The date when the future contract expires.'} maturity: StrictDate[0..1];
  {meta::pure::profiles::doc.doc = 'The contract month of the futures contract. i.e. F13 WTI NYMEX Contract is 2013-01.'} contractYearMonth: StrictDate[0..1];
  {meta::pure::profiles::doc.doc = 'Underlyer of the option e.g. a listed future.'} underlyer: FpML::model::ExchangeTradedContractUnderlyer[0..1];
  {meta::pure::profiles::doc.doc = 'Settlement method for the contract (Cash, Physical). This value is used to populate the \'Delivery Type\' field for regulatory reporting (CFTC, ESMA).'} settlementType: FpML::model::SettlementTypeEnum[0..1];
}

Class FpML::model::MultipleValuationDates extends FpML::model::SingleValuationDate
{
  {meta::pure::profiles::doc.doc = 'The number of business days between successive valuation dates when multiple valuation dates are applicable for cash settlement. ISDA 2003 Term: Business Days thereafter'} businessDaysThereafter: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'Where multiple valuation dates are specified as being applicable for cash settlement, this element specifies (a) the number of applicable valuation dates, and (b) the number of business days after satisfaction of all conditions to settlement when the first such valuation date occurs, and (c) the number of business days thereafter of each successive valuation date. ISDA 2003 Term: Multiple Valuation Dates'} numberValuationDates: Decimal[0..1];
}

Class FpML::model::CashSettlementTerms extends FpML::model::SettlementTerms
[
  c1_length: $this.dealer->forAll(x: String[1]|$x->length() >= 1)
]
{
  {meta::pure::profiles::doc.doc = 'The number of business days after conditions to settlement have been satisfied when the calculation agent obtains a price quotation on the Reference Obligation for purposes of cash settlement. There may be one or more valuation dates. This is typically specified if the cash settlement amount is not a fixed amount. ISDA 2003 Term: Valuation Date'} valuationDate: FpML::model::ValuationDate[0..1];
  {meta::pure::profiles::doc.doc = 'The time of day in the specified business center when the calculation agent seeks quotations for an amount of the reference obligation for purposes of cash settlement. ISDA 2003 Term: Valuation Time'} valuationTime: FpML::model::BusinessCenterTime[0..1];
  {meta::pure::profiles::doc.doc = 'The type of price quotations to be requested from dealers when determining the market value of the reference obligation for purposes of cash settlement. For example, Bid, Offer or Mid-market. ISDA 2003 Term: Quotation Method'} quotationMethod: FpML::model::QuotationRateTypeEnum[0..1];
  {meta::pure::profiles::doc.doc = 'In the determination of a cash settlement amount, if weighted average quotations are to be obtained, the quotation amount specifies an upper limit to the outstanding principal balance of the reference obligation for which the quote should be obtained. If not specified, the ISDA definitions provide for a fallback amount equal to the floating rate payer calculation amount. ISDA 2003 Term: Quotation Amount'} quotationAmount: FpML::model::Money[0..1];
  {meta::pure::profiles::doc.doc = 'In the determination of a cash settlement amount, if weighted average quotations are to be obtained, the minimum quotation amount specifies a minimum intended threshold amount of outstanding principal balance of the reference obligation for which the quote should be obtained. If not specified, the ISDA definitions provide for a fallback amount of the lower of either USD 1,000,000 (or its equivalent in the relevant obligation currency) or the quotation amount. ISDA 2003 Term: Minimum Quotation Amount'} minimumQuotationAmount: FpML::model::Money[0..1];
  {meta::pure::profiles::doc.doc = 'A dealer from whom quotations are obtained by the calculation agent on the reference obligation for purposes of cash settlement. ISDA 2003 Term: Dealer'} dealer: String[*];
  {meta::pure::profiles::doc.doc = 'The number of business days used in the determination of the cash settlement payment date. If a cash settlement amount is specified, the cash settlement payment date will be this number of business days following the calculation of the final price. If a cash settlement amount is not specified, the cash settlement payment date will be this number of business days after all conditions to settlement are satisfied. ISDA 2003 Term: Cash Settlement Date'} cashSettlementBusinessDays: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'The amount paid by the seller to the buyer for cash settlement on the cash settlement date. If not otherwise specified, would typically be calculated as 100 (or the Reference Price) minus the price of the Reference Obligation (all expressed as a percentage) times Floating Rate Payer Calculation Amount. ISDA 2003 Term: Cash Settlement Amount.'} cashSettlementAmount: FpML::model::Money[0..1];
  {meta::pure::profiles::doc.doc = 'Used for fixed recovery, specifies the recovery level, determined at contract inception, to be applied on a default. Used to calculate the amount paid by the seller to the buyer for cash settlement on the cash settlement date. Amount calculation is (1 minus the Recovery Factor) multiplied by the Floating Rate Payer Calculation Amount. The currency will be derived from the Floating Rate Payer Calculation Amount.'} recoveryFactor: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'Used for Recovery Lock, to indicate whether fixed Settlement is Applicable or Not Applicable. If Buyer fails to deliver an effective Notice of Physical Settlement on or before the Buyer NOPS Cut-off Date, and If Seller fails to deliver an effective Seller NOPS on or before the Seller NOPS Cut-off Date, then either: (a) if Fixed Settlement is specified in the related Confirmation as not applicable, then the Seller NOPS Cut-off Date shall be the Termination Date; or (b) if Fixed Settlement is specified in the related Confirmation as applicable, then: (i) if the Fixed Settlement Amount is a positive number, Seller shall, subject to Section 3.1 (except for the requirement of satisfaction of the Notice of Physical Settlement Condition to Settlement), pay the Fixed Settlement Amount to Buyer on the Fixed Settlement Payment Date; and (ii) if the Fixed Settlement Amount is a negative number, Buyer shall, subject to Section 3.1 (except for the requirement of satisfaction of the Notice of Physical Settlement Condition to Settlement), pay the absolute value of the Fixed Settlement Amount to Seller on the Fixed Settlement Payment Date.'} fixedSettlement: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'Indicates whether accrued interest is included (true) or not (false). For cash settlement this specifies whether quotations should be obtained inclusive or not of accrued interest. For physical settlement this specifies whether the buyer should deliver the obligation with an outstanding principal balance that includes or excludes accrued interest. ISDA 2003 Term: Include/Exclude Accrued Interest'} accruedInterest: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'The ISDA defined methodology for determining the final price of the reference obligation for purposes of cash settlement. (ISDA 2003 Term: Valuation Method). For example, Market, Highest etc.'} valuationMethod: FpML::model::ValuationMethodEnum[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the relationship between the Control Agreement and the Credit Support Agreement.'} model::external::cdm::ControlAgreement
{
  {meta::pure::profiles::doc.doc = 'The party specific elections.'} partyElection: model::external::cdm::ControlAgreementElections[2];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the reference obligation that is associated with a credit derivative instrument.'} model::external::cdm::ReferenceObligation
[
  LegalEntityChoice: (($this.primaryObligor->isEmpty() && $this.primaryObligorReference->isEmpty()) || ($this.primaryObligor->isNotEmpty() && $this.primaryObligorReference->isEmpty())) || ($this.primaryObligorReference->isNotEmpty() && $this.primaryObligor->isEmpty()),
  AssetChoice: ($this.security->isNotEmpty() && $this.loan->isEmpty()) || ($this.loan->isNotEmpty() && $this.security->isEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'Identifies the underlying asset when it is a security, such as a bond or convertible bond. The security data type requires one or more productIdentifiers, specificaiton of the security type (e.g. debt), and includes optional attributes to specify a debt class, such as asset-backed, as well as seniority.'} security: model::external::cdm::Security[0..1];
  {meta::pure::profiles::doc.doc = 'Identifies the underlying asset when it is a loan.'} loan: model::external::cdm::Loan[0..1];
  {meta::pure::profiles::doc.doc = 'The entity primarily responsible for repaying debt to a creditor as a result of borrowing or issuing bonds. ISDA 2003 Term: Primary Obligor.'} primaryObligor: model::external::cdm::LegalEntity[0..1];
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'A pointer style reference to a reference entity defined elsewhere in the document. Used when the reference entity is the primary obligor.'} primaryObligorReference: model::external::cdm::LegalEntity[0..1];
  {meta::pure::profiles::doc.doc = 'The party that guarantees by way of a contractual arrangement to pay the debts of an obligor if the obligor is unable to make the required payments itself. ISDA 2003 Term: Guarantor.'} guarantor: model::external::cdm::LegalEntity[0..1];
  {meta::pure::profiles::doc.doc = 'A pointer style reference to a reference entity defined elsewhere in the document. Used when the reference entity is the guarantor.'} guarantorReference: String[0..1];
  {meta::pure::profiles::doc.doc = 'Indicates if the reference obligation is a Standard Reference Obligation. ISDA 2014 Term: Standard Reference Obligation.'} standardReferenceObligation: Boolean[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A class for defining a strike spread feature.'} model::external::cdm::StrikeSpread
{
  {meta::pure::profiles::doc.doc = 'Upper strike in a strike spread.'} upperStrike: model::external::cdm::OptionStrike[1];
  {meta::pure::profiles::doc.doc = 'Number of options at the upper strike price in a strike spread.'} upperStrikeNumberOfOptions: Float[1];
}

Class {meta::pure::profiles::doc.doc = 'A type that is different from AdjustableDate in two regards. First, date adjustments can be specified with either a dateAdjustments element or a reference to an existing dateAdjustments element. Second, it does not require the specification of date adjustments.'} FpML::model::AdjustableDate2
[
  c1_choice: ($this.dateAdjustments->isNotEmpty() && $this.dateAdjustmentsReference->isEmpty()) || ($this.dateAdjustments->isEmpty() && $this.dateAdjustmentsReference->isNotEmpty())
]
{
  {meta::pure::profiles::doc.doc = 'A date subject to adjustment.'} unadjustedDate: FpML::model::IdentifiedDate[0..1];
  {meta::pure::profiles::doc.doc = 'The business day convention and financial business centers used for adjusting the date if it would otherwise fall on a day that is not a business dat in the specified business centers.'} dateAdjustments: FpML::model::BusinessDayAdjustments[0..1];
  {meta::pure::profiles::doc.doc = 'A pointer style reference to date adjustments defined elsewhere in the document.'} dateAdjustmentsReference: FpML::model::BusinessDayAdjustmentsReference[0..1];
  {meta::pure::profiles::doc.doc = 'The date once the adjustment has been performed. (Note that this date may change if the business center holidays change).'} adjustedDate: FpML::model::IdentifiedDate[0..1];
  id: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Describes a rate source to be fixed and the date the fixing occurs'} FpML::model::FxRateSourceFixing
{
  settlementRateSource: FpML::model::FxSettlementRateSource[0..1];
  {meta::pure::profiles::doc.doc = 'The date on which the fixing is scheduled to occur.'} fixingDate: FpML::model::AdjustableDate[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Describes the resource that contains the media representation of a business event (i.e used for stating the Publicly Available Information). For example, can describe a file or a URL that represents the event. This type is an extended version of a type defined by RIXML (www.rixml.org).  Rosetta restricts the FpML implementation by not providing the ability to associated a document in hexadecimalBinary or base64Binary until such time that actual use cases will come up.'} model::external::cdm::Resource
[
  ResourceChoice: (($this.string->isEmpty() && $this.url->isEmpty()) || ($this.string->isNotEmpty() && $this.url->isEmpty())) || ($this.url->isNotEmpty() && $this.string->isEmpty())
]
{
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'The unique identifier of the resource within the event. FpML specifies this element of type resourceIdScheme but with no specified value.'} resourceId: String[1];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'A description of the type of the resource, e.g. a confirmation.'} resourceType: model::external::cdm::ResourceTypeEnum[0..1];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'Indicates the language of the resource, described using the ISO 639-2/T Code.'} language: String[0..1];
  {meta::pure::profiles::doc.doc = 'Indicates the size of the resource in bytes. It could be used by the end user to estimate the download time and storage needs.'} sizeInBytes: Float[0..1];
  {meta::pure::profiles::doc.doc = 'Indicates the length of the resource. For example, if the resource were a PDF file, the length would be in pages.'} length: model::external::cdm::ResourceLength[0..1];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'Indicates the type of media used to store the content. mimeType is used to determine the software product(s) that can read the content. MIME Types are described in RFC 2046.'} mimeType: String[0..1];
  {meta::pure::profiles::doc.doc = 'The name of the resource.  It is specified as a NormalizedString in FpML.'} name: String[0..1];
  {meta::pure::profiles::doc.doc = 'Any additional comments that are deemed necessary. For example, which software version is required to open the document? Or, how does this resource relate to the others for this event?'} comments: String[0..1];
  {meta::pure::profiles::doc.doc = 'Provides extra information as string. In case the extra information is in XML format, a CDATA section must be placed around the source message to prevent its interpretation as XML content.'} string: String[0..1];
  {meta::pure::profiles::doc.doc = 'Indicates where the resource can be found, as a URL that references the information on a web server accessible to the message recipient.'} url: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type describing interest payments associated with and underlyer, such as financing'} FpML::model::UnderlyerInterestLeg extends FpML::model::DirectionalLeg
{
  {meta::pure::profiles::doc.doc = 'The calculation period fixed rate. A per annum rate, expressed as a decimal. A fixed rate of 5% would be represented as 0.05.'} fixedRate: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'The ISDA Spread or a Spread schedule expressed as explicit spreads and dates. In the case of a schedule, the step dates may be subject to adjustment in accordance with any adjustments specified in calculationPeriodDatesAdjustments. The spread is a per annum rate, expressed as a decimal. For purposes of determining a calculation period amount, if positive the spread will be added to the floating rate and if negative the spread will be subtracted from the floating rate. A positive 10 basis point (0.1%) spread would be represented as 0.001.'} spreadSchedule: FpML::model::SpreadSchedule[*];
}

Class {meta::pure::profiles::doc.doc = 'A type describing the rate of a currency conversion: pair of currency, quotation mode and exchange rate.'} FpML::model::FxRate
{
  {meta::pure::profiles::doc.doc = 'Defines the two currencies for an FX trade and the quotation relationship between the two currencies.'} quotedCurrencyPair: FpML::model::QuotedCurrencyPair[0..1];
  {meta::pure::profiles::doc.doc = 'The rate of exchange between the two currencies of the leg of a deal. Must be specified with a quote basis.'} rate: Decimal[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Defines the terms required to calculate the average observations associated with an averaging strike.'} model::external::cdm::AveragingStrikeFeature
{
  {meta::pure::profiles::doc.doc = 'Defines parameters for use in cases when a valuation or other term is based on an average of market observations.'} averagingCalculation: model::external::cdm::AveragingCalculation[1];
  {meta::pure::profiles::doc.doc = 'Class containing terms that are associated with observing a price/benchmark/index across either single or multple observations.'} observationTerms: model::external::cdm::ObservationTerms[1];
}

Class {meta::pure::profiles::doc.doc = 'Represents common attributes required for a Margin Call Issuance under a legal agreement such as a credit support document or equivalent.'} model::external::cdm::MarginCallIssuance extends model::external::cdm::MarginCallBase
{
  {meta::pure::profiles::doc.doc = 'Specifies the amount of margin being called for which accounts for margin calculation inclusive of exposure, independent amount,threshold,collateral balance, MTA, rounding increments (in base currency detailed in supporting collateral agreement).'} callAmountInBaseCurrency: model::external::cdm::Money[1];
  {meta::pure::profiles::doc.doc = 'Specifies the details to describe or identify non-cash collateral eligible assets for recall purposes.'} recallNonCashCollateralDescription: model::external::cdm::EligibleCollateralCriteria[*];
}

Class {meta::pure::profiles::doc.doc = 'A data to:  specify the inflation rate.'} model::external::cdm::InflationRateSpecification extends model::external::cdm::FloatingRateSpecification
{
  {meta::pure::profiles::doc.doc = 'An off-setting period from the payment date which determines the reference period for which the inflation index is observed.'} inflationLag: model::external::cdm::Offset[1];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'The reference source such as Reuters or Bloomberg. FpML specifies indexSource to be of type rateSourcePageScheme, but without specifying actual values.'} indexSource: String[1];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'The current main publication source such as relevant web site or a government body. FpML specifies mainPublication to be of type mainPublicationSource, but without specifying actual values.'} mainPublication: String[1];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'The method used when calculating the Inflation Index Level from multiple points. The most common is Linear.'} interpolationMethod: model::external::cdm::InterpolationMethodEnum[1];
  {meta::pure::profiles::doc.doc = 'Initial known index level for the first calculation period.'} initialIndexLevel: Float[0..1];
  {meta::pure::profiles::doc.doc = 'The applicability of a fallback bond as defined in the 2006 ISDA Inflation Derivatives Definitions, sections 1.3 and 1.8.'} fallbackBondApplicable: Boolean[1];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'Represents common attributes to define the details of collateral assets, to be used in margin call messaging and contribute to collateral balances e.g securities in a collateral account.'} model::external::cdm::CollateralPortfolio
{
  {meta::pure::profiles::doc.doc = 'Specifies a unique identifier for a set of collateral positions in a portfolio.'} portfolioIdentifier: model::external::cdm::Identifier[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the individual components of the collateral positions in the collateral portfolio.'} collateralPosition: model::external::cdm::CollateralPosition[*];
  {meta::pure::profiles::doc.doc = 'Represents the populated or calculated collateral aggregate balance amount for the collateral portfolio.'} collateralBalance: model::external::cdm::CollateralBalance[*];
}

Class {meta::pure::profiles::doc.doc = 'An unordered list of weighted averaging observations.'} model::external::cdm::AveragingObservationList
{
  {meta::pure::profiles::doc.doc = 'A single weighted averaging observation.'} averagingObservation: model::external::cdm::WeightedAveragingObservation[1..*];
}

Class <<meta::pure::profiles::typemodifiers.abstract>> {meta::pure::profiles::doc.doc = 'The abstract base type from which all calculation rules of the independent amount must be derived. Users are supposed to use type substitution at PaymentRule. PaymentRule is supposed to be substituted by PercentageRule. There is the expectation that other rules will be created to model other types of independent amount payment rules in the future.'} FpML::model::PaymentRule
{
}

Class {meta::pure::profiles::doc.doc = 'A class to provide lineage information across lifecycle events through a pointer or set of pointers into the event(s), contract(s) and, possibly, payout components that the event is dependent on or relates to. As an example, if an contractFormation event is corrected, the correction event will have a lineage into the initial event, which takes the form of a globalKey into that initial contract formation event. Two referencing mechanisms are provided as part of the CDM: either the globalKey, which corresponds to the hash value of the CDM class which is referred to, or a reference qualifier which is meant to provide support for the ingestion of xml documents with id/href mechanisms. The CDM recommends the use of the globalKey and provides a default implementation which is accessible in the generated code through org.isda.cdm.globalKey.GlobalKeyHashCalculator. If implementers want to use an alternative hashing mechanism, the API in which they need to plug it is com.rosetta.model.lib.HashFunction.'} model::external::cdm::Lineage
{
  <<model::external::cdm::metadata.reference>> tradeReference: model::external::cdm::Trade[*];
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'The reference to the instantiation of an Event object, either through a globalKey or an xml-derived id/href mechanism. The definition associated to the Lineage class provides more details with respect to those referencing approaches, their expected usage and available implementation.'} eventReference: model::external::cdm::WorkflowStep[*];
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'The reference to the instantiation of a Cashflow payout component object. An expected typical usage is to provide lineage for the payment of, say, the option premium or the swap initial fee. The definition associated to the Lineage class provides more details with respect to those referencing approaches, their expected usage and available implementation.'} cashflowReference: model::external::cdm::Cashflow[*];
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'The reference to the instantiation of a CreditdefaultPayout component object. The definition associated to the Lineage class provides more details with respect to those referencing approaches, their expected usage and available implementation.'} creditDefaultPayoutReference: model::external::cdm::CreditDefaultPayout[*];
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'The reference to the instantiation of a InterestRatePayout component object. An expected typical usage is to provide lineage for the payment of, say, an interest rate swap reset, with the ability to relate the gross cashflow amounts to the respective payout components. The definition associated to the Lineage class provides more details with respect to those referencing approaches, their expected usage and available implementation.'} interestRatePayoutReference: model::external::cdm::InterestRatePayout[*];
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'The reference to the instantiation of a OptionPayout component object. The definition associated to the Lineage class provides more details with respect to those referencing approaches, their expected usage and available implementation.'} optionPayoutReference: model::external::cdm::OptionPayout[*];
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'The reference to the instantiation of a EquityPayout object. An expected typical usage is to provide lineage for the payment of, say, an equity dividend. The definition associated to the Lineage class provides more details with respect to those referencing approaches, their expected usage and available implementation.'} equityPayoutReference: model::external::cdm::EquityPayout[*];
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'The reference to the instantiation of a TransferPrimitive object.'} transferReference: model::external::cdm::TransferPrimitive[*];
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'The reference to the instantiation of a Legal Agreement object. The definition associated to the Lineage class provides more details with respect to those referencing approaches, their expected usage and available implementation.'} legalAgreement: model::external::cdm::LegalAgreement[*];
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'The refence to the previous state of a Portfolio, in a chain of Events leading up to a build of that Portfolio as the holding of Product(s) in specific Quantity(ies). As part of the PortfolioState object, a pointer to the previous PortfolioState is provided through a Lineage object, together with pointer(s) to the Event or set of Events leading up to the current (new) state.'} portfolioStateReference: model::external::cdm::PortfolioState[*];
}

Class {meta::pure::profiles::doc.doc = 'Defines initial margin applied to a repo transaction. Initial margin is an agreed premium to the Purchase Price of a repo to determine the required Market Value of the collateral to be delivered on the Purchase Date. It reflects quality of the collateral. Its aim is to calculate the risk-adjusted or liquidation value of collateral.'} model::external::cdm::InitialMargin
[
  MarginThreshold: if($this.marginThreshold->isNotEmpty(), |$this.marginThreshold.amount > 0, |true),
  MinimumTransferAmount: if($this.minimumTransferAmount->isNotEmpty(), |$this.minimumTransferAmount.amount > 0, |true)
]
{
  {meta::pure::profiles::doc.doc = 'An element defining the type of assets (cash or securities) specified to apply as margin to the repo transaction. See GMRA 2011 paragraph 2(h) for \'Cash Margin\' and GMRA 2011 paragraph 2(cc) for \'Margin Securities\'.'} marginType: model::external::cdm::MarginTypeEnum[1];
  {meta::pure::profiles::doc.doc = 'Initial margin calculation for a collateral asset. Initial margin requirements may be specified for multiple pieces of collateral.'} margin: model::external::cdm::InitialMarginCalculation[1..*];
  {meta::pure::profiles::doc.doc = 'An element defining a margin threshold which is the Net Exposure of a trade below which parties agree they will not call a margin from each other.'} marginThreshold: model::external::cdm::Money[0..1];
  {meta::pure::profiles::doc.doc = 'An element defining a minimum transfer amount which is the minimum margin call parties will make once the margin threshold (or margin ratio threshold / haircut threshold) has been exceeded.'} minimumTransferAmount: model::external::cdm::Money[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Identification of party specific Credit Support Providers applicable to the document.'} model::external::cdm::CreditSupportProvider
{
  {meta::pure::profiles::doc.doc = 'The party election of Credit Support Provider(s), if any.'} creditSupportProviderElection: model::external::cdm::CreditSupportProviderElection[2];
}

Class {meta::pure::profiles::doc.doc = 'Defines the primitive event to represent a reset. For details of how the TradeState is changed between the `before` and `after` TradeStates, see the corresponding Create_ResetPrimitive function.'} model::external::cdm::ResetPrimitive
[
  Trade: $this.before.trade == $this.after.trade
]
{
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'Represents the TradeState prior applying the Reset primitive.'} before: model::external::cdm::TradeState[1];
  {meta::pure::profiles::doc.doc = 'Represents the TradeState after to applying the Reset primitive.'} after: model::external::cdm::TradeState[1];
}

Class {meta::pure::profiles::doc.doc = 'A contractual supplement (such as those published by ISDA) and its publication date that will apply to the trade.'} model::external::cdm::ContractualTermsSupplement
{
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'Identifies the form of applicable contractual supplement.'} contractualTermsSupplementType: model::external::cdm::ContractualSupplementEnum[1];
  {meta::pure::profiles::doc.doc = 'Specifies the publication date of the applicable version of the contractual supplement.'} publicationDate: Date[0..1];
}

Class {meta::pure::profiles::doc.doc = 'The money bound is defined as a money amount and whether the bound is inclusive.'} model::external::cdm::MoneyBound
{
  {meta::pure::profiles::doc.doc = 'The money amount to be used as the bound, e.g. 1,000 USD.'} money: model::external::cdm::Money[1];
  {meta::pure::profiles::doc.doc = 'Whether the money amount bound is inclusive, e.g. for a lower bound, false would indicate greater than, whereas true would indicate greater than or equal to.'} inclusive: Boolean[1];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'A class to specify the transfer of assets between parties, those assets being either cash, securities or physical assets. This class combines components that are cross-assets (settlement date, settlement type, status, ...) and some other which are specialized by asset class (e.g. the payer/receiver amount and cashflow type for a cash transfer, the transferor/transferee, security indication, quantity, and asset transfer type qualification for the case of a security). The associated globalKey denotes the ability to associate a hash value to the respective Execution instantiations for the purpose of model cross-referencing, in support of functionality such as the event effect and the lineage.'} model::external::cdm::TransferPrimitive
{
  <<model::external::cdm::metadata.reference>> before: model::external::cdm::TradeState[1];
  after: model::external::cdm::TradeState[1];
}

Class {meta::pure::profiles::doc.doc = 'Specifies the price and quantity of a trade lot, where the same product could be traded multiple times with the same counterparty but in different lots (at a different date, in a different quantity and at a different price). One trade lot combined with a product definition specifies the entire economics of a trade. The lifecycle mechanics of each such trade lot (e.g. cashflow payments) is independent of the other lots.'} model::external::cdm::TradeLot
{
  {meta::pure::profiles::doc.doc = 'Specifies one or more identifiers for the lot, if any.'} lotIdentifier: model::external::cdm::Identifier[*];
  {meta::pure::profiles::doc.doc = 'Specifies the settlement characteristics of a trade lot: price, quantity, observable (optionally) and the settlement terms. This attribute has a multiple cardinality to allow to specify the price, quantity and observable of different legs in a single, composite product (e.g. a Swap).'} priceQuantity: model::external::cdm::PriceQuantity[1..*];
}

Class {meta::pure::profiles::doc.doc = 'The election of party specific additional obligations applicable to the agreement.'} model::external::cdm::AdditionalObligations
{
  {meta::pure::profiles::doc.doc = 'The party that the additional obligations apply to.'} party: model::external::cdm::CounterpartyRoleEnum[1];
  {meta::pure::profiles::doc.doc = 'The party specific additional obligations applicable to the agreement.'} additionalObligations: String[1];
}

Class {meta::pure::profiles::doc.doc = 'This allows an offset to be specified as, for instance, N business days, with a business centers specified as included.'} model::external::cdm::BusinessDayOffset extends model::external::cdm::Period
{
  {meta::pure::profiles::doc.doc = 'The business centers for the offset.'} businessCenters: model::external::cdm::BusinessCenters[0..1];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'A data for:  defining a principal exchange amount and adjusted exchange date. This data forms:  part of the cashflow representation of a swap stream.'} model::external::cdm::PrincipalExchange
{
  {meta::pure::profiles::doc.doc = 'The non adjusted principal exchange date.'} unadjustedPrincipalExchangeDate: Date[0..1];
  {meta::pure::profiles::doc.doc = 'The adjusted principal exchange date. This date should already be adjusted for any applicable business day convention.'} adjustedPrincipalExchangeDate: Date[0..1];
  {meta::pure::profiles::doc.doc = 'The principal exchange amount. This amount should be positive if the stream payer is paying the exchange amount and signed negative if they are receiving it.'} principalExchangeAmount: Float[0..1];
  {meta::pure::profiles::doc.doc = 'The value representing the discount factor used to calculate the present value of the principal exchange amount.'} discountFactor: Float[0..1];
  {meta::pure::profiles::doc.doc = 'The amount representing the present value of the principal exchange.'} presentValuePrincipalExchangeAmount: model::external::cdm::Money[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type defining a positive money amount'} FpML::model::PositiveMoney extends FpML::model::MoneyBase
[
  c1_range: $this.amount->forAll(x: Decimal[1]|$x > 0)
]
{
  {meta::pure::profiles::doc.doc = 'The positive monetary quantity in currency units.'} amount: Decimal[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A short form unique identifier for a security.'} FpML::model::InstrumentId
[
  c1_length: $this.instrumentIdScheme->length() >= 1,
  c2_length: $this.value->length() >= 1,
  c3_length: $this.value->length() <= 255
]
{
  instrumentIdScheme: String[1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'A type describing a role played by a unit in one or more transactions. Examples include roles such as Trader, Collateral, Confirmation, Settlement, etc. This can be extended to provide custom roles.'} FpML::model::BusinessUnitRole
[
  c1_length: $this.unitRoleScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  unitRoleScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'A type for defining a premium.'} FpML::model::Premium extends FpML::model::SimplePayment
{
  {meta::pure::profiles::doc.doc = 'Forward start Premium type'} premiumType: FpML::model::PremiumTypeEnum[0..1];
  {meta::pure::profiles::doc.doc = 'The amount of premium to be paid expressed as a function of the number of options.'} pricePerOption: FpML::model::Money[0..1];
  {meta::pure::profiles::doc.doc = 'The amount of premium to be paid expressed as a percentage of the notional value of the transaction. A percentage of 5% would be expressed as 0.05.'} percentageOfNotional: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'The value representing the discount factor used to calculate the present value of the cash flow.'} discountFactor: Decimal[0..1];
  {meta::pure::profiles::doc.doc = 'The amount representing the present value of the forecast payment.'} presentValueAmount: FpML::model::Money[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type containing a code representing the aggregation level at which the trade collateralized exposure is calculated(e.g. Single Trade or Net Exposure.)'} FpML::model::CollateralizedExposureGrouping
[
  c1_length: $this.collateralizedExposureGroupingScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  collateralizedExposureGroupingScheme: String[0..1];
  id: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'See existing Contract type'} model::external::cdm::TransactionConfirmation
{
}

Class {meta::pure::profiles::doc.doc = 'A data to:  define business date convention adjustment to final payment period per leg.'} model::external::cdm::FinalCalculationPeriodDateAdjustment
{
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'Reference to the unadjusted cancellation effective dates.'} relevantUnderlyingDateReference: model::external::cdm::AdjustableOrRelativeDates[1];
  <<model::external::cdm::metadata.reference>> {meta::pure::profiles::doc.doc = 'Reference to the leg, where date adjustments may apply.'} swapStreamReference: model::external::cdm::InterestRatePayout[1];
  {meta::pure::profiles::doc.doc = 'Override business date convention. This takes precedence over leg level information.'} businessDayConvention: model::external::cdm::BusinessDayConventionEnum[1];
}

Class FpML::model::MatrixTerm
[
  c1_length: $this.matrixTermScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  matrixTermScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'A type describing a single underlyer'} FpML::model::ExchangeTradedContractUnderlyer
[
  c1_choice: ($this.floatingRateIndex->isNotEmpty() && ($this.quotedCurrencyPair->isEmpty() && $this.underlyingAsset->isEmpty())) || (($this.floatingRateIndex->isEmpty() && ($this.indexTenor->isEmpty() && ($this.quotedCurrencyPair->isNotEmpty() && $this.underlyingAsset->isEmpty()))) || ($this.floatingRateIndex->isEmpty() && ($this.indexTenor->isEmpty() && ($this.quotedCurrencyPair->isEmpty() && $this.underlyingAsset->isNotEmpty()))))
]
{
  {meta::pure::profiles::doc.doc = 'The ISDA Floating Rate Option, i.e. the name of the floating rate.'} floatingRateIndex: FpML::model::FloatingRateIndex[0..1];
  {meta::pure::profiles::doc.doc = 'The ISDA Designated Maturity, i.e. the tenor of the floating rate.'} indexTenor: FpML::model::Period[0..1];
  {meta::pure::profiles::doc.doc = 'Defines the two currencies for an FX trade and the quotation relationship between the two currencies.'} quotedCurrencyPair: FpML::model::QuotedCurrencyPair[0..1];
  {meta::pure::profiles::doc.doc = 'Define the underlying asset, either a listed security or other instrument.'} underlyingAsset: FpML::model::Asset[*];
}

Class <<meta::pure::profiles::typemodifiers.abstract>> {meta::pure::profiles::doc.doc = 'An abstract base class for payment types.'} FpML::model::PaymentBase
{
  id: String[0..1];
}

Class {meta::pure::profiles::doc.doc = 'Represents a set of criteria used to specify eligible collateral assets.'} model::external::cdm::AssetCriteria
{
  {meta::pure::profiles::doc.doc = 'Represents a filter based on the asset product type.'} collateralAssetType: model::external::cdm::AssetType[*];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'Represents a filter based on the asset country of origin.'} assetCountryOfOrigin: String[*];
  <<model::external::cdm::metadata.scheme>> {meta::pure::profiles::doc.doc = 'Represents a filter based on the underlying asset denominated currency.'} denominatedCurrency: String[*];
  {meta::pure::profiles::doc.doc = 'Represents an agency rating based on default risk and creditors claim in event of default associated with specific instrument.'} agencyRating: model::external::cdm::AgencyRatingCriteria[*];
  {meta::pure::profiles::doc.doc = 'Specifies whether the maturity range is the remaining or original maturity.'} maturityType: model::external::cdm::MaturityTypeEnum[0..1];
  {meta::pure::profiles::doc.doc = 'Represents a filter based on the underlying asset maturity.'} maturityRange: model::external::cdm::PeriodRange[0..1];
  {meta::pure::profiles::doc.doc = 'Represents a filter based on specific instrument identifiers (e.g. specific ISINs, CUSIPs etc).'} productIdentifier: model::external::cdm::ProductIdentifier[*];
  {meta::pure::profiles::doc.doc = 'Specifies the collateral taxonomy,which is composed of a taxonomy value and a taxonomy source.'} collateralTaxonomy: model::external::cdm::CollateralTaxonomy[*];
  {meta::pure::profiles::doc.doc = 'Identifies that the Security must be denominated in the domestic currency of the issuer.'} domesticCurrencyIssued: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the exchange, index or sector specific to listing of a security.'} listing: model::external::cdm::ListingType[0..1];
}

Class FpML::model::AdditionalFixedPayments
{
  {meta::pure::profiles::doc.doc = 'An additional Fixed Payment Event. Corresponds to the payment by or on behalf of the Issuer of an actual interest amount in respect to the reference obligation that is greater than the expected interest amount. ISDA 2003 Term: Interest Shortfall Reimbursement.'} interestShortfallReimbursement: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'An additional Fixed Payment Event. Corresponds to the payment by or on behalf of the Issuer of an actual principal amount in respect to the reference obligation that is greater than the expected principal amount. ISDA 2003 Term: Principal Shortfall Reimbursement.'} principalShortfallReimbursement: Boolean[0..1];
  {meta::pure::profiles::doc.doc = 'An Additional Fixed Payment. Corresponds to the payment by or on behalf of the issuer of an amount in respect to the reference obligation in reduction of the prior writedowns. ISDA 2003 Term: Writedown Reimbursement.'} writedownReimbursement: Boolean[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A type defining a contiguous series of calendar dates. The date range is defined as all the dates between and including the first and the last date. The first date must fall before the last date.'} FpML::model::DateRange
{
  {meta::pure::profiles::doc.doc = 'The first date of a date range.'} unadjustedFirstDate: StrictDate[0..1];
  {meta::pure::profiles::doc.doc = 'The last date of a date range.'} unadjustedLastDate: StrictDate[0..1];
}

Class {meta::pure::profiles::doc.doc = 'The name of the reference entity. A free format string. FpML does not define usage rules for this element.'} FpML::model::EntityName
[
  c1_length: $this.entityNameScheme->forAll(x: String[1]|$x->length() >= 1),
  c2_length: $this.value->length() <= 255
]
{
  entityNameScheme: String[0..1];
  value: String[1];
}

Class {meta::pure::profiles::doc.doc = 'Represents a forward settling, fixed price payout. There is no underlier associated with this payout type and is based on fixed pricing per a given unit (e.g. in commodities price per barrel)'} model::external::cdm::FixedForwardPayout extends model::external::cdm::PayoutBase
{
  {meta::pure::profiles::doc.doc = 'Specifies the parameters to generate the payment date schedule, either through a parametric representation or by reference to specified dates.'} paymentDates: model::external::cdm::PaymentDates[1];
  <<model::external::cdm::metadata.address>> {meta::pure::profiles::doc.doc = 'Specifies the fixed price on which fixed forward payments are based.'} fixedPrice: model::external::cdm::Price[1];
}

Class <<model::external::cdm::metadata.key>> {meta::pure::profiles::doc.doc = 'Defines the output of a financial transaction between parties - a Business Event. A Trade impacts the financial position (i.e. the balance sheet) of involved parties.'} model::external::cdm::Trade
[
  ObligationsPhysicalSettlementMatrix: if((!($this.contractDetails.documentation.documentationIdentification.contractualMatrix.matrixType == model::external::cdm::MatrixTypeEnum.CreditDerivativesPhysicalSettlementMatrix) || $this.contractDetails.documentation.documentationIdentification.contractualMatrix.matrixType->isEmpty()) && $this.tradableProduct.product.contractualProduct.economicTerms.payout.creditDefaultPayout.protectionTerms.obligations->isNotEmpty(), |((($this.tradableProduct.product.contractualProduct.economicTerms.payout.creditDefaultPayout.protectionTerms.obligations.notSubordinated->isNotEmpty() && $this.tradableProduct.product.contractualProduct.economicTerms.payout.creditDefaultPayout.protectionTerms.obligations.notSovereignLender->isNotEmpty()) && $this.tradableProduct.product.contractualProduct.economicTerms.payout.creditDefaultPayout.protectionTerms.obligations.notDomesticLaw->isNotEmpty()) && $this.tradableProduct.product.contractualProduct.economicTerms.payout.creditDefaultPayout.protectionTerms.obligations.notDomesticIssuance->isNotEmpty()) && (($this.tradableProduct.product.contractualProduct.economicTerms.payout.creditDefaultPayout.protectionTerms.obligations.fullFaithAndCreditObLiability->isNotEmpty() || $this.tradableProduct.product.contractualProduct.economicTerms.payout.creditDefaultPayout.protectionTerms.obligations.generalFundObligationLiability->isNotEmpty()) || $this.tradableProduct.product.contractualProduct.economicTerms.payout.creditDefaultPayout.protectionTerms.obligations.revenueObligationLiability->isNotEmpty()), |true),
  CreditEventsPhysicalSettlementMatrix: if((!($this.contractDetails.documentation.documentationIdentification.contractualMatrix.matrixType == model::external::cdm::MatrixTypeEnum.CreditDerivativesPhysicalSettlementMatrix) || $this.contractDetails.documentation.documentationIdentification.contractualMatrix.matrixType->isEmpty()) && $this.tradableProduct.product.contractualProduct.economicTerms.payout.creditDefaultPayout.protectionTerms.creditEvents->isNotEmpty(), |((($this.tradableProduct.product.contractualProduct.economicTerms.payout.creditDefaultPayout.protectionTerms.creditEvents.bankruptcy->isNotEmpty() && $this.tradableProduct.product.contractualProduct.economicTerms.payout.creditDefaultPayout.protectionTerms.creditEvents.obligationDefault->isNotEmpty()) && $this.tradableProduct.product.contractualProduct.economicTerms.payout.creditDefaultPayout.protectionTerms.creditEvents.obligationAcceleration->isNotEmpty()) && $this.tradableProduct.product.contractualProduct.economicTerms.payout.creditDefaultPayout.protectionTerms.creditEvents.repudiationMoratorium->isNotEmpty()) && $this.tradableProduct.product.contractualProduct.economicTerms.payout.creditDefaultPayout.protectionTerms.creditEvents.governmentalIntervention->isNotEmpty(), |true),
  RestructuringPhysicalSettlementMatrix: if((!($this.contractDetails.documentation.documentationIdentification.contractualMatrix.matrixType == model::external::cdm::MatrixTypeEnum.CreditDerivativesPhysicalSettlementMatrix) || $this.contractDetails.documentation.documentationIdentification.contractualMatrix.matrixType->isEmpty()) && $this.tradableProduct.product.contractualProduct.economicTerms.payout.creditDefaultPayout.protectionTerms.creditEvents.restructuring->isNotEmpty(), |$this.tradableProduct.product.contractualProduct.economicTerms.payout.creditDefaultPayout.protectionTerms.creditEvents.restructuring.multipleHolderObligation->isNotEmpty(), |true),
  FloatingAmountEventsMortgages: if((($this.tradableProduct.product.contractualProduct.economicTerms.payout.creditDefaultPayout.generalTerms.referenceInformation.referenceObligation.security.securityType == model::external::cdm::SecurityTypeEnum.Debt) && ($this.tradableProduct.product.contractualProduct.economicTerms.payout.creditDefaultPayout.generalTerms.referenceInformation.referenceObligation.security.debtType.debtClass == model::external::cdm::DebtClassEnum.AssetBacked)) || (($this.contractDetails.documentation.documentationIdentification.contractualTermsSupplement.contractualTermsSupplementType == model::external::cdm::ContractualSupplementEnum.CDSonMBS) && $this.tradableProduct.product.contractualProduct.economicTerms.payout.creditDefaultPayout.protectionTerms.floatingAmountEvents->isNotEmpty()), |($this.tradableProduct.product.contractualProduct.economicTerms.payout.creditDefaultPayout.protectionTerms.floatingAmountEvents.failureToPayPrincipal->isNotEmpty() && $this.tradableProduct.product.contractualProduct.economicTerms.payout.creditDefaultPayout.protectionTerms.floatingAmountEvents.writedown->isNotEmpty()) && $this.tradableProduct.product.contractualProduct.economicTerms.payout.creditDefaultPayout.protectionTerms.floatingAmountEvents.impliedWritedown->isNotEmpty(), |true),
  AdditionalFixedPaymentsMortgages: if((($this.tradableProduct.product.contractualProduct.economicTerms.payout.creditDefaultPayout.generalTerms.referenceInformation.referenceObligation.security.securityType == model::external::cdm::SecurityTypeEnum.Debt) && ($this.tradableProduct.product.contractualProduct.economicTerms.payout.creditDefaultPayout.generalTerms.referenceInformation.referenceObligation.security.debtType.debtClass == model::external::cdm::DebtClassEnum.AssetBacked)) || (($this.contractDetails.documentation.documentationIdentification.contractualTermsSupplement.contractualTermsSupplementType == model::external::cdm::ContractualSupplementEnum.CDSonMBS) && $this.tradableProduct.product.contractualProduct.economicTerms.payout.creditDefaultPayout.protectionTerms.floatingAmountEvents->isNotEmpty()), |($this.tradableProduct.product.contractualProduct.economicTerms.payout.creditDefaultPayout.protectionTerms.floatingAmountEvents.additionalFixedPayments.interestShortfallReimbursement->isNotEmpty() && $this.tradableProduct.product.contractualProduct.economicTerms.payout.creditDefaultPayout.protectionTerms.floatingAmountEvents.additionalFixedPayments.principalShortfallReimbursement->isNotEmpty()) && $this.tradableProduct.product.contractualProduct.economicTerms.payout.creditDefaultPayout.protectionTerms.floatingAmountEvents.additionalFixedPayments.writedownReimbursement->isNotEmpty(), |true),
  CreditEventsMortgages: if(((($this.tradableProduct.product.contractualProduct.economicTerms.payout.creditDefaultPayout.generalTerms.referenceInformation.referenceObligation.security.securityType == model::external::cdm::SecurityTypeEnum.Debt) && ($this.tradableProduct.product.contractualProduct.economicTerms.payout.creditDefaultPayout.generalTerms.referenceInformation.referenceObligation.security.debtType.debtClass == model::external::cdm::DebtClassEnum.AssetBacked)) || ($this.contractDetails.documentation.documentationIdentification.contractualTermsSupplement.contractualTermsSupplementType == model::external::cdm::ContractualSupplementEnum.CDSonMBS)) && $this.tradableProduct.product.contractualProduct.economicTerms.payout.creditDefaultPayout.protectionTerms.creditEvents->isNotEmpty(), |(((($this.tradableProduct.product.contractualProduct.economicTerms.payout.creditDefaultPayout.protectionTerms.creditEvents.failureToPayPrincipal->isNotEmpty() && $this.tradableProduct.product.contractualProduct.economicTerms.payout.creditDefaultPayout.protectionTerms.creditEvents.failureToPayInterest->isNotEmpty()) && $this.tradableProduct.product.contractualProduct.economicTerms.payout.creditDefaultPayout.protectionTerms.creditEvents.distressedRatingsDowngrade->isNotEmpty()) && $this.tradableProduct.product.contractualProduct.economicTerms.payout.creditDefaultPayout.protectionTerms.creditEvents.maturityExtension->isNotEmpty()) && $this.tradableProduct.product.contractualProduct.economicTerms.payout.creditDefaultPayout.protectionTerms.creditEvents.writedown->isNotEmpty()) && $this.tradableProduct.product.contractualProduct.economicTerms.payout.creditDefaultPayout.protectionTerms.creditEvents.impliedWritedown->isNotEmpty(), |true),
  HedgingParty: if($this.partyRole.role == model::external::cdm::PartyRoleEnum.HedgingParty, |$this.partyRole.role->size() <= 2, |true),
  DeterminingParty: if($this.partyRole.role == model::external::cdm::PartyRoleEnum.DeterminingParty, |$this.partyRole.role->size() <= 2, |true),
  BarrierDerterminationAgent: if($this.partyRole.role == model::external::cdm::PartyRoleEnum.BarrierDeterminationAgent, |$this.partyRole.role->size() <= 1, |true),
  ClearedDate: if($this.clearedDate->isNotEmpty(), |$this.clearedDate >= $this.tradeDate, |true),
  ContractualProductExists: $this.tradableProduct.product.contractualProduct->isNotEmpty(),
  FpML_cd_1: if($this.tradableProduct.product.contractualProduct.economicTerms.payout.creditDefaultPayout.generalTerms.referenceInformation->isNotEmpty(), |($this.tradeDate < $this.tradableProduct.product.contractualProduct.economicTerms.effectiveDate.adjustableDate.unadjustedDate) || ($this.tradeDate < $this.tradableProduct.product.contractualProduct.economicTerms.effectiveDate.adjustableDate.adjustedDate), |true),
  FpML_cd_7: if(($this.contractDetails.documentation.documentationIdentification.masterConfirmation->isEmpty() && $this.contractDetails.documentation.documentationIdentification.contractualMatrix->isEmpty()) && $this.tradableProduct.product.contractualProduct.economicTerms.payout.creditDefaultPayout.generalTerms.referenceInformation->isNotEmpty(), |$this.tradableProduct.product.contractualProduct.economicTerms.payout.interestRatePayout.calculationPeriodDates.effectiveDate.adjustableDate.dateAdjustments->isNotEmpty() || ($this.tradeDate < $this.tradableProduct.product.contractualProduct.economicTerms.effectiveDate.adjustableDate.adjustedDate), |true),
  FpML_cd_8: if(($this.contractDetails.documentation.documentationIdentification.masterConfirmation->isEmpty() && $this.contractDetails.documentation.documentationIdentification.contractualMatrix->isEmpty()) && $this.tradableProduct.product.contractualProduct.economicTerms.payout.creditDefaultPayout.generalTerms.referenceInformation->isNotEmpty(), |$this.tradableProduct.product.contractualProduct.economicTerms.terminationDate.adjustableDate.dateAdjustments->isNotEmpty(), |true),
  FpML_cd_11: if((($this.contractDetails.documentation.documentationIdentification.masterConfirmation->isEmpty() && $this.contractDetails.documentation.documentationIdentification.contractualMatrix->isEmpty()) && $this.tradableProduct.product.contractualProduct.economicTerms.payout.creditDefaultPayout.generalTerms.referenceInformation->isNotEmpty()) && ($this.contractDetails.documentation.documentationIdentification.contractualDefinitions == model::external::cdm::ContractualDefinitionsEnum.ISDA2003Credit), |$this.tradableProduct.product.contractualProduct.economicTerms.payout.creditDefaultPayout.generalTerms.referenceInformation.allGuarantees->isNotEmpty(), |true),
  FpML_cd_19: if($this.contractDetails.documentation.documentationIdentification.contractualDefinitions == model::external::cdm::ContractualDefinitionsEnum.ISDA1999Credit, |((((($this.tradableProduct.product.contractualProduct.economicTerms.payout.creditDefaultPayout.protectionTerms.creditEvents.creditEventNotice.businessCenter->isEmpty() && $this.tradableProduct.product.contractualProduct.economicTerms.payout.creditDefaultPayout.protectionTerms.creditEvents.restructuring.multipleHolderObligation->isEmpty()) && $this.tradableProduct.product.contractualProduct.economicTerms.payout.creditDefaultPayout.protectionTerms.creditEvents.restructuring.multipleCreditEventNotices->isEmpty()) && $this.tradableProduct.product.contractualProduct.economicTerms.payout.creditDefaultPayout.generalTerms.referenceInformation.allGuarantees->isEmpty()) && $this.tradableProduct.product.contractualProduct.economicTerms.payout.creditDefaultPayout.generalTerms.indexReferenceInformation->isEmpty()) && $this.tradableProduct.product.contractualProduct.economicTerms.payout.creditDefaultPayout.generalTerms.substitution->isEmpty()) && $this.tradableProduct.product.contractualProduct.economicTerms.payout.creditDefaultPayout.generalTerms.modifiedEquityDelivery->isEmpty(), |true),
  FpML_cd_20: if($this.contractDetails.documentation.documentationIdentification.contractualDefinitions == model::external::cdm::ContractualDefinitionsEnum.ISDA2003Credit, |$this.tradableProduct.product.contractualProduct.economicTerms.payout.creditDefaultPayout.protectionTerms.obligations.notContingent->isEmpty(), |true),
  FpML_cd_24: if(($this.contractDetails.documentation.documentationIdentification.masterConfirmation->isEmpty() && $this.contractDetails.documentation.documentationIdentification.contractualMatrix->isEmpty()) && $this.tradableProduct.product.contractualProduct.economicTerms.payout.creditDefaultPayout.generalTerms.referenceInformation->isNotEmpty(), |($this.tradableProduct.product.contractualProduct.economicTerms.payout.creditDefaultPayout.protectionTerms.creditEvents.creditEventNotice->isNotEmpty() && $this.tradableProduct.product.contractualProduct.economicTerms.payout.creditDefaultPayout.protectionTerms.obligations->isNotEmpty()) && $this.tradableProduct.product.contractualProduct.economicTerms.payout.creditDefaultPayout.generalTerms.referenceInformation.referencePrice->isNotEmpty(), |true)
]
{
  {meta::pure::profiles::doc.doc = 'Represents the identifier(s) that uniquely identify a trade for an identity issuer. A trade can include multiple identifiers, for example a trade that is reportable to both the CFTC and ESMA, and then has an associated USI (Unique Swap Identifier) UTI (Unique Trade Identifier).'} tradeIdentifier: model::external::cdm::Identifier[1..*];
  <<model::external::cdm::metadata.id>> {meta::pure::profiles::doc.doc = 'Specifies the date which the trade was agreed.'} tradeDate: Date[1];
  {meta::pure::profiles::doc.doc = 'Represents the financial instrument The corresponding FpML construct is the product abstract element and the associated substitution group.'} tradableProduct: model::external::cdm::TradableProduct[1];
  {meta::pure::profiles::doc.doc = 'Represents the parties to the trade. The cardinality is optional to address the case where the trade is defined within a BusinessEvent data type, in which case the party is specified in BusinessEvent.'} party: model::external::cdm::Party[*];
  {meta::pure::profiles::doc.doc = 'Represents the role each specified party takes in the trade. further to the principal roles, payer and receiver.'} partyRole: model::external::cdm::PartyRole[*];
  {meta::pure::profiles::doc.doc = 'Represents information specific to trades that arose from executions.'} executionDetails: model::external::cdm::ExecutionDetails[0..1];
  {meta::pure::profiles::doc.doc = 'Represents information specific to trades involving contractual products.'} contractDetails: model::external::cdm::ContractDetails[0..1];
  {meta::pure::profiles::doc.doc = 'Specifies the date on which a trade is cleared (novated) through a central counterparty clearing service.'} clearedDate: Date[0..1];
  {meta::pure::profiles::doc.doc = 'Represents the collateral obligations of a party.'} collateral: model::external::cdm::Collateral[0..1];
  {meta::pure::profiles::doc.doc = 'Represents a party\'s granular account information, which may be used in subsequent internal processing.'} account: model::external::cdm::Account[*];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the dividend date by reference to another date, with the ability to apply and offset. This class doesn\'t exist in FpML and is meant to simplify the choice constraint associated with the DividendPaymentDate class.'} model::external::cdm::DividendDateReference
[
  DividendDateReference_paymentDateOffset: if($this.paymentDateOffset->isNotEmpty(), |$this.dateReference == model::external::cdm::DividendDateReferenceEnum.SharePayment, |true)
]
{
  {meta::pure::profiles::doc.doc = 'Specification of the dividend date using an enumeration, with values such as the pay date, the ex-date or the record date.'} dateReference: model::external::cdm::DividendDateReferenceEnum[1];
  {meta::pure::profiles::doc.doc = 'Only to be used when SharePayment has been specified in the dividendDateReference element. The number of Currency Business Days following the day on which the Issuer of the Shares pays the relevant dividend to holders of record of the Shares.'} paymentDateOffset: model::external::cdm::Offset[0..1];
}

Class {meta::pure::profiles::doc.doc = 'A reference to a partyTradeIdentifier object.'} FpML::model::PartyTradeIdentifierReference extends FpML::model::Reference
{
  href: String[1];
}

Class model::external::cdm::Indx
{
  nm: model::external::cdm::Nm[1];
}

Class {meta::pure::profiles::doc.doc = 'A class to specify the Partial Cash Deliverable Obligation Characteristic.'} model::external::cdm::PCDeliverableObligationCharac
{
  {meta::pure::profiles::doc.doc = 'Indicates whether the provision is applicable.'} applicable: Boolean[1];
  {meta::pure::profiles::doc.doc = 'Specifies whether either \'Partial Cash Settlement of Assignable Loans\', \'Partial Cash Settlement of Consent Required Loans\' or \'Partial Cash Settlement of Participations\' is applicable. If this element is specified and Assignable Loan is a Deliverable Obligation Characteristic, any Assignable Loan that is deliverable, but where a non-receipt of Consent by the Physical Settlement Date has occurred, the Loan can be cash settled rather than physically delivered. If this element is specified and Consent Required Loan is a Deliverable Obligation Characteristic, any Consent Required Loan that is deliverable, but where a non-receipt of Consent by the Physical Settlement Date has occurred, the Loan can be cash settled rather than physically delivered. If this element is specified and Direct Loan Participation is a Deliverable Obligation Characteristic, any Participation that is deliverable, but where this participation has not been effected (has not come into effect) by the Physical Settlement Date, the participation can be cash settled rather than physically delivered.'} partialCashSettlement: Boolean[0..1];
}
