###Data
Data <<meta::pure::profiles::typemodifiers.abstract>> {doc.doc = 'something'} data::MyData
{
  ExternalFormat
  #{
    contentType: 'application/json';
    data: '{"some":"data"}';
  }#
}

Data model::element
{
  ExternalFormat
  #{
    contentType: 'application/x.flatdata';
    data: 'sample data';
  }#
}

Data data::MyDataModelStore
{
  ModelStore
  #{
    my::Person:
      [
        ^my::Person(
          givenNames = ['Fred', 'William'],
          lastName = 'Bloggs',
          dateOfBirth = %2001-03-12,
          timeOfBirth = %12:23,
          timeOfDeath = %2020-09-11T12:56:24.487,
          isAlive = false,
          height = 1.76,
          girth = 0.98D,
          shoeSize = 10,
          score1 = -1,
          score2 = -1.3,
          score3 = -1.8D,
          gender = enums::Gender.MALE,
          address = ^my::Address(street = 'A Road')
        ),
        ^my::Person(
          givenNames = 'Jane',
          lastName = 'Doe',
          dateOfBirth = %1984-04-22,
          timeOfBirth = %19:41:21,
          isAlive = true,
          height = 1.61,
          girth = 0.81D,
          shoeSize = 4,
          score1 = -1,
          score2 = -1.3,
          score3 = -1.8D,
          gender = enums::Gender.FEMALE,
          address = ^my::Address(street = 'B Road')
        )
      ]
  }#
}

Data my::MyDataWithBodyPatterns
{
  ServiceStore
  #{
    [
      {
        request:
        {
          method: POST;
          url: '/employees';
          bodyPatterns:
          [
            EqualToJson
            #{
              expected:'{\"name\": \"FirstName A\"}';
            }#
          ];
        };
        response:
        {
          body:
            ExternalFormat
            #{
              contentType: 'application/json';
              data: 'data';
            }#;
        };
      }
    ]
  }#
}


###Pure
Enum enums::Gender
{
  MALE,
  FEMALE,
  OTHER
}

Class my::Address
{
  street: String[1];
}

Class my::Person
{
  givenNames: String[*];
  lastName: String[1];
  dateOfBirth: StrictDate[1];
  timeOfBirth: StrictTime[1];
  timeOfDeath: DateTime[0..1];
  isAlive: Boolean[1];
  height: Float[1];
  girth: Decimal[1];
  shoeSize: Integer[1];
  score1: Integer[1];
  score2: Float[1];
  score3: Decimal[1];
  gender: enums::Gender[1];
  address: my::Address[1];
}
