###Pure
Class org::dataeng::Widget
{
  widgetId: String[0..1];
  identifiers: org::dataeng::MilestonedIdentifier[*];
}

Class org::dataeng::MilestonedIdentifier
{
  identifierType: String[1];
  identifier: String[1];
  FROM_Z: StrictDate[0..1];
  THRU_Z: StrictDate[0..1];
}


###Pure
Class test::connection::class
{
}


###Mapping
Mapping test::Mapping
(
)


###Connection
JsonModelConnection test::connection::modelConnection
{
  class: test::connection::class;
  url: 'test/connection/url';
}


###Service
Service org::dataeng::ParseWidget
{
  pattern: 'test';
  documentation: 'test';
  autoActivateUpdates: true;
  execution: Single
  {
    query: src: org::dataeng::Widget[1]|$src.widgetId;
    mapping: test::Mapping;
    runtime:
    #{
      connections:
      [
        ModelStore:
        [
          id1: test::connection::modelConnection
        ]
      ];
    }#;
  }
  testSuites:
  [

  ]
}

Service org::dataeng::TransformWidget
{
  pattern: 'test';
  documentation: 'test';
  autoActivateUpdates: true;
  execution: Single
  {
    query: src: org::dataeng::Widget[1]|$src.widgetId;
    mapping: test::Mapping;
    runtime:
    #{
      connections:
      [
        ModelStore:
        [
          id1: test::connection::modelConnection
        ]
      ];
    }#;
  }
  testSuites:
  [

  ]
}

Service org::dataeng::EqualityFunction
{
  pattern: 'test';
  documentation: 'test';
  autoActivateUpdates: true;
  execution: Single
  {
    query: src: org::dataeng::Widget[1]|$src.widgetId;
    mapping: test::Mapping;
    runtime:
    #{
      connections:
      [
        ModelStore:
        [
          id1: test::connection::modelConnection
        ]
      ];
    }#;
  }
  testSuites:
  [

  ]
}

Service org::dataeng::ElasticSearchTransformService
{
  pattern: 'test';
  documentation: 'test';
  autoActivateUpdates: true;
  execution: Single
  {
    query: src: org::dataeng::Widget[1]|$src.widgetId;
    mapping: test::Mapping;
    runtime:
    #{
      connections:
      [
        ModelStore:
        [
          id1: test::connection::modelConnection
        ]
      ];
    }#;
  }
  testSuites:
  [

  ]
}

Service org::dataeng::ExceptionWorkflowTransformService
{
  pattern: 'test';
  documentation: 'test';
  autoActivateUpdates: true;
  execution: Single
  {
    query: src: org::dataeng::Widget[1]|$src.widgetId;
    mapping: test::Mapping;
    runtime:
    #{
      connections:
      [
        ModelStore:
        [
          id1: test::connection::modelConnection
        ]
      ];
    }#;
  }
  testSuites:
  [

  ]
}


###Mastery
MasterRecordDefinition alloy::mastery::WidgetMasterRecord
{
  modelClass: org::dataeng::Widget;
  identityResolution:
  {
    resolutionQueries:
      [
        {
          queries: [ {input: org::dataeng::Widget[1]|org::dataeng::Widget.all()->filter(widget|$widget.widgetId == $input.widgetId)}
                   ];
          keyType: GeneratedPrimaryKey;
          precedence: 1;
        },
        {
          queries: [ {input: org::dataeng::Widget[1],EFFECTIVE_DATE: StrictDate[1]|org::dataeng::Widget.all()->filter(widget|((($widget.identifiers.identifierType == 'ISIN') && ($input.identifiers->filter(idType|$idType.identifierType == 'ISIN').identifier == $widget.identifiers->filter(idType|$idType.identifierType == 'ISIN').identifier)) && ($widget.identifiers.FROM_Z->toOne() <= $EFFECTIVE_DATE)) && ($widget.identifiers.THRU_Z->toOne() > $EFFECTIVE_DATE))}
                   ];
          keyType: AlternateKey;
          precedence: 2;
        }
      ]
  }
  precedenceRules: [
    DeleteRule: {
      path: org::dataeng::Widget.identifiers;
      ruleScope: [
        RecordSourceScope {widget-rest-source}
      ];
    },
    CreateRule: {
      path: org::dataeng::Widget{$.widgetId == 1234}.identifiers.identifierType;
      ruleScope: [
        RecordSourceScope {widget-file-source-ftp},
        DataProviderTypeScope {Aggregator}
      ];
    },
    ConditionalRule: {
      predicate: {incoming: org::dataeng::Widget[1],current: org::dataeng::Widget[1]|$incoming.widgetId == $current.widgetId};
      path: org::dataeng::Widget.identifiers.identifierType;
    },
    SourcePrecedenceRule: {
      path: org::dataeng::Widget.identifiers{$.identifier == 'XLON'};
      action: Overwrite;
      ruleScope: [
        RecordSourceScope {widget-file-source-sftp, precedence: 1},
        DataProviderTypeScope {Exchange, precedence: 2}
      ];
    },
    SourcePrecedenceRule: {
      path: org::dataeng::Widget.identifiers;
      action: Overwrite;
      ruleScope: [
        RecordSourceScope {widget-rest-source, precedence: 2}
      ];
    }
  ]
  postCurationEnrichmentService: org::dataeng::ParseWidget;
  publishToElasticSearch: true;
  elasticSearchTransformService: org::dataeng::ElasticSearchTransformService;
  exceptionWorkflowTransformService: org::dataeng::ExceptionWorkflowTransformService;
  collectionEqualities: [
    {
      modelClass: org::dataeng::MilestonedIdentifier;
      equalityFunction: org::dataeng::EqualityFunction;
    }
  ]
  recordSources:
  [
    widget-file-source-ftp: {
      description: 'Widget FTP File source';
      status: Development;
      recordService: {
        parseService: org::dataeng::ParseWidget;
        transformService: org::dataeng::TransformWidget;
        acquisitionProtocol: File #{
          fileType: CSV;
          filePath: '/download/day-file.csv';
          headerLines: 0;
          maxRetryTimeInMinutes: 180;
          encoding: 'Windows-1252';
          connection: alloy::mastery::connection::FTPConnection;
        }#;};
      dataProvider: alloy::mastery::dataprovider::Bloomberg;
      trigger: Manual;
      sequentialData: true;
      stagedLoad: false;
      createPermitted: true;
      createBlockedException: false;
      allowFieldDelete: true;
      raiseExceptionWorkflow: true;
      runProfile: Medium;
      timeoutInMinutes: 100;
      dependencies: [
        RecordSourceDependency {widget-file-source-sftp}
      ];
    },
    widget-file-source-sftp: {
      description: 'Widget SFTP File source';
      status: Production;
      recordService: {
        transformService: org::dataeng::TransformWidget;
        acquisitionProtocol: File #{
          fileType: XML;
          filePath: '/download/day-file.xml';
          headerLines: 2;
          connection: alloy::mastery::connection::SFTPConnection;
        }#;
      };
      dataProvider: alloy::mastery::dataprovider::FCA;
      trigger: Cron #{
        minute: 30;
        hour: 22;
        timezone: 'UTC';
        frequency: Daily;
        days: [ Monday, Tuesday, Wednesday, Thursday, Friday ];
      }#;
      sequentialData: false;
      stagedLoad: true;
      createPermitted: false;
      createBlockedException: true;
    },
    widget-file-source-http: {
      description: 'Widget HTTP File Source.';
      status: Production;
      recordService: {
        parseService: org::dataeng::ParseWidget;
        transformService: org::dataeng::TransformWidget;
        acquisitionProtocol: File #{
          fileType: JSON;
          filePath: '/download/day-file.json';
          headerLines: 0;
          recordsKey: 'name';
          fileSplittingKeys: [ 'record', 'name' ];
          connection: alloy::mastery::connection::HTTPConnection;
        }#;
      };
      trigger: Manual;
      sequentialData: false;
      stagedLoad: true;
      createPermitted: false;
      createBlockedException: true;
    },
    widget-rest-source: {
      description: 'Widget Rest Source.';
      status: Production;
      recordService: {
        transformService: org::dataeng::TransformWidget;
        acquisitionProtocol: REST;
      };
      trigger: Manual;
      sequentialData: false;
      stagedLoad: true;
      createPermitted: false;
      createBlockedException: true;
    },
    widget-kafka-source: {
      description: 'Multiple partition source.';
      status: Production;
      recordService: {
        transformService: org::dataeng::TransformWidget;
        acquisitionProtocol: Kafka #{
          dataType: JSON;
          connection: alloy::mastery::connection::KafkaConnection;
        }#;
      };
      trigger: Manual;
      sequentialData: false;
      stagedLoad: true;
      createPermitted: false;
      createBlockedException: true;
    },
    widget-legend-service-source: {
      description: 'Widget Legend Service source.';
      status: Production;
      recordService: {
        acquisitionProtocol: org::dataeng::TransformWidget;
      };
      trigger: Manual;
      sequentialData: false;
      stagedLoad: true;
      createPermitted: false;
      createBlockedException: true;
    }
  ]
}

ExchangeDataProvider alloy::mastery::dataprovider::LSE;


RegulatorDataProvider alloy::mastery::dataprovider::FCA;


AggregatorDataProvider alloy::mastery::dataprovider::Bloomberg;


MasteryConnection alloy::mastery::connection::SFTPConnection
{
    specification: FTP #{
      host: 'site.url.com';
      port: 30;
      secure: true;
    }#;
}

MasteryConnection alloy::mastery::connection::FTPConnection
{
    specification: FTP #{
      host: 'site.url.com';
      port: 30;
    }#;
}

MasteryConnection alloy::mastery::connection::HTTPConnection
{
    specification: HTTP #{
      url: 'https://some.url.com';
      proxy: {
        host: 'proxy.url.com';
        port: 85;
      };
    }#;
}

MasteryConnection alloy::mastery::connection::KafkaConnection
{
    specification: Kafka #{
      topicName: 'my-topic-name';
      topicUrls: [
        'some.url.com:2100',
        'another.url.com:2100'
      ];
    }#;
}
