###Pure
import meta::external::store::service::showcase::domain::*;

Class meta::external::store::service::showcase::domain::ApiResponse
{
    metadata  : Metadata[1];
    employees : Person[*];
    firms     : Firm[*];
}

Class meta::external::store::service::showcase::domain::Metadata
{
    noOfRecords : Integer[1];
}

Class meta::external::store::service::showcase::domain::Person
{
    firstName  : String[1];
    lastName   : String[1];
    middleName : String[0..1];
}

Class meta::external::store::service::showcase::domain::Firm
{
    firmName : String[1];
    firmId   : Integer[1];
    address  : Address[*];
}

Class meta::external::store::service::showcase::domain::Address
{
    street : String[1];
}

Association meta::external::store::service::showcase::domain::Employment
{
    employees : Person[*];
    firm      : Firm[0..1];
}

###ServiceStore
ServiceStore meta::external::store::service::showcase::store::EmployeesServiceStore
(
   description : 'Showcase Service Store Fragment support';

   Service EmployeesService
   (
      path     : '/employees';
      method   : GET;
      security : [];
      response : [meta::external::store::service::showcase::domain::ApiResponse <- meta::external::store::service::showcase::store::ApiResponseSchemaBinding];
   )

   Service EmployeesServiceByFirmId
   (
      path     : '/employeesByFirmId/{firmId}';
      method   : GET;
      parameters :
      (
         firmId : Integer (location = path)
      );
      security : [];
      response : [meta::external::store::service::showcase::domain::ApiResponse <- meta::external::store::service::showcase::store::ApiResponseSchemaBinding];
   )
)

###ExternalFormat
Binding meta::external::store::service::showcase::store::ApiResponseSchemaBinding
{
  contentType   : 'application/json';
  modelIncludes : [
                    meta::external::store::service::showcase::domain::Metadata,
                    meta::external::store::service::showcase::domain::Person,
                    meta::external::store::service::showcase::domain::Firm,
                    meta::external::store::service::showcase::domain::Address,
                    meta::external::store::service::showcase::domain::ApiResponse
                  ];
}

###Mapping
Mapping meta::external::store::service::showcase::mapping::ServiceStoreMapping
(
    *meta::external::store::service::showcase::domain::Person[person_set]: ServiceStore
    {
        ~service [meta::external::store::service::showcase::store::EmployeesServiceStore] EmployeesService
        (
            ~path $service.response.employees
        )
    }

    *meta::external::store::service::showcase::domain::Firm[firm_set]: ServiceStore
    {
        ~service [meta::external::store::service::showcase::store::EmployeesServiceStore] EmployeesService
        (
            ~path $service.response.firms
        )
    }

    meta::external::store::service::showcase::domain::Person[person_set2]: ServiceStore
    {
        +firmId : Integer[1];

        ~service [meta::external::store::service::showcase::store::EmployeesServiceStore] EmployeesServiceByFirmId
        (
            ~path $service.response.employees

            ~paramMapping
            (
                firmId : $this.firmId
            )
        )
    }

    *meta::external::store::service::showcase::domain::Employment: XStore
    {
        employees[firm_set, person_set2] : $this.firmId == $that.firmId
    }
)
