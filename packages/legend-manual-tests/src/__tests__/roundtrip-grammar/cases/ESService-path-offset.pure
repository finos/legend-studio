###ExternalFormat
SchemaSet meta::external::store::service::showcase::store::ApiResponseSchemaSet
{
  format: JSON;
  schemas: [
    {
      id: ApiResponse;
      location: 'meta/external/store/service/showcase/domain/ApiResponse.json';
      content: '{\n  "$schema": "http://json-schema.org/draft-07/schema#",\n  "title": "meta::external::store::service::showcase::domain::ApiResponse",\n  "type": "object",\n  "properties": {\n    "metadata": {\n      "$ref": "#/definitions/meta::external::store::service::showcase::domain::Metadata"\n    },\n    "employees": {\n      "type": "array",\n      "items": {\n        "$ref": "#/definitions/meta::external::store::service::showcase::domain::Person"\n      }\n    },\n    "firms": {\n      "type": "array",\n      "items": {\n        "$ref": "#/definitions/meta::external::store::service::showcase::domain::Firm"\n      }\n    }\n  },\n  "required": [\n    "metadata"\n  ],\n  "definitions": {\n    "meta::external::store::service::showcase::domain::Address": {\n      "$schema": "http://json-schema.org/draft-07/schema#",\n      "title": "meta::external::store::service::showcase::domain::Address",\n      "type": "object",\n      "properties": {\n        "street": {\n          "type": "string"\n        }\n      },\n      "required": [\n        "street"\n      ]\n    },\n    "meta::external::store::service::showcase::domain::Firm": {\n      "$schema": "http://json-schema.org/draft-07/schema#",\n      "title": "meta::external::store::service::showcase::domain::Firm",\n      "type": "object",\n      "properties": {\n        "firmName": {\n          "type": "string"\n        },\n        "firmId": {\n          "type": "integer"\n        },\n        "address": {\n          "type": "array",\n          "items": {\n            "$ref": "#/definitions/meta::external::store::service::showcase::domain::Address"\n          }\n        }\n      },\n      "required": [\n        "firmName",\n        "firmId"\n      ]\n    },\n    "meta::external::store::service::showcase::domain::Metadata": {\n      "$schema": "http://json-schema.org/draft-07/schema#",\n      "title": "meta::external::store::service::showcase::domain::Metadata",\n      "type": "object",\n      "properties": {\n        "noOfRecords": {\n          "type": "integer"\n        }\n      },\n      "required": [\n        "noOfRecords"\n      ]\n    },\n    "meta::external::store::service::showcase::domain::Person": {\n      "$schema": "http://json-schema.org/draft-07/schema#",\n      "title": "meta::external::store::service::showcase::domain::Person",\n      "type": "object",\n      "properties": {\n        "firstName": {\n          "type": "string"\n        },\n        "lastName": {\n          "type": "string"\n        },\n        "middleName": {\n          "type": "string"\n        }\n      },\n      "required": [\n        "firstName",\n        "lastName"\n      ]\n    }\n  }\n}';
    }
  ];
}

Binding meta::external::store::service::showcase::store::ApiResponseSchemaBinding
{
  schemaSet: meta::external::store::service::showcase::store::ApiResponseSchemaSet;
  contentType: 'application/json';
  modelIncludes: [
    meta::external::store::service::showcase::domain::Metadata,
    meta::external::store::service::showcase::domain::Person,
    meta::external::store::service::showcase::domain::Firm,
    meta::external::store::service::showcase::domain::Address,
    meta::external::store::service::showcase::domain::ApiResponse
  ];
}


###Pure
Class meta::external::store::service::showcase::domain::ApiResponse
{
  metadata: meta::external::store::service::showcase::domain::Metadata[1];
  employees: meta::external::store::service::showcase::domain::Person[*];
  firms: meta::external::store::service::showcase::domain::Firm[*];
}

Class meta::external::store::service::showcase::domain::Metadata
{
  noOfRecords: Integer[1];
}

Class meta::external::store::service::showcase::domain::Person
{
  firstName: String[1];
  lastName: String[1];
  middleName: String[0..1];
}

Class meta::external::store::service::showcase::domain::Firm
{
  firmName: String[1];
  firmId: Integer[1];
  address: meta::external::store::service::showcase::domain::Address[*];
}

Class meta::external::store::service::showcase::domain::Address
{
  street: String[1];
}

Association meta::external::store::service::showcase::domain::Employment
{
  employees: meta::external::store::service::showcase::domain::Person[*];
  firm: meta::external::store::service::showcase::domain::Firm[0..1];
}


###ServiceStore
ServiceStore meta::external::store::service::showcase::store::EmployeesServiceStore
(
  Service EmployeesService
  (
    path : '/employees';
    method : GET;
    parameters :
    (
      constantParam : Integer ( location = query )
    );
    response : [meta::external::store::service::showcase::domain::ApiResponse <- meta::external::store::service::showcase::store::ApiResponseSchemaBinding];
    security : [];
  )
  Service EmployeesServiceByFirmId
  (
    path : '/employeesByFirmId/{firmId}';
    method : GET;
    parameters :
    (
      firmId : Integer ( location = path )
    );
    response : [meta::external::store::service::showcase::domain::ApiResponse <- meta::external::store::service::showcase::store::ApiResponseSchemaBinding];
    security : [];
  )
)


###Mapping
Mapping meta::external::store::service::showcase::mapping::ServiceStoreMapping
(
  *meta::external::store::service::showcase::domain::Person[person_set]: ServiceStore
  {
    ~service [meta::external::store::service::showcase::store::EmployeesServiceStore] EmployeesService
    (
      ~path $service.response.employees
      ~request
      (
        parameters
        (
          constantParam = 1
        )
      )
    )
  }
  *meta::external::store::service::showcase::domain::Firm[firm_set]: ServiceStore
  {
    ~service [meta::external::store::service::showcase::store::EmployeesServiceStore] EmployeesService
    (
      ~path $service.response.firms
      ~request
      (
        parameters
        (
          constantParam = 1
        )
      )
    )
  }
  meta::external::store::service::showcase::domain::Person[person_set2]: ServiceStore
  {
    +firmId : Integer[1];

    ~service [meta::external::store::service::showcase::store::EmployeesServiceStore] EmployeesServiceByFirmId
    (
      ~path $service.response.employees
      ~request
      (
        parameters
        (
          firmId = $this.firmId
        )
      )
    )
  }

  meta::external::store::service::showcase::domain::Employment: XStore
  {
    employees[firm_set, person_set2]: $this.firmId == $that.firmId
  }
)
