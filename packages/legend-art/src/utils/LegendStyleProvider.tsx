/**
 * Copyright (c) 2020-present, Goldman Sachs
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { createTheme, ThemeProvider } from '@mui/material';
import { StyledEngineProvider } from '@mui/material/styles';
import { LocalizationProvider } from '@mui/x-date-pickers';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFnsV3/index.js';

declare module '@mui/system' {
  interface BreakpointOverrides {
    // Custom breakpoints
    xxl: true;
    xxxl: true;
    xxxxl: true;
  }
}

const LegendCustomMUITheme = (
  enableTransitions?: boolean | undefined,
  customFonts?: string | undefined,
) =>
  createTheme({
    ...(!!enableTransitions
      ? {}
      : {
          transitions: {
            // disable all transition
            // NOTE: this is a catch-all way to remove all transitions
            // We technically don't need this because we can configure transition props for each component
            create: (): string => 'none',
          },
        }),
    ...(customFonts === undefined
      ? {}
      : {
          typography: {
            fontFamily: customFonts,
          },
        }),
    components: {
      MuiButtonBase: {
        defaultProps: {
          disableRipple: true,
        },
      },
    },
    breakpoints: {
      values: {
        xs: 0,
        sm: 600,
        md: 900,
        lg: 1200,
        xl: 1536,
        xxl: 1800,
        xxxl: 2300,
        xxxxl: 2800,
      },
    },
  });

export const LegendStyleProvider: React.FC<{
  children: React.ReactNode;
  enableTransitions?: boolean | undefined;
  customFonts?: string | undefined;
}> = (props) => {
  const { children, enableTransitions, customFonts } = props;

  return (
    // Make sure CSS for MUI generated by `emotion` are injected before our styling code
    // this ensures our styling code can override MUI styles
    // See https://mui.com/guides/interoperability/#css-injection-order-3
    <StyledEngineProvider injectFirst={true}>
      <ThemeProvider
        theme={LegendCustomMUITheme(enableTransitions, customFonts)}
      >
        <LocalizationProvider dateAdapter={AdapterDateFns}>
          {children}
        </LocalizationProvider>
      </ThemeProvider>
    </StyledEngineProvider>
  );
};
