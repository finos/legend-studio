/**
 * Copyright (c) 2020-present, Goldman Sachs
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

@use 'mixins' as *;

@keyframes spin {
  from {
    transform: rotate(0deg);
  }

  to {
    transform: rotate(360deg);
  }
}

@keyframes jiggle {
  from {
    transform: translateY(0.1rem);
  }

  to {
    transform: translateY(-0.1rem);
  }
}

@keyframes dnd-bounceup {
  from {
    transform: translateY(0.3rem);
  }

  to {
    transform: translateY(-0.3rem);
  }
}

.hotkey {
  &__combination {
    @include flexVCenter;
  }

  &__key {
    @include flexVCenter;

    height: 2.4rem;
    padding: 0 0.7rem;
    border-radius: 0.3rem;
    margin: 0 0.2rem;
    font-size: 1.2rem;
    font-weight: 500;
    font-family: 'Roboto Mono', monospace;
  }

  &__plus svg {
    font-size: 1rem;
    margin: 0 0.2rem;
  }
}

.dnd__dropzone {
  position: relative;
  width: 100%;
  height: 100%;
  padding: 0;
  margin: 0;
}

.dnd__entry__handle__container {
  float: left;
  cursor: move;
  // we have relative position so that z-index will apply
  position: relative;
  z-index: 1;

  &--dragging {
    // we have 0 opacity upon dragging so that user does not see drag handle
    opacity: 0;
  }
}

.dnd__entry-drag-handle {
  @include flexCenter;
  @include flexConstantDimension;

  width: 2rem;
  height: 2.8rem;
  background: var(--color-dark-shade-50);
  color: var(--color-light-grey-400);
  border-radius: 0.2rem;
  margin-right: 0.5rem;
  // NOTE: here we use `move` instead of `grab` since grab requires
  // a more sophisticated control, i.e. when dragging, the cursor should
  // be changed
  cursor: move;
}

.dnd__entry-dropzone__placeholder {
  height: 2.8rem;
  width: 100%;

  &__content {
    @include flexCenter;

    border: 0.2rem dashed var(--color-light-grey-300);
    height: 100%;
    width: 100%;
    margin: 0;
    font-weight: 700;
  }
}

.dnd__drag-preview-layer {
  position: fixed;
  pointer-events: none;
  z-index: 100;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;

  &__content {
    @include flexCenter;

    display: inline-flex;
    height: 2rem;
    padding: 0 0.5rem;
    font-size: 1.2rem;
    background: var(--color-blue-200);
    color: var(--color-white);
    border-radius: 0.2rem;
  }
}

.dnd__entry__container {
  width: 100%;
  height: 100%;
  position: relative;
}

// NOTE: We have a mask placeholder for PanelDnDEntry components
// since we want to potentially keep the original content inside
// the droppable zone, but also want to potentially have a
// placeholder that is set over it when we are dragging, hence
// we use absolute positioning and a higher z-index
.dnd__entry__placeholder {
  display: block;
  width: 100%;
  height: 100%;
  position: absolute;
  z-index: 1;
}

.dnd__entry__placeholder__content {
  border: 0.2rem dashed var(--color-light-grey-300);
  height: 100%;
  background: var(--color-dark-grey-100);
}

.dnd__placeholder--light {
  border: 0.2rem dashed var(--color-light-grey-300);
  background: var(--color-light-grey-0);
  height: 100%;
}
