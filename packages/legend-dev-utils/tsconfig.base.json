{
  // See https://www.typescriptlang.org/docs/handbook/compiler-options.html
  "compilerOptions": {
    "lib": ["dom", "dom.iterable", "esnext", "webworker", "scripthost"],
    // Project reference related settings
    "composite": true,
    "declaration": true,
    "declarationMap": true,
    "sourceMap": true,
    // Module settings
    "target": "esnext",
    "module": "NodeNext",
    "moduleResolution": "NodeNext",
    "skipLibCheck": true, // skip type checking of all declaration files (*.d.ts)
    "resolveJsonModule": true, // include JSON files module and auto-interpret types
    // --isolatedModules is needed by `babel`.
    // It perform additional checks to ensure that separate compilation
    // (such as with transpileModule or @babel/plugin-transform-typescript) would be safe.
    "isolatedModules": true,
    "importsNotUsedAsValues": "error", // enforce differentiating between type-imports and standard imports
    // Other settings
    "strict": true,
    "noImplicitOverride": true,
    "noUncheckedIndexedAccess": true,
    // ---exactOptionalPropertyTypes specifies that optional property types should be interpreted exactly as
    // written, meaning that `| undefined` is not added to the type.
    // This makes it possible to ensure that optional properties are never `undefined` when they're present
    // on an object, and that `undefined` values read from optional properties unequivocally indicate that
    // the properties are not present.
    // See https://github.com/microsoft/TypeScript/pull/43947
    "exactOptionalPropertyTypes": true,
    "forceConsistentCasingInFileNames": true
  }
}
