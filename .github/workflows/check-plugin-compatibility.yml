name: Plugin Compatibility Check

on:
  pull_request:
    branches:
      - '**'

# The purpose of this action is to modify a dummy plugin/preset to use the latest
# published version of Legend Studio core. Then make the web application use that
# plugin to check if there's any type-checking (compile time) or runtime error(s).
jobs:
  check-plugin-compatibility:
    name: Run Plugin Compatibility Checks
    # TODO: test this step - change PR name to `New Release`
    if: ${{ github.context.payload.pull_request.title != 'New Release' }} # do not run this in release PR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Get Yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"
      # - name: Setup Yarn cache
      #   uses: actions/cache@v2.1.6
      #   id: yarn-cache
      #   with:
      #     path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
      #     key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
      #     restore-keys: |
      #       ${{ runner.os }}-yarn-
      # - name: Setup Node
      #   uses: actions/setup-node@v2.1.5
      #   with:
      #     node-version: 14.x
      # - name: Install dependencies
      #   run: yarn
      # The sequence for setting up is as following:
      # - Install and build the app
      # - Move the dummy plugin to a temporary location (delete in original location to avoid confusion)
      # - Create the `yarn.lock` file in that location so we can install and build that plugin later
      # - Run the setup script that modifies the version of `@finos/...` dependencies in the dummy plugin to use the latest from NPM,
      #   and modifies the web application to use the modified dummy plugin
      # - Install and build the dummy modified plugin
      # - Install dependencies for the web application
      # - name: Setup plugin compatibility check
      #   env:
      #     # As of Yarn 3.0, `enableImmutableInstalls` will now default to true on CI, so we need to turn
      #     # it off to run the install step for dummy plugin
      #     # See https://github.com/yarnpkg/berry/blob/master/CHANGELOG.md#300-rc1
      #     YARN_ENABLE_IMMUTABLE_INSTALLS: false
      #   run: >
      #     yarn build:setup &&
      #     mkdir temp &&
      #     cp -r ./packages/legend-studio-preset-dummy ./temp/legend-studio-preset-dummy &&
      #     rm -rf ./packages/legend-studio-preset-dummy &&
      #     touch ./temp/legend-studio-preset-dummy/yarn.lock &&
      #     node ./scripts/workflow/setupPluginCompatibilityChecks.js &&
      #     cd ./temp/legend-studio-preset-dummy &&
      #     yarn &&
      #     yarn build &&
      #     cd ../../ &&
      #     yarn
      #   # The following step will check for type-checking (compile time) or runtime error(s).
      # - name: Check plugin compatibility
      #   id: check-plugin-compatibility
      #   run: >
      #     yarn workspace @finos/legend-studio-app tsc &&
      #     yarn workspace @finos/legend-studio-app jest
      #   # TODO: test this step - do multiple time and hard code the version to something off, see if the message gets generated
      #   # or deleted/updated accordingly
      #   # TODO: check if we need `continue-on-error` or not in the previous step?
      # - name: Alert compatibility check failure
      #   # Detect previous step exit code
      #   # See https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#job-status-check-functions
      #   uses: actions/github-script@v4
      #   with:
      #     script: |
      #       console.log('${{ github.context.payload.pull_request.title }}');
      #       // const checkResult = '${{ steps.check-plugin-compatibility.outcome }}';
      #       checkResult = 'failure';
      #       const {data: comments} = await github.issues.listComments({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         issue_number: context.payload.number,
      #       })
      #       const commentTextContent = 'Plugin compatibility issues found! Please make sure to add a notice in the changelog.';
      #       const commentBody = `:warning: ${commentTextContent}`;
      #       const botComment = comments.find(comment => comment.user.id === 41898282 && comment.body.includes(commentTextContent));
      #       if (botComment && checkResult === 'success') {
      #         await github.issues.deleteComment({
      #           owner: context.repo.owner,
      #           repo: context.repo.repo,
      #           comment_id: botComment.id
      #         });
      #       } else if (!botComment && checkResult === 'failure') {
      #         await github.issues.createComment({
      #           owner: context.repo.owner,
      #           repo: context.repo.repo,
      #           issue_number: context.payload.number,
      #           body: commentBody
      #         });
      #       }
