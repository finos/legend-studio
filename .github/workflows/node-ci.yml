name: Node CI

on:
  push:
    branches:
      - master
      - 'release/**'
  pull_request:
    branches:
      - '**'

jobs:
  # `github-actions` currently does not support cancelling previous CI runs
  # on pushes to the same branch. This is particularly useful when the build
  # is complicated and requires a lot of resources. If we ever need to setup
  # we can use `actions/workflow-run-cleanup-action`
  # See https://github.com/marketplace/actions/workflow-run-cleanup-action

  check-code:
    name: Run Code Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2.3.4
      - name: Get Yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"
      - name: Setup Yarn cache
        uses: actions/cache@v2.1.6
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Setup Node
        uses: actions/setup-node@v2.4.1
        with:
          node-version: 14.x
      - name: Install dependencies
        run: yarn
      - name: Check typings
        run: yarn check:tsc
      - name: Run lint
        run: yarn lint:ci

  check-operations:
    name: Run Operational Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2.3.4
      - name: Get Yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"
      - name: Setup Yarn cache
        uses: actions/cache@v2.1.6
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Setup Node
        uses: actions/setup-node@v2.4.1
        with:
          node-version: 14.x
      - name: Install dependencies
        run: yarn
      - name: Check package constraints
        run: yarn check:pkg-constraints
      - name: Check Typescript project reference configuration
        run: yarn check:project-ref
      - name: Check code formatting
        run: yarn check:format
      - name: Check copyright headers
        run: yarn check:copyright

  test:
    name: Run Unit & Integration Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2.3.4
        with:
          fetch-depth: 2 # recommended for improving relevancy of test coverage reporting
      - name: Get Yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"
      - name: Setup Yarn cache
        uses: actions/cache@v2.1.6
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Setup Node
        uses: actions/setup-node@v2.4.1
        with:
          node-version: 14.x
      - name: Install dependencies
        run: yarn
      - name: Test
        run: yarn test:ci
      - name: Upload test coverage report
        uses: codecov/codecov-action@v2.1.0
        with:
          directory: ./build/coverage

  # This job is to make sure Webpack builds the application fine. This is helpful
  # to know as we don't want to find out this failure as late as when we prepare the
  # artifacts to publish to Docker.
  application-test-build:
    name: Check Application Build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - application: '@finos/legend-studio-deployment'
            os: ubuntu-latest
          # NOTE: here we run a build on Windows just to check how the build process work for Windows
          # developers. Setting up an OS matrix for all applications is unnecessary.
          - application: '@finos/legend-studio-deployment'
            os: windows-latest
          - application: '@finos/legend-query-deployment'
            os: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2.3.4
      - name: Get Yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"
      - name: Setup Yarn cache
        uses: actions/cache@v2.1.6
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Setup Node
        uses: actions/setup-node@v2.4.1
        with:
          node-version: 14.x
      - name: Install dependencies
        run: yarn
      - name: Build application
        run: yarn build && yarn workspace ${{ matrix.application }} bundle
        env:
          # TODO: After https://github.com/finos/legend-studio/pull/227 it seems like due to either
          # the upgrade of Webpack/Typescript that we start seeing some OOM when building Webpack
          # while publishing to Docker. We should once in a while remove this line and try again.
          NODE_OPTIONS: '--max_old_space_size=4096'
